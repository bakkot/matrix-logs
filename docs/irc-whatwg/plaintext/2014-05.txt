2014-05-01
[17:03:50.0000] <zewt>
death to target=_blank.

[17:09:27.0000] <SamB>
zewt: that did always seem like a dumb idea

[17:22:52.0000] <cabanier>
MikeSmith: I submitted a couple of webkit patches for error handling: https://bugs.webkit.org/show_bug.cgi?id=132407 and https://bugs.webkit.org/show_bug.cgi?id=132412

[17:23:51.0000] <MikeSmith>
cabanier: cool

[17:24:04.0000] <MikeSmith>
/me takes a look

[17:25:58.0000] <cabanier>
MikeSmith: that should make WK turn green for 4 more tests

[17:28:00.0000] <MikeSmith>
cabanier: excellent

[17:29:33.0000] <MikeSmith>
cabanier: thanks for taking time on the testing stuff, and raising the bugs, and the patches

[18:14:54.0000] <Hixie>
hober: i'm not sure what that is saying :-|

[18:23:54.0000] <MikeSmith>
cabanier: trybots are indicating that test is still failing, right?

[18:28:07.0000] <MikeSmith>
Hixie: https://www.w3.org/Bugs/Public/show_bug.cgi?id=25521 is a bit unsettling

[18:28:21.0000] <MikeSmith>
not that I disagree with the rationale

[18:29:47.0000] <MikeSmith>
it's just, if we end up changing the platform do the point where authors can't get any useful linting/static-checking feedback done on their markup sources, that would suck

[18:31:25.0000] <MikeSmith>
leading eventually to total societal breakdown

[18:31:33.0000] <MikeSmith>
"In accordance with prophecy"

[18:33:44.0000] <cabanier>
MikeSmith: yes, I missed some tests

[18:33:57.0000] <MikeSmith>
cabanier: ah ok

[18:36:14.0000] <Hixie>
MikeSmith: i have no idea what that bug is saying

[18:37:24.0000] <Hixie>
MikeSmith: web components aren't valid in html currently. i presume that the web components people have some sort of solution for that, e.g. via the inheritance thing (<tr is="my-fancy-tr">)

[18:37:28.0000] <MikeSmith>
Hixie: "For these reasons, all of these content model rules should probably be discarded entirely" it says

[18:37:30.0000] <eligrey>
what's the wiki syntax for external links?

[18:37:46.0000] <eligrey>
i need to put a period after a link and i don't want it to be included in the link

[18:37:54.0000] <MikeSmith>
Hixie: I think you're being generous in that assumption ;-)

[18:38:02.0000] <Hixie>
MikeSmith: that seems like a non-starter. I mean, we can't make <p><html> valid, it would never do anything understandable.

[18:38:09.0000] <MikeSmith>
eligrey: it's just metawiki syntax, I think

[18:38:31.0000] <MikeSmith>
eligrey: [#FooBar] or such

[18:38:44.0000] <eligrey>
same for extenal links?

[18:38:49.0000] <eligrey>
i don't edit wikipedia, sorry :p

[18:38:57.0000] <MikeSmith>
eligrey: oh external

[18:39:18.0000] <MikeSmith>
eligrey: [http://foo link text here] I think

[18:39:23.0000] <eligrey>
thanks

[18:40:08.0000] <eligrey>
the wiki markup thing gives me a list of all the different types of markup

[18:40:21.0000] <eligrey>
you would think hovering over each item would give me a description, but no

[18:40:25.0000] <eligrey>
they all say "Click on the character or tag to insert it into the edit window"

[18:40:34.0000] <eligrey>
so helpful :)

[18:40:43.0000] <eligrey>
MikeSmith: anyways thanks for that

[18:40:46.0000] <MikeSmith>
wikis all suck

[18:40:51.0000] <MikeSmith>
eligrey: np

[18:43:36.0000] <MikeSmith>
Hixie: yeah I guess in the proposed regime there'd still need to be a few prohibitions on markup that just would never make sense

[18:44:12.0000] <MikeSmith>
Hixie: but the bug seems pretty clear to meーshe's saying that the "optionally a caption element, followed by zero or more colgroup elements, followed optionally by a thead element, followed optionally by a tfoot element, followed by either zero or more tbody elements or one or more tr elements, followed optionally by a tfoot element (but there can only be one tfoot element child in total), optionally intermixed with one or more script-supporting elem

[18:44:18.0000] <MikeSmith>
oops

[18:44:25.0000] <MikeSmith>
well anyway, that part

[18:44:39.0000] <Hixie>
your comment cut off in the middle of the spec quote

[18:44:45.0000] <MikeSmith>
she's saying that's too constrained in the face of web components

[18:45:15.0000] <MikeSmith>
Hixie: was just quoting the spec, nothing more

[18:45:25.0000] <MikeSmith>
hadn't meant to quote the whole thing

[18:45:29.0000] <Hixie>
ah k

[18:45:54.0000] <Hixie>
i don't think that's right

[18:45:59.0000] <MikeSmith>
was going to put some ellipsis in there, since I'm pretty sure you're familiar somewhat with the part that follows

[18:46:05.0000] <Hixie>
i mean, sure, you'll want to allow elements to override <tr>, etc

[18:46:10.0000] <MikeSmith>
yeah

[18:46:18.0000] <Hixie>
but those elements still need to be real <tr>s at some level

[18:46:20.0000] <Hixie>
as in is=""

[18:46:24.0000] <Hixie>
or some similar solution

[18:48:17.0000] <MikeSmith>
yeah I guess it would help there if she could give an actually markup example

[18:48:22.0000] <MikeSmith>
I'll post a comment

[18:48:35.0000] <MikeSmith>
oh wait she did

[18:48:43.0000] <MikeSmith>
https://github.com/angular/angular.js/issues/7295

[18:48:47.0000] <MikeSmith>
/me reads

[18:49:09.0000] <MikeSmith>
oh geez man

[18:49:09.0000] <Hixie>
that's about the parser

[18:49:13.0000] <Hixie>
not the content models

[18:49:13.0000] <MikeSmith>
yeah

[18:49:17.0000] <MikeSmith>
bingo

[18:49:21.0000] <MikeSmith>
yup

[18:51:17.0000] <Hixie>
it's amazing how many people confuse those two things

[18:51:30.0000] <Hixie>
i mean, that's not a criticism or anything

[18:51:39.0000] <Hixie>
i'm honestly just amazed at how confusing this apparently is

[18:54:03.0000] <boogyman>
so do you think there's an opportunity to rephrase and/or add additional examples to the spec

[18:54:54.0000] <Hixie>
there's always the opportunity to rephrase and add examples

[18:55:06.0000] <Hixie>
post suggestions to http://whatwg.org/newbug :-)

[18:55:55.0000] <boogyman>
correct, but i would say that if "this" is an issue which has confused "many people", that might bump this opportunity higher on the priority list.

[18:57:00.0000] <Hixie>
oh, that particular issue

[18:57:13.0000] <Hixie>
there's already entire sections that try to explain it

[18:57:21.0000] <Hixie>
i think teh confusion is mostly amongst people who haven't read the spec

[19:00:59.0000] <MikeSmith>
the parsing behavior is just inherently confusing

[19:01:09.0000] <Hixie>
yeah that too

[19:01:28.0000] <MikeSmith>
and even when you read the spec, you don't want to believe that's how things actually work

[19:01:36.0000] <Hixie>
but it's the way people assume the content models have anything to do with that which is what i'm mostly talking about

[19:01:51.0000] <MikeSmith>
because, how dumb would that be, for people to create something that works that way

[19:01:58.0000] <MikeSmith>
Hixie: yeah

[19:02:17.0000] <MikeSmith>
Hixie: maybe we could put some icon there

[19:02:24.0000] <MikeSmith>
like the fingerprinting icon

[19:02:33.0000] <MikeSmith>
to say, this is not a UA requirements

[19:03:30.0000] <MikeSmith>
I suggest this icon: https://avatars2.githubusercontent.com/u/568252?s=140

[19:04:10.0000] <boogyman>
argh! stupid firefox :( crashes on the single page spec page. haha MikeSmith

[19:04:36.0000] <Hixie>
MikeSmith: well, that's what developers.whatwg.org is supposed to be, really

[19:04:39.0000] <MikeSmith>
my firefox doesn't crash on it, just takes a long time to load

[19:04:47.0000] <MikeSmith>
Hixie: true

[19:04:54.0000] <Hixie>
MikeSmith: but the problem is people assume that the authoring requirements _are_ UA requirements

[19:05:00.0000] <MikeSmith>
right

[19:05:04.0000] <Hixie>
i mean, it's UA requirements this contributor is looking for

[19:05:17.0000] <Hixie>
so saying "don't look here, this is for UAs" might even be what is making them look at content models

[19:05:30.0000] <MikeSmith>
maybe we need a version with all the authoring requirements suppressed, and just have the UA requirements

[19:05:33.0000] <MikeSmith>
seriously

[19:06:07.0000] <Hixie>
that would be... interesting

[19:06:09.0000] <MikeSmith>
which I realize might require marking stuff with class=author

[19:06:10.0000] <Hixie>
a lot of work to do though

[19:06:14.0000] <MikeSmith>
yeah

[19:06:26.0000] <MikeSmith>
I remember when you did the class=impl change

[19:12:55.0000] <zewt>
there's a pretty deep difference between implementation requirements and conformance criteria, the normative language that basically says "you must do this (but if you don't, everything will still work in a precisely defined way)" has always felt like a bad use of "must" to me

[19:13:30.0000] <zewt>
don't really know how it could be fixed...

[19:16:02.0000] <MikeSmith>
zewt: well the "Content model" sections don't contain any musts anyway

[19:16:16.0000] <MikeSmith>
or anything else normative-ish looking

[19:16:32.0000] <Hixie>
yeah, i just have one "must" in the definition of "content model"

[19:16:45.0000] <MikeSmith>
oh?

[19:16:49.0000] <MikeSmith>
/me wonders which

[19:17:17.0000] <Hixie>
"content model. A normative description of what content must be included as children and descendants of the element."

[19:17:31.0000] <zewt>
well, replying to authoring requirements vs. UA requirements

[19:17:53.0000] <Hixie>
it's actually redundant with "An HTML element must have contents that match the requirements described in the element's content model." a few paragraphs later

[19:27:29.0000] <MikeSmith>
Hixie: as another data point about the confusion: https://www.w3.org/Bugs/Public/show_bug.cgi?id=25501

[19:28:58.0000] <MikeSmith>
confusion about "content models" vs types of content (flow, phrasing, etc.)

[19:29:49.0000] <MikeSmith>
and asking that "empty" be defined as a content type

[19:30:34.0000] <MikeSmith>
so yeah it is confusing

[19:31:49.0000] <Hixie>
that's a different problem. That's the problem of people who forget the english language while reading the spec. :-P

[19:48:16.0000] <MikeSmith>
Hixie: not so fair, man :-)

[19:48:39.0000] <Hixie>
come on, that bug is basically just the guy saying he doesn't know what "empty" means

[19:48:47.0000] <MikeSmith>
it's kind of terms-of-art usage of English

[19:49:00.0000] <MikeSmith>
Hixie: yeah true in that case

[19:49:13.0000] <MikeSmith>
it does come down to that

[19:49:25.0000] <Hixie>
i guess the real problem is assuming that a word is a term of art when it's just english

[19:49:37.0000] <MikeSmith>
hmm yeah

[19:49:45.0000] <Hixie>
but i don't know what else the term would mean

[19:49:46.0000] <MikeSmith>
sometimes empty just means empty

[19:49:52.0000] <MikeSmith>
yup

[19:50:09.0000] <MikeSmith>
there is the void vs empty thing though

[19:50:30.0000] <Hixie>
well "void" doesn't mean anything clear, so assuming it's a term of art seems reasonable :-)

[19:50:31.0000] <MikeSmith>
which is good, and an improvement over what we had before

[19:50:37.0000] <MikeSmith>
sure

[21:09:38.0000] <Hixie>
sweet lord there's a lot of script data states

[21:31:55.0000] <Domenic_>
+1 for a for-UAs version of the spec, containing the actually-normative stuff.

[02:30:40.0000] <annevk>
Hixie: aaah, we already have listener observation of sorts with http://xhr.spec.whatwg.org/#upload-events-flag

[02:30:47.0000] <annevk>
/me feels bad

[06:52:56.0000] <zewt>
annevk: i wonder if it would be web-compat to change that to "set the upload events flag if the xhr.upload property has been accessed"

[06:53:48.0000] <annevk>
zewt: possible

[06:54:08.0000] <annevk>
There's also http://xhr.spec.whatwg.org/#garbage-collection

[06:54:10.0000] <zewt>
a different sort of lameness, but maybe a lesser one

[06:54:56.0000] <zewt>
that seems okay, i think...

[06:55:31.0000] <zewt>
(also a little weird that accessing .upload would mean requests complete even if you throw away the object when they wouldn't otherwise, but not catastrophic)

[06:55:49.0000] <zewt>
oh, you mean another event listener check. hmm

[06:56:32.0000] <zewt>
personally I intuitively thought that XHR would always complete the request if I let go of it, even if I wasn't listening for anything on it

[06:56:46.0000] <zewt>
is there a reason to not just never GC the object while the request is in the air?

[06:58:33.0000] <zewt>
could see interop issues there, eg. function send_keepalive() { var xhr = new XHR(); xhr.open("http://api.server.com/ping"); xhr.send(); } may or may not actually send the ping, depending on GC (if I understand correctly)

[06:58:33.0000] <annevk>
EventSource and WebSocket do the same; they might need it more, granted

[06:59:09.0000] <zewt>
makes more sense for streaming things that would never close on their own

[06:59:14.0000] <annevk>
Heh, interesting case

[07:00:34.0000] <annevk>
zewt: actually in that case it would deliver the ping

[07:00:48.0000] <annevk>
zewt: at HEADERS_RECEIVED the ping is already at the other side

[07:01:35.0000] <annevk>
zewt: which does argue that the upload related check is wrong...

[07:05:57.0000] <zewt>
annevk: can you clarify the and/or gruoping in that section

[07:06:27.0000] <zewt>
An ... (state is opened and send() flag is set), (state is RECEIVED), or (state is LOADING and one of the following is true)?

[07:06:35.0000] <zewt>
also grouping

[07:07:10.0000] <zewt>
(that's what it seems like based on what it's trying to do, just a bit unobvious from a naive reading)

[07:07:13.0000] <annevk>
Hehe, source has "Based on EventSource and WebSocket. Not sure what I am doing."

[07:08:28.0000] <zewt>
might argue that this is okay from an event API standpoint, because the difference is unobservable to script (it just means "if there are listeners to hear it, do keep going"), but ...

[07:09:29.0000] <zewt>
so in this case i guess what it's really doing is saying "if nobody is listening, you don't actually have to read the whole POST body"

[07:10:02.0000] <Ms2ger>
In a tree falls in the forest...

[07:10:04.0000] <zewt>
maybe that's arguably an implementation detail anyway

[07:10:09.0000] <Ms2ger>
*If, dammit

[07:10:43.0000] <zewt>
forest.dispatchEvent(new Event("TreeFell"));

[07:12:46.0000] <zewt>
surprised that websocket is spying on event listeners, i thought that was only done with event handlers

[07:12:51.0000] <annevk>
zewt: added a commit

[07:13:37.0000] <annevk>
zewt: it's only about the response body

[07:14:10.0000] <annevk>
zewt: might be observable from the server if the UA actively kills the connection

[07:14:43.0000] <zewt>
right, but there are plenty of things we seem okay with being observable from the server that we're not in script...

[07:14:59.0000] <zewt>
(resource caching behavior, etc)

[07:16:29.0000] <zewt>
the upload events flag is the bigger one, though

[07:19:00.0000] <zewt>
afk, heading to work

[07:23:06.0000] <annevk>
Yeah, not sure how to fix that or if

[07:23:49.0000] <annevk>
"Invariants" seem to be screwed over left and right

[08:12:08.0000] <Domenic_>
annevk: you forgot to add `s around your HTML tags so your issue makes no sense :P

[08:13:50.0000] <annevk>
Domenic_: fixored

[08:14:01.0000] <annevk>
Domenic_: seems weird GH removes stuff it doesn't do anything with

[08:16:24.0000] <annevk>
Domenic_: what behavior-only objects are you talking about?

[08:16:28.0000] <annevk>
/me hasn't seen many

[08:17:24.0000] <Domenic_>
annevk: I'm trying to get the spec editor to tell me if there's hidden state, but https://dvcs.w3.org/hg/webcrypto-api/raw-file/tip/spec/Overview.html#dfn-SubtleCrypto seems at first glance to be behavior-only.

[08:19:17.0000] <annevk>
Domenic_: with functions that access privileged APIs elsewhere somehow?

[08:19:29.0000] <Domenic_>
annevk: I don't understand the question?

[08:20:02.0000] <annevk>
Domenic_: https://dvcs.w3.org/hg/webcrypto-api/raw-file/tip/spec/Overview.html#dfn-SubtleCrypto-method-encrypt can't be implemented without "magic"

[08:20:30.0000] <Domenic_>
annevk: why do you say that? It just runs some well-specified algorithms, which are accessible to any Turing machine.

[08:22:06.0000] <annevk>
Domenic_: as in, all those functions want to share some algorithms, such as "normalize"

[08:22:20.0000] <annevk>
(which appears to be a broken link...)

[08:22:21.0000] <Domenic_>
Sure, functions can call other functions ...

[08:24:40.0000] <annevk>
Domenic_: anyway, any other examples?

[08:26:53.0000] <Domenic_>
annevk: https://dvcs.w3.org/hg/quota/raw-file/tip/Overview.html#idl-def-StorageQuota, given that supportedTypes is a constant (not mutable state)

[08:28:07.0000] <annevk>
That has NoInterfaceObject, so can you distinguish it from an ordinary object?

[08:30:24.0000] <Domenic_>
annevk: I believe Object.getPrototypeOf(navigator.storageQuota) would give back a StorageQuota, not Object.

[08:30:34.0000] <Domenic_>
even if window.StorageQuota doesn't exist.

[08:30:58.0000] <annevk>
Ah, I suspect that's probably true

[08:31:33.0000] <Domenic_>
Yeah, first sentence of http://heycam.github.io/webidl/#interface-prototype-object

[08:38:08.0000] <annevk>
Modules and IDL support for them is what we need for a lot of this stuff

[08:38:17.0000] <Domenic_>
indeeeed

[08:38:26.0000] <Domenic_>
probably worth waiting on implementations for that though.

[08:38:31.0000] <annevk>
Do modules have a concept of being scoped to particular types of realms?

[08:38:43.0000] <annevk>
E.g. we can't have DOM in workers...

[08:39:08.0000] <Domenic_>
I imagine different realms would have different built-in module loaders, and thus different built-in modules.

[09:21:40.0000] <dglazkov>
good morning, Whatwg!

[09:37:12.0000] <Ms2ger>
cwilso, I got the eternal question from our implementor... Why XML and Http in XHR?

[09:37:20.0000] <Ms2ger>
Length?

[09:40:12.0000] <annevk>
Conventions

[09:40:33.0000] <annevk>
It was HttpRequest shipped as part of the XML library

[09:41:02.0000] <SamB>
see /topic ?

[09:41:45.0000] <annevk>
:)

[09:42:11.0000] <SamB>
though I guess actually people are actually after the story

[09:42:15.0000] <SamB>
+sometimes

[09:42:22.0000] <SamB>
-actually

[09:42:41.0000] <Ms2ger>
I'm certainly not going to suggest implementing XmlHttpRequest in Servo

[09:42:55.0000] <jgraham>
Well no

[09:43:12.0000] <jgraham>
If you were picking the name you would probably choose Request

[09:43:32.0000] <Ms2ger>
And not implement this API at all

[09:43:36.0000] <annevk>
You'd pick fetch and you'd pass it a Request

[09:43:40.0000] <annevk>
oh wait

[09:54:55.0000] <Hixie>
the inspecting of event listeners is to make GC not observable

[09:57:36.0000] <zewt>
grr is there nothing less crappy than gettext for python localization

[10:00:09.0000] <SamB>
is there ever anything less crappy than gettext?

[10:00:25.0000] <SamB>
I mean, for the same purpose

[10:00:54.0000] <SamB>
/me prepares to take notes

[10:01:17.0000] <zewt>
dunno, i just want something not crappy

[10:01:53.0000] <SamB>
well, what about it is your problem?

[10:04:36.0000] <zewt>
at the moment it happens to be fighting with pygettext, which apparently has no support for extracting comments for strings

[10:06:21.0000] <SamB>
that does look bad

[10:09:49.0000] <SamB>
zewt: have you tried xgettext?

[10:13:47.0000] <SamB>
zewt: it appears to be *intended* to work with Python, and it of course supports such things

[10:43:50.0000] <Manishearth>
Ms2ger: why do we have readyState in XMLHttpRequest as a `short`?

[10:44:29.0000] <Ms2ger>
Why not?

[10:45:10.0000] <Manishearth>
Ms2ger: it runs from 0-4. And I don't think that's going to increase much -- at least not above 8

[13:19:51.0000] <TabAtkins>
annevk: GH doesn't "remove stuff it doesn't do anything with".  If you don't wrap HTML elements in `s, *they're HTML elements*, and so you don't see them in the visible text obviously.

[13:40:09.0000] <zewt>
i don't know any good reason to specify ints as "shorts" in most cases, they're just integers

[13:40:39.0000] <zewt>
SamB: works a bit better, but seems to suck at recursively handling file trees...

[13:40:50.0000] <Domenic_>
TabAtkins: it probably sanitizes them though.

[13:41:00.0000] <SamB>
zewt: isn't that what find is for

[13:41:06.0000] <TabAtkins>
Domenic_: Possibly, yeah.

[13:41:09.0000] <zewt>
sure, but i'm having to jump a lot of hoops

[13:41:12.0000] <TabAtkins>
I know it allows <img> and such through.

[13:41:43.0000] <zewt>
i need to say xgettext -j to make it combine with a previous execution (in case xargs splits it into multiple invocations)... but that means I need to delete the file before running it, so it doesn't join with a previous execution... but if I say -j when the file *doesn't* already exist, it throws an error

[13:41:43.0000] <SamB>
yeah, what the heck is short

[13:41:57.0000] <SamB>
(are there any specs that already use short for something?)

[13:42:14.0000] <SamB>
zewt: hmm.

[13:42:17.0000] <zewt>
so i have to delete the file, then only add -j on the second and further invocations, which i don't know how to do with xargs

[13:42:38.0000] <zewt>
there's a -D "add DIRETORY to list for input files search" which sounds like what I want, but it doesn't seem to actually work

[13:42:45.0000] <SamB>
zewt: maybe --files-from= helps?

[13:43:14.0000] <zewt>
it also says "If input file is -, standard input is read", which should let me avoid xargs entirely, but that doesn't seem to work either

[13:43:40.0000] <SamB>
I think -D is for if you don't know where the files actually are

[13:44:00.0000] <SamB>
possibly to make things "easier" for out-of-tree builds

[13:44:11.0000] <zewt>
the word "footgun" comes to mind

[13:44:19.0000] <SamB>
hence the scare quotes

[13:45:17.0000] <SamB>
I don't know, maybe it's actually possible to use it in a useful way

[13:45:21.0000] <zewt>
wonder if the python gettext module has code to compile .po's so i can do it at runtime, precompiling to .mo is pointless for me (it's a server)

[13:46:14.0000] <SamB>
http://docs.python.org/library/gettext should have the answer

[13:46:24.0000] <zewt>
oh well, guess i'll write a script to invoke xgettext, it'll take less time

[13:46:58.0000] <SamB>
zewt: so did you try --files-from=<(find ...)

[13:47:22.0000] <zewt>
wouldn't i have to output the file list to a temp file (maybe --files-from=- works)

[13:47:53.0000] <zewt>
oh hey that does seem to work

[13:47:57.0000] <SamB>
yes it does

[13:48:11.0000] <SamB>
it doesn't know what the heck to do with CWEB's .w files, but boy does it find them

[13:48:41.0000] <zewt>
i think my stuff is encapsulated enough that it won't run into a bunch of stuff to confuse it

[13:48:56.0000] <SamB>
I was just trying a random example that'd work in the tree I was in

[13:49:11.0000] <zewt>
like when I was trying to package a web view's javascript files inside a Unity package, which Unity promptly interpreted as JS and tried to run as Unity code

[13:49:15.0000] <zewt>
thanks, stop that

[13:49:22.0000] <SamB>
mostly in case I was not remembering my shell syntax correctly

[13:49:48.0000] <zewt>
gettext is still very... 90s?

[13:50:12.0000] <SamB>
woah, copyright starts in '95 ?

[13:50:27.0000] <SamB>
I was expecting '8x

[13:54:04.0000] <SamB>
hmm, changelog for GCC starts in '91 with "Freshly created ChangeLog."; no idea when gcc was created

[13:54:52.0000] <Ms2ger>
"GCC 1.0 was released in 1987"

[13:55:16.0000] <SamB>
/me goes to do "git log Makefile.in" in the binutils-gdb repo, which is subsetted from the old src/ repo ...

[13:56:06.0000] <SamB>
/me tries again "git log -- Makefile" ...

[13:57:11.0000] <SamB>
nothing

[14:48:31.0000] <zewt>
"1.0 released in 1987" suggests they started on it circa 1972

[14:58:51.0000] <Hixie>
hmm

[14:59:04.0000] <Hixie>
it's apparently been a while since i read my bugmail

[14:59:10.0000] <Hixie>
4,767 e-mails...

[14:59:14.0000] <Hixie>
(and that's after filtering)

[15:25:00.0000] <Domenic_>
TabAtkins: can you use "internal slots" and [[x]] in http://dev.w3.org/csswg/css-font-loading/, instead of "internal attributes" and [x] ?

[15:25:18.0000] <Domenic_>
TabAtkins: we want to encourage more people to do that kind of thing, but it's harder to argue for when everyone is doing something different.

[15:29:48.0000] <TabAtkins>
Domenic_: Absolutely.

[15:30:02.0000] <TabAtkins>
Though using [[]] is kinda annoying in Bikeshed.  Hmm.

[15:30:14.0000] <TabAtkins>
I think I can write [<!---->[foo]].

[15:30:43.0000] <Domenic_>
TabAtkins: awesome, thanks! And, uh, wow that sounds hard.

[15:32:34.0000] <TabAtkins>
It's just that Bikeshed treats [[foo]] as a biblio ref.

[15:33:00.0000] <Domenic_>
ah tricksy

[15:33:00.0000] <TabAtkins>
(A behavior inherited from the old CSSWG preprocessor, and shared by Anolis, I think.)

[15:33:21.0000] <Domenic_>
ah i see, so a behavior that would move peoples' cheese if changed

[15:34:17.0000] <Domenic_>
The only thing I can think of is inventing something arcane that gets translated to [[x]], e.g. \\x//

[15:34:34.0000] <TabAtkins>
Yeah, it would break virtually every Bikeshedded spec if changed.

[15:34:48.0000] <jgraham>
What kind of cheese is this, and — assuming it is nice cheese — could they move it this way?

[15:34:57.0000] <TabAtkins>
What I might do instead is add a metadata field to let you specify things that aren't biblio refs.

[15:35:06.0000] <TabAtkins>
For now, though, I'm just adding a comment to break things up.

[15:35:30.0000] <Domenic_>
We do want to add internal slot declarations to WebIDL of some sort

[15:35:37.0000] <TabAtkins>
Cool.

[15:36:30.0000] <TabAtkins>
Just checked - ReSpec uses that syntax too.

[15:36:39.0000] <Domenic_>
waaah waaaaah

[15:36:55.0000] <TabAtkins>
Any chance y'all could come up with a syntax that doesn't directly impinge on every extant spec preprocessor?

[15:37:05.0000] <Domenic_>
i mean, we could ask ES to change, but seems unlikely...

[15:37:11.0000] <Domenic_>
or we could just be inconsistent with ES...

[15:37:17.0000] <Domenic_>
but they're supposed to be the same concept

[15:37:17.0000] <TabAtkins>
I'm fine with the latter.

[15:37:26.0000] <SamB>
don't suppose you could ask them not to process the IDL for bibliographic references

[15:37:48.0000] <TabAtkins>
SamB: It won't just appear in IDL.

[15:37:54.0000] <Domenic_>
i'm a bit surprised that it doesn't leave [[x]]s alone if there's no x in the references section.

[15:37:57.0000] <TabAtkins>
It's scattered throughout the spec, every time you reference the slot.

[15:38:12.0000] <TabAtkins>
Domenic_: A good preprocessor *tells* you you've made a typo when it can't find "x" in the refs database.

[15:38:26.0000] <Domenic_>
yeah, that makes sense.

[15:38:27.0000] <TabAtkins>
And they *generate* the references sections (that's why preprocessor exist)

[15:38:43.0000] <Domenic_>
oh right i forgot about that feature.

[15:38:51.0000] <Domenic_>
using the database of well-known references

[15:38:54.0000] <TabAtkins>
Yup.

[15:39:09.0000] <TabAtkins>
You people writing specs in GHMarkdown are missing out on a lot. ^_^

[15:39:16.0000] <Domenic_>
I guess I'd say use {{x}} in source and have preprocessor convert to [[x]]

[15:39:17.0000] <Domenic_>
heh

[15:39:20.0000] <TabAtkins>
/me is getting closer to having most of Markdown implemented in Bikeshed.

[15:39:29.0000] <SamB>
I never quite understood how that part was supposed to work with each thing in its own repository, but then I'm thinking of bibTeX ...

[15:39:42.0000] <TabAtkins>
SamB: What part?

[15:39:58.0000] <SamB>
the part where you have a big database

[15:40:13.0000] <TabAtkins>
You keep a master database of refs that everyone updates.

[15:40:28.0000] <SamB>
easier with spec tools

[15:40:43.0000] <TabAtkins>
The biblio dbs are maintained automatically.  Bikeshed's linking database is done automatically, though.

[15:40:53.0000] <TabAtkins>
Once it knows a spec's location, it stays up-to-date.

[15:41:07.0000] <TabAtkins>
SamB: I don't understand what you mean.

[15:41:21.0000] <Domenic_>
so what you're saying is, there's only one place we have to change [[HTML]]'s URL in, and then everything will be better...

[15:41:26.0000] <TabAtkins>
Domenic_: Yes.

[15:41:42.0000] <TabAtkins>
([[HTML]] already points to the proper spec in Bikeshed's DB.)

[15:41:50.0000] <Domenic_>
nice

[15:42:21.0000] <TabAtkins>
(Though [[HTML5]] points to the W3C spec.)

[15:43:07.0000] <TabAtkins>
Domenic_: I can always give you a Bikeshed crash-course if you want.  It works fine with the GH workflow - <picture>'s spec is Bikeshedded, and uses a gh-pages as master for displaying.

[15:45:57.0000] <Domenic_>
TabAtkins: probably a good idea, when it's time for me to get serious about prettifying streams. I'll let you know ^_^

[15:46:22.0000] <TabAtkins>
kk, but Bikeshed is helpful during initial writing too, as it makes sure you don't typo links and such.

[15:46:29.0000] <TabAtkins>
Let's you draw railroad diagrams.

[15:46:32.0000] <TabAtkins>
Other cool things. _^

[15:58:05.0000] <Hixie>
[[HTML5]] should be a fatal error :-P

[16:53:45.0000] <TabAtkins>
Domenic_: Why are [[Foo]] things called private slots rather than private attributes?

[16:54:50.0000] <Domenic_>
TabAtkins: attributes is a WebIDL-ism.

[16:55:03.0000] <Domenic_>
They used to be called internal data properties in ES

[16:55:20.0000] <Domenic_>
then we thought that was confusing since you can't e.g. getOwnPropertyDescriptor them

[16:55:24.0000] <Domenic_>
also it was long

[16:55:28.0000] <Domenic_>
so they became internal slots

[16:55:31.0000] <TabAtkins>
Okay.

[16:55:56.0000] <TabAtkins>
Anyway, just pushed the change to Font Loading.

[16:56:10.0000] <TabAtkins>
May take a few minutes to show up.

[16:57:44.0000] <Domenic_>
yaaaay :) thanks man


2014-05-02
[17:05:17.0000] <TabAtkins>
Happy to help get terminology confluence.

[18:10:30.0000] <SamB>
TabAtkins: does HTML5 emit the appropriate deprecation warnings?

[18:10:51.0000] <SamB>
or, yeah, fatal error haha

[18:11:42.0000] <TabAtkins>
No, I don't do anything fancy with biblio refs.

[18:11:47.0000] <TabAtkins>
Though I probably should.

[22:22:54.0000] <MikeSmith>
cabanier: fyi see my review comments on that addHitRegion test https://critic.hoppipolla.co.uk/showcomments?review=1239&filter=all

[22:23:06.0000] <cabanier>
MikeSmith: saw it

[22:23:19.0000] <MikeSmith>
yeah I wish I hadn't merged that

[22:23:32.0000] <MikeSmith>
well, I guess it's not a bad test

[22:23:56.0000] <MikeSmith>
anyway, if he's not keen on updating it, I'll do it myself

[22:24:35.0000] <MikeSmith>
but regardless the source for it needs to be in the yaml file with the sources for the other tests

[22:24:54.0000] <MikeSmith>
cabanier: btw thanks for your other canvas tests and merges

[22:25:38.0000] <cabanier>
MikeSmith: np. The WebKit people want me to fix their IDL compiler instead of just patching the code so it passes the tests

[22:25:52.0000] <MikeSmith>
oh geez

[22:26:00.0000] <cabanier>
MikeSmith: I hope that won't suck up too much time...

[22:26:01.0000] <MikeSmith>
cabanier: that's a lot of work man

[22:26:08.0000] <MikeSmith>
well I think it will

[22:26:17.0000] <MikeSmith>
but I hope it won't :-)

[22:26:42.0000] <cabanier>
MikeSmith: it's actually not so bad. I already fixed the compiler but I worry that I'm now changing the behavior of dozens of interfaces

[22:26:49.0000] <MikeSmith>
oh

[22:27:02.0000] <MikeSmith>
well it would be nice to have it fixed

[22:27:13.0000] <cabanier>
MikeSmith: yes

[22:27:42.0000] <MikeSmith>
if the current behavior of those interfaces is not conformannt, better to break it as early as possible rather than later

[22:27:50.0000] <cabanier>
MikeSmith: yeah

[22:27:51.0000] <MikeSmith>
I would think

[22:28:12.0000] <cabanier>
MikeSmith: I'm finding a lot of issues where the wrong exception is thrown, or not thrown at all

[22:30:06.0000] <MikeSmith>
cabanier: good that you're finding those, but sad that nobody else has taken time to do it yet so you now get stuck with it

[22:31:09.0000] <cabanier>
yeah

[22:31:32.0000] <cabanier>
MikeSmith: I hope to get it in before Safari forks

[22:31:45.0000] <cabanier>
MikeSmith: otherwise it's an another year before it would update

[22:44:30.0000] <MikeSmith>
cabanier: by "before Safari forks" you mean before the branch for the next release?

[22:44:45.0000] <cabanier>
MikeSmith: yes

[22:44:49.0000] <MikeSmith>
ok

[23:19:20.0000] <zcorpan>
TabAtkins: fwiw i think anolis doesn't do [[foo]] except if you give a flag like --enable-w3c-crazy-substitutions or some such

[23:34:54.0000] <zcorpan>
speaking of empty content model, doesn't the spec in fact allow whitespace and comments (and PIs) for "empty"?

[23:36:17.0000] <zcorpan>
"Inter-element whitespace, comment nodes, and processing instruction nodes must be ignored when establishing whether an element's contents match the element's content model or not"

[23:36:44.0000] <SamB>
zcorpan: if it's possible to parse them that way, sure ...

[23:37:01.0000] <SamB>
so not exactly for <img> in HTML syntax

[23:37:01.0000] <zcorpan>
SamB: what do you mean?

[23:37:19.0000] <zcorpan>
oh ok

[23:37:43.0000] <zcorpan>
well you could create the DOM with script and forget about the syntax

[23:37:52.0000] <SamB>
true

[23:39:05.0000] <zcorpan>
so a definition of "empty" that reminds the above exception might actually be good to have

[23:39:13.0000] <zcorpan>
Hixie: ^

[00:21:42.0000] <MikeSmith>
who was it that was reminding us other day that it's a bad idea to create new specs that load the precious first bytes of our documents down with yet more stuff? https://docs.google.com/document/d/17jg1RRL3RI969cLwbKBIcoGDsPwqaEdBxafGNYGwiY4/edit

[00:23:48.0000] <MikeSmith>
do I read correctly that requires each document instance to have

[00:24:14.0000] <MikeSmith>
... both a new meta@name element and a new link@rel element

[00:26:34.0000] <MikeSmith>
with a new content attribute whose value the UA has parse and that's an arbitrarily long list of arbitrarily long selector expressions

[02:37:00.0000] <zcorpan>
anyone know what happened to hspace/vspace on table in gecko? http://software.hixie.ch/utilities/js/live-dom-viewer/?saved=2984 looks like it's not supported anymore but https://bugzilla.mozilla.org/show_bug.cgi?id=725646 is not FIXED yet

[02:43:59.0000] <zcorpan>
http://www.browserstack.com/screenshots/2b6be040b79a037b7d05c52f555295e5828762cf ...

[02:44:29.0000] <zcorpan>
oh only quirks mode

[02:51:26.0000] <MikeSmith>
I like the aggressive "Standardization plan" in https://docs.google.com/document/d/17jg1RRL3RI969cLwbKBIcoGDsPwqaEdBxafGNYGwiY4/edit#heading=h.tndapzbk8g3p

[06:30:37.0000] <Domenic_>
MikeSmith: it was slightlyoff

[06:31:11.0000] <annevk>
https://twitter.com/PointedEars2/status/462218792576499714 o_O

[06:32:03.0000] <darobin>
annevk: never argue with trolls/idiots/etc — people might not know the difference

[06:34:06.0000] <Ms2ger>
They'll pull you down to their level and beat you on experience?

[06:34:44.0000] <darobin>
damn right

[06:34:48.0000] <MikeSmith>
heh

[06:35:09.0000] <MikeSmith>
Domenic_: yeah I know, it was more of rhetorical question :-)

[06:35:41.0000] <Domenic_>
Haha OK, just woke up, rhetorical devices are too subtle for me right now...

[06:37:19.0000] <MikeSmith>
heh

[06:38:07.0000] <Domenic_>
Interesting. Do they really think the only part of this that needs standardization is the rel types?

[06:42:07.0000] <MikeSmith>
Domenic_: I reckon they know better. I think they just need to add more detail to that section yet

[06:42:20.0000] <MikeSmith>
or I hope that's the case at least

[06:42:44.0000] <Ms2ger>
Ah, MikeSmith, the eternal optimist

[06:43:19.0000] <MikeSmith>
Ms2ger: that's me to a T

[06:43:41.0000] <MikeSmith>
photo of me being optimistic: http://goo.gl/5uUnK

[06:50:06.0000] <tobie__>
darobin: these look like issues with the WebIDL parser rather than syntax issues, am I right?

[06:50:08.0000] <tobie__>
https://github.com/slightlyoff/ServiceWorker/issues/259

[06:53:04.0000] <tobie__>
^ pointedears reminds of comp.lang.javascript. He was already trolling back then.

[06:56:43.0000] <jgraham>
tobie__: On an entirely different topic, I think to get the documentation for testharness and so on onto testthewebforward.org we will need to move away from using GitHub-Pages directly (but can still use Jekyll). This is because GHP doesn't support any kind of useful include mechanism. What we want is basically http://octopress.org/docs/plugins/render-partial/

[06:57:24.0000] <jgraham>
So we could do something like {% render_partial ../_resources/testharness.js/docs/api.md %}

[06:57:54.0000] <tobie__>
oh...

[06:58:07.0000] <tobie__>
includes don't let you do that/

[06:58:10.0000] <tobie__>
?

[06:58:38.0000] <tobie__>
(I guess they're scoped to the include folder)

[06:58:49.0000] <jgraham>
Yeah, they seem to be scoped

[06:59:00.0000] <tobie__>
(sounds like a wise thing to do)

[06:59:14.0000] <tobie__>
yeah works for me.

[06:59:22.0000] <tobie__>
Can we still get auto-deploy?

[07:00:51.0000] <jgraham>
I'm not sure. I think you will have to build locally, push, and it will deploy

[07:00:59.0000] <jgraham>
aiui Domenic_ uses this setup

[07:01:28.0000] <tobie__>
mmm.

[07:01:52.0000] <tobie__>
that sucks.

[07:01:56.0000] <darobin>
tobie__: yes, and these are all easy fixes too

[07:01:59.0000] <darobin>
feel free to file

[07:02:06.0000] <tobie__>
darobin: ok

[07:02:21.0000] <tobie__>
happy to look over it if you have pointers.

[07:02:29.0000] <tobie__>
it's a blocker for me atm

[07:04:11.0000] <tobie__>
darobin: filed https://github.com/darobin/webidl2.js/issues/5

[07:04:48.0000] <tobie__>
jgraham: concerned about the lack of auto-deploy feature.

[07:05:00.0000] <tobie__>
jgraham: could we have a script or something to help?

[07:05:25.0000] <tobie__>
if not, please check with rhauck before you go ahead.

[07:05:51.0000] <jgraham>
tobie__: So I don't know exactly what the situation is, I haven't used either GitHub-Pages or Octopress before

[07:06:08.0000] <tobie__>
k

[07:06:23.0000] <jgraham>
But of course I don't plan to change anything without agreement that it's an improvement

[07:06:24.0000] <tobie__>
you can't have a special build of jekyll on gh-pages

[07:07:13.0000] <tobie__>
so if you want to add stuff, you;re effectively loosing the auto-deploy feature (you have to build locally and push the static files only)

[07:07:41.0000] <jgraham>
http://octopress.org/docs/deploying/github/

[07:07:50.0000] <tobie__>
that said, you can build a script that does it for you (listens to changes on master, builds, and pushes to gh-pages)

[07:08:20.0000] <tobie__>
jgraham: right

[07:08:36.0000] <tobie__>
/me running out. back later.

[07:09:00.0000] <jgraham>
Yeah, I think it's worth fixing the deploy issue to get the docs in sync with upstream

[07:23:42.0000] <annevk>
darobin: "Wants to keep the web in the Dark Ages" makes for a cool Twitter bio

[07:24:00.0000] <darobin>
annevk: heck yay! I'd totally go for it man

[07:24:05.0000] <darobin>
I'm almost jealous there

[07:25:06.0000] <Ms2ger>
Let's just drop that "almost"

[07:26:46.0000] <darobin>
hahaha

[07:40:26.0000] <MikeSmith>
"Wants to bomb the Web back into the Stone Age" would be even better

[07:47:06.0000] <Ms2ger>
He's not American

[07:56:17.0000] <Domenic_>
jgraham: tobie__: you could also use travis CI to run the deploy

[07:56:48.0000] <Domenic_>
use it as a post-commit hook to run the appropriate script

[07:57:02.0000] <Domenic_>
use the encrypted credentials feature to include necessary keys for pushing to gh-pages

[11:34:17.0000] <Hixie>
foolip: i'm surprised that browsers append attributes to elements as they're parsing the attributes, since that means that they are likely creating redundant elements.

[11:34:17.0000] <Hixie>
foolip: for example, if you're parsing <isindex foo=bar>, then you need to pass a token with {start tag, name:isindex, attirubtes: foo=bar} to the tree construction, which then doesn't create an "isindex" element

[12:53:21.0000] <Hixie>
does canPlayType() return a: state, kind, mode, reason, rule, or type

[12:53:51.0000] <Hixie>
maybe it's a new thing, a result

[13:21:03.0000] <Domenic_>
can people actually use canPlayType()? Doesn't it return things like "maybe"?

[13:23:04.0000] <Domenic_>
vine.co uses mediaelement.js which uses it like so: https://github.com/johndyer/mediaelement/blob/master/src/js/me-featuredetection.js#L37-L44

[13:23:09.0000] <zewt>
an api that returns "maybe" and "probably" would have to be in the running for least usable api ever

[13:24:02.0000] <jgraham>
Well it's honest

[13:24:29.0000] <zewt>
(doesn't look like a very realistic api input, either--video files often have alternative data formats, so a list of codecs used by the file doesn't tell you much)

[13:24:45.0000] <zewt>
(no doubt that's a partial cause of the silly results...)

[13:25:03.0000] <jgraham>
The point is that the browser generally doesn't know if the media framework will actually be able to play the video without trying to play it

[13:25:22.0000] <zewt>
(i assume the main cause is that you also need to know things like the encoding profile, not just the codec)

[13:25:50.0000] <zewt>
my parenthetical quota has been exceeded

[13:25:57.0000] <Domenic_>
mediaelement's optional "source chooser" plugin uses it like so: https://github.com/johndyer/mediaelement/blob/666b6adaea247a5f7dd1b788190a100daa4f26a3/src/js/mep-feature-sourcechooser.js#L53-L55

[13:26:02.0000] <Domenic_>
vine.co doesn't use that

[13:26:56.0000] <zewt>
yeah the only meaningful result is the "definitely can't" one i guess

[13:27:11.0000] <jgraham>
/me marks zewt down as "not a lisp programmer"

[13:27:31.0000] <Hixie>
there are far more useless APIs in the web platform than canPlayType

[13:27:56.0000] <zewt>
it's a competitive field

[13:28:16.0000] <Hixie>
in other news, i just typed "</dfn>" when trying to write "</span>"

[13:28:19.0000] <Hixie>
blimey

[13:28:28.0000] <Domenic_>
I remember a long time ago reading an interview with Hixie where he was talking about all the vestigial things. I think the useless pushState argument was near the top of his list? Anyway it was refreshing honesty for someone new to all this.

[13:28:49.0000] <Domenic_>
("long time" ~ "a year"?)

[13:29:12.0000] <zewt>
the title argument?

[13:29:24.0000] <zewt>
(if I want to set the title too, I'll ... just set the title)

[13:30:14.0000] <Domenic_>
"... which leads to APIs that make no sense, like pushState(), which has a required argument that is ignored."

[13:30:18.0000] <Domenic_>
http://html5doctor.com/interview-with-ian-hickson-html-editor/

[13:31:17.0000] <zewt>
none of the arguments are ignored, right?

[13:32:55.0000] <Domenic_>
Firefox ignores title

[13:33:44.0000] <Domenic_>
Spec says: "Note: The title is purely advisory. User agents might use the title in the user interface."

[13:33:48.0000] <Hixie>
the title argument is ignored by everyone

[13:33:53.0000] <Hixie>
it's the saddest thing

[13:34:31.0000] <Domenic_>
Do you think the spec should be more explicit about that?

[13:34:44.0000] <Domenic_>
I guess the argument is they could put it in some session history UI

[13:34:52.0000] <Domenic_>
But they definitely shouldn't change document.title

[13:38:07.0000] <Hixie>
they should put it in some session history UI

[13:38:26.0000] <zewt>
if it was guaranteed to be ignored, i could say pushState(null, null, url) instead of pushState(null, document.title, url) ... 95% of the time the URL is all I want to change anyway

[13:39:52.0000] <zewt>
that said, i'm sure i've used the title argument expecting it to change the title at some point, and if that works in some browsers and is ignored in others, that's obviously bad

[13:41:39.0000] <Domenic_>
i think it should be a normative requirement that it doesn't change the same things document.title changes

[13:41:45.0000] <Domenic_>
to avoid your overcaution

[13:42:21.0000] <zewt>
sorry, my what? :)

[13:42:51.0000] <Ms2ger>
Your caution

[14:17:40.0000] <tobie__>
Domenic_: smart suggestion re relying on Travis CI

[14:34:51.0000] <cuauhtemoc>
hey

[15:09:59.0000] <Hixie>
gsnedders: fyi, the tokeniser tests don't check any of the script data states, or the cadatasection state

[15:37:09.0000] <zewt>
dear firefox stop letting tabs steal focus with alert()

[15:37:51.0000] <zewt>
granted chrome is now even worse than firefox with modals, back in the dark ages

[15:43:45.0000] <zewt>
wow, chrome alerts are even more broken than I knew

[15:44:44.0000] <zewt>
if one *window* has an alert open, focusing another browser window (not tab) lets me access that tab (if it's a different origin), but browser chrome is wedged (can't change tabs or access the address bar), and if I switch to another window that shares a context with the one with an alert open, the other browser window is completely frozen


2014-05-03
[18:05:35.0000] <gsnedders>
Hixie: yeah, I know individually the coverage is not great

[18:05:46.0000] <gsnedders>
Hixie: the sum of both the tokenizer and tree construction is good

[18:07:55.0000] <gsnedders>
(this is one of the things I want to fix this summer)

[18:45:17.0000] <Hixie>
gsnedders: k

[18:46:28.0000] <Hixie>
gsnedders: i was just amused because i've been slowly writing code as each test fails, and then suddenly i was passing all the tokeniser tests, and i had like 15 "XXX" bits in my tokeniser still...

[20:33:15.0000] <Hixie>
woah

[20:33:26.0000] <Hixie>
&#x20;<!DOCTYPE test>...

[20:33:32.0000] <Hixie>
i bet old UAs didn't parse that like we do now

[20:34:27.0000] <Hixie>
i wonder how i can test that

[20:34:32.0000] <Hixie>
i haven't seen an old browser in years

[20:42:00.0000] <MikeSmith>
Hixie: I seem to remember thet

[20:42:30.0000] <MikeSmith>
*there being some thing that let you test in Netscape 4

[20:42:37.0000] <MikeSmith>
/me looks

[20:43:21.0000] <Hixie>
dunno how you'd even test that in n4

[20:43:51.0000] <MikeSmith>
http://virtuallyfun.superglobalmegacorp.com/?p=3866

[20:45:00.0000] <MikeSmith>
server-side thing, I guessーit just generates PNGs you can view

[20:45:02.0000] <MikeSmith>
anyway

[20:47:00.0000] <MikeSmith>
Hixie: I don't understand what's so exceptional about how &#x20;<!DOCTYPE test> gets parsed

[20:47:25.0000] <MikeSmith>
looking at the DOM for it I see pretty much what I'd expect

[20:49:59.0000] <Hixie>
MikeSmith: it's invalid xml, for example.

[20:50:11.0000] <Hixie>
MikeSmith: no charrefs before the root element

[20:50:18.0000] <MikeSmith>
ok

[20:50:24.0000] <MikeSmith>
ah yeah

[20:51:43.0000] <MikeSmith>
in other news, I'm reading the statement "it is extremely rare in JavaScript to rely on checking a specific exception type" and wondering why that's true

[20:51:58.0000] <MikeSmith>
I mean I assume that's just stating common practice

[20:52:43.0000] <MikeSmith>
that is, that web devs don't typically check for specific exceptions, something either just throws or it doesn't

[20:52:47.0000] <MikeSmith>
I guess

[20:52:58.0000] <zewt>
well, because javascript as a language sucks at it, presumably

[20:53:07.0000] <Hixie>
doesn't really suck at that

[20:53:21.0000] <Hixie>
compared to other languages

[20:53:22.0000] <Hixie>
does it?

[20:53:38.0000] <Hixie>
i mean i guess some have special syntax for different handlers for different classes of exceptions

[20:53:40.0000] <zewt>
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch didn't even know about the "var if condition" syntax, is that widely supported?

[20:53:52.0000] <zewt>
never seen it in code

[20:54:16.0000] <MikeSmith>
makes me wonder why we go to the trouble of defining specific exceptions if in practice nobody cares, or no code changes any behavior based on what the exception is

[20:54:24.0000] <zewt>
filtering exception handlers by class is exception handling 101, i've always found it bizarre that javascript has no syntax for it (but maybe the "if" syntax is meant for that)

[20:54:27.0000] <Hixie>
oh wow

[20:54:31.0000] <Hixie>
i didn't know about that either

[20:54:41.0000] <zewt>
trying it

[20:55:02.0000] <Hixie>
Note: This functionality is not part of the ECMAScript specification.

[20:55:18.0000] <zewt>
all that matters is whether it's implemented, heh

[20:55:34.0000] <MikeSmith>
so maybe people don't try to do it because they already know it doesn't work reliably? or the language doesn't provide what's needed for proper exception handling?

[20:55:40.0000] <zewt>
parse error in firefox

[20:55:47.0000] <MikeSmith>
s/language/platform

[20:56:15.0000] <zewt>
maybe because most day-to-day errors come via error events, rather than exceptions?

[20:56:24.0000] <zewt>
(since most code is still async in the UI thread, not worker stuff)

[20:56:56.0000] <zewt>
most exception handlers i can think of writing are just "catch all errors to log them to the server, because we don't really except to get any exceptions at all"

[20:57:04.0000] <zewt>
which is definitely unlike most other languages i work with

[20:57:32.0000] <MikeSmith>
zewt: I see, ok

[20:57:35.0000] <MikeSmith>
that makes sense

[20:57:40.0000] <zewt>
(platforms, rather)

[20:57:55.0000] <MikeSmith>
/me wonders what Domenic_ would say

[20:58:12.0000] <MikeSmith>
I'm not an idiomatic JavaScript programmer

[20:58:28.0000] <zewt>
i know i write way more exception handlers in python than JS, in any case

[20:58:51.0000] <zewt>
and i'd go nuts if python didn't have class filtering

[20:59:19.0000] <MikeSmith>
well, for sure I write a ton in Java

[20:59:28.0000] <MikeSmith>
not that I'm proud of it

[20:59:36.0000] <MikeSmith>
that's just what Java forces on me

[20:59:42.0000] <zewt>
java shoves them down your throat, heh

[20:59:53.0000] <zewt>
i tend to make all of my exceptions unchecked in java to avoid that nonsense

[21:00:23.0000] <MikeSmith>
well for me it works well within the Java universe

[21:01:07.0000] <MikeSmith>
e.g., the validator code is exception handling stacked on exception handling all over the place

[21:01:32.0000] <MikeSmith>
but I guess that's the nature of that particular app

[21:01:56.0000] <MikeSmith>
inherent in it, in that its entire purpose is to report errors of varying kinds

[21:02:09.0000] <zewt>
i find it's one of the many things that makes java a nightmarish, developer-hostile environment seemingly designed by academics with zero practical experience

[21:02:20.0000] <zewt>
(re: java is probably my single most hated language)

[21:02:38.0000] <zewt>
(combination of really terrible language + forced to use it for Android)

[21:02:47.0000] <MikeSmith>
to me it's more a fact of life I guess

[21:03:02.0000] <MikeSmith>
I suppose I should question it terribleness more

[21:03:26.0000] <MikeSmith>
but it's like trying to fix the government or something

[21:03:30.0000] <zewt>
i picture some college kid just being told by his CS201 prof "all errors should be declared explicitly and you should handle every error deliberately" going on to bake that nonsense into a langauge to force it on everyone else

[21:04:02.0000] <zewt>
also language

[21:04:03.0000] <MikeSmith>
oh well yeah

[21:04:22.0000] <MikeSmith>
it shouldn't set a precedent for anything else, that's for sure

[21:04:33.0000] <MikeSmith>
though I guess it unfortunately has

[21:05:32.0000] <zewt>
java should serve as a cautionary tale to other languages, and nothing more

[21:05:33.0000] <zewt>
heh

[21:06:52.0000] <MikeSmith>
but getting back to the platform, the vast majority of the failures in the DOM test suite apparently come down to implementations not throwing the exceptions that the spec says they should throw

[21:07:31.0000] <MikeSmith>
and I can say that holds true for some other parts of the web-platform-tests suite

[21:08:13.0000] <MikeSmith>
and those wrong-exception-type bugs tend to stick around for a long time without anybody caring enough to fix them

[21:08:53.0000] <MikeSmith>
I assume that's in part because webdevs don't complain about those bugs and demand they be fixed

[21:09:05.0000] <MikeSmith>
they're not pain points, in practice

[21:09:18.0000] <zewt>
i think separate exception types for "programming error"-class exceptions are probably less useful in general

[21:09:27.0000] <MikeSmith>
aok

[21:09:35.0000] <MikeSmith>
*ok

[21:09:35.0000] <zewt>
you don't usually try to catch different classes of programming errors, you just log them and fix the bug...

[21:09:44.0000] <MikeSmith>
I see

[21:10:06.0000] <zewt>
and i'm guessing, but DOM exceptions like "you tried to stick a node where it can't go" are probably programming errors?

[21:10:52.0000] <zewt>
s, s/you/i/ i guess heh

[21:11:34.0000] <MikeSmith>
I guess they are, yeah

[21:12:06.0000] <MikeSmith>
but honestly I guess I don't think about that much when I'm reviewing tests or writing them while reading the spec

[21:12:09.0000] <MikeSmith>
I guess I should

[21:12:40.0000] <zewt>
having them under a base class like python's RuntimeError might be useful (to distinguish them as programming errors), but finer than that I'm not sure

[21:12:55.0000] <MikeSmith>
yeah, that

[21:13:23.0000] <MikeSmith>
of course Java does things that way too, to a degree

[21:13:41.0000] <zewt>
well, Python's RuntimeError and Java's RuntimeError (RuntimeException? been a while, I forget) are different beasts

[21:13:48.0000] <MikeSmith>
ah OK

[21:14:06.0000] <zewt>
python's means (to my interpretation) "programming error", java's means "unchecked error that you don't have to declare in the exception specifier", right?

[21:14:21.0000] <MikeSmith>
yeah pretty much, as far as Java

[21:15:40.0000] <zewt>
netsplittin' like it's 1996

[21:16:14.0000] <zewt>
oh, irccloud dying

[21:16:32.0000] <zewt>
amusing that you can tell who uses irccloud even with masked hostnames

[21:16:37.0000] <zewt>
* timeless (sid4015@firefox/developer/timeless) Quit (Ping timeout: 240 seconds)

[03:44:08.0000] <jgraham>
Hixie: Specifically it's because those tokenizer states postdate Philip` generating a huge number of tokenizer tests

[11:05:51.0000] <Domenic_>
the `if` syntax in `catch` is a Mozilla-specific extension. MDN is not very clear on these sorts of things.

[11:06:21.0000] <Domenic_>
JS developers do rarely filter exception types, but IMO this is because most exceptions they deal with that could be recovered from result from async ops. (E.g., network failures, permission errors, ...)

[11:07:21.0000] <Domenic_>
I am hopeful that ES will grow better exception-filtering syntax; in the meantime, `promise.catch(e => { if (e.name !== "NetworkError") { throw e; } /* recover from e */ })` will work OK

[11:08:03.0000] <Domenic_>
or `try { result = await promise; } catch (e) { if (e.name !== "NetworkError") { throw e; } /* recover from e */ }` with await syntax

[11:08:20.0000] <Domenic_>
Related es-discuss thread http://esdiscuss.org/topic/try-catch-conditional-exceptions-in-light-of-generators

[11:08:29.0000] <zewt>
that syntax needs to be shot into the sun

[11:09:09.0000] <Domenic_>
also http://esdiscuss.org/topic/error-objects-in-w3c-apis

[11:09:16.0000] <Domenic_>
zewt: which syntax?

[11:09:21.0000] <zewt>
"e => {"

[11:10:53.0000] <Ms2ger>
I sure am glad we don't shoot everything zewt dislikes into the sun

[11:10:59.0000] <Domenic_>
lol yes, arrow functions are <3

[11:11:15.0000] <zewt>
completely unobvious syntax

[12:17:08.0000] <odinho>
Throwing the wrong kind of exception is less worse than throwing no exception at all.

[12:22:54.0000] <jgraham>
Yeah, but it's rather hard to codify the badness of failures in tests. And it's only considered acceptable because people have learnt not to depend on it

[12:23:14.0000] <jgraham>
If javascript wasn't a bit rubbish, it would be quite important

[12:24:01.0000] <zewt>
not sure about that; the APIs tend to depend on people catching exceptions much less, too (at least the async versions)

[12:24:15.0000] <zewt>
(less than APIs in most other platforms)

[13:40:59.0000] <IZh>
Hi. Why no UNIX timestamp support in datetime fields? It is easier to parse.

[14:54:01.0000] <foolip>
Hixie: I was mistaken, the parser doesn't set the attributes one by one, it has them all ready and sets them after creating the element. It was after that point I tried adding a hook that showed up in performance tests.

[14:56:43.0000] <foolip>
maybe there is some trick I could use to make Blink match the spec, but it would be a special-case, since almost everywhere parser-set and script-set attributes are handled in the same code path, which is nice.

[14:58:38.0000] <foolip>
how hard I try to find that trick depends on how much you hate any of the alternatives that don't have a special case


2014-05-04
[20:29:47.0000] <Rastus_Vernon>
Ooooh! I just realized the W3C cheatsheet supports CSS at-rules.

[20:30:01.0000] <Rastus_Vernon>
http://www.w3.org/2009/cheatsheet/#search,@media

[20:31:10.0000] <Rastus_Vernon>
Hum, but it doesn’t link to the specification… and my primary use for that cheatsheet is getting quickly to the specification of any HTML element, CSS property, HTML attribute, etc.

[22:19:11.0000] <eligrey>
if i sent a message to the mailing list with an unregistered email and then register after the fact, must i re-send the message?

[22:19:34.0000] <eligrey>
or will it go properly through after registration?

[22:19:52.0000] <SamB>
eligrey: did you get a bounce yet?

[22:20:13.0000] <eligrey>
yeah, just now

[22:20:31.0000] <SamB>
those tend to contain some kind of instructions

[22:22:23.0000] <eligrey>
i don't want to spam everyone

[22:22:46.0000] <eligrey>
can i just send to whatwg⊙lwo when i resend?

[22:23:54.0000] <SamB>
maybe you should give special delivery instructions to your mailer daemon ...

[22:23:54.0000] <eligrey>
as long as the subject is the same it'll keep its context right?

[22:24:07.0000] <SamB>
er, message ID is important

[22:24:13.0000] <eligrey>
in the archives

[22:24:48.0000] <SamB>
ideally resend with the same message ID

[22:25:47.0000] <eligrey>
SamB: i don't think i can configure that header in gmail

[22:26:23.0000] <SamB>
It has SMTP access; you could do magic that way. Or you could repost with an apology.

[15:43:25.0000] <zewt>
did someone really just say "we should do something we thought was a bad idea because the web has more competition now"


2014-05-05
[23:40:38.0000] <a-ja>
TabAtkins: ping (re: colors 4 nit)

[23:46:52.0000] <a-ja>
TabAtkins: s/constrast/contrast/ in section 10.5 header (and in toc)

[02:28:03.0000] <Ms2ger>
"Started work on the next version of http://HTML5test.com . First addition is [bits not in the HTML spec]"

[03:36:48.0000] <MikeSmith>
Ms2ger: you're making the common beginner mistake of misinterpreting that stylized ampersand character as a five

[03:58:47.0000] <smaug____>
is there somewhere a list of css box types, or how to call them. inline, block, replaced inline etc

[04:05:08.0000] <smaug____>
or is the whole concept of replaced still not properly defined

[04:59:57.0000] <IZh>
It seems that on web-developer's version of the document visited links lasts only minutes on my Adnroid device. It's strange...

[05:05:05.0000] <zcorpan>
jgraham: critic didn't like https://github.com/w3c/web-platform-tests/pull/959

[05:30:50.0000] <mathiasbynens>
would it make sense to move `atob`/`btoa` to ECMAScript? http://esdiscuss.org/topic/native-base64-utility-methods → would be good if some WHATWG folks chimed in

[05:52:24.0000] <zcorpan>
mathiasbynens: Claude Pache's attitude makes me sad and want to not read through the whole thing :-(

[05:53:20.0000] <zcorpan>
read anyway

[05:54:24.0000] <mathiasbynens>
zcorpan: tbh i don’t get his point at all. why can “raw binary strings” not be fed to atob? octets only go up to 0xFF

[05:54:45.0000] <mathiasbynens>
which is exatly what `atob` supports

[05:55:19.0000] <zcorpan>
whatever happened to base64 string <-> TypedArray ? i thought someone proposed extending atob/btoa to do that

[05:56:05.0000] <zewt>
was that mixed in with the encoding api stuff? since you also want streaming for base64

[05:56:35.0000] <zewt>
i forget where that left off (it's comparable to string encodings, but not quite a direct fit, iirc)

[05:57:32.0000] <zcorpan>
http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2013-August/040364.html

[06:00:54.0000] <foolip>
away

[06:01:02.0000] <zewt>
yeah, that morphed into "make it part of TextEncoder/TextDecoder" later in the thread, with the oddity that array->base64 is a "decoder" instead of an "encoder"

[06:07:43.0000] <zewt>
seem to recall some discussion since then but can't think of where

[07:20:29.0000] <zcorpan>
Hixie: can you have a look at https://www.w3.org/Bugs/Public/show_bug.cgi?id=25542 ?

[08:30:58.0000] <Domenic_>
High rest time isn't exposed in web workers!?

[08:31:11.0000] <Domenic_>
Where do I file that bug? (Who manages that spec?)

[08:32:26.0000] <Ms2ger>
Hixie

[08:32:32.0000] <zcorpan>
there's high rest time? i want in!

[08:32:41.0000] <zcorpan>
could use some rest

[08:32:46.0000] <Ms2ger>
Oh, I was going to send zcorpan chocolate

[08:33:45.0000] <zcorpan>
oh, nice

[08:34:18.0000] <Ms2ger>
/me should find his way to a post office

[08:35:21.0000] <darobin>
Domenic_: you probably want to email http://lists.w3.org/Archives/Public/public-web-perf/

[08:36:36.0000] <Domenic_>
darobin: sounds good. Given that the spec is already a Rec, will this cause large amounts of work to happen? ("Performance timing v2"?)

[08:37:26.0000] <darobin>
Domenic_: not necessarily; the last time someone found a bug with a WebPerf Rec they spinned a new Rec out in 6 days

[08:38:06.0000] <Domenic_>
Woah, didn't know that was possible.

[08:38:10.0000] <Domenic_>
Cool, thanks.

[08:38:41.0000] <darobin>
Domenic_: that's why I often say that the Process isn't the problem, you can do a hell of a lot with it; the problem is mostly with the culture

[08:40:17.0000] <zcorpan>
WebPerf++ for creating a new Rec in 6 days

[08:41:23.0000] <Ms2ger>
We should publish HTML in WebPerf

[08:43:14.0000] <Domenic_>
:D

[08:43:14.0000] <darobin>
Ms2ger: I think that could join the suggestion I made that the HTML WG would use the WHATWG mailing list for technical discussion at that big party with interesting designer drugs :)

[08:43:32.0000] <Domenic_>
Is the syntax [Exposed=Window,Worker]?

[08:43:35.0000] <Domenic_>
#lazyirc

[08:44:21.0000] <Ms2ger>
darobin, by the time the HTMLWG notices and starts flam^Wdiscussing, the Rec will have been shipped

[08:44:36.0000] <darobin>
Ms2ger: my thoughts exactly *MUAHAHAHAHA*

[08:45:26.0000] <zcorpan>
Domenic_: yeah, but there's an open spec bug about the comma

[08:45:56.0000] <Ms2ger>
[Exposed=Window`Worker]

[08:47:22.0000] <zcorpan>
[Exposed=Window┏(°.°)┛Worker]

[08:52:08.0000] <Domenic_>
zcorpan++

[09:11:31.0000] <zcorpan>
Hixie: intentional that <video><source><script></script><source></video> is not allowed in the content model?

[09:15:49.0000] <dglazkov>
good morning, Whatwg!

[10:25:46.0000] <TabAtkins>
zcorpan: There were also requests for string->TypedArray (assuming the default 16-point code units of JS strings).  Strings are the most compact way to ship binary data inline in scripts.

[10:26:45.0000] <TabAtkins>
a-ja: Fixed typo, thanks.

[10:49:52.0000] <Hixie>
zcorpan: dunno. yet more reasons i hate multi-element designs.

[10:50:41.0000] <zcorpan>
Hixie: i filed a bunch of bugs about script-supporting elements and content models

[10:50:52.0000] <Hixie>
great

[10:50:53.0000] <Hixie>
:-P

[10:51:05.0000] <zcorpan>
you're welcome :-)

[10:51:21.0000] <zcorpan>
maybe you should have made template="" an attribute

[10:51:27.0000] <zcorpan>
and script=""

[10:55:33.0000] <zewt>
hello, i'm sitting around at work twiddling my thumbs hitting f5 once ina while as google docs 502s for me

[10:55:38.0000] <zewt>
welcome to cloud

[10:57:09.0000] <zewt>
TabAtkins: i'm not sure exactly what you're describing, but it sounds horrible

[10:57:55.0000] <zewt>
incidentally, i think base64 deflates down to basically its original size, which makes it a silly way to send nontrivial amounts of binary data, but not an uncompact one

[10:58:34.0000] <TabAtkins>
zewt: Interesting.  It makes sense that it should compress to roughly its original size, I guess - you're only using 6 bits of each byte, after all.

[11:00:03.0000] <zewt>
i don't recall how deflate's algorithm works, but if it's bitwise rather than bytewise, it'd probably pick up the encoding pretty precisely, too

[11:01:20.0000] <TabAtkins>
Pretty sure it's bitwise.

[11:01:24.0000] <TabAtkins>
But I could be wrong.

[11:01:35.0000] <zewt>
1048576 bytes of random data becomes 1076467 bytes, so about 3% overhead

[11:03:27.0000] <zcorpan>
doesn't google images do that?

[11:03:32.0000] <zcorpan>
for instant cats

[11:07:50.0000] <TabAtkins>
Yeah, I think so.

[11:12:13.0000] <Hixie>
zcorpan: what about https://www.w3.org/Bugs/Public/show_bug.cgi?id=25542 ?

[11:13:03.0000] <zcorpan>
Hixie: if you remember how the spec comment 4 talks about came into being (if it was there when you edited the spec)

[11:13:57.0000] <Hixie>
i'd have to look at the blame

[11:14:02.0000] <Hixie>
i don't recall off the top of my head

[11:14:13.0000] <zcorpan>
ok

[11:30:20.0000] <zcorpan>
i guess we shouldn't tell @PointedEars2 about the quirks spec

[11:32:23.0000] <Ms2ger>
Might go all pointed ears about it

[11:50:29.0000] <jgraham>
zcorpan: Uh, yeah seems to be broken

[11:50:43.0000] <jgraham>
I have never understood that particular error :(

[11:51:06.0000] <zcorpan>
jgraham: context?

[11:51:20.0000] <zcorpan>
oh the PR

[11:51:24.0000] <jgraham>
12:05 < zcorpan> jgraham: critic didn't like https://github.com/w3c/web-platform-tests/pull/959

[11:52:01.0000] <jgraham>
 Invalid history rewrite: No commit on the rebased branch references

[11:52:02.0000] <jgraham>
remote: the same tree as the old head of the branch.

[11:53:53.0000] <jgraham>
Which I guess suggests a move-type rebase is being misinterpreted as a in-place rebase

[11:54:02.0000] <jgraham>
Which does suggest a way to fix it…

[11:56:17.0000] <SamB>
does "move type" mean you put the results in a different ref or something?

[11:57:19.0000] <jgraham>
SamB: By "Move type" I mean you go from A-B-C-B1-B2 -> A-B-C-D-E-B1'-B2'

[11:57:50.0000] <SamB>
jgraham: oh

[11:58:18.0000] <SamB>
why does it even try to notice the latter?

[11:58:43.0000] <jgraham>
The latter?

[11:58:47.0000] <SamB>
in-place

[11:59:05.0000] <SamB>
which I assume means more like -> A-B-C-B2'-B1' ?

[11:59:37.0000] <jgraham>
In-place is typically like A-B-C-B1-B2 -> A-B-C-B12

[11:59:46.0000] <SamB>
whatever

[11:59:59.0000] <jgraham>
It needs to know that the branch history doesn't match what's in git

[12:00:50.0000] <SamB>
ah

[12:01:25.0000] <zcorpan>
jgraham: btw is there some unstable test you want me to look at?

[12:01:25.0000] <jgraham>
Critic has a truly immutable history of the branch because all the previous commits have extra data attached to them like comments

[12:02:12.0000] <SamB>
so I guess it'd want to notice if you reorder commits too, so that it can reattach the comments?

[12:02:54.0000] <jgraham>
zcorpan: I had to disable the tests in http://w3c-test.org/workers/semantics/structured-clone/ because they were playing merry hell with the next test

[12:03:19.0000] <SamB>
what, you can't get a fresh instance of the thing-under-test?

[12:03:23.0000] <jgraham>
Also, they behave differently on my local computer compared to infrastructure

[12:03:36.0000] <SamB>
eeinteresting

[12:03:39.0000] <zcorpan>
jgraham: intredasting

[12:03:44.0000] <jgraham>
SamB: I could, but there is a tradeoff between isolation and performance

[12:03:51.0000] <SamB>
jgraham: true

[12:04:29.0000] <jgraham>
(I could probably add a restart-after feature to the test harness so that tests known to behave badly could still be run, but I haven't, yet)

[12:05:31.0000] <zcorpan>
jgraham: do you think it would help if it was split up to lots of separate files?

[12:07:05.0000] <jgraham>
zcorpan: Well then at least I could just disable the subset that actually cause problems

[12:07:43.0000] <zcorpan>
yep. might also be easier to figure out what the problem actually is

[12:08:09.0000] <jgraham>
I *suspect* there is a gecko bug here, but I am *so* close to getting a complete set of green testruns that I haven't wanted to investigate everything

[12:08:10.0000] <zcorpan>
or maybe the problem goes away altogether when splitting, which is both good and bad

[12:08:21.0000] <jgraham>
Yeah

[12:08:52.0000] <jgraham>
Well I guess we still have the old version if it does, although people will be less motivated to care

[12:09:27.0000] <zcorpan>
yeah

[12:09:47.0000] <zcorpan>
maybe i should dress it up as an acid test instead :-P

[12:40:30.0000] <Hixie>
my kittens it's depressing seeing the number of changes the htmlwg make to the spec that are just bogus

[12:40:41.0000] <jtcranmer>
dare I ask?

[12:40:45.0000] <Hixie>
not just thing i disagree with, i mean, things where the change is not even what the htmlwg intends

[12:40:56.0000] <Hixie>
jtcranmer: i'm going through bug mail looking at old checkins

[12:41:28.0000] <SamB>
any choice examples?

[12:41:45.0000] <Hixie>
https://github.com/w3c/html/commit/d601f6af9914aa0dadd3277c8771ed46995f61de is my favourite so far

[12:42:07.0000] <Hixie>
replaces "must" with "need", so it's no longer normative

[12:42:36.0000] <Hixie>
if read literally, it actually gives the wrong effect (e.g. if the contents are "\n\n\n", it suggests that the markup should be "\n\n", whereas it should be "\n\n\n\n")

[12:43:00.0000] <Hixie>
plus it talks about intent rather than describing the mapping normatively (referring to the actual contents)

[12:43:03.0000] <Hixie>
etc

[12:43:05.0000] <Hixie>
it's just a microcosm of error

[12:45:37.0000] <jtcranmer>
so... htmlwg is run by a bunch of phenomenal idiots

[12:45:55.0000] <jtcranmer>
good to know that I don't have to worry about it

[12:46:00.0000] <othermaciej>
I’m not clear on how the previous MUST is a reasonable author conformance requirement

[12:46:07.0000] <jtcranmer>
unless someone tries to convince me that I need to write an HTML parser to process email

[12:46:12.0000] <othermaciej>
it tells you conditionally what to do if you want a certain effect

[12:46:49.0000] <jtcranmer>
/me stares at the change

[12:46:54.0000] <othermaciej>
that is a description of implementation behavior, not of author requirements

[12:46:56.0000] <Hixie>
othermaciej: that section is essentially telling you how to serialise a DOM

[12:48:00.0000] <othermaciej>
Oh, I can’t tell what section - I assumed the “by the author” meant its an authoring requirements section

[12:48:28.0000] <Hixie>
it's the syntax section, describing how you serialise a DOM

[12:48:37.0000] <Hixie>
as opposed to the parsing section

[12:48:57.0000] <Hixie>
so it's for "authors" as opposed to "UAs" but it's still normative :-)

[12:49:12.0000] <jtcranmer>
the original statement was mildly problematic

[12:50:08.0000] <othermaciej>
mmm, nope, its in 12.1 Writing HTML documents, nothing about serializing a DOM there

[12:50:33.0000] <jtcranmer>
the new statement is slightly unclear as well

[12:50:33.0000] <othermaciej>
afaict this is the section conformance checkers should use to check conformance of any document

[12:50:40.0000] <othermaciej>
Section 12.3 is Serializing HTML Fragments

[12:50:41.0000] <jtcranmer>
/me sighs

[12:50:57.0000] <Hixie>
othermaciej: 12.1 is a description of how you serialise a dom

[12:51:02.0000] <jtcranmer>
this is why I like C++'s method of explictly including [Note: ] fragments

[12:51:14.0000] <zcorpan>
othermaciej: "conformance checkers must use the requirements given in the next section ("parsing HTML documents")."

[12:51:35.0000] <Hixie>
jtcranmer: we have "note" fragments too. in green, even.

[12:52:05.0000] <jtcranmer>
so you could say [Note: to make a <pre> that starts with an empty line, two linebreaks would be inserted, as the first one is semantically invisible.]

[12:52:16.0000] <Hixie>
othermaciej: e.g. "The next few characters of a start tag must be the element's tag name"

[12:52:24.0000] <Hixie>
othermaciej: an element is something from a DOM

[12:52:40.0000] <othermaciej>
Hixie: come on, there’s enough genuine errors that you don’t have to make bad faith arguments

[12:52:48.0000] <Hixie>
?

[12:52:53.0000] <Hixie>
this isn't a bad faith argument

[12:53:12.0000] <Hixie>
just happened to be my favourite of the run i had looked at

[12:54:03.0000] <othermaciej>
12.1 is not about serializing a DOM, its authoring conformance requirements for correct syntax; there is literally no mention of serialization

[12:54:25.0000] <othermaciej>
it is true that a serializer would also be required to output correct syntax

[12:54:32.0000] <othermaciej>
but there’s no reference to a source DOM anywhere in there

[12:54:33.0000] <Hixie>
the word "serialialisation" isn't used, sure. but that's what it's describing nonetheless.

[12:55:14.0000] <Hixie>
the whole section is phrased in terms of how you describe a tree of elements

[12:55:22.0000] <Hixie>
elements only exist in DOMs

[12:56:18.0000] <zcorpan>
if you're writing markup from scratch, do you first imagine the DOM and then serialize that? :-)

[12:56:39.0000] <othermaciej>
its restrictions on valid syntax, not specifically instructions for serializing

[12:56:59.0000] <mathiasbynens>
annevk: are you aware of any test cases for the Encoding Standard? specifically for the legacy encodings

[12:57:20.0000] <annevk>
mathiasbynens: http://dump.testsuite.org/encoding/ has tests

[12:57:41.0000] <annevk>
mathiasbynens: needs a lot more though, darobin might have written some more maybe?

[12:58:08.0000] <annevk>
(those tests need to be checked for accuracy by the way)

[12:59:03.0000] <zcorpan>
and port to web-platform-tests?

[12:59:06.0000] <othermaciej>
you could argue that any time you make a document from scratch you are implicitly serializing an imaginary DOM, but that would not be the way most folks think about it

[12:59:26.0000] <othermaciej>
speaking of which, I am having trouble figuring out what this means: “A table element must not contain tr elements, even though these elements are technically allowed inside table elements according to the content models described in this specification. (If a tr element is put inside a table in the markup, it will in fact imply a tbody start tag before it.)”

[12:59:33.0000] <mathiasbynens>
annevk: ta

[12:59:36.0000] <othermaciej>
on whom is that must requirement?

[12:59:43.0000] <Ms2ger>
Authors

[12:59:54.0000] <othermaciej>
but authors are allowed to write <table><tr>

[13:00:01.0000] <Ms2ger>
Yeah

[13:00:13.0000] <Ms2ger>
But that doesn't lead to a table containing a tr

[13:00:22.0000] <Ms2ger>
At least not if "contain" means "child"

[13:00:53.0000] <othermaciej>
is it an obscure way to say your document is invalid if you use DOM methods to insert a <tr> as a direct child of a <table>?

[13:01:10.0000] <annevk>
othermaciej: you can also use XML

[13:01:17.0000] <zcorpan>
no, that section doesn't apply to DOM methods

[13:01:22.0000] <othermaciej>
that section specifically does not apply to XML

[13:01:34.0000] <Ms2ger>
Then what is it talking about?

[13:01:45.0000] <Hixie>
othermaciej: it's saying that a DOM that is serialised according to that section cannot have a <tr> in a <table>

[13:02:00.0000] <Hixie>
othermaciej: it's an additional restriction on the content model

[13:02:08.0000] <Hixie>
othermaciej: specifically for DOMs that are serialised per this section

[13:02:12.0000] <zcorpan>
you're not allowed to imagine <tr> as a child of <table> when writing your text/html

[13:02:33.0000] <Hixie>
yeah, the DOM you're serialising is usually just an imagined one, that's a good way to view this

[13:02:35.0000] <zcorpan>
you have to imagine <tr> as child of <tbody> as child of <table>, and then it's ok to write it as <table><tr> :-)

[13:02:38.0000] <othermaciej>
So any serializer is required to output <table><tbody><tr> instead of Mtable><tr>?

[13:03:07.0000] <Hixie>
no, it means if you pass a DOM to this section, it cannot have a TR as a child of a TABLE

[13:03:17.0000] <Hixie>
what zcorpan said

[13:03:32.0000] <Hixie>
you have to imagine <tr> as child of <tbody> as child of <table>, and then it's ok to write it as <table><tr>

[13:03:53.0000] <othermaciej>
having a conformance requirement on the input to an algorithm makes no sense (assuming arguendo that this even describes an algorithm)

[13:04:13.0000] <othermaciej>
how would you even check if someone’s imaginary DOM is valid?

[13:04:18.0000] <Hixie>
content models are nothing but conformance requirements on the inputs to algorithms

[13:04:34.0000] <Hixie>
well it might not be imaginary

[13:04:53.0000] <othermaciej>
content models are requirements for correct syntax of a textual representation of HTML

[13:05:14.0000] <zcorpan>
othermaciej: it's planned for the next iteration of Google Glasses

[13:05:18.0000] <othermaciej>
a content model requirement that can’t be checked in the serialized output has no effect

[13:07:26.0000] <SamB>
so basically, you run the parser FIRST then worry about the content model ...

[13:07:58.0000] <SamB>
othermaciej: you run their imaginary DOM through a validator, obviously

[13:09:01.0000] <othermaciej>
if it fails your imagination validator, are you allowed to correct the imaginary error? (and then write exactly what you would have if you hadn’t fixeed the error?)

[13:09:56.0000] <zcorpan>
of course

[13:10:18.0000] <othermaciej>
I guess it’s saying that you are allowed to write <table><tr>, but you MUST imagine there is a <tbody> there

[13:11:42.0000] <zcorpan>
othermaciej: <html><head><body> and <colgroup> are similar actually

[13:12:19.0000] <zcorpan>
but they happen to have the same content model in xhtml and text/html

[13:12:59.0000] <othermaciej>
so in XHTML, you are allowed to write <table><tr> without imagining the <tbody>?

[13:13:04.0000] <zcorpan>
yes

[13:13:05.0000] <SamB>
wait you mean text/html has its own content models, not just quirky parsing rules?

[13:13:37.0000] <zcorpan>
SamB: yeah there are a few differences between text/html and xhtml content models

[13:13:48.0000] <zcorpan>
<table><tr> is one

[13:13:54.0000] <Ms2ger>
And noscript

[13:13:55.0000] <zcorpan>
<iframe>'s content is another

[13:14:36.0000] <SamB>
oh, right, noscript

[13:14:38.0000] <SamB>
forgot about that

[13:15:02.0000] <SamB>
it's really the wrong approach nowadays because whether scripts run is not that simple anymore

[13:15:21.0000] <SamB>
aside from the parsing nightmare, I mean

[13:16:06.0000] <zcorpan>
SamB: do you mean noscript should be disallowed in text/html also?

[13:16:19.0000] <SamB>
it's not marked obsolescant?

[13:17:16.0000] <zcorpan>
not quite sure what that word means but it's not marked as such

[13:19:06.0000] <SamB>
I think I should have just said "obsolete"

[13:19:26.0000] <SamB>
and I'm not actually sure what difference (if any) there is between those words other than spelling/pronunciation

[13:20:07.0000] <mathiasbynens>
annevk: can haz `single-octet-raw.phps`?

[13:21:03.0000] <annevk>
mathiasbynens: I think that's a loop from 0 to 255 and just does chr(n)

[13:21:26.0000] <annevk>
mathiasbynens: maybe it starts at 127

[13:21:49.0000] <annevk>
128*

[13:22:47.0000] <mathiasbynens>
and then `content-type:text/html;charset=label`, i suppose

[13:23:10.0000] <annevk>
maybe text/plain, but yeah

[13:23:17.0000] <mathiasbynens>
oh, right

[13:24:12.0000] <zcorpan>
mathiasbynens: what do you want the tests for, out of curiosity?

[13:24:41.0000] <Hixie>
tantek: (c/o annevk) see w3c bugs 24840-24843

[13:26:31.0000] <annevk>
How does https://github.com/w3c/html/commit/9d699201cb034e495c46e6120811599b93cba7da even make sense? Anyway, I got other things to do

[13:26:48.0000] <mathiasbynens>
zcorpan: writing encoders/decoders for the legacy single-byte encodings in the Encoding standard, to use as part of another hobby project

[13:28:04.0000] <zcorpan>
mathiasbynens: would it be troublesome to convert them to w-p-t format? :-)

[13:29:36.0000] <mathiasbynens>
zcorpan: i might just do that

[13:30:05.0000] <zcorpan>
splendid

[13:30:39.0000] <zcorpan>
but don't get too excited or Ms2ger will be sending chocolate your way

[13:30:54.0000] <mathiasbynens>
that sounds terrible

[13:31:08.0000] <Ms2ger>
Probably cheaper than to zcorpan, too

[13:31:24.0000] <zcorpan>
yes. also darobin will be concerned about your health eating all that chocolate

[13:31:41.0000] <mathiasbynens>
annevk: if you’re ever pushing to the encoding standard server again, consider either enabling CORS for http://dump.testsuite.org/encoding/single-octet-raw.php or just adding http://dump.testsuite.org/encoding/single-octet-raw.phps

[13:31:46.0000] <zcorpan>
and your significant other will post pictures on facebook about said chocolate

[13:31:58.0000] <Ms2ger>
Now I'm sad I missed that

[13:32:17.0000] <Ms2ger>
I can send chocolate for said significant other too, of course

[13:34:10.0000] <annevk>
mathiasbynens: dump.testsuite.org is not that server, but yeah, maybe if you ping me in a couple of weeks during the day or so

[13:34:45.0000] <mathiasbynens>
will do, thanks :)

[13:41:40.0000] <zcorpan>
Hixie: btw i think it's time soon to take over <img>

[13:41:50.0000] <Hixie>
k

[13:42:00.0000] <Hixie>
i haven't gotten to the loading refactoring yet unfortunately

[13:43:53.0000] <zcorpan>
ok. i guess i can fix that

[13:47:11.0000] <Hixie>
zcorpan: that would certainly be fine by me. Happy to help with it, too. I didn't mean to dump it in your lap.

[13:47:36.0000] <zcorpan>
Hixie: ok cool

[13:48:21.0000] <zcorpan>
Hixie: how do you envision the split to work? you take in source text that is inserted in `source` before running anolis?

[13:48:31.0000] <Hixie>
yeah

[13:48:38.0000] <Hixie>
there's some <!-- --> markers in the <img> section already

[13:49:19.0000] <Hixie>
so my plan is to just replace those with a thing that imports a file from you

[13:49:27.0000] <Hixie>
which i would grab via HTTP from somewhere, probbaly

[13:49:30.0000] <Hixie>
that part is up to you

[13:49:41.0000] <estellevw>
Is the capture attribute going to be a separate attribute, or part of the value of the accept attribute. I see it in the discussions but not the HTML5 spec.

[13:49:44.0000] <zcorpan>
Hixie: how can i generate the spec to see that the xrefs and stuff work?

[13:49:46.0000] <estellevw>
I did find it here: http://www.w3.org/TR/html-media-capture/#the-capture-attribute

[13:50:06.0000] <zcorpan>
is it enough to run vanilla anolis?

[13:50:11.0000] <Hixie>
zcorpan: and as far as <source> goes, if you really are gonna use <source>, we'll try to make it work, and if it ends up being too many changes, we can do the same for that

[13:50:15.0000] <Hixie>
zcorpan: hmm

[13:50:22.0000] <Hixie>
zcorpan: probably need to stick a generic header on the top

[13:50:26.0000] <Hixie>
zcorpan: but yeah, that should work

[13:50:28.0000] <estellevw>
as a separate attribute, but am wondering where it's going to land, if at all

[13:50:36.0000] <Hixie>
zcorpan: however i'm planning on moving away from anolis in the medium term.

[13:50:46.0000] <zcorpan>
Hixie: to what?

[13:50:54.0000] <Hixie>
zcorpan: something of my own creation

[13:51:07.0000] <zcorpan>
that's why you're writing an html parser?

[13:51:09.0000] <Hixie>
yeah

[13:51:16.0000] <Hixie>
anolis is just too slow for my needs at this point

[13:51:17.0000] <zcorpan>
ok

[13:51:19.0000] <Hixie>
it's becoming painful

[13:51:33.0000] <Hixie>
anyway i'm sure i'll be able to provide you a tool you can use

[13:51:46.0000] <Hixie>
either a cgi script or a native app or something

[14:07:53.0000] <zcorpan>
Hixie: i think i'll put the file in https://github.com/ResponsiveImagesCG/picture-element (which means a few other people will have ability to change it)

[14:09:05.0000] <Hixie>
so long as you have ultimate responsibility, how you do it is up to you :-)

[14:11:15.0000] <zcorpan>
Hixie: what is the <!-- --> marker?

[14:11:59.0000] <Hixie>
<!-- START OF PICTURE SECTION --> and <!-- END OF PICTURE SECTION -->

[14:13:18.0000] <zcorpan>
ok, i'll take a look at this tomorrow. thx

[14:13:52.0000] <Hixie>
thank _you!_

[14:14:24.0000] <zcorpan>
welcome :-)

[15:11:29.0000] <TabAtkins>
zcorpan: I'm happy to put the quirk into Selectors.

[15:11:47.0000] <zcorpan>
TabAtkins: great!

[15:12:45.0000] <TabAtkins>
Though, hm. Is this *all* Selectors-based matching (including querySelector() et al) or just stylesheets?

[15:12:58.0000] <zcorpan>
all

[15:13:00.0000] <TabAtkins>
kk

[15:13:10.0000] <TabAtkins>
Just making sure it belonged in Selectors and not, I guess, Syntax.

[15:14:11.0000] <TabAtkins>
Isn't tagname CI too?

[15:14:41.0000] <zcorpan>
no, tagname is lowercased

[15:14:47.0000] <zcorpan>
for html elements

[15:14:53.0000] <zcorpan>
in html documents

[15:15:07.0000] <zcorpan>
that's specced in html

[15:15:31.0000] <TabAtkins>
Hm, I was pretty sure that "P { color: green; }" matched.

[15:15:41.0000] <TabAtkins>
Yes.

[15:15:45.0000] <zcorpan>
yes, the selector is lowercased

[15:15:54.0000] <zcorpan>
and the tag in html parsing is lowercased

[15:16:02.0000] <TabAtkins>
...where is that tagname lowercasing specified?

[15:16:11.0000] <zcorpan>
but it won't match document.createElementNS(html_ns, 'P')

[15:16:23.0000] <zcorpan>
http://www.whatwg.org/specs/web-apps/current-work/multipage/selectors.html#case-sensitivity

[15:16:53.0000] <TabAtkins>
Ah, that is an HTML-specific quirk.  Gotcha.

[15:17:02.0000] <TabAtkins>
I should probably add a note reffing that section, though.

[15:17:07.0000] <zcorpan>
yeah, everything else is case sensitive

[15:17:56.0000] <zcorpan>
you could make Selectors say that stuff is case-sensitive unless the host language specifies something else

[15:19:08.0000] <TabAtkins>
Well, everything's CS by default unless specified otherwise.

[15:20:53.0000] <zcorpan>
TabAtkins: http://dev.w3.org/csswg/selectors4/#case-sensitive says the host language has to define whether it's CS

[15:21:17.0000] <TabAtkins>
Bah, I forget all the things that Selectors defines.  I'll tweak that.

[15:22:14.0000] <zcorpan>
ok good :-)

[15:22:25.0000] <zcorpan>
/me -> sleep

[15:25:06.0000] <zewt>
Your download will start in 5 seconds... <- dear internet, stop that

[15:58:37.0000] <zewt>
having to deal with libraries so old they require setjmp makes me unhappy

[16:07:36.0000] <SamB>
zewt: you think they should have switched to C++ just for exceptions?

[16:07:57.0000] <SamB>
(not that I would argue otherwise or anything!)

[16:21:20.0000] <zewt>
better off just having error returns everywhere than using that

[16:21:36.0000] <zewt>
setjmp is massively evil

[16:23:16.0000] <SamB>
zewt: I guess I better not mention gdb

[16:24:05.0000] <zewt>
not sure what that has to do with setjmp, heh

[16:55:32.0000] <Hixie>
MikeSmith, hsivonen: which instance of the validator is the most up to date?


2014-05-06
[17:00:06.0000] <nicholasserra>
Anyone here familiar with the html5lib python library?

[17:00:34.0000] <TabAtkins>
Kinda.

[17:00:44.0000] <TabAtkins>
(I use it, but not sure how "familiar" I am with it.)

[17:00:53.0000] <TabAtkins>
If gsnedders is around, he's one of the authors.

[17:01:31.0000] <nicholasserra>
Awesome. Just seeing issues with the order of attributes not consistent from one environment to another.

[17:01:41.0000] <nicholasserra>
When parsing some html

[17:02:00.0000] <gsnedders>
Yes. We don't really preserve attribute order.

[17:02:46.0000] <gsnedders>
Most of the tree structures we parse to don't keep order of attributes. lxml currently does, but it explicitly documents that the order is undefined.

[17:03:16.0000] <nicholasserra>
gsnedders: So is it just random? Problem is that locally I have tests that check for appropriate dom. But then when I push to travis.ci, travis runs those same tests and gets a different order, and fails.

[17:03:23.0000] <TabAtkins>
You can pass alphabetical_attributes=True to the serializer constructor, though.

[17:03:34.0000] <nicholasserra>
TabAtkins:  I think that would save me

[17:03:39.0000] <gsnedders>
Right, that's on the serializer side

[17:03:42.0000] <TabAtkins>
walker = html5lib.treewalkers.getTreeWalker("lxml")

[17:03:42.0000] <TabAtkins>
s = html5lib.serializer.htmlserializer.HTMLSerializer(alphabetical_attributes=True)

[17:03:42.0000] <TabAtkins>
rendered = s.render(walker(self.document))

[17:03:51.0000] <gsnedders>
TabAtkins: Don't do that.

[17:04:04.0000] <TabAtkins>
gsnedders: Cool, document how to do it otherwise. ^_^

[17:04:12.0000] <zewt>
get.java.out.of.my.python

[17:04:17.0000] <gsnedders>
TabAtkins: html5lib.serialize(self.document, tree="lxml", alphabetical_attributes=Trues)

[17:04:31.0000] <gsnedders>
I think

[17:04:36.0000] <gsnedders>
I don't know, I'm watching Buffy! :P

[17:04:55.0000] <nicholasserra>
here's how i'm using it

[17:04:55.0000] <nicholasserra>
https://gist.github.com/nicholasserra/e86a2e1762b11643be37

[17:05:28.0000] <TabAtkins>
Yeah, looks like that worked.

[17:05:41.0000] <nicholasserra>
gsnedders: Can I pass alphabetical to the .render()?

[17:05:44.0000] <TabAtkins>
nicholasserra: So yeah, just add alphabetical_attributes there.

[17:05:52.0000] <TabAtkins>
To the HTMLSerializer() call.

[17:05:58.0000] <TabAtkins>
Or shorten your code as gsnedders shows.

[17:06:00.0000] <gsnedders>
nicholasserra: nah, it needs to be when creating HTMLSerializer

[17:06:07.0000] <nicholasserra>
Ah, beautiful.

[17:06:08.0000] <gsnedders>
But really use the shorter version :)

[17:06:32.0000] <gsnedders>
TabAtkins: And that isn't documented anywhere? Oh. :)

[17:06:55.0000] <TabAtkins>
gsnedders: Who knows, it might be.  But I certainly didn't find it when I dug around to figure out how to do what I was doing.

[17:07:05.0000] <TabAtkins>
And apparently nicholasserra didn't find it either. ^_^

[17:07:12.0000] <gsnedders>
TabAtkins: I dunno, the documentation isn't that great, I know.

[17:08:16.0000] <gsnedders>
At some point we'll get to 1.0 and have decent docs. :)

[17:09:21.0000] <TabAtkins>
It would be cool if alphabetical_attributes were on by default, because almost everyone either (a) doesn't care, or (b) needs some sort of stable attribute order but probably doesn't know it.

[17:09:52.0000] <TabAtkins>
The set of people who (c) don't need stable order and don't want to pay the cost, is so small to not ever matter I suspect. ^_^

[17:10:14.0000] <nicholasserra>
Looks good locally, we'll see if it passes CI ^_^ thanks gsnedders TabAtkins

[17:10:33.0000] <gsnedders>
TabAtkins: or (d) wants to rely upon the defined-undefined lxml stable ordering

[17:10:39.0000] <gsnedders>
TabAtkins: (see fantasai)

[17:10:42.0000] <TabAtkins>
"stable"

[17:10:53.0000] <TabAtkins>
What? How does fantasai want to rely on that?

[17:11:03.0000] <gsnedders>
Wants ordering to roundtrip

[17:11:13.0000] <gsnedders>
I can't remember. She had seem decent reason. :)

[17:11:29.0000] <gsnedders>
*some

[17:11:34.0000] <TabAtkins>
Attributes are unordered anyway. Depending on attribute order is the devil's work.

[17:12:08.0000] <gsnedders>
I think it was to do with readibility of parsed/serialized documents, and having an order that aids readability

[17:12:41.0000] <zewt>
defined undefined and actually having actively unstable order (eg. hash order) is fine, what's evil is APIs that appear to be in a nice, obvious order (like alphabetical) but whose docs say "by the way we don't guarantee any order"

[17:13:36.0000] <gsnedders>
(AFAIK lxml does this because libxml2 does that, and it gets it by virtue of wrapping it, and doesn't want to provide further guarantees than the lower layer API)

[17:14:30.0000] <nicholasserra>
gsnedders: Can I use that shorthand method if i'm using HTMLSanitizer tokenizer?

[17:14:53.0000] <gsnedders>
nicholasserra: maybe? there might be a sanitize=True option or something?

[17:15:15.0000] <gsnedders>
nicholasserra: the docstring on HTMLSerializer will probably help?

[17:16:25.0000] <nicholasserra>
Looks like it can, awesome gsnedders

[17:17:15.0000] <gsnedders>
nicholasserra: (really I'm just guessing at what I'd have called that API if I introduced it now, I don't actually know off-hand :))

[18:34:08.0000] <MikeSmith>
Hixie: http://validator.w3.org/nu/ is most up-to-date, currently

[18:42:23.0000] <a-ja>
MikeSmith: know if it now allows header content in <summary> ?

[18:46:07.0000] <MikeSmith>
a-ja: it allows whatever is in the trunk at https://github.com/validator/syntax/commits/master

[18:47:18.0000] <MikeSmith>
a-ja: https://github.com/validator/syntax/commit/d214cdf4e04a522205919bc1c92001ae547b8f30

[18:53:09.0000] <a-ja>
MikeSmith: Error: XHTML element h2 not allowed as child of XHTML element summary in this context. (Suppressing further errors from this subtree.)

[18:55:38.0000] <MikeSmith>
a-ja: you're testing from teh command line?

[18:55:43.0000] <a-ja>
MikeSmith: same in text/html, so perhaps that hasn't been committed?

[18:55:55.0000] <MikeSmith>
yeah it's been committed

[20:22:36.0000] <Hixie>
MikeSmith: ah. so what's the story with <table border>? i am going through old bugmail and i've come across conflicting bugs on it. In one, though, you said you'd decided to make it an error? the current validator makes it a warning, AFAICT. (just curious)

[20:26:29.0000] <MikeSmith>
Hixie: the only place it's not an error is in the W3C service. I was compelled to make it a warning there due to some idiot WG decision that was made way back when, based on a change proposal from Leif

[20:26:55.0000] <MikeSmith>
I opened a new HTML WG bug for thatーhttps://www.w3.org/Bugs/Public/show_bug.cgi?id=24591

[20:28:20.0000] <cabanier>
MikeSmith: https://bugs.webkit.org/show_bug.cgi?id=132460 landed :-) so canvas should have correct behavior for non-finite value in the WebKit

[20:28:47.0000] <MikeSmith>
cabanier: nice. so is that in the latest nightly already?

[20:29:08.0000] <cabanier>
MikeSmith: should be there tomorrow if they are able to build one

[20:29:15.0000] <MikeSmith>
ok

[20:29:38.0000] <MikeSmith>
cabanier: does this mean you fixed the general WebIDL nonconformance in WebKit?

[20:30:08.0000] <MikeSmith>
damn that's a lot of patches

[20:30:22.0000] <cabanier>
MikeSmith: no, just for canvas. I was going to do the other interfaces too but that introduced too many changes

[20:30:28.0000] <MikeSmith>
ok

[20:30:38.0000] <MikeSmith>
well it's still a win

[20:30:39.0000] <cabanier>
MikeSmith: if you know of issues there, let me know

[20:31:08.0000] <MikeSmith>
cabanier: will do. thanks for taking time to fix this

[20:31:53.0000] <MikeSmith>
since Firefox was already passing those tests, I think that means we'll get the less-than-two-passing list down further

[20:32:22.0000] <MikeSmith>
http://w3c.github.io/test-results/2dcontext/less-than-2.html

[20:33:37.0000] <MikeSmith>
actually if you fix covers all those *nonfinite* cases, that'll reduce the list by 5 and bring it down to just 3 tests

[20:35:39.0000] <MikeSmith>
actually I should back out that hit-regions test anyway, since it really wasn't done the right way and it wouldn't be providing much coverage even if it was done right, since it's only testing one small part of the hit-regions spec

[20:39:46.0000] <MikeSmith>
cabanier: btw I don't know how to build a full WebKit binary (e.g., WebKit.app on OS X), as opposed to just building DumpRenderTree

[20:41:04.0000] <cabanier>
MikeSmith: if you can build dumprendertree, you have a working webkit. Just execute the "run-safari" script and it should launch

[20:41:48.0000] <cabanier>
MikeSmith: 2dcontext/fill-and-stroke-styles/2d.pattern.image.broken.html has not landed yet but I will try for tomorrow

[20:41:59.0000] <cabanier>
(I have questions for the reviewer)

[20:44:05.0000] <MikeSmith>
cabanier: ok, thanks

[20:48:43.0000] <MikeSmith>
cabanier: are there tests for hit regions somewhere?

[20:49:54.0000] <cabanier>
MikeSmith: I have one in this bug: https://bugzilla.mozilla.org/show_bug.cgi?id=979692

[20:50:06.0000] <cabanier>
MikeSmith: I had another demo that I'm looking for right now

[20:50:06.0000] <MikeSmith>
/me looks

[20:50:48.0000] <MikeSmith>
cabanier: Gecko's the only UA the support hit regions at this point, right?

[20:51:10.0000] <cabanier>
MikeSmith: as soon as the patch goes in, yes :-)

[20:51:16.0000] <MikeSmith>
ok

[20:53:11.0000] <MikeSmith>
cabanier: I'm trying to remember why it was decided to keep hit regions in the CR document, given that we don't have any tests for it and we only have one UA that's going to support it any time soon

[20:54:41.0000] <cabanier>
MikeSmith: other example: http://codepen.io/anon/pen/zEsxa?editors=101

[20:55:18.0000] <MikeSmith>
/me looks

[20:55:24.0000] <cabanier>
MikeSmith: the a11y people refused to let us go to CR unless there was a way to make canvas accessible

[20:56:07.0000] <cabanier>
MikeSmith: that example will only work with a firefox build that supports hit regions

[20:57:15.0000] <MikeSmith>
cabanier: is there some buildtime flag I need to set to do that? or I just need to manually apply your patch and build?

[20:57:42.0000] <cabanier>
MikeSmith: If you wait for this try build to finish: https://tbpl.mozilla.org/?tree=Try&rev=41f00121067b

[20:58:44.0000] <cabanier>
MikeSmith: you can download the build from there and unzip it locally. Then run -> about:config -> canvas.hitregions.enabled

[20:59:20.0000] <MikeSmith>
cabanier: by making the refusal they're ensuring that the 2dcontext document will not go to Rec this year. I don't see any way that the Director is going to approve transition of that document without tests. And without hit regions being supported in at least 2 engines. And I don't see that happening by the end of this year.

[20:59:46.0000] <SamB>
MikeSmith: they may not care

[20:59:49.0000] <MikeSmith>
cabanier: OK, thanksーwill give it try

[20:59:59.0000] <MikeSmith>
SamB: they care

[21:00:22.0000] <MikeSmith>
SamB: I think they just imagine that some magic is going to happen

[21:00:23.0000] <SamB>
you mean they mind, or they intend this?

[21:00:26.0000] <SamB>
oh

[21:00:30.0000] <SamB>
so they're just insane then

[21:00:37.0000] <MikeSmith>
no comment

[21:01:05.0000] <SamB>
/me assumes that means "yes"

[21:01:06.0000] <cabanier>
MikeSmith: it didn't seem like we had a choice. I would still like them to be as at-risk

[21:01:41.0000] <SamB>
I don't think what the spec sasy re: their being at-risk has any relevance on the reality that they are

[21:07:15.0000] <Hixie>
MikeSmith: ah, ok. any idea when henri's instance will be updated?

[21:07:16.0000] <MikeSmith>
cabanier: you have a choice actually. You're the ones with your names on the document. If anybody has a choice it's you. You just tell them no. If they want to object, they can object to the Director and I then spend 20 seconds on the transition call explaining that we dropped a feature from the document because we had no shipping implementations for it and no tests for it.

[21:07:47.0000] <MikeSmith>
Hixie: no idea. Henri's not had much time for it for a while.

[21:07:59.0000] <MikeSmith>
Hixie: I can run an conforming instance of it elsewhere

[21:08:19.0000] <Hixie>
oh there's no rush

[21:08:22.0000] <Hixie>
i'm just curious

[21:17:31.0000] <cabanier>
MikeSmith: we should have done that. The process has stalled for so long that the spec is already out of date :-(

[21:39:32.0000] <MikeSmith>
Hixie: I just set up a conforming instance of the validator at http://sideshowbarker.net:8888/ and will keep it up to date with changes

[21:42:01.0000] <MikeSmith>
Hixie: if it'd be possible to run a validator at validator.whatwg.org I'd be happy to maintain it. Either actually running on your dreamhost or with the DNS set up to point to http://sideshowbarker.net:8888/ or wherever

[22:42:17.0000] <Hixie>
MikeSmith: i think it'd be as much of a mistake for the whatwg to run a validator as it is for the w3c to run one. it implies that it is canonical, and discourages competition. the w3c validator was a disaster in the html4 days for exactly that reason -- completely stalled validator development until we started the new html spec.

[22:51:52.0000] <MikeSmith>
Hixie: well I wish some other people would run public instances of the validator. But I guess I can lead by example can keep the one running at sideshowbarker.net

[22:52:06.0000] <Hixie>
what i'd like is more independent implementations of validators

[22:52:18.0000] <MikeSmith>
well, that too

[23:20:28.0000] <caitp>
if html5 is a new spec, then surely breaking changes from html4 brokenness are both valid and welcome

[23:21:08.0000] <SamB>
caitp: only if nobody used that brokenness (especially if it was never implemented)

[23:22:27.0000] <caitp>
flush those deprecated broken apis and build anew 8)

[23:29:17.0000] <SamB>
you're confusing us with the xhtml 2 people

[23:31:05.0000] <caitp>
oh not at all, I would never

[23:33:30.0000] <caitp>
if anything, I'm confusing you with people who care about a sane platform 8) but with a sense of humour, of course

[23:41:43.0000] <MikeSmith>
caitp: will try to review your web-platform-tests PRs unless somebody else gets to them first

[23:42:12.0000] <caitp>
cheers

[00:50:56.0000] <tobie>
darobin: hey, trying to run webidl2.js test suite to no avail (plenty of tests are failing). Is this a know issue, a bug, or a problem with my setup.

[00:51:18.0000] <darobin>
tobie: saw the bug, I'll look at it in ~30min tops

[00:51:24.0000] <darobin>
it's not normal

[00:51:28.0000] <tobie>
ty

[00:51:40.0000] <darobin>
tobie: just off the top of my head, you have submodules set up?

[00:52:22.0000] <tobie>
Yes. I had issues with JSCOV stuff, but fixed that in the PR I sent you.

[00:52:52.0000] <tobie>
So these issues are on the patched version.

[00:53:18.0000] <tobie>
Without the patch, I just error at load time of invalid.js

[01:24:15.0000] <zcorpan>
mathiasbynens: you can remove "unicorn⊙1j 1x, " (redundant with src)

[01:25:09.0000] <darobin>
tobie: all tests pass here

[01:25:47.0000] <darobin>
can you paste the error logs online?

[01:25:53.0000] <zcorpan>
mathiasbynens: also, is it really wise to suggest 3x and 4x images right now? sure there are such screens but do you see visual difference from 2x? is it worth the extra bandwidth?

[01:27:06.0000] <mathiasbynens>
zcorpan: oh cool, didn’t know src is used for `1x` by default

[01:27:29.0000] <mathiasbynens>
zcorpan: i wanted to include 3x and 4x to recognize that such screens exist… felt bad omitting them

[01:28:03.0000] <zcorpan>
mathiasbynens: would you use 3x and 4x images in production on a site?

[01:28:53.0000] <mathiasbynens>
zcorpan: i don’t know. i’ve never had the pleasure of using a 3x/4x screen

[01:29:19.0000] <zcorpan>
what do you think happens with the file size of a 4x image?

[01:30:02.0000] <mathiasbynens>
sure, it blows up

[01:31:08.0000] <zcorpan>
yep, and worse you probably wouldn't be able to tell the difference from a 2x image on a 4x screen unless you literally put your nose to the screen

[01:33:01.0000] <darobin>
zcorpan: so... there's a Google Glass use case?

[01:33:03.0000] <tobie>
darobin: darn, here's the dump: https://gist.github.com/tobie/c3e5897aa8339f225b64

[01:33:07.0000] <darobin>
/me gets his coat

[01:33:54.0000] <zcorpan>
/me slaps darobin with darobin's google glasses

[01:34:02.0000] <darobin>
:)

[01:34:55.0000] <darobin>
tobie: hmmm, so all the AST tests fail, basically?

[01:34:57.0000] <darobin>
that looks bad

[01:35:09.0000] <zcorpan>
mathiasbynens: in practice i've seen people use 1x, 1.5x and 2x

[01:35:21.0000] <tobie>
darobin: pretty much, yes.

[01:35:58.0000] <darobin>
tobie: are you running against the very latest develop?

[01:36:14.0000] <jgraham>
zcorpan: The file size stays the same (you didn't say which image, so I'm assuming it's just a solid colour)? Do I win?

[01:36:18.0000] <mathiasbynens>
the 1.5x being for non-retina iPads and such?

[01:36:46.0000] <tobie>
darobin: running against a patched version of latest develop

[01:36:50.0000] <zcorpan>
jgraham: i also didn't say what the compression was, so the bigger image might be smaller in file size

[01:37:05.0000] <darobin>
tobie: what's the version of jsondiffpatch you're using?

[01:37:28.0000] <zcorpan>
mathiasbynens: don't remember about iPads but there are phones with 1.5x iirc

[01:37:28.0000] <darobin>
grep version node_modules/jsondiffpatch/package.json

[01:38:02.0000] <tobie>
darobin: 0.1.5

[01:38:06.0000] <darobin>
mmmmmmm

[01:38:23.0000] <darobin>
tobie: try using 0.0.5 just for kicks

[01:38:55.0000] <darobin>
this is old code, nowadays I hardcode versions for absolutely everything

[01:39:14.0000] <zcorpan>
mathiasbynens: http://en.wikipedia.org/wiki/List_of_displays_by_pixel_density

[01:40:04.0000] <tobie>
darobin: surprisingly better, but not there yet.

[01:40:10.0000] <tobie>
dump comming

[01:40:19.0000] <darobin>
tobie: well if it's better that's already a plus

[01:40:20.0000] <tobie>
^ did I just write that?

[01:40:30.0000] <darobin>
fucking libs that break their interfaces

[01:41:03.0000] <darobin>
heh

[01:41:04.0000] <tobie>
Well, that's what semver is for.

[01:41:31.0000] <darobin>
yeah, but you'd hope that a lib that returns undef when there's no difference would stick to that

[01:41:45.0000] <darobin>
besides, they upped a minor version — so not doing sember

[01:41:48.0000] <darobin>
semver

[01:43:22.0000] <tobie>
https://gist.github.com/tobie/ba05228b7377b812650c

[01:45:17.0000] <tobie>
darobin: "Major version zero (0.y.z) is for initial development. Anything may change at any time. The public API should not be considered stable."

[01:45:35.0000] <tobie>
http://semver.org/

[01:45:59.0000] <darobin>
tobie: fair enough, except that 90% of projects stick to 0.y.z for the entirety of their lifetime...

[01:46:17.0000] <tobie>
(which incidentally is why no one that does semver releases a 1.0 version these days)

[01:46:25.0000] <tobie>
absolutely.

[01:46:33.0000] <darobin>
tobie: can you give me the value of npm outdated?

[01:46:46.0000] <darobin>
which sort of defeats the point

[01:46:59.0000] <tobie>
agreed

[01:48:05.0000] <tobie>
https://gist.github.com/tobie/f201be91888ae032a540

[01:49:02.0000] <darobin>
mmmm, not that

[01:49:13.0000] <darobin>
I really don't see what's wrong

[01:49:38.0000] <darobin>
node -v ?

[01:51:28.0000] <darobin>
also this is just basic JS, it's not depending on anything crazy

[01:51:38.0000] <darobin>
it really should be portable

[01:52:14.0000] <darobin>
tobie: do you get the same failures if you clone a clean copy off GH?

[01:53:01.0000] <tobie>
node: v0.10.22

[01:53:12.0000] <tobie>
let me start again from a clean repo

[01:53:46.0000] <tobie>
(Well, except I'm going to be missing the JSCOV patch and the right jsondiff version

[01:53:58.0000] <tobie>
so that's probably not going to work.

[01:56:14.0000] <darobin>
tobie: I applied your PR

[01:56:24.0000] <darobin>
and I've just pushed a change to the jsondiff version

[01:56:44.0000] <darobin>
so a clean repo, branch develop, should be exactly what I have

[01:56:55.0000] <darobin>
/me needs coffee

[01:58:16.0000] <tobie>
works.

[01:58:22.0000] <tobie>
o_O

[01:58:35.0000] <darobin>
ah HA!

[01:58:39.0000] <darobin>
/me whacks tobie

[01:59:13.0000] <tobie>
/me whack darobin back with darobin's google glasses

[02:02:43.0000] <tobie>
darobin: Thanks.

[02:04:29.0000] <darobin>
np

[02:04:52.0000] <darobin>
I guess now you can go on to fixing the Promise bug :)

[02:10:38.0000] <tobie>
heh

[02:11:01.0000] <tobie>
(I was wondering why I was doing all of this. Thanks for reminding me.)

[02:11:26.0000] <tobie>
(No longer sure what I need the promise bug fixed for, however)

[02:11:42.0000] <darobin>
for SCIENCE!

[02:11:44.0000] <tobie>
Found the cause of the earlier breakage: git pull origin master

[02:11:57.0000] <tobie>
in the submodule (as recommended in the README)

[02:12:05.0000] <tobie>
FYI

[02:12:21.0000] <Ms2ger>
"git pull" is, AIUI, a feature introduced to fuck up people who come from HG

[02:13:08.0000] <tobie>
Ms2ger: that's actually not what the problem here is.

[02:13:43.0000] <tobie>
Ms2ger: but that's an interesting theory. Do you think Linus did that on purpose?

[02:14:01.0000] <Ms2ger>
Well, it's Linus

[02:14:07.0000] <Ms2ger>
No other comment.

[02:18:24.0000] <zcorpan>
hmm. http://stackoverflow.com/questions/10524578/how-to-move-a-file-from-one-git-repository-to-another-while-preserving-history on html-mirror seems it consumed all of my memory. waiting for it to finish using swap would probably take all day if it would finish at all :-(

[02:19:10.0000] <zcorpan>
anyone have ideas how i should preserve the history of the `source` file?

[02:19:28.0000] <zcorpan>
maybe i can keep the other things in history also

[02:23:03.0000] <zcorpan>
jgraham: ^

[02:24:40.0000] <zcorpan>
i want to take `source` and put it into https://github.com/ResponsiveImagesCG/picture-element/ along with the history

[02:25:19.0000] <zcorpan>
but not necessarily the history of the other files

[02:25:51.0000] <darobin>
zcorpan: is it a problem if you just incorporate the whole repo and then delete the other files?

[02:26:06.0000] <zcorpan>
darobin: i guess not

[02:27:26.0000] <zcorpan>
how do i do that?

[02:27:55.0000] <Ms2ger>
Didn't someone already have a git clone?

[02:28:11.0000] <zcorpan>
http://bpeirce.me/moving-one-git-repository-into-another.html

[02:28:11.0000] <Ms2ger>
One of the Philip's?

[02:28:18.0000] <zcorpan>
Ms2ger: yes, i've forked it already

[02:28:22.0000] <Ms2ger>
Ah

[02:28:27.0000] <zcorpan>
dunno if i needed to fork it but anyway

[02:29:03.0000] <zcorpan>
https://github.com/zcorpan/html-mirror

[02:52:27.0000] <tobie>
darobin: where do you want me to put the WebIDL for the tests?

[02:53:20.0000] <darobin>
tobie: wherever makes sense under tests

[02:53:41.0000] <tobie>
darobin: well the other ones are in widlproc

[02:53:49.0000] <darobin>
tobie: I know

[02:54:01.0000] <tobie>
which we can't update as it breaks existing tests

[02:54:08.0000] <darobin>
one option is that you could submit that to widlproc, but that looks like it'll be painful

[02:54:14.0000] <darobin>
so just create a new dir I guess

[02:54:22.0000] <tobie>
k.

[02:54:34.0000] <tobie>
are you using widlproc for anything but those ?

[02:54:57.0000] <darobin>
nope

[02:55:34.0000] <tobie>
why do't you just dump all the tests in the main project, then?

[02:55:41.0000] <tobie>
And remove the submodule dep?

[02:57:03.0000] <Ms2ger>
But shared tests!

[02:57:57.0000] <darobin>
tobie: over time it may make no difference

[02:58:12.0000] <darobin>
back when I made it, dom was updating his tests a lot so keeping in sync made a lot of sense

[02:58:25.0000] <darobin>
or at least, it made my life easy

[02:58:59.0000] <tobie>
Ms2ger: go away, you.

[02:59:03.0000] <Ms2ger>
:'(

[02:59:22.0000] <darobin>
awwwww

[02:59:44.0000] <darobin>
tobie: if you want to just slurp things in, feel free

[02:59:57.0000] <darobin>
but be nice to Ms2ger

[03:00:08.0000] <Ms2ger>
/me goes and cries in a corner

[03:00:39.0000] <jgraham>
zcorpan: Yeah, it might be easier to just pull in all the history and then delete the files you don't want. Unless you really don't want them anywhere in the new repo

[03:01:12.0000] <darobin>
/me makes some hot cocoa for Ms2ger

[03:01:39.0000] <jgraham>
3~With a hint of cyanide^Walmond?

[03:02:57.0000] <darobin>
I was more going for a touch of cognac, to keep him warm in the face of so much internet hatred

[03:03:07.0000] <Ms2ger>
Cognac with almond?

[03:03:38.0000] <darobin>
mmmmmm

[03:50:56.0000] <zcorpan>
jgraham: how do i do that, assuming i don't need to move anything to a different directory?

[03:52:28.0000] <jgraham>
zcorpan: Well I guess the easiest thing is git subtree add (original repo)

[03:52:54.0000] <jgraham>
You need a new-enough git to have subtree bundled

[03:53:48.0000] <zcorpan>
seems `git subtree` is there

[04:01:54.0000] <zcorpan>
what do i use as prefix= ?

[04:03:40.0000] <jgraham>
I don't think you need it

[04:03:55.0000] <jgraham>
Unless you want the file in a subdirectory

[04:05:45.0000] <zcorpan>
"You must provide the --prefix option."

[04:05:54.0000] <zcorpan>
"prefix '/' already exists."

[04:06:00.0000] <jgraham>
Oh

[04:06:17.0000] <jgraham>
Then maybe this isn't going to work in an easy way

[04:06:27.0000] <zcorpan>
:-/

[04:06:43.0000] <zcorpan>
i guess it's ok to have it in a subdirectory if it makes things simpler

[04:06:51.0000] <jgraham>
Unless you do something like --prefix=import; git mv import/source ../ git rm import

[04:07:43.0000] <zcorpan>
/me tests

[04:15:50.0000] <zcorpan>
$ git subtree add --prefix=import https://github.com/whatwg/html-mirror.git HEAD # great success

[04:36:51.0000] <foolip>
zcorpan: what are you using html-mirror.git for?

[04:37:23.0000] <zcorpan>
foolip: i want to add <picture> to the html spec

[04:37:36.0000] <foolip>
ah

[04:37:55.0000] <foolip>
it has happened on occasion that my update script has broken, so if stops updating let me know

[04:38:14.0000] <zcorpan>
i just need a snapshot for this

[04:38:33.0000] <foolip>
ok, no problem then :)

[04:38:48.0000] <zcorpan>
it seems up-to-date right now (last commit 14h ago)

[04:38:59.0000] <foolip>
yeah, I unbroke it yesterday

[04:39:07.0000] <zcorpan>
good timing

[04:39:30.0000] <foolip>
yep, but it was only a few days behind

[04:40:12.0000] <zcorpan>
https://gist.github.com/anonymous/42438f0f244121748f11 - does this seem sane?

[04:41:52.0000] <foolip>
I suppose, but IANAL

[04:43:16.0000] <darobin>
zcorpan: shouldn't that license say something nasty about plagiarism?

[04:43:21.0000] <darobin>
/me runs away fast and giggling

[04:43:54.0000] <zcorpan>
i slap people with their google glasses instead

[04:44:00.0000] <darobin>
:)

[05:01:26.0000] <zcorpan>
i think i didn't screw up... https://github.com/ResponsiveImagesCG/picture-element/pull/173

[05:02:07.0000] <zcorpan>
although github complained twice, it seems it went through ok

[05:05:30.0000] <zcorpan>
hmm. is it licence or license here?

[05:11:56.0000] <annevk>
license

[05:12:33.0000] <jgraham>
Two cs appears to be en-gb

[05:12:52.0000] <annevk>
or en-ca I suppose

[05:16:52.0000] <zcorpan>
not sure if something is broken or github is slow. the spelling fix doesn't show up in the PR

[05:35:26.0000] <zcorpan>
hmm, seems anolis doesn't do data-x=""

[05:50:27.0000] <Ms2ger>
Nope

[05:50:40.0000] <Ms2ger>
That's a Hixieism, like most of the spec

[05:51:25.0000] <annevk>
mounir: https://bugzilla.mozilla.org/show_bug.cgi?id=920734#c8

[06:06:02.0000] <foolip>
annevk: wtf? http://resources.whatwg.org/logo-xhr.svg

[06:06:14.0000] <annevk>
foolip: yes?

[06:06:23.0000] <foolip>
what is it?

[06:06:32.0000] <annevk>
it's Ajax, of course

[06:06:53.0000] <annevk>
way big in 2005 and still big if you're into soccer

[06:07:06.0000] <tobie>
darobin: trying to add support for type pairs (http://heycam.github.io/webidl/#proddef-ExtendedAttributeTypePair) to webidl2.js.

[06:07:10.0000] <annevk>
(although I'm not sure if they're doing that great)

[06:07:32.0000] <foolip>
oh, the logo of a soccer team :)

[06:07:35.0000] <foolip>
that's cute

[06:07:57.0000] <Ms2ger>
We have a clever punster in annevk

[06:08:25.0000] <jgraham>
Probably some kind of copyright violation :)

[06:08:39.0000] <tobie>
plagiarism. No less.

[06:08:40.0000] <foolip>
http://resources.whatwg.org/logo-mime.svg is cute too

[06:12:14.0000] <annevk>
tobie: o_O

[06:12:30.0000] <tobie>
:)

[06:15:06.0000] <darobin>
zcorpan: if you need tools that can process "source" you can dig inside https://github.com/w3c/html-tools

[06:17:55.0000] <tobie>
darobin: how do you handle precedence within the parser? Plus backtracking? Seems type pairs should come after arg lists, but then a whole bunch of tokens will have been consumed already.

[06:19:55.0000] <darobin>
tobie: I backtrack by pushing tokens back onto the tokens array

[06:20:04.0000] <darobin>
then trying the next rule

[06:21:05.0000] <tobie>
k

[06:21:27.0000] <tobie>
ty

[06:24:24.0000] <annevk>
Domenic_: if you feel up to a challenge, https://wiki.mozilla.org/B2G/Bluetooth/WebBluetooth-v2

[06:24:32.0000] <annevk>
Domenic_: review request is on Mozilla dev-webapi

[06:24:40.0000] <annevk>
Domenic_: not sure we'll ever expose that to the web

[06:24:57.0000] <annevk>
/me is still a bit unsure what the best way to deal with random hardware is

[06:26:00.0000] <darobin>
Discovery API plus make everything look like HTTP?

[06:36:17.0000] <annevk>
darobin: I think WebSocket or WebRTC might be better? Especially for stuff like AirPlay

[06:36:52.0000] <darobin>
annevk: it depends on the devices, some of them really have more or an HTTP model (a lot of ZigBee)

[06:37:15.0000] <darobin>
annevk: but what I meant by "HTTP" was, you know, the whole basic Web protocol stack

[06:37:47.0000] <Domenic_>
Fun stuff.

[06:37:50.0000] <darobin>
so yes, WS, HTTPS, whatever can already be used from the APIs we have

[06:38:06.0000] <darobin>
I don't recall enough of the BT details to remember if it can be mapped easily

[06:38:44.0000] <Domenic_>
No glaring problems jump out. Would be nice if we had Object.observe instead of onattributechange.

[06:38:45.0000] <darobin>
the nice thing with Discovery is that it handles the origin whitelisting

[06:39:22.0000] <Domenic_>
I think hardware-specific APIs are fine. what's the argument against?

[06:40:55.0000] <darobin>
you have to define and implement a very long list of them

[06:42:34.0000] <darobin>
Domenic_: case in point https://rawgit.com/w3c/automotive-bg/master/snapshots/vehicle_spec_snapshot20140425.html

[06:42:41.0000] <Domenic_>
Mmm, so we're lazy? seems not so good. iOS team is not lazy. windows team is not lazy.

[06:42:43.0000] <darobin>
CAUTION, NSFS

[06:43:05.0000] <Domenic_>
but! in this case, defining USB would suffice, I believe

[06:43:26.0000] <Domenic_>
then you emscripten some Bluetooth drivers

[06:43:34.0000] <darobin>
maybe we just care more about our users' security?

[06:43:34.0000] <zcorpan>
darobin: thx, i'll have a look

[06:44:26.0000] <Domenic_>
I don't think security and hardware access are mutually exclusive…

[06:45:42.0000] <mounir>
annevk: ta

[06:49:08.0000] <jgraham>
I think characterising "we find it difficult to create a large number of specs with a consistent feel and high quality" as "we're lazy" is rather unhelpful.

[06:50:12.0000] <Ms2ger>
Fair

[06:50:17.0000] <Ms2ger>
We're still lazy, though

[06:50:21.0000] <darobin>
lol

[06:50:27.0000] <jgraham>
In the sense that it's perjorative and so tends to shut down discussion of how we can achieve the goals we want within the constraints we have

[06:51:02.0000] <darobin>
a relatively generic solution also means we can avoid playing catch up

[06:51:31.0000] <darobin>
Domenic_: re mutually exclusive I don't think either, but on iOS they are

[06:51:40.0000] <darobin>
and if we are to make this work, we need a clear security model

[06:52:05.0000] <darobin>
we can create a new one (so far, an abject failure from all who have tried), or we can try to reuse the one we have (which is Discovery's approach)

[06:52:38.0000] <darobin>
I'm not saying it's impossible, in fact I think it's very much doable, but doing it requires a little bit more than "not being lazy" :)

[06:52:53.0000] <darobin>
anyway, I'll get back to slouching in front of kitten pics

[06:59:01.0000] <mathiasbynens>
annevk: packages for each legacy single-byte encoding in the Encoding Standard

[06:59:06.0000] <mathiasbynens>
http://mths.be/ibm866 http://mths.be/iso-8859-10 http://mths.be/iso-8859-13 http://mths.be/iso-8859-14 http://mths.be/iso-8859-15 http://mths.be/iso-8859-16 http://mths.be/iso-8859-2 http://mths.be/iso-8859-3 http://mths.be/iso-8859-4 http://mths.be/iso-8859-5 http://mths.be/iso-8859-6 http://mths.be/iso-8859-7 http://mths.be/iso-8859-8

[06:59:06.0000] <mathiasbynens>
http://mths.be/iso-8859-8-i http://mths.be/koi8-r http://mths.be/koi8-u http://mths.be/macintosh http://mths.be/windows-1250 http://mths.be/windows-1251 http://mths.be/windows-1252 http://mths.be/windows-1253 http://mths.be/windows-1254 http://mths.be/windows-1255 http://mths.be/windows-1256 http://mths.be/windows-1257 http://mths.be/windows-1258

[06:59:06.0000] <mathiasbynens>
http://mths.be/windows-874 http://mths.be/x-mac-cyrillic

[06:59:09.0000] <mathiasbynens>
</spam>

[07:06:35.0000] <zcorpan>
Ms2ger: i don't remember how bitbucket works but i'd like to send a PR of https://bitbucket.org/zcorpan/anolis/branch/support-data-x

[07:08:07.0000] <Ms2ger>
/me clicks the "Create pull request" button

[07:09:20.0000] <jgraham>
zcorpan: It seems that the process is that you get Ms2ger to click the "Create pull request" button :p

[07:09:48.0000] <annevk>
mathiasbynens: that looks like so much cruft

[07:09:49.0000] <Ms2ger>
zcorpan, one comment: https://bitbucket.org/ms2ger/anolis/pull-request/12/support-data-x/diff

[07:10:17.0000] <zcorpan>
Ms2ger: oops

[07:10:17.0000] <annevk>
mathiasbynens: might be better to put some effort into getting TextEncoder / TextDecoder into ECMAScript

[07:10:43.0000] <Ms2ger>
Along with atob?

[07:11:02.0000] <annevk>
Domenic_: hardware gets obsoleted

[07:11:44.0000] <zcorpan>
Ms2ger: fixed

[07:11:47.0000] <annevk>
Domenic_: as in, something to control presentation slides makes sense, irrespective of whether that's connected through USB, Bluetooth, WiFi, or some future protocol

[07:12:05.0000] <zcorpan>
/me *poof*

[07:12:08.0000] <annevk>
Domenic_: the web should not bake in future-legacy

[07:12:43.0000] <annevk>
Lol bitbucket

[07:12:55.0000] <Ms2ger>
zcorpan: did you?

[08:00:17.0000] <annevk>
http://dev.w3.org/2011/webrtc/editor/webrtc.html#identity-provider-selection o_O

[08:00:26.0000] <annevk>
Domenic_: has the TAG or anyone looked at that?

[08:00:53.0000] <annevk>
"In order to communicate with the IdP, the browser instantiates an isolated interpreted context, effectively an invisible IFRAME." I don't even

[08:02:20.0000] <annevk>
Domenic_: fyi, that's basically a new primitive

[08:04:23.0000] <jgraham>
/me isn't sure why annevk uses "the TAG" as a proxy for "the set of people competent to do architectural review"

[08:04:43.0000] <jgraham>
But yeah, you can't just throw that kind of thing into a spec like that

[08:05:05.0000] <Ms2ger>
Clearly you can

[08:05:13.0000] <annevk>
jgraham: not sure who else would pick it up

[08:05:46.0000] <Ms2ger>
We clearly need more architecture architectss

[08:06:26.0000] <jgraham>
annevk: Well it's a public mailing list I assume, so it could be anyone. The idea of having an elected group that is somehow more competent to review specs like that is very strange

[08:08:20.0000] <annevk>
jgraham: it's not about competence, it's about responsible

[08:08:35.0000] <annevk>
jgraham: I could take responsibility, but if I did that for every specification I'd be in trouble

[08:08:57.0000] <annevk>
jgraham: the TAG is quite a bit larger and have said they take that responsibility upon them, so if something is crap, we can blame them

[08:09:01.0000] <annevk>
jgraham: in addition to the WG

[08:09:11.0000] <jgraham>
I'm not interested in assigning blame

[08:09:24.0000] <jgraham>
I'm interested in getting good results

[08:09:41.0000] <annevk>
Right, turns out making people responsible for certain tasks is a good way of getting things done

[08:10:02.0000] <jgraham>
That doesn't seem to be working out so well

[08:10:12.0000] <annevk>
Citation needed

[08:10:44.0000] <jgraham>
The fact that you are running around after dozens of specs pointing out major mistakes?

[08:11:48.0000] <annevk>
jgraham: heh, there's a couple of specs that have been impacted by people from the TAG; I'm not sure it's working great, but it's working well and better than what we had before

[08:11:59.0000] <Domenic_>
Catching up...

[08:12:00.0000] <annevk>
jgraham: is there a better way?

[08:12:01.0000] <darobin>
the TAG certainly has improved

[08:12:31.0000] <jgraham>
Fundamentally I disagree with the idea of having an elected group with technical responsibilities. If the system was "all specs have to ask for review on www-tag which is a public mailing list rather than a group with membership", that would make a good deal more sense

[08:12:45.0000] <darobin>
the only better way I can think of requires having a larger involved community

[08:13:01.0000] <Domenic_>
annevk: I don't buy that argument about future-legacy. If Bluetooth goes out of style, nobody will use Bluetooth APIs. Same as in iOS.

[08:13:01.0000] <annevk>
jgraham: I think in practice that's largely how it works, the elected group thing feels like a sideshow

[08:13:22.0000] <darobin>
Domenic_: the problem isn't people using, the problem is implementation having to keep shipping with them

[08:13:27.0000] <Domenic_>
Hmm.

[08:13:34.0000] <Domenic_>
Why is this more a problem for browsers than for iOS?

[08:13:38.0000] <darobin>
over time, this accrues massive amounts of code that has potential flaws

[08:13:47.0000] <jgraham>
annevk: If that's how it works we should make that the real system and not pretend that there's an elected group with mandated responsibility

[08:13:55.0000] <jgraham>
that will somehow save us

[08:14:00.0000] <annevk>
Domenic_: iOS controls its entire ecosystem and has some level of versioning, the web doesn't

[08:14:06.0000] <darobin>
because iOS doesn't give a shit about obsoleting relatively large tracts of the store, plus they have email contacts for all content creators

[08:14:18.0000] <darobin>
we give a shit about not obsoleting much of the web, and we can't reach people

[08:14:39.0000] <annevk>
jgraham: okay, but is there a problem with meanwhile using the existing system as a replacement for the nothing we had before?

[08:15:46.0000] <Domenic_>
So you're imaging a future in which: (a) Bluetooth is a legacy technology; but (b) "relatively large tracts" of the web use Bluetooth APIs; and (c) browsers want to un-ship Bluetooth?

[08:16:30.0000] <jgraham>
annevk: I don't think think there's any "meanwhile". You either encourage a system where a semi-elected set of people are given special powers or you advocate not using those people.

[08:16:53.0000] <annevk>
Domenic_: what I want is that if you have a piece of hardware you don't have to care about Bluetooth vs USB vs X; the browser handles the connection abstraction for you

[08:17:17.0000] <annevk>
Domenic_: that way the code can outlive particular hardware interfaces

[08:17:18.0000] <Domenic_>
annevk: that seems unrealistic. I am very leery of catch-all leaky abstractions.

[08:17:28.0000] <jgraham>
Domenic_: It is quite possible that pages fail if the API doesn't exist, even if no one actually has the hardware

[08:17:49.0000] <JonathanNeal>
I’m a little confused by https://github.com/ThePacielloGroup/w3c-heading/blob/gh-pages/README.md anyone up on this and can break down what’s happening in element world?

[08:18:38.0000] <Domenic_>
jgraham: that seems solvable with API design. E.g. requestBluetooth().then(bluetoothThingy => ..., handleError) could always reject in Chrome 302, so all the code for the BluetoothThingy class no longer has to ship.

[08:19:01.0000] <annevk>
http://www.smbc-comics.com/index.php?db=comics&id=2939 heh

[08:19:29.0000] <Domenic_>
annevk: WebRTC is so hard for me to wrap my head around :(. Is this something people want to ship, or is it theorycrafting?

[08:19:48.0000] <Ms2ger>
Ship

[08:20:19.0000] <annevk>
(via JakeA via Lea)

[08:20:42.0000] <annevk>
Domenic_: https://groups.google.com/d/msg/mozilla.dev.platform/QiF18J4vccA/rDclGYmFPBEJ

[08:21:09.0000] <Domenic_>
Well the API design is shit but obviously that's not the most important thing here.

[08:21:48.0000] <jgraham>
Domenic_: Sure, you can try things like that. Although there are other problems (like the hardware is only used in niche environments but ends up shipping for everyone)

[08:22:01.0000] <jgraham>
s/but/but the api/

[08:22:27.0000] <jgraham>
Fundamentally the nature of the web makes the the half life of technologies > 20 years (based on current observations)

[08:22:44.0000] <jgraham>
But on iOS it seems to be like 2 years then fuck you

[08:23:13.0000] <Domenic_>
I see what you mean, but I'm not sure our past experience is the best guide here.

[08:23:37.0000] <Domenic_>
That is, techniques for styling text and hardware access are very different

[08:23:49.0000] <Domenic_>
Hardware usefulness has its own lifecycle

[08:24:32.0000] <jgraham>
That could be true

[08:24:37.0000] <Domenic_>
Also, comparing to Windows might be easier than iOS, since they have similar back-compact requirements

[08:24:57.0000] <Domenic_>
I mean parallel port drivers still ship with Windows

[08:25:16.0000] <Domenic_>
But things do shift out of Windows, e.g. old printer drivers are now downloaded on demand instead of shipped in box

[08:25:22.0000] <jgraham>
Right

[08:26:41.0000] <jgraham>
Certainly I agree with the idea that giving some thought to how to clean things up when we have 2000 types of hardware supported and 1500 of them aren't used anymore

[08:26:46.0000] <jgraham>
makes sense

[08:28:42.0000] <Domenic_>
I wonder about the "ship USB, let them build their own Bluetooth drivers" approach. That sounds pretty bad now that I say it out loud though.

[08:30:19.0000] <jgraham>
I'm not sure I want every website implementing its own buggy version of usb

[08:30:25.0000] <jgraham>
*bluetooth

[08:32:24.0000] <Domenic_>
Yeah seems pretty bad.

[08:32:55.0000] <Domenic_>
annevk: filed https://github.com/w3ctag/spec-reviews/issues/28, but I feel pretty out of my depth on this WebRTC stuff.

[08:33:29.0000] <annevk>
https://rfk.id.au/blog/entry/pypy-js-faster-than-cpython/ o_O

[08:34:05.0000] <Domenic_>
jgraham: I agree that the elected-ness of the TAG is not terribly important. A sideshow seems about right. But within the existing W3C system (which I am definitely not a fan of) it has a number of benefits.

[08:34:58.0000] <Domenic_>
E.g. people seem to respect the TAG name, so it's easier to start conversations as a TAG member than as a random guy who wants to come in to your closed community and start interjecting themselves into conversations.

[08:35:14.0000] <annevk>
Graph at the end is humbling

[08:35:36.0000] <Domenic_>
And the ceremony around it helps psychologically to help me feel like it's my "job" to work on this stuff

[08:35:38.0000] <MikeSmith>
annevk: incidenttally I'd have thought that Martin of all people at this point would have moved on to pushing for implementation of the ORTC spec (which as he alludes to in that thread Microsoft is supporting) rather than adding  more features to the WebRTC spec and implementing them

[08:36:05.0000] <Domenic_>
If someone asks us for review on something that I'm not that interested in (e.g. WebRTC), I still feel responsible for helping them, instead of "sorry, no time for that."

[08:36:10.0000] <annevk>
MikeSmith: well Mozilla bought his vote, that's how this works, right?

[08:36:18.0000] <Domenic_>
Plus it certainly helps sell to employers using your time this way.

[08:36:25.0000] <MikeSmith>
annevk: :)

[08:36:25.0000] <annevk>
/me has no insight in WebRTC vs ORTC politics

[08:36:51.0000] <Domenic_>
WebRTC vs. ORTC is also something I need to understand better. wycats was looking into it a bit.

[08:37:23.0000] <annevk>
Yeah, I think it's the same with having your name at the top of the draft, it's your responsibility to fix it

[08:37:25.0000] <MikeSmith>
Martin used to be the single most articulate critic of the whole WebRTC design

[08:37:28.0000] <Domenic_>
His take, with a disclaimer of them being based on an hour of skimming, was that ORTC was arguing that WebRTC was the new WebSQL.

[08:37:42.0000] <annevk>
Ideally everyone would just work on everything, but it's hard to fragment yourself like that

[08:38:22.0000] <annevk>
Domenic_: seems like IndexedDB might be the new WebSQL with some of those LevelDB features

[08:38:35.0000] <jgraham>
Domenic_: It has negative side effects too though. Elections strongly favour old-boys-clubs and certain personality types. They also don't capture a diverse range of technical expertise so the fact that the TAG signs off on something can give a false impression that it's OK when actually it's not.

[08:38:39.0000] <Domenic_>
annevk: hah, yes, I agree.

[08:38:42.0000] <annevk>
Domenic_: or the JavaScript i18n API with its heavy dependence on ICU

[08:39:25.0000] <darobin>
annevk: the "red button" extra on that classic SMBC is also a nice touch :)

[08:39:41.0000] <MikeSmith>
ironic now that IndexedDB started out as something called WebSimpleDB. come a long way..

[08:39:43.0000] <jgraham>
I mean all your arguments could be made about closed-membership WGs vs open membership ones

[08:40:34.0000] <jcgregorio>
annevk: I look forward to a future where *all* non-CPython implementations are faster than CPython :-/

[08:41:22.0000] <Domenic_>
jgraham: I'm not really familiar with the different WG models, but as for the other points, I agree. I guess in the end you have to try to solve those by people-hacks, e.g. trying to elect people who will listen and actively seek out diverse tech expertise.

[08:42:00.0000] <Domenic_>
jgraham: I don't think those things are actively harmful though, or at least, not very. They just mean the system is not the best possible system.

[08:42:32.0000] <annevk>
As long as most communication happens through GitHub or the mailing lists, it doesn't really matter who is in what group

[08:42:50.0000] <annevk>
E.g. I'm not in any W3C group, but that hasn't really stopped me from contributing to anything

[08:42:56.0000] <Domenic_>
++

[08:43:12.0000] <jgraham>
Sure, but that's because we had a big push for openness

[08:43:28.0000] <jgraham>
The TAG has resisted that push in its formal organisation

[08:43:30.0000] <Domenic_>
Yeah I was just going to say, private mailing lists must die.

[08:43:41.0000] <Domenic_>
jgraham: what do you mean by that?

[08:56:43.0000] <Domenic_>
darobin: nice post

[08:57:51.0000] <darobin>
Domenic_: ta

[08:58:39.0000] <jgraham>
Domenic_: By "formal organisation" I mean in the way that it has Members who have to be elected, rather than letting anyone with the right interests and skills take part in the work without a divide between those who are in the club and those who are not

[08:59:27.0000] <Domenic_>
jgraham: what is the divide?

[09:00:28.0000] <jgraham>
Domenic_: You tell me. If there isn't one then we certainly shouldn't waste time electing people. If there is then we should fix the system so there isn't.

[09:01:51.0000] <Domenic_>
jgraham: Anyone can take part in the work. But you're saying it's also important to be on the weekly call and be invited to F2Fs without having to ask anyone for an invite?

[09:02:16.0000] <jgraham>
Domenic_: I think that it's important to have the option to do those things, yes

[09:02:46.0000] <jgraham>
(or for those things to not happen)

[09:03:21.0000] <Domenic_>
I wonder how well an open line for weekly standup would work, or an open-door policy for F2Fs

[09:04:57.0000] <Domenic_>
On another note: I'm in an EmpireJS talk right now basically about how to reimplement rich text editing on top of today's contenteditable clusterfuck. The lengths people go to... @_@

[09:05:36.0000] <darobin>
Domenic_: there's movement on that front thankfully

[09:06:07.0000] <Domenic_>
E.g. listening to every possible mouse or keyboard input event, then diffing the before-and-after selection, with some semantic patch algorithm, in order to synthesize a selectionchange event or similar.

[09:06:45.0000] <darobin>
Domenic_: which project is that?

[09:07:40.0000] <Domenic_>
darobin: I think it's part of Wordpress; been tuning in and out so I kind of missed the intro.

[09:07:50.0000] <darobin>
oh that one

[09:07:59.0000] <annevk>
Domenic_: so e.g. WebApps is a group which does all its work in public, and sometimes interested people get together to hash something out, open to anyone

[09:08:03.0000] <annevk>
Domenic_: hasn't caused much problem

[09:08:06.0000] <darobin>
I forget which one it is; I need to reach out to them

[09:08:13.0000] <darobin>
but not today

[09:08:20.0000] <annevk>
Domenic_: typically nobody dials into a telcon if its optional, as that's a waste of time

[09:08:50.0000] <darobin>
there still are telcons? oh, right, there are

[09:55:38.0000] <annevk>
Ah darobin left

[09:59:37.0000] <annevk>
WebGL :-(

[09:59:58.0000] <annevk>
Well jgraham may be correct that there's no clear supervision of what crap goes on

[10:00:13.0000] <annevk>
http://www.khronos.org/registry/webgl/extensions/OES_texture_float/ o_O

[10:09:22.0000] <jwalden>
annevk: by heavy dependence you mean in terms of how people are implementing it, right?

[10:09:32.0000] <jwalden>
/me briefly delurks

[10:09:55.0000] <annevk>
jwalden: is this about WebGL?

[10:10:15.0000] <jwalden>
annevk: <annevk> Domenic_: or the JavaScript i18n API with its heavy dependence on ICU

[10:10:24.0000] <annevk>
jwalden: ah yes

[10:10:52.0000] <annevk>
jwalden: Microsoft is the only alternative you have

[10:11:11.0000] <jwalden>
everyone uses the same png implementation (or at least same base code plus a few patches), right?

[10:11:17.0000] <jwalden>
that being libpng

[10:11:25.0000] <annevk>
jwalden: Opera used to have a different one

[10:11:39.0000] <jwalden>
ICU is certainly worse than that, but there's some precedent for monocultures under the hood, sadly :-\

[10:12:03.0000] <jwalden>
none at the standards level, thankfully, in terms of enshrining one implementation, roughly

[10:13:09.0000] <IZh>
Hi! There is somewhat strange with page table of content in Embedded content section: http://developers.whatwg.org/embedded-content-1.html#embedded-content-1 The link at the end of the page points to 4.7.2. But there are no link to this page from the table of content.

[10:13:23.0000] <IZh>
How to get to 4.7.2 from the top of the site?

[10:14:16.0000] <annevk>
jwalden: well, WebGL

[10:14:47.0000] <annevk>
jwalden: was kind of hilarious at the time with Mozilla advocating a non-WebSQL approach but happily joining the WebGL train

[10:15:27.0000] <jwalden>
annevk: there are multiple competing implementations of OpenGL, tho, and bunches of drivers, aren't there?  what do I not know about the tech underneath this?

[10:16:41.0000] <annevk>
jwalden: hmm, I thought it was mostly OpenGL vs DirectX; I guess OpenGL has many implementations though

[10:17:07.0000] <jwalden>
I'm not seeing any similarity between the situations, myself

[10:19:12.0000] <jgraham>
I thought everyone used the same shader verifier, or something

[10:19:28.0000] <jgraham>
Also WebRTC

[10:27:11.0000] <annevk>
dglazkov: I think it would be nice if we could sync native and custom elements for the callbacks

[10:27:35.0000] <annevk>
dglazkov: given that e.g. callbacks such as clone are invoked-near-synchronous, that might be good enough

[10:27:51.0000] <annevk>
(not sure if clone is defined yet)

[10:30:11.0000] <jwalden>
yeah, I dunno about ANGLE exactly

[10:30:51.0000] <jwalden>
or to some extent WebRTC, except I thought implementation and spec were proceeding at similar paces/lockstep-ish

[10:31:34.0000] <jwalden>
I assume the ANGLE linting is going to be included in the spec, tho I have no knowledge of this happening or not happening

[10:32:29.0000] <dglazkov>
annevk: yes! that's my aspirational goal as well

[10:33:31.0000] <annevk>
dglazkov: otherwise we're not really "explaining" the native system (if we can't change it) but rather we'll end up with two systems, which is kinda what I've been worried about from the start with components

[10:41:14.0000] <Hixie>
foolip: yt?

[10:41:22.0000] <Hixie>
foolip: is there a bug tracking the xhtml <input> bug?

[10:41:28.0000] <Hixie>
foolip: also, how does it handle cloning?

[11:01:54.0000] <Domenic_>
annevk: dglazkov: also https://github.com/dglazkov/html-as-custom-elements/issues/14

[11:33:26.0000] <caitp>
it's impossible to prove conclusively that it won't "break the web", but it's obvious that it won't. websites with actual audiences that people actually view, have designers who avoid situations where it would break things

[11:33:57.0000] <caitp>
there is no use demanding a survey of millions of web applications, it's clear that if such applications do exist, they are not being actively maintained, and have no audience

[11:34:17.0000] <Hixie>
when we were speccing the HTML parser, we tried to remove the hack that makes <image> into a macro for <img>

[11:34:28.0000] <Hixie>
that affected something like 0.3% of the web

[11:34:34.0000] <Hixie>
which was too much and we had to change the parser.

[11:34:57.0000] <caitp>
it's a bit of a different scenario, nobody has a good reason to actually want to give the parser something that it will re-arrange

[11:35:06.0000] <caitp>
the way the parser works currently, it's a site bug

[11:35:13.0000] <Hixie>
i would be willing to bet money that we can't change the parts of the parser that rearrange content.

[11:35:30.0000] <caitp>
I'll put 5 bucks on it that we can

[11:35:41.0000] <caitp>
because 0 people will be upset about it

[11:35:55.0000] <Hixie>
back in 2005 when i did my scan of the web, i examined about 10 billion pages, and 97% of them had some sort of syntax error. 70% if you ignored the doctype missing and similar low-hanging fruit.

[11:36:45.0000] <caitp>
sure they'll have syntax errors, but it's really a different kind of error

[11:36:58.0000] <Hixie>
try it. get the chrome source code, change the parser to not do the "foster parenting", or to not do the "adoption agency", and browse the web with it.

[11:36:59.0000] <caitp>
and anyways, if they're okay with whatever nonsense the parser re-arranges it into, then they're probably okay with it not re-arranging it too

[11:37:34.0000] <caitp>
well, I'd have to find a site that still uses tables for layout to do that anyways, that's not as easy as it sounds

[11:38:04.0000] <Hixie>
http://google.com/ uses tables for layout.

[11:38:44.0000] <Domenic_>
(zing)

[11:38:47.0000] <Domenic_>
(ironic burn)

[11:39:20.0000] <Hixie>
Domenic_: yeah, i'm not actually sure why we do. not clear that we need to. but there you have it.

[11:39:40.0000] <Domenic_>
I always assume Google does weird things because at Google scale the laws of physics are different

[11:39:47.0000] <caitp>
does it depend on content re-arranging, though?

[11:39:50.0000] <Hixie>
Domenic_: there's some truth to that

[11:39:52.0000] <Domenic_>
E.g. they use weird source control because they have so much code

[11:40:01.0000] <caitp>
because depending on what is essentially a parser bug, seems unlikely

[11:40:03.0000] <Domenic_>
Invalid HTML because it saves bytes

[11:40:06.0000] <Hixie>
caitp: i sure hope not. but i haven't checked. my point was just that tables are used for layout a lot still.

[11:40:47.0000] <Hixie>
caitp: you have to understand that what you say seems unlikely is something that many of us here have, through many years of experience, painfully discovered over and over again is critical to the functioning of the web.

[11:41:03.0000] <Hixie>
caitp: i encourage you to do the experiments we've described.

[11:41:17.0000] <caitp>
I will make a build of content_shell with a  changed parser

[11:41:25.0000] <Hixie>
caitp: because it will be quite illuminating, and nothing that i say can convince you quite as much as experiencing it first hand.

[11:41:47.0000] <caitp>
what if it still doesn't convince me? here's the thing

[11:41:56.0000] <Hixie>
well, then we'll see :-)

[11:42:08.0000] <annevk>
cabanier: I recommend to discuss name changes on the same forum as where the names were introduced

[11:42:11.0000] <caitp>
in its current state, it's really broken crap, it's inconsistent with the rest of the browser, and it's not a rational behaviour

[11:42:24.0000] <annevk>
cabanier: not doing that feels a lot like acting in "bad faith"

[11:42:40.0000] <caitp>
there is no justifiable reason for it, and the result of it is adding nonsense like is=* to custom elements to get around it

[11:42:48.0000] <wilhelm>
What is this rational behaviour you speak of? I haven't seen any of that on the Web.

[11:42:49.0000] <caitp>
this is just making things uglier, and therefore worse

[11:42:54.0000] <annevk>
cabanier: e.g. Hixie will change the specification if a couple of vendors got together and implemented the same proprietary API, but that does not mean it's a good idea

[11:43:13.0000] <Hixie>
caitp: believe me, nobody has a lower opinion of the state of HTML parsing than I.

[11:43:16.0000] <caitp>
so sometimes, to unbreak something that is crap, you have to break a few eggs, and if a few sites have rendering problems on a few browsers, it won't hurt

[11:44:58.0000] <caitp>
so, I will try an experiment with content shell, but I can pretty much tell you right now it isn't going to convince me that this insane behaviour should be left unchanged, unless people specifically opt into that broken behaviour somehow

[11:45:10.0000] <Domenic_>
annevk: thanks for handling that promises question; I had a hard time understanding what he was asking.

[11:45:18.0000] <Hixie>
man, amazon.com has a lot of tables still

[11:45:37.0000] <Domenic_>
Why would you break eggs? That seems dumb.

[11:45:43.0000] <caitp>
to make an omlette!

[11:45:44.0000] <Domenic_>
The eggs are fine as they are.

[11:45:47.0000] <annevk>
caitp: I recommend studying more specifications, they're full of insane behavior

[11:45:59.0000] <Domenic_>
Or see topic ;)

[11:46:17.0000] <caitp>
I've seen, anne :p but they ought to try to be less insane

[11:46:26.0000] <Domenic_>
For the future, sure

[11:46:30.0000] <Domenic_>
No reason to break things that work though

[11:46:49.0000] <annevk>
caitp: that requires changing all humans

[11:47:16.0000] <annevk>
caitp: if they're all "perfect", the web would be "perfect", and we wouldn't crave to change it, or some such

[11:47:23.0000] <caitp>
you're never going to get concensus from all humans about any technical spec

[11:47:29.0000] <annevk>
caitp: as it is, we're all a little bit crap, and it shows

[11:48:20.0000] <caitp>
but maybe it's worth making a small handful of people temporarily unhappy, for the sake of moving things forward in a better, more rational way

[11:48:28.0000] <annevk>
caitp: but we can't change it, as that would mean destroying someone else's creation

[11:48:50.0000] <caitp>
their creation would still exist, would it not

[11:50:07.0000] <annevk>
caitp: some permille is not a handful of people

[11:50:57.0000] <caitp>
most people aren't authoring websites, people people authoring websites aren't doing things like putting <divs> inside of <tables> because the parser will take them out of the table for them

[11:51:30.0000] <caitp>
I don't know that for sure just yet, but I'm confident that it's not very many

[11:53:11.0000] <caitp>
what can we do to figure this out, maybe make a fork of webkit look a message whenever content gets re-arranged by the parser, and set up a headless browser to crawl the top million sites or something and see how many messages get logged?

[11:54:03.0000] <Hixie>
chrome already has instrumentation to detect how often something happens. you could just add the instrumentation simon described on the bug in comment 10.

[11:54:27.0000] <annevk>
caitp: look up "use counters" for Chrome

[11:54:42.0000] <annevk>
caitp: for Gecko it'd be telemetry

[11:55:01.0000] <annevk>
caitp: I've come across sites that expect that in the past

[11:55:20.0000] <caitp>
yeah but that's not very headless, it would take forever to crawl through the top million sites manually ;)

[11:55:28.0000] <annevk>
caitp: Opera had bugs around it; implementing the HTML parser helped with those sites

[11:55:56.0000] <caitp>
I don't doubt that such sites exist

[11:55:57.0000] <annevk>
caitp: the idea behind use counters and telemetry is that the users of Chrome and Firefox do that for you

[11:56:04.0000] <caitp>
what I doubt is that there is a reason to care that they exist

[11:56:24.0000] <annevk>
caitp: so you get numbers that matter to actual end users, which seems to be roughly what you're after

[11:56:30.0000] <Domenic_>
I guess you just have to accept that we care more about not breaking the web than you do

[11:56:52.0000] <caitp>
I care about not breaking the web more than it already is

[11:57:05.0000] <caitp>
ideally, it can be made less broken than it already is, too

[11:57:07.0000] <Domenic_>
Then stop trying to break it.

[11:57:27.0000] <caitp>
removing inconsistent irrational behaviour is an improvement, even if it breaks a few insignificant sites

[11:57:43.0000] <caitp>
in irrelevant ways that at worst cause a graphical error

[11:57:53.0000] <Domenic_>
That depends on your priorities

[11:58:18.0000] <Domenic_>
We prioritize not breaking the web. You prioritize ... something about preferring less steps in the parser algorithm?

[11:58:47.0000] <caitp>
what I prefer is not causing authors to care about nonsense like the broken parser algorithm

[11:59:01.0000] <Domenic_>
Authors don't care about it.

[11:59:10.0000] <caitp>
except when they do

[11:59:10.0000] <Domenic_>
They just run validators

[11:59:39.0000] <caitp>
with custom elements, it's even worse than it was before, because now people have a more legitimate reason to use non-table content in a table

[11:59:42.0000] <caitp>
(for example)

[12:00:00.0000] <caitp>
is=* is just a hack around brokenness, and authors should not have to care about brokenness or use a hack to get around it

[12:01:02.0000] <zcorpan>
Ms2ger: https://bitbucket.org/zcorpan/anolis/commits/c2f1273d351914143df7e546175a141074b48adf

[12:01:21.0000] <annevk>
is=* is not really for that, it's mostly about browser internals checking for element name / namespace rather than class

[12:01:43.0000] <annevk>
it helps with <tr> sure, but I think it wasn't really designed as a hack around the parser, more as a hack around browser internals

[12:01:49.0000] <Domenic_>
I honestly don't understand is="", but I am pretty sure that's my fault.

[12:02:00.0000] <annevk>
Domenic_: you could read up on it ;-)

[12:02:31.0000] <caitp>
I wasn't able to find it without asking, because everything is split into about 2 dozen specs each these days

[12:02:42.0000] <caitp>
minimum

[12:03:47.0000] <caitp>
at any rate, there are backwards-compatible things that could be done to not break those sites (i've named some)

[12:04:07.0000] <Domenic_>
annevk: spec is uninformative on rationales, and articles give weak justifications that don't satisfy me.

[12:04:42.0000] <Ms2ger>
Fallback for non-supporting browsers and a11y, last I checked

[12:05:01.0000] <zcorpan>
mathiasbynens: i'm impressed by your work (the encodings)

[12:05:22.0000] <annevk>
Domenic_: the main reason I saw was that browsers would need major refactoring and CSS would need some kind of inheritance based selector (might be a good idea though)

[12:05:42.0000] <annevk>
Domenic_: e.g. HTMLButtonElement defines a set of behaviors, but you style it with button {}

[12:05:46.0000] <mathiasbynens>
zcorpan: i just wrote a script that generates all these

[12:05:52.0000] <annevk>
Domenic_: if you subclass HTMLButtonElement, you lose the styling

[12:05:57.0000] <Domenic_>
Ms2ger: the a11y thing is interesting. Again ties back to https://github.com/dglazkov/html-as-custom-elements/issues/14

[12:06:07.0000] <annevk>
Domenic_: that's why you use id=*, partially

[12:06:15.0000] <mathiasbynens>
zcorpan: annevk's easily parseable index files make it simple

[12:06:19.0000] <Domenic_>
annevk: hmm, so that you get button's styles?

[12:06:27.0000] <caitp>
oh, by the way, I'm not saying taht there is necessarily no reason to use the 'is' attribute

[12:06:36.0000] <caitp>
but it should not be used as a hack around the parser

[12:06:39.0000] <annevk>
Domenic_: there's a bunch of other places that use "button" rather than "is HTMLButtonelement" too, unfortunately rationale is in email somewhere

[12:06:40.0000] <zcorpan>
mathiasbynens: yeah, i'm impressed that you make it simple :-)

[12:06:50.0000] <Domenic_>
Ms2ger: the fallback reasoning is good, at least for easy cases like <button is="fancy-button">. I don't know why I forgot it.

[12:08:41.0000] <zcorpan>
Ms2ger: if i need to jump through a hoop to make the typo fix materialize in the PR i'm happy to do it but i have no idea what i should do

[12:09:03.0000] <Ms2ger>
zcorpan, I'm looking

[12:09:09.0000] <zcorpan>
k :-)

[12:10:16.0000] <Ms2ger>
zcorpan, apparently you need to hit the PR button again, and then it updates the existing PR

[12:10:21.0000] <Ms2ger>
Anyway, merged

[12:10:27.0000] <Ms2ger>
Thanks for the patch

[12:11:02.0000] <zcorpan>
ok, thanks. (i didn't see a PR button to begin with though)

[12:11:24.0000] <zcorpan>
hmm. maybe that's because i'm not logged in

[12:11:47.0000] <zcorpan>
explains things

[12:11:50.0000] <Ms2ger>
Ah, that's plausible

[12:12:20.0000] <zcorpan>
clearer UI would be a grayed-out PR button with a speech bubble next to it saying i need to log in :-)

[12:31:59.0000] <zcorpan>
does http://www.whatwg.org/specs/web-apps/current-work/multipage/fragment-links.js contain *all* defined terms?

[12:32:09.0000] <Hixie>
i think so

[12:32:54.0000] <zcorpan>
so why do we have html.json in xref? https://github.com/whatwg/xref/blob/master/xrefs/dom/html.py

[12:33:09.0000] <Hixie>
i am unfamiliar with that file

[12:33:42.0000] <Ms2ger>
It's generated from the former, no?

[12:34:37.0000] <zcorpan>
Ms2ger: html-generated.json is generated from html.json with links updated to point to multipage. but html.json isn't generated i think

[12:35:15.0000] <Ms2ger>
Oh, right

[12:35:22.0000] <zcorpan>
but if fragment-links.js contains all IDs we could drop html.json and just get all the data from fragment-links.js

[12:36:49.0000] <Ms2ger>
Even stuff like "i": "the-i-element", "id": "the-id-attribute",?

[12:36:54.0000] <Ms2ger>
/me wonders why that's done

[12:37:09.0000] <Ms2ger>
I don't know

[12:37:33.0000] <Hixie>
i recommend waiting til i replace my pipeline

[12:37:38.0000] <Hixie>
then i can just generate whatever you need

[12:37:57.0000] <zcorpan>
oh, fragment-links.js doesn't contain the terms. just the IDs

[12:38:12.0000] <zcorpan>
ok

[12:38:49.0000] <zcorpan>
Hixie: xref is used by basically all anolis specs

[12:39:13.0000] <Hixie>
right

[12:39:26.0000] <Hixie>
i'll be able to generate that, and whatever tab needs, etc

[12:39:31.0000] <Hixie>
and host it in a well-known location

[12:39:33.0000] <zcorpan>
ok yeah

[12:39:51.0000] <Hixie>
i hope to also do cross-refs the other way as part of this, eventually

[12:40:18.0000] <Hixie>
maybe just automatically parse the target specs, figure out the terms, and link that way

[12:41:19.0000] <zcorpan>
i think bikeshed does something like that

[12:41:31.0000] <zcorpan>
or the term database bikeshed uses

[12:41:45.0000] <zcorpan>
Hixie: does https://github.com/ResponsiveImagesCG/picture-element/pull/173/files look ok to you?

[12:44:22.0000] <Hixie>
this is just the current text extracted without changes?

[12:44:30.0000] <Hixie>
(plus the license)

[12:44:33.0000] <zcorpan>
yes

[12:44:46.0000] <Hixie>
lgtm

[12:44:56.0000] <zcorpan>
i preserved your history also

[12:45:00.0000] <Hixie>
is there a url i can fetch it from?

[12:45:28.0000] <Hixie>
i don't see a "raw" link on that page

[12:45:42.0000] <Hixie>
https://raw.githubusercontent.com/zcorpan/picture-element/add-html-spec/source ?

[12:45:48.0000] <zcorpan>
i guess it will show up here when it's merged https://raw.githubusercontent.com/ResponsiveImagesCG/picture-element/gh-pages/source

[12:45:57.0000] <zcorpan>
it's just a PR so far

[12:46:29.0000] <Hixie>
k let me know when there's a firm url

[12:46:36.0000] <Hixie>
(or file a bug)

[12:46:39.0000] <Hixie>
(that might be easier)

[12:46:44.0000] <zcorpan>
ok

[12:50:28.0000] <zcorpan>
Hixie: the non-normative section 4.7.1.2 Adaptive images got lost, but maybe that can just be dropped

[12:54:40.0000] <Hixie>
well presumably you'll have an equivalent replacement

[12:55:08.0000] <zcorpan>
yeah

[13:09:24.0000] <TabAtkins>
Hixie: It would be great if you used Shepherd's link db along with Bikeshed.  More people using it means more improvements.

[13:09:45.0000] <Hixie>
i'm a ways from this being something i need to worry about :-)

[13:09:54.0000] <Hixie>
i expect i will try to get away without using a db at all

[13:10:00.0000] <TabAtkins>
I have relatively complicated link handling, but I think you're more explicit about things, so that might not be as necessary.

[13:10:12.0000] <TabAtkins>
The "db" is just a JSON file. ^_^

[13:10:21.0000] <Hixie>
right, whatever form :-)

[13:10:34.0000] <Hixie>
i just mean, i'd figure out the IDs from just parsing the target spec's HTML

[13:11:23.0000] <TabAtkins>
Yeah, since you just link to IDs that may be sufficient.

[13:11:41.0000] <TabAtkins>
Bikeshed goes to lengths to allow you to just link the text and have it automatically figure out what term and what spec you're trying to refer to.

[13:12:35.0000] <Hixie>
i figure the spec already has to link to the target specs

[13:12:45.0000] <TabAtkins>
Wrt "what I need", the spec mainly just needs to indicate the type of the dfn.  Bikeshed's got a taxonomy.

[13:12:45.0000] <Hixie>
so you just crawl all of those to figure out which you're referencing

[13:13:04.0000] <TabAtkins>
Bikeshedded specs rarely have to explicitly link to any other specs.

[14:18:44.0000] <zcorpan>
Hixie: merged now

[15:02:56.0000] <Hixie>
lol. i try to open an HTML file that has content-disposition:attachment in firefox

[15:03:09.0000] <Hixie>
firefox is like "oh hell no, i ain't opening this! wanna send it to chrome?"

[15:03:16.0000] <Hixie>
sure, firefox, throw chrome under the bus. :-P

[15:17:09.0000] <Hixie>
TabAtkins: any feedback on https://www.w3.org/Bugs/Public/show_bug.cgi?id=24991 ? in particular, what BBB should be?

[15:20:41.0000] <TabAtkins>
Oh, BBB should probably be a pseudo-class.

[15:23:04.0000] <kbrosnan>
Hixie: https://addons.mozilla.org/en-US/firefox/addon/inlinedisposition/?src=ss

[15:23:41.0000] <Hixie>
TabAtkins: do you really think it's worth introducing a pseudo-class just for this?

[15:23:52.0000] <Hixie>
i mean, i agree in theory

[15:23:55.0000] <TabAtkins>
Yeah, sure.  Modal dialogs seem usefully detectable.

[15:23:58.0000] <Hixie>
k

[15:24:13.0000] <Hixie>
do i just spec that out, or do i file a bug on selectors, or...?

[15:24:51.0000] <TabAtkins>
Preferably email www-style.

[15:25:02.0000] <Hixie>
k

[15:25:43.0000] <TabAtkins>
That way I can talk about it in the telcon tomorrow and agree to either add it to Selectors or let HTML define it.

[15:26:07.0000] <Hixie>
(are we working on anything that explains pseudo-classes? seems like this kind of thing can could up often with new components. we're already defining pseudo-elements of some sort, right?)

[15:26:47.0000] <TabAtkins>
For pseudo-classes, yes: http://dev.w3.org/csswg/css-extensions/

[15:26:51.0000] <TabAtkins>
For pseudo-elements, no, not yet.

[15:26:55.0000] <TabAtkins>
But it's on my radar.

[15:27:08.0000] <Hixie>
cool

[15:28:22.0000] <Hixie>
hmm, neat ideas in that spec

[15:28:33.0000] <Hixie>
i look forward to it :-)

[15:29:56.0000] <Hixie>
message regarding :modal sent to www-style

[15:30:07.0000] <Hixie>
oh, crap, i failed to not give a suggested name. damnit.

[15:30:26.0000] <Hixie>
i specifically didn't want to give a proposed name, and i screwed up at the very end and didn't notice until i'd sent it

[15:30:29.0000] <Hixie>
-_-

[16:09:04.0000] <zcorpan>
my grep for foster parentings in webdevdata resulted in a 4.6 MB file :-|

[16:23:35.0000] <Hixie>
zcorpan: what did you search for?

[16:24:14.0000] <zcorpan>
Hixie: https://gist.github.com/zcorpan/c330049466a705f714b7

[16:25:01.0000] <Hixie>
ah yeah, similar to what i tried

[16:25:26.0000] <Hixie>
i got so many hits that our internal system just told me to make the query more specific and that it couldn't give me the results

[16:27:49.0000] <caitp>
anyways, like I said on the bug, what if the spec were altered in a backwards compatible way?

[16:29:15.0000] <caitp>
like, don't reparent tags whose local name contains a hyphen (which is suggested in custom elements), or, don't reparent if the not in quirks mode, or...

[16:29:19.0000] <zcorpan>
caitp: see comment 21

[16:29:52.0000] <zcorpan>
quirks mode doesn't help here

[16:29:55.0000] <caitp>
if you have element foo-bar, you probably don't care about old browsers

[16:30:03.0000] <caitp>
your app is probably not targeting old browsers

[16:30:24.0000] <zcorpan>
why wouldn't you care about old browsers for foo-bar?

[16:30:44.0000] <zcorpan>
you could use a custom elements polyfill for old browsers

[16:30:45.0000] <caitp>
because you're either using custom elements, or you're using a framework which targets modern browsers, like Angular or Ember

[16:31:56.0000] <zcorpan>
i don't see how either of those mean you don't care about old browsers

[16:32:18.0000] <zcorpan>
(old browsers here includes all browsers that exist today)

[16:32:53.0000] <caitp>
the frameworks in particular are working to make old browsers irrelevant, we don't want to care about them

[16:33:10.0000] <caitp>
we'd all be very happy if they just evaporated

[16:34:09.0000] <caitp>
and as for custom elements, well, if you do care about old browsers, you could use a hack like is=*

[16:34:18.0000] <zcorpan>
i think we're thinking different things about "old browser"

[16:34:41.0000] <caitp>
I'm not talking about netscape 2

[16:34:49.0000] <zcorpan>
let's say browsers accept to do your change

[16:35:05.0000] <zcorpan>
in 1 year from now, firefox is first out to ship the change

[16:35:25.0000] <zcorpan>
then firefox is "new" and chrome, safari, opera, ie, everyone else is "old"

[16:35:36.0000] <zcorpan>
would you not care about everyone but firefox?

[16:35:55.0000] <caitp>
no, so here's what happens

[16:36:15.0000] <caitp>
change takes time, it takes time to make minor fixes, it takes time to make sure that the spec makes sense

[16:36:51.0000] <caitp>
but if we agree that we want something to be sensible in the future, this means committing to start fixing this stuff. and that doesn't mean it has to happen all at once

[16:37:15.0000] <caitp>
so you could say "well, we'll roll this in in a backwards compatible fashion, and drop the old way in 6-10 years"

[16:37:42.0000] <caitp>
nothing has to happen all at once, but it's good to have a direction to go in

[16:37:59.0000] <caitp>
and from my perspective, the direction for the web is not "make it more insane", but quite the opposite

[16:38:54.0000] <caitp>
so over some period of time, whether it's 5 years or 10, marriagebuilders.com and kingsex.eu can work to fix their layouts, if they still exist by then

[16:39:20.0000] <caitp>
(which is probably being optimistic)

[16:39:54.0000] <zcorpan>
there's no incentive for them to fix the markup

[16:39:55.0000] <caitp>
and even if their layouts break,  a little bit, I'll bet most of them are still readable

[16:40:33.0000] <caitp>
and if they don't fix their markup, who cares?

[16:40:53.0000] <zcorpan>
i don't

[16:41:10.0000] <caitp>
their users are going to install a virtual machine to watch porn or something on ie11?

[16:41:17.0000] <caitp>
so what?

[16:41:29.0000] <caitp>
it's not a good reason to hold sanity back

[16:42:52.0000] <caitp>
I think we can make this work so that authors don't have to write unreadable garbage markup just to make poorly thought out parsing rules happy

[16:43:22.0000] <zcorpan>
i think you have it backwards how the parsing algorithm came into being

[16:43:45.0000] <caitp>
I know how it came into being

[16:43:49.0000] <caitp>
it doesn't have to continue to be irrational

[16:44:02.0000] <zcorpan>
then why do you say it is poorly thought out?

[16:44:07.0000] <caitp>
because it is

[16:44:24.0000] <zcorpan>
how?

[16:44:27.0000] <caitp>
inconsistent with the rules of the rest of the browser -> poorly designed

[16:44:40.0000] <caitp>
it's a shaky foundation that you don't want to build a house on

[16:45:16.0000] <zcorpan>
.... now i'm either very confused or i'm back to "i think you have it backwards how the parsing algorithm came into being"

[16:45:34.0000] <zcorpan>
anyway i need to sleep

[16:46:10.0000] <caitp>
I understand that they had some silly idea that they needed to deal with peoples crap markup in some way

[16:46:55.0000] <zewt>
(hint: starting with "everything you're doing is silly" isn't a very productive way to open a conversation)

[16:46:55.0000] <caitp>
but in this case in particular, it's complete crap, you don't re-arrange peoples markup, especially when there's no reason to

[16:47:28.0000] <caitp>
well, what else do you call it zewt, there's a lot of silly nonsense on the web

[16:47:59.0000] <zewt>
(another hint: start by asking why it's being done the way it is, since you don't appear to know)

[16:48:16.0000] <caitp>
okay, I'll take your hint and ask you

[16:48:29.0000] <caitp>
why do we feel it's necessary to re-arrange markup that someone purposefully wrote in some fashion

[16:49:01.0000] <zewt>
i'm the wrong person to ask, but my understanding is: if the spec demands that browsers do things which break existing webpages, even "silly crap" webpages, browsers won't do it and the spec becomes irrelevant

[16:49:34.0000] <zewt>
if you want details, especially about a particular case, ask the editor for the spec you're reading

[16:49:35.0000] <caitp>
I can understand that

[16:50:12.0000] <caitp>
I don't think the person who came up with the html parser is still doing this, they must be in their 90s by now

[16:51:26.0000] <zewt>
where the parser originally came from is academic (and probably very complicated)

[16:52:03.0000] <caitp>
and it wouldn't be polite to bother a 90 year old enjoying their retirement in florida

[16:52:06.0000] <Hixie>
more like early 40s... it was only 20 years ago

[16:53:24.0000] <caitp>
I have a tendency to exaggerate, Hixie :)

[16:55:21.0000] <caitp>
but, I don't think I'm going to find them to ask why they decided to re-arrange authored content --- however I've read things by other people who have had similar critiques (and yes, a lot of them were xml people)

[16:56:48.0000] <Hixie>
i doubt they did it very consciously

[16:57:03.0000] <Hixie>
though the guy who thrust <i><b></i></b> on us is, iirc, cwilso_____


2014-05-07
[20:31:51.0000] <zewt>
those small, dubious bits of fame

[21:05:47.0000] <zewt>
sort of amazing how libjpeg is one of the most reliable libraries in existence, with such a terrible api

[21:06:22.0000] <zewt>
i guess the fact that if you misuse it, it tends to implode immediately instead of subtly six months later helps

[21:11:38.0000] <MikeSmith>
cabanier: do you have any idea of what the intent of the following change was?

[21:11:41.0000] <MikeSmith>
cabanier: https://github.com/w3c/html/commit/22b565f08ca451729d845cd39997b65585d06732

[21:12:11.0000] <MikeSmith>
cabanier: I realize you didn't make the change. Jay did. I'm just trying to figure out what his goal was.

[21:12:43.0000] <cabanier>
MikeSmith: yes. This clarifies the behavior of createPattern and makes the normative text match the box above

[21:12:51.0000] <cabanier>
MikeSmith: It also makes it match the whatwg spec

[21:12:52.0000] <MikeSmith>
cabanier: OK

[21:13:34.0000] <MikeSmith>
cabanier: I ask because I'm trying to get the document ready for publication, and it's failing validation because Jay introduced a markup error when he made the change.

[21:14:16.0000] <cabanier>
MikeSmith: the webkit bug to make this work on webkit is here: https://bugs.webkit.org/show_bug.cgi?id=132407

[21:14:22.0000] <cabanier>
MikeSmith: ah

[21:14:31.0000] <cabanier>
MikeSmith: anything I can do?

[21:15:54.0000] <MikeSmith>
cabanier: nah I can fix it myself I guess, assuming that the stuff at https://github.com/w3c/html/commit/22b565f08ca451729d845cd39997b65585d06732#diff-36cd38f49b9afa08222c0dc9ebfe35ebR42788 is a mistake

[21:16:01.0000] <MikeSmith>
I can't see what else it would be

[21:16:58.0000] <cabanier>
MikeSmith: it looks like a mistake

[21:17:36.0000] <MikeSmith>
cabanier: ok

[21:41:49.0000] <MikeSmith>
cabanier: btw it seems that change was only made on the html5_canvas_CR branch, right?

[21:41:59.0000] <cabanier>
MikeSmith: likely

[21:42:04.0000] <MikeSmith>
ok

[21:42:27.0000] <MikeSmith>
cabanier: it doesn't need to be made on the nightly branch?

[21:43:28.0000] <cabanier>
MikeSmith: it should but we haven't brought everything over yet

[21:43:56.0000] <MikeSmith>
ok

[21:43:57.0000] <cabanier>
MikeSmith: once level 1 is CR, we can do level 2 in earnest

[21:44:02.0000] <MikeSmith>
I see

[21:44:18.0000] <cabanier>
MikeSmith: move over all changes, start stripping unimplemented features, etc

[21:48:41.0000] <MikeSmith>
yeah

[23:02:51.0000] <MikeSmith>
cabanier: so I've spent an hour and half now dealing with fixes to get canvas CR document to pass pubrules, despite having been told the document was "ready to go"

[23:35:03.0000] <cabanier>
MikeSmith: did Jay not run them?

[23:35:11.0000] <cabanier>
I guess he didn't

[23:35:17.0000] <cabanier>
MikeSmith: sorry about that!

[23:40:20.0000] <dbaron>
hrmmmm

[23:40:27.0000] <MikeSmith>
cabanier: Jay doesn't seem to be able to figure out the build steps. The build setup is baraque and unclear to me also but the way I figure it out is by looking at the code for the python scripts the build uses.

[23:41:16.0000] <dbaron>
bounces of emails that are rejected by the whatwg list come from the exact same envelope sender as messages *on* the list, and thus they get filtered in my mail setup to the folder with the list mail... and thus I miss the fact that my messages to the whatwg list are all being rejected for being GPG-signed

[23:42:01.0000] <MikeSmith>
cabanier: I would think that anybody else who had any experience dealing with headaches of trying to use an arcane build process that somebody else made would do the work of going through the same process that I'm doing right now.

[23:42:36.0000] <MikeSmith>
cabanier: instead, I have to do it. Because Jay apparently just kind of threw his hands up and gave up.

[23:43:07.0000] <MikeSmith>
cabanier: Which I don't mind really except that his name is on the document as the editor who's responsible for it.

[23:43:13.0000] <MikeSmith>
cabanier: or one on the names

[23:43:49.0000] <MikeSmith>
cabanier: frankly I really can't figure out what value the rest of the canvas editors are adding here

[23:44:21.0000] <MikeSmith>
cabanier: but I would like at a minimum that they first do no harm

[23:44:57.0000] <MikeSmith>
cabanier: so that I don't have a spend hours cleaning after their bungling

[23:45:28.0000] <MikeSmith>
cabanier: seriously I would really prefer that you be the single editor of the W3C document and the others just please get out of the way

[23:49:33.0000] <MikeSmith>
dbaron: can't speak to the envelope-sender problem but I vaguely recall that when I sent GPG-signed messages to the whatwg list before, I had to do them in the inline-signing way instead of with the signature as an attachment

[00:02:20.0000] <SamB>
MikeSmith: eww!

[00:22:16.0000] <MikeSmith>
is heading::after { content: leader(dotted) }

[00:22:29.0000] <MikeSmith>
... currently valid in CSS?

[00:23:06.0000] <MikeSmith>
or content: leader(". ")

[00:46:09.0000] <krit>
zcorpan: Hi. Do you travel to Seoul?

[00:47:46.0000] <zcorpan>
krit: yep

[00:48:07.0000] <krit>
zcorpan: cool, want to ask for FPWD of Geometry Interface there

[00:48:21.0000] <Ms2ger>
You know you can just send that to the list too, right?

[00:48:31.0000] <zcorpan>
krit: i don't mind FPWDing it

[00:49:09.0000] <krit>
Ms2ger: I need to do it anyway. Just want to check if the other editors are fine with the next step :)

[00:57:33.0000] <foolip>
Hixie: I haven't created a bug for the XHTML <input> bug, I discovered it while writing that comment. when cloning the content attribute is copied and the IDL attribute is set to true

[02:31:16.0000] <annevk>
ffffuuuu

[02:31:42.0000] <annevk>
Domenic_: http://www.w3.org/TR/media-source/#mediasource new list objects and methods to manipulate them that aren't even on the list objects...

[02:33:41.0000] <annevk>
Hixie: you might want to take a look at that API too o_O

[02:35:56.0000] <MikeSmith>
annevk: I been saying for a while that I wish you guys would be looking at the MSE spec carefully. I see now that kinetik sent an intent message for it

[02:36:16.0000] <MikeSmith>
anyway I guess I could have made more noise about it

[02:36:32.0000] <annevk>
MikeSmith: I thought we convinced them to stop using createObjectURL()

[02:37:26.0000] <MikeSmith>
annevk: I thought they should be able to to realize that by themselves

[02:37:33.0000] <MikeSmith>
didn't even realize that was still in there

[02:37:39.0000] <annevk>
MikeSmith: there's too much uninformed people writing specs; W3C shouldn't accept anyone willing without giving them proper guidance

[02:37:55.0000] <MikeSmith>
well yeah

[02:38:39.0000] <MikeSmith>
but the decisions about editors should be made by WGs

[02:38:48.0000] <MikeSmith>
and the chairs of WGs

[02:39:16.0000] <annevk>
sure, but there's Team people assigned to WGs too

[02:39:17.0000] <MikeSmith>
and that requires compentency and discernment on the part of chairs

[02:39:27.0000] <MikeSmith>
annevk: true

[02:40:48.0000] <MikeSmith>
if the decisions were mine we'd have quite a few less editors

[02:41:15.0000] <annevk>
there's that too, assigning multiple editors to a single specification is asking for trouble

[02:41:44.0000] <MikeSmith>
sometimes there are good reasons for it

[02:41:51.0000] <MikeSmith>
but many times there aren't

[02:42:02.0000] <annevk>
but editors not keeping track of IDL discussions is really problematic when it's all still being figured out

[02:42:48.0000] <MikeSmith>
annevk: that spec predates some of the recent discussions

[02:43:03.0000] <MikeSmith>
it's already been implemented and shipped and it's being used in production

[02:43:13.0000] <annevk>
in Chrome and IE?

[02:43:29.0000] <MikeSmith>
the time to scrutinize it carefully was last year, or before

[02:43:32.0000] <MikeSmith>
annevk: yeah

[02:43:41.0000] <annevk>
oh

[02:43:44.0000] <annevk>
bah

[02:43:47.0000] <MikeSmith>
Netflix is using it, others are too

[02:48:04.0000] <MikeSmith>
annevk: anyway I take your point about the W3C team needing to assert more responsibility over not just accepting anybody as editors just because they're willing

[02:48:20.0000] <MikeSmith>
the "giving them proper guidance" part is the hard part

[02:48:54.0000] <MikeSmith>
so fail to adhere to guidance even after it's given

[02:49:37.0000] <MikeSmith>
but aside from that it seems like the spec reviews the TAG has been providing have helped

[02:49:45.0000] <annevk>
If Jeff wants to continue to make the point that the W3C needs staff, they better do something

[02:49:47.0000] <annevk>
Yeah a bit

[02:50:54.0000] <MikeSmith>
annevk: I have yet to see any editors respond outright negatively to any specific changes requested in TAG review

[02:51:17.0000] <MikeSmith>
it seems like they pretty much have been very glad to have the review

[02:51:22.0000] <annevk>
It's more that the TAG hasn't done much review

[02:54:39.0000] <MikeSmith>
annevk: I guess they should do more then

[02:56:00.0000] <MikeSmith>
as fun as it is to hate on authority, I guess sometimes having an authority to answer to helps keep people honest

[02:57:00.0000] <MikeSmith>
I mean it's a lot harder for some editor or WG to just blow off comments from the TAG than it is for the editor or WG to do that to an individual reviewer

[02:57:47.0000] <annevk>
Which is fucked

[02:57:57.0000] <MikeSmith>
sure

[02:58:22.0000] <MikeSmith>
it's fucked that WGs can blow off comments without consequences

[02:58:38.0000] <annevk>
E.g. I think http://annevankesteren.nl/2011/01/wai-aria-objection is still unresolved

[02:59:30.0000] <MikeSmith>
but again the main responsibility there is supposed to be on the chairs to act in good faith and make sure that all comments are either resolved to satisfaction or brought the Director's attention

[03:00:13.0000] <MikeSmith>
annevk: yeah in that case during the transition call they actively misrepresented the status of your comment

[03:00:18.0000] <MikeSmith>
as far as I can see

[03:00:43.0000] <annevk>
Would not surprise me

[03:01:11.0000] <annevk>
MikeSmith: btw, if that MediaSource thing is implemented, how does the Stream thing work that's mentioned in the draft?

[03:01:16.0000] <annevk>
MikeSmith: I guess that bit isn't implemented?

[03:02:06.0000] <MikeSmith>
dunno but yeah I'd guess that part may not be in the implementations

[04:14:08.0000] <annevk>
Why the fuck does Firefox still prompt for this? http://dump.testsuite.org/xhr/upload-redirect.html

[04:17:30.0000] <annevk>
smaug____: can you explain why in that URL there's no progress event before the prompt?

[04:23:46.0000] <smaug____>
hmm

[04:25:10.0000] <annevk>
also, the prompt needs to die, just commented on the bug that sicking filed ages ago

[04:26:00.0000] <smaug____>
ah, upload progress

[04:26:14.0000] <smaug____>
why would there be upload progress before the prompt ?

[04:29:10.0000] <smaug____>
redirect, then you upload the data

[04:29:51.0000] <annevk>
smaug____: how do you know there's a redirect?

[04:30:22.0000] <annevk>
smaug____: data is part of the request, redirect is the response

[04:31:47.0000] <smaug____>
redirect is part of request too

[04:31:56.0000] <smaug____>
no

[04:31:59.0000] <smaug____>
?

[04:32:07.0000] <annevk>
no

[04:32:21.0000] <annevk>
-> lunch

[04:32:39.0000] <smaug____>
well, it is

[04:32:58.0000] <smaug____>
since there is the other connection to the redirected url

[04:37:59.0000] <smaug____>
annevk: what happens if you send some more data and redirect

[04:40:19.0000] <zcorpan>
jgraham: could critic be less silent about tracking breaking? maybe it could add a new comment in the PR?

[04:42:37.0000] <jgraham>
zcorpan: It's very noisy to me :)

[04:43:08.0000] <jgraham>
eah. I think with a bit of work I could maybe make it try to rebase automatically. But I'm not sure

[04:47:48.0000] <zcorpan>
yeah best would be if it figured things out and tracking wouldn't break of course :-)

[04:48:02.0000] <smaug____>
annevk: but redirects are interesting from progress events point of view

[05:13:31.0000] <annevk>
smaug____: yes they are

[05:13:56.0000] <annevk>
smaug____: I'm trying to figure out https://bugzilla.mozilla.org/show_bug.cgi?id=882458

[05:14:00.0000] <annevk>
smaug____: which adds CORS to the mix

[05:14:04.0000] <smaug____>
annevk: anyhow, I think it is some timing issue that redirect handling gets handled before some queued upload notifications.

[05:14:29.0000] <smaug____>
annevk: so uploading some huge data might give different results

[05:14:49.0000] <smaug____>
for the prompt case

[05:18:41.0000] <smaug____>
annevk: per spec what should happen to the upload progress events in case of redirect

[05:20:48.0000] <annevk>
smaug____: I think what we do is correct

[05:21:16.0000] <annevk>
smaug____: redirects should not be observable from the page as they happen

[05:21:24.0000] <annevk>
smaug____: apart from the prompt, we shouldn't prompt

[05:21:34.0000] <smaug____>
well, XHR case

[05:22:08.0000] <smaug____>
perhaps the API user would like to know

[05:22:50.0000] <annevk>
smaug____: https://www.w3.org/Bugs/Public/show_bug.cgi?id=24375 we can't reveal much about redirects

[05:24:05.0000] <smaug____>
don't browsers change POST to GET in case of certain 30x responses

[05:24:10.0000] <smaug____>
what happens to the data

[05:25:37.0000] <annevk>
smaug____: it won't be included in the subsequent request

[05:26:02.0000] <annevk>
smaug____: that can probably use some clarification in the Fetch Standard I suspect

[05:26:58.0000] <smaug____>
annevk: yet responseURL url points to the final url, which might have got the data after all

[05:28:01.0000] <annevk>
smaug____: no

[05:28:31.0000] <smaug____>
wait, what

[05:28:51.0000] <annevk>
smaug____: you do a request with a body attached; you get a response that redirects and degrades to GET; you do another request to the new URL without body attached; you get a response

[05:28:53.0000] <smaug____>
responseURL is what?

[05:29:00.0000] <annevk>
responseURL will point to the new URL

[05:29:07.0000] <smaug____>
exactly

[05:29:16.0000] <annevk>
how would it get the data?

[05:29:17.0000] <smaug____>
the final url

[05:29:23.0000] <annevk>
it's only included in the first request

[05:29:24.0000] <smaug____>
er, oops

[05:29:37.0000] <smaug____>
s/ might have got the data after all/ might not  have got the data after all/

[05:29:47.0000] <annevk>
ah

[05:29:48.0000] <smaug____>
so that is odd API

[05:30:01.0000] <smaug____>
you thought you sent data somewhere

[05:30:08.0000] <annevk>
and you did

[05:30:10.0000] <smaug____>
and you think you know where it went...

[05:30:30.0000] <annevk>
so yes, you can't figure out if the data was sent several times or not

[05:30:57.0000] <annevk>
I didn't design HTTP...

[05:31:01.0000] <smaug____>
yup

[05:31:11.0000] <smaug____>
yeah, this is just silly, but ok

[05:31:27.0000] <smaug____>
annevk: could you still test post with large upload data

[05:32:25.0000] <smaug____>
browser does know where it uploaded the data, so perhaps XHR should tell that

[05:32:59.0000] <annevk>
we could maybe expose redirect response codes

[05:33:50.0000] <annevk>
redirectStatuses = ["307", "308"]

[05:34:09.0000] <annevk>
then you'd know your request body was uploaded thrice

[06:24:19.0000] <MikeSmith>
annevk: if you have some time, can you please look https://github.com/w3c/web-platform-tests/pull/959 from caitp (changes to test for for the XHR spec)

[06:24:51.0000] <MikeSmith>
these commits: https://github.com/caitp/web-platform-tests/commit/e0b1ae96b20fe2df95fc339e74e98d341ab2c28e & https://github.com/caitp/web-platform-tests/commit/3adde96454f633bdf537e13b18c70b5ff17e11ac

[06:26:06.0000] <MikeSmith>
related to https://github.com/w3c/web-platform-tests/issues/958

[06:28:05.0000] <MikeSmith>
apparently Hallvord made a test change a while back to match some change that had been made to the spec

[06:29:36.0000] <MikeSmith>
and/or I guess I could also ask Hallvord to look at it

[06:30:07.0000] <annevk>
MikeSmith: better ask hallvors, but I added some comments

[06:30:12.0000] <MikeSmith>
oh thanks

[06:30:14.0000] <annevk>
MikeSmith: second change seems wrong at least

[06:30:18.0000] <MikeSmith>
just sawa your comments

[06:30:36.0000] <MikeSmith>
I'll ping Hallvord too

[06:30:51.0000] <caitp>
the second change is not wrong, I commented explaining why

[06:30:55.0000] <annevk>
yes it is

[06:31:10.0000] <annevk>
events can be dispatched synchronously and they're

[06:31:17.0000] <caitp>
if a browser complies with the spec exactly, then UNSENT will never be set before the event is dispatched

[06:31:18.0000] <annevk>
there's nothing in the spec that says a task is queued

[06:31:23.0000] <annevk>
correct

[06:31:31.0000] <annevk>
but the events are not dispatched from a queue

[06:31:40.0000] <caitp>
and therefore, asserting that the readyState is UNSENT during the event listener will never assert correctly

[06:33:10.0000] <annevk>
oh wait, I guess I should have looked at more context

[06:34:47.0000] <annevk>
caitp: sorry, my bad

[06:35:14.0000] <annevk>
caitp: looking at https://github.com/caitp/web-platform-tests/blob/master/XMLHttpRequest/abort-event-order.htm it seems better to move the "state should be UNSENT" check to where xhr.abort() is called

[06:35:15.0000] <jtcranmer>
new URL("http://" + domain) should fail if ToASCII fails, right?

[06:35:21.0000] <annevk>
jtcranmer: yes

[06:35:28.0000] <jtcranmer>
/me glares at Firefox

[06:35:41.0000] <caitp>
I can't remember if that test uses a synchronous request or not

[06:35:50.0000] <caitp>
but I agree, a timeout isn't ideal

[06:36:10.0000] <annevk>
caitp: if it was sync you wouldn't be able to invoke abort()

[06:36:18.0000] <caitp>
yeah

[06:37:21.0000] <caitp>
right, I see what you mean

[06:41:07.0000] <caitp>
i suppose testharness.js doesn't have a way to say "expect N assertions during this test" or something, does it?

[06:47:58.0000] <zewt>
sounds like a headache ("which assertion is missing?")

[06:49:26.0000] <caitp>
well, potentially

[06:49:54.0000] <caitp>
I prefer it to var someAsyncPathWasReached = false; and asserting it is true at some point to be sure it was called, though

[06:50:06.0000] <caitp>
or, somePathWasReached*

[06:50:41.0000] <MikeSmith>
caitp: testharness.js doesn't provide any way to do that afaik

[06:51:19.0000] <MikeSmith>
if it has a way jgraham would know

[06:51:33.0000] <caitp>
I was just looking through it and it doesn't record the number of assertions called

[06:51:48.0000] <MikeSmith>
right

[06:51:57.0000] <MikeSmith>
wait though

[06:52:45.0000] <MikeSmith>
it's possible to report the number of assertions after the test has run

[06:54:08.0000] <caitp>
maybe with steps.length?

[06:57:17.0000] <jtcranmer>
annevk: would you say it's safe to implement URL.domainTo* right now?

[06:59:47.0000] <odinho>
caitp: sometimes having a results array where you push stuff like "upgradeneeded", "success" etc is a nice way imho. Then you get both ordering, not any extras (as long as you add to results even on unexpected events) and clear errors and docs.

[06:59:58.0000] <annevk>
jtcranmer: yeah

[07:00:08.0000] <annevk>
jtcranmer: I can remove the note

[07:00:23.0000] <annevk>
jtcranmer: with everyone roughly agreeing on UTS #46 I think we're done

[07:00:26.0000] <jtcranmer>
I think that'll be easier to get implemented in Firefox than trying to make new URL("") properly handle punycode

[07:00:42.0000] <annevk>
jtcranmer: well... we should really fix both

[07:00:49.0000] <annevk>
jtcranmer: they both hook into the same underlying concept

[07:01:00.0000] <annevk>
jtcranmer: so please file bugs

[07:01:05.0000] <jtcranmer>
annevk: yes, but in terms of implementation details :-)

[07:01:32.0000] <jtcranmer>
annevk: oh, were you going to add some sort of notion of displayable Unicode variants for the homograph attack issue

[07:01:52.0000] <annevk>
caitp: any reason you can't move VerifyResult to after xhr.abort() ?

[07:02:07.0000] <annevk>
caitp: xhr.abort() puts the whole synchronously in the can so that seems fine

[07:02:15.0000] <annevk>
whole thing*

[07:02:52.0000] <caitp>
that would probably be okay

[07:02:57.0000] <annevk>
jtcranmer: my idea was to add domainToUI() for to match what the UI does

[07:03:10.0000] <jtcranmer>
okay

[07:03:49.0000] <caitp>
kind of weird to submit another CL for that test right after the other one was merged though :p but I can see how that would benefit non-compliant browsers better

[07:06:09.0000] <annevk>
oh hallvors just merged it :/

[07:06:14.0000] <annevk>
he shouldn't have merged that

[07:06:27.0000] <annevk>
oh well

[07:06:39.0000] <annevk>
it's mostly because it would be a lot better to not have setTimeout there

[07:06:59.0000] <caitp>
yeah, I'll send another one, I just want to make sure it passes first

[07:07:57.0000] <caitp>
well, nightly fails it :>

[07:17:15.0000] <annevk>
jtcranmer: if you're going to implement and want toUI letting me know would be good

[07:17:27.0000] <annevk>
jtcranmer: please cc me on those bugs

[07:17:29.0000] <jtcranmer>
annevk: I'm thinking about implementing

[07:18:10.0000] <annevk>
jtcranmer: if you need spec updates ping me as well, I try to prioritize stuff that gets implemented

[07:19:12.0000] <jtcranmer>
annevk: it's more like "I need this feature for my own content code and the suckiness of new URL in Firefox killed my idea for a polyfill"

[07:19:41.0000] <annevk>
jtcranmer: you might get baku to fix new URL, but maybe not

[07:20:18.0000] <jtcranmer>
annevk: I know from some experience that there might be a slight internal compat issue with nsURL

[07:24:52.0000] <jtcranmer>
annevk: filed and CC'd

[07:29:40.0000] <annevk>
jtcranmer: ta

[07:29:45.0000] <annevk>
where is smaug?

[07:29:57.0000] <annevk>
anyway, he was correct, http://dump.testsuite.org/xhr/upload-redirect.html now tests a largish blob

[07:54:10.0000] <IZh>
What is the time zone of Ben Schwarz?

[07:59:38.0000] <annevk>
IZh: Australian iirc

[07:59:55.0000] <IZh>
annevk: Thanks.

[08:47:20.0000] <smaug____>
annevk: ping

[08:47:33.0000] <annevk>
smaug____: http://www.nohello.com/

[08:47:49.0000] <smaug____>
while xhr is being processed, the value of responseURL may change, right?

[08:48:05.0000] <smaug____>
ping is not hi

[08:48:23.0000] <smaug____>
except based on nohello

[08:48:29.0000] <smaug____>
/me doesn't like nohello

[08:49:02.0000] <annevk>
smaug____: responseURL is either "" or the URL

[08:49:36.0000] <smaug____>
annevk: right, say before redirection it has some value, and after that something else

[08:49:46.0000] <smaug____>
it is not something for the final url only

[08:49:50.0000] <annevk>
smaug____: no, redirects are not exposed

[08:50:00.0000] <smaug____>
hmm

[08:50:05.0000] <annevk>
smaug____: they are atomic

[08:50:13.0000] <smaug____>
the spec is hard to read these days

[08:50:30.0000] <annevk>
smaug____: you made that comment before, I can't do much with that

[08:51:32.0000] <jgraham>
smaug____: The point is that you could have compressed "ping"; (ack); (question); (answer) into (question); (answer) and saved a rtt

[08:51:58.0000] <smaug____>
the spec says "An XMLHttpRequest has an associated response"

[08:52:05.0000] <jgraham>
The Mozilla habit of doing "ping" rather than just saying something is pretty annoying

[08:52:22.0000] <smaug____>
but it doesn't seem to say that response thing is actually defined in Fetch

[08:53:55.0000] <smaug____>
annevk: so what in the spec says redirects aren't exposed

[08:59:19.0000] <annevk>
smaug____: Fetch follows redirects before returning a response

[08:59:35.0000] <smaug____>
hmm

[09:00:03.0000] <smaug____>
ok, so in which state should XHR be in order to return non-empty responseURL

[09:00:50.0000] <annevk>
smaug____: HEADERS_RECEIVED

[09:04:19.0000] <smaug____>
ok, thanks

[09:04:39.0000] <smaug____>
r- for the responseURL patch then

[09:07:10.0000] <annevk>
smaug____: the way to read the spec is that response is a network error, whose url is null

[09:07:36.0000] <smaug____>
that is one thing which is surprising

[09:07:37.0000] <annevk>
smaug____: we update response for the first time when we change the state to HEADERS_RECEIVED, using the "process response" callback from the network layer

[09:07:55.0000] <smaug____>
that response is in error state even before anything has happened

[09:08:21.0000] <smaug____>
some uninitialized state might make it easier to read

[09:08:34.0000] <annevk>
smaug____: it's kind of convenient since it fills in a bunch of attributes by default

[09:08:47.0000] <annevk>
smaug____: but I could do that and have if/else all over too I suppose

[09:08:59.0000] <annevk>
more text :(

[09:09:00.0000] <smaug____>
sure, but no need to optimize the pseudo code spec has here, IMO

[09:09:32.0000] <smaug____>
that pseudo code isn't after all compiled to binary

[09:09:55.0000] <annevk>
smaug____: https://www.w3.org/Bugs/Public/show_bug.cgi?id=25589

[09:10:13.0000] <smaug____>
thanks

[10:26:27.0000] <Hixie>
dbaron: what's the mime type i should allow?

[10:27:46.0000] <dbaron>
Hixie, multipart/signed, perhaps?  Though I think I've fixed my setup so it doesn't sign messages To or Cc to whatwg@{lists.,}whatwg.org

[10:28:25.0000] <dbaron>
(I forgot about Cc and lists.whatwg.org the last time I did that.)

[10:29:05.0000] <Hixie>
i've added multipart/signed to the list

[11:09:09.0000] <cwilso_____>
hixie: yes, you do recall correctly that I'm personally responsible for overlapping <b> and <i> tags.

[11:11:06.0000] <SamB>
/me tries to remember if those actually appeared in an ICFP contest, or if that demanded a more well-formed markup ...

[11:21:31.0000] <Hixie>
MikeSmith: i just got some 504s from Firefox on Bugzilla, so i guess it's not Chrome's fault

[13:02:29.0000] <caitp>
I'm trying to find where, in http://www.whatwg.org/specs/web-apps/current-work/multipage/links.html or possibly http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html, it would say that a user agent should not scroll to a fragment identifier if the fragment identifier is already in the frame's location

[13:03:00.0000] <caitp>
what might be a better place to look for that, because I'm not seeing anything which would result in that behaviour

[13:04:07.0000] <caitp>
(gecko, blink and safari all seem to share that behaviour, so I assume it's in there somewhere, and it probably shouldn't be)

[13:04:21.0000] <caitp>
s/safari/webkit

[13:04:46.0000] <SamB>
caitp: hmm?

[13:05:15.0000] <SamB>
got a page to show what you mean?

[13:05:21.0000] <caitp>
hang on, I'll get an example

[13:06:02.0000] <caitp>
https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md -> click on the code of conduct link, which will navigate to the #coc fragment

[13:06:06.0000] <caitp>
then scroll up and click on it again

[13:16:12.0000] <zewt>
(a "contributing" page that starts out with "code of conduct" sure makes me not want to contribute)

[13:18:10.0000] <caitp>
well, you're welcome to not contribute if you wish ^_^

[13:19:03.0000] <SamB>
maybe steal linux.git's thing

[13:19:15.0000] <SamB>
"certificate of origin", was it?

[13:20:33.0000] <caitp>
the discussion is really about navigating to fragment identifiers, and not about CoCs :p It's just an example

[13:21:09.0000] <SamB>
hmm, that example seems to (unaccountably) require JS ... at least, it's not working with the scripts blocked ...

[13:21:39.0000] <caitp>
really

[13:23:04.0000] <caitp>
hmm, maybe I can make a simple example in pure html real quick

[13:25:43.0000] <caitp>
huh, you're right, it does seem to be a js thing

[13:26:13.0000] <caitp>
well, that's kind of a relief at least

[13:26:40.0000] <SamB>
I wasn't sure if the strangeness was from JS or not, but the ToC link didn't even seem to work without it

[13:28:03.0000] <caitp>
yeah, that's kind of a relief

[14:01:22.0000] <Hixie>
does arabic use the same baseline as roman/latin scripts?

[14:07:48.0000] <SamB>
hmm, Type1 spec doesn't seem to cover metrics ...

[14:10:37.0000] <SamB>
/me finds http://www.newyorker.com/online/blogs/books/2011/06/where-latin-and-arabic-meet-a-bridging-of-two-alphabets.html when he googles ...

[14:12:16.0000] <Hixie>
yeah i didn't find anything useful doing tons of google searches on the subject, weirdly

[14:22:48.0000] <SamB>
Hixie: I'm going to go with a "it looks like they sure can", because that lady *seems* to use the same baseline for both from what I can see of the pictures there ...

[14:22:56.0000] <SamB>
oh maybe I should check the index of TAOCP

[14:23:00.0000] <astearns_>
Hixie: this image from rishida suggests that Arabic uses an alphabetic baseline http://rishida.net/docs/unicode-tutorial/part6#baseline

[14:23:38.0000] <Hixie>
astearns_: thanks, that does seem pretty clear

[14:24:07.0000] <Hixie>
SamB: the problem is that any individual picture will make it look like all letters in all scripts use the same baseline because unless you're doing ugly things with the font size, they'll always be roughly aligned

[14:24:12.0000] <astearns_>
how it uses the baseline is pretty different in calligraphic Arabic

[14:24:25.0000] <Hixie>
oh?

[14:24:53.0000] <astearns_>
a curved or slanted baseline for a group of characters must touch the baseline

[14:24:59.0000] <astearns_>
but only at one point

[14:25:14.0000] <astearns_>
s/touch the baseline/touch the straight baseline/

[14:25:47.0000] <Hixie>
i'm going to pretend i didn't hear that

[14:25:49.0000] <Hixie>
la la la

[14:26:36.0000] <SamB>
astearns_: I'm going to assume computer typography isn't ready to produce this automatically in any case

[14:27:12.0000] <SamB>
obviously the people who first try to do that in a browser will have a lot of room to experiment ...

[14:27:20.0000] <astearns_>
SamB: I found docs for a software package that does it right as I was googling

[14:27:38.0000] <SamB>
oh?

[14:27:46.0000] <astearns_>
gah, now I have to find it again :)

[14:28:05.0000] <SamB>
I guess, more to the point, WEB BROWSERS suck at straight-line typography as it is

[14:28:31.0000] <astearns_>
SamB: ah, an old, no longer maintained package: http://freetype.org/opentype/index.html

[14:28:48.0000] <SamB>
hah

[14:28:53.0000] <astearns_>
so the next question is whether harfbuzz handles it

[14:29:09.0000] <SamB>
oh wait that's a package name?

[14:29:17.0000] <SamB>
I thought it was the font format's name

[14:29:36.0000] <SamB>
ah, freetype *1*

[14:29:41.0000] <SamB>
that wasn't in the URL

[14:30:06.0000] <SamB>
astearns_: anyway, presumably hixie was talking about the flat one

[14:31:23.0000] <SamB>
I still think harfbuzz is a strange name for a package ...

[14:49:56.0000] <caitp>
the idlharness test failures in wpt are really, really hard to understand :(

[14:52:39.0000] <zewt>
okay, websocket "masking" needs to be shot into the sun

[14:53:05.0000] <MikeSmith>
Hixie: hard to troubleshoot the 504s since so far the systems team has told me they find nothing strange in the logs on the server side

[14:53:33.0000] <Hixie>
MikeSmith: yeah

[14:53:40.0000] <Hixie>
MikeSmith: dunno what could be causing it

[14:53:53.0000] <Hixie>
MikeSmith: earlier today bugzilla was being REALLY slow, lots of 504s in both firefox and chrome

[14:53:56.0000] <Hixie>
it's a bit better now

[14:55:56.0000] <MikeSmith>
Hixie: I'll ask them to check again

[15:09:11.0000] <MikeSmith>
Hixie: "that was due to some DB maintenance earlier, shouldn't be an ongoing thing", I'm told

[15:09:18.0000] <MikeSmith>
as far as the 504s earlier today

[15:13:04.0000] <zewt>
is there somebody specific i can hate for the tcp thing where I randomly have to sit around and twiddle my thumbs for a couple minutes unless I figure out how to set SO_REUSEADDR

[15:13:47.0000] <Hixie>
MikeSmith: k

[15:14:05.0000] <Hixie>
zewt: oh man, the unix sockets api.

[15:14:11.0000] <Hixie>
what a pain.

[15:14:44.0000] <zewt>
well it's the kernel socket layer causing the problem, not the api itself

[15:14:56.0000] <zewt>
but yeah, heh

[15:15:15.0000] <Hixie>
in other twiddling news, i twiddled the spec style sheet again

[15:15:23.0000] <Hixie>
hope y'all don't lose your collective minds again :-P

[15:18:46.0000] <Hixie>
man, @scope is simultaneously awesome in its coolness and power, and frightening in its implications on the cascade

[15:19:00.0000] <Hixie>
i hope we've staffed up the support lines for more specificity/cascade confusion. :-)

[15:19:06.0000] <Hixie>
TabAtkins: ^

[15:19:23.0000] <TabAtkins>
Yeah, we might drop it.

[15:19:31.0000] <TabAtkins>
The cascade implications are confusing.

[15:19:44.0000] <TabAtkins>
And the optimizations we might want to do to scoped styles are less good if they're overused.

[15:19:59.0000] <TabAtkins>
Just doing nesting is probably better.

[15:20:30.0000] <zewt>
what's confusing, when you can open the inspector and see the css rules applying to an element and their order?

[15:23:15.0000] <Hixie>
TabAtkins: is @global something anyone cares about, or should i just drop that?

[15:24:29.0000] <SamB>
Hixie: well, define "cares about"

[15:25:10.0000] <Hixie>
that anyone will implement

[15:25:42.0000] <SamB>
because I'd kind of prefer were required NOT to implement that, personally ...

[15:25:47.0000] <SamB>
+it

[15:26:20.0000] <Hixie>
k well nobody seems to have championed it so i guess i'll drop it

[15:38:03.0000] <zewt>
remind me what @global is?

[15:38:15.0000] <zewt>
escape from @scope?

[15:38:35.0000] <SamB>
zewt: that's the thing I don't want to exist, certainly

[15:39:04.0000] <SamB>
zewt: or from <style scoped>, no?

[15:39:47.0000] <zewt>
i don't know what the use cases are, but it seems nice to be able to know for sure that if you insert a DOM tree inside a scoped stylesheet, it's not capable of breaking out of that and affecting other things (intentionally or not)

[15:40:10.0000] <SamB>
zewt: actually I think it'

[15:40:28.0000] <zewt>
but i'm assuming i know what we're talking about when I probably don't

[15:40:29.0000] <SamB>
er, that is, it's still possible to get out of the box, I think

[15:41:02.0000] <SamB>
possibly you'd need a particular attribute along with the <style scoped>

[15:41:06.0000] <zewt>
font-face, etc. are still scoped, right? (i remember some suggestions for font-face to not be scoped, which seemed like a terrible idea)

[15:41:24.0000] <SamB>
Hixie: hmm, so what is supposed to happen if a <style> without <scoped> appears in the body anyway?

[15:42:13.0000] <SamB>
zewt: you mean @font-face ?

[15:42:17.0000] <zewt>
yeah

[15:42:38.0000] <Hixie>
zewt: yeah, it was the escape mechanism

[15:42:43.0000] <Hixie>
SamB: same as if it's in the head

[15:42:46.0000] <SamB>
presumably instead of making that not-scoped, browsers should just, you know, hash-cons them ...

[15:42:47.0000] <Hixie>
SamB: (but it's invalid)

[15:43:01.0000] <Hixie>
@font-face and company aren't scoped, which seems terrible to me

[15:43:10.0000] <Hixie>
same with counter styles, etc

[15:43:29.0000] <SamB>
Hixie: Ah. It seems like the spec very carefully doesn't actually SAY that it should act that way.

[15:43:33.0000] <zewt>
yuck, they definitely need to be scoped

[15:43:48.0000] <Hixie>
SamB: really?

[15:44:05.0000] <SamB>
hmm, well, that's what I remember thinking anyway

[15:44:10.0000] <SamB>
my memory is terrible though

[15:44:15.0000] <Hixie>
heh

[15:44:21.0000] <Hixie>
/me just uses the spec as his memory :-)

[15:46:20.0000] <zewt>
do you remember why they were made non-scoped? (wondering if there's any point to filing a bug to reopen that conversation)

[15:46:38.0000] <SamB>
I think it would be better to ban them in scopes for now ...

[15:46:39.0000] <zewt>
i guess i could find out for myself, i think i was in that thread

[15:46:52.0000] <zewt>
they should just be scoped like anything else

[15:46:53.0000] <SamB>
(if it's because it's too hard to implement them scoped properly)

[15:47:35.0000] <Hixie>
zewt: it turns out to not be obvious what it means to scope them

[15:47:48.0000] <SamB>
so, um, ban them until it becomes obvious?

[15:47:56.0000] <zewt>
it seems obvious from the author's perspective, anyway, though my mental picture of what scoping stylesheets actually means could be wrong

[15:48:53.0000] <Hixie>
zewt: like, suppose that an element has the font-family 'foo', and that there's a @font-family rule that sets 'foo'. Now suppose there's a scoped section that introduces a new font called 'foo'. An element in that section has 'font: inherit'. What font should it use?

[15:49:09.0000] <SamB>
it is reasonably easy to find out what authors would expect: ban it for now and wait for them to show what they wanted to use it for but can't

[15:49:30.0000] <Hixie>
SamB: yeah, maybe. dunno. not my spec, not my problem. :-)

[15:49:32.0000] <SamB>
Hixie: so it's a dynamic/lexical scope issue?

[15:49:42.0000] <Hixie>
it's a cascade/inheritance issue

[15:50:01.0000] <SamB>
oh right

[15:50:10.0000] <SamB>
didn't read far enough

[15:50:33.0000] <SamB>
I was thinking "one of the outer rules references a name that's rebound in the scope, and applies to one of the inner elements"

[15:50:58.0000] <zewt>
seems like if you're <div><style scoped>xxx</style>yyy</div><div>zzz</div>, yyy should act exactly as though the @scoped attribute wasn't present, and zzz should act as if the <style scoped> node doesn't even exist

[15:51:12.0000] <SamB>
Hixie: I'd go with inherit the font actually used outside

[15:54:34.0000] <zewt>
afk

[15:56:11.0000] <Hixie>
SamB: the issue you raise is another one, yeah

[15:56:44.0000] <Hixie>
font-family is currently just a bunch of strings, so to make it work as y'all are describing it would need to change to a much more elaborate model

[15:56:55.0000] <Hixie>
which has huge performance implications

[15:57:03.0000] <Hixie>
which isn't good for something as core to web rendering as "picking a font"

[15:57:24.0000] <Hixie>
in other news, https://critic.hoppipolla.co.uk/static-resource/seal-of-approval-left.png is awesome.

[15:57:54.0000] <SamB>
Hixie: couldn't it just be a list of pointers to font-faces ?

[15:58:40.0000] <SamB>
but IMO plain ban putting it in @scoped/<style scoped> rather than doing something stupid with it

[15:59:03.0000] <Hixie>
if it's a list of pointers, then taking getComputedStyle() and sticking it back into style="" would actually chnage the style.

[15:59:18.0000] <Hixie>
anyway this isn't my spec so i dunno

[16:00:06.0000] <SamB>
Hixie: oh right

[16:15:27.0000] <zewt>
Hixie: not sure how it's any worse than css selectors, though

[16:15:59.0000] <zewt>
where you're doing much more complicated lookups

[16:17:31.0000] <zewt>
i mean, if it's hard to implement a stack of scoped font-face values efficiently, i'd think a stack of scoped css rules would be far worse


2014-05-08
[18:45:53.0000] <MikeSmith>
cabanier: so I reckon if I keep helping with preparation for this 2dcontext LCWD it's likely to end up costing me a full day of time I'd rather have spent working on other things that I actually care about

[19:04:37.0000] <cabanier>
MikeSmith: sorry...

[01:36:51.0000] <hsivonen>
oh the annoyance of running irssi and bugzilla on the same host an a naive bugzilla installation being so prone to DoS

[02:01:51.0000] <zcorpan>
woah https://www.w3.org/Bugs/Public/show_bug.cgi?id=25478#c15

[02:02:05.0000] <zcorpan>
MikeSmith: are you ok?

[02:07:12.0000] <MikeSmith>
zcorpan: yeah. sorry about that comment

[02:08:50.0000] <zcorpan>
if you refuse to implement the change in v.nu that seems like a useful data point, but it was a bit hidden behind the rage :-P

[02:10:46.0000] <zcorpan>
what happened with http://static.guim.co.uk/sys-images/Guardian/About/General/2011/7/14/1310661708437/LulzSec-logo-001.jpg ? :-)

[02:18:03.0000] <MikeSmith>
zcorpan: point taken :)

[02:20:00.0000] <MikeSmith>
zcorpan: I was experimenting with trying out my alternate "rage persona"

[02:20:28.0000] <zcorpan>
MikeSmith: ok, that's cool

[02:20:38.0000] <zcorpan>
i'm not complaining i was just surprised

[02:20:46.0000] <MikeSmith>
but I think we can agree the experiment failed

[02:23:08.0000] <tobie>
darobin not being around, would appreciate review/comments for my pull request adding MapClass support to the WebIDL parser: https://github.com/darobin/webidl2.js/pull/10. Anyone?

[02:25:39.0000] <MikeSmith>
tobie: I can look at it in 4 hours or so, if nobody gets to it first. On my mobile now

[02:25:55.0000] <tobie>
^ ty MikeSmith

[02:31:16.0000] <annevk>
mathiasbynens: not sure APIs for encodings are suitable for base64

[02:43:02.0000] <JonathanNeal>
Hello!

[02:46:06.0000] <mathiasbynens>
annevk: i meant separate APIs

[02:46:56.0000] <mathiasbynens>
one like atob/btoa for base64{en,de}coding ASCII or octets in “binary strings”

[02:47:30.0000] <mathiasbynens>
and then something like TextEncoder to turn any plain Unicode string into such “binary strings”

[02:47:43.0000] <mathiasbynens>
or does that not make sense?

[03:00:09.0000] <annevk>
mathiasbynens: does

[03:01:15.0000] <annevk>
mathiasbynens: well, TextEncoder is scalar values to bytes

[03:02:22.0000] <mathiasbynens>
annevk: did you see http://esdiscuss.org/topic/native-base64-utility-methods?

[03:02:34.0000] <annevk>
mathiasbynens: yes

[03:02:53.0000] <mathiasbynens>
the counter-argument there seems to be that base64('any string') should work

[03:03:08.0000] <mathiasbynens>
but if you encode the string first, atob/btoa seem sufficient

[03:03:40.0000] <annevk>
atob and btoa are not going anywhere

[03:03:55.0000] <annevk>
mathiasbynens: I don't understand "(but it requires ArrayBuffer / Uint8Array)"

[03:06:15.0000] <mathiasbynens>
annevk: good point, that’s not an issue at all (i didn’t realize these things were now defined in the ES draft rather than a separate document)

[03:14:43.0000] <MikeSmith>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=24382#c22 is interesting

[03:28:32.0000] <tobie>
MikeSmith: yeah, that lets broadcasters easily add targeted HTML overlays and the like. Good thing I don't watch TV.

[06:12:34.0000] <zcorpan>
Hixie: would it be worthwhile to set up a hook for regenning the spec and committing in svn whenever my `source` changes?

[06:51:35.0000] <annevk>
Where did zcorpan go?

[06:55:42.0000] <annevk>
Domenic_: what was the proper way to talk again about an initial property value in ECMAScript

[06:55:59.0000] <annevk>
Domenic_: e.g. you want to invoke the Event() constructor, but not one overwritten by a page

[07:39:11.0000] <Domenic_>
annevk: well, the "proper" (Allen-style) way is to define a per-realm %Event% intrinsic and refer to that instead. But I think "using the initial value of the Event constructor for this realm [or top-level browsing context]" seems good.

[07:40:10.0000] <Domenic_>
The intrinsics approach is kind of nice for implementers, I would imagine, as it gives them a clear list of things that need to be saved away for use later.

[07:40:15.0000] <annevk>
heh, one day once IDL is maintained we should just make it have a good <dfn> for that

[07:40:43.0000] <Domenic_>
I'll add it to the jsidl issue just so I don't forget it...

[07:52:25.0000] <annevk>
Domenic_: cool

[08:21:59.0000] <JonathanNeal>
Any movement happening on query and queryAll? http://dom.spec.whatwg.org/#dom-parentnode-query

[08:23:20.0000] <Domenic_>
Implementations need to support ES6 subclassing first

[08:23:27.0000] <Domenic_>
BUT I think they could just return arrays for now

[08:23:55.0000] <Domenic_>
Also: https://github.com/barberboy/dom-elements

[08:24:56.0000] <arunranga>
Hi Domenic_ :) In your opinion, in lieu of AbortableProgressPromise for operations like move, what should be used? http://w3c.github.io/filesystem-api/Overview.html#the-directory-interface

[08:25:58.0000] <Domenic_>
arunranga: just Promise seems fine...

[08:26:08.0000] <arunranga>
That’s what I thought.

[08:27:02.0000] <JonathanNeal>
Domenic_: what do you mean by subclassing? Are you referring to the live-ness of query/All?

[08:27:04.0000] <zewt>
mathiasbynens: there was discussion already for using TextEncoder/TextDecoder for base64 on the list, seems like the right thing to do

[08:27:42.0000] <Domenic_>
JonathanNeal: no, not at all. I mean support for subclassing implementation-provided classes. In particular, ES6 Symbol.create support is necessary.

[08:27:59.0000] <arunranga>
Next question, and sorry if I’ve missed past communication about this, but is https://dvcs.w3.org/hg/streams-api/raw-file/tip/Overview.htm the new-and-better/more recent flavor of https://github.com/whatwg/streams ?

[08:28:11.0000] <JonathanNeal>
Domenic_: wow, no idea what those are. Things to learn.

[08:28:53.0000] <Domenic_>
It's in my blog post queue... Symbol.create and the subclassable built-ins it enables are my favorite thing, but it needs more publicity.

[08:29:01.0000] <Domenic_>
arunranga: nope, other way around.

[08:29:32.0000] <arunranga>
Domenic_ ahh, ok. The “date” on the editor’s draft at the w3.org URL is probably just auto-updated then.

[08:29:48.0000] <Domenic_>
arunranga: oh interesting

[08:30:16.0000] <Domenic_>
yeah I guess so, huh. https://dvcs.w3.org/hg/streams-api/

[08:30:29.0000] <arunranga>
I think respec.js has a date updater, and this makes it look like the w3.org spec is updated as of today-ish.

[08:30:53.0000] <arunranga>
OK well, I’m glad I asked :-)

[08:30:59.0000] <Domenic_>
:)

[09:01:27.0000] <mathiasbynens>
zewt: “the list” meaning es-discuss?

[09:29:41.0000] <tyoshino____>
Right. Sorry for confusing. W3C version is suspended. I'm a co-editor for it. We are working together with Domenic_ at WHATWG github now.

[09:29:56.0000] <tyoshino____>
re: Streams

[10:00:05.0000] <zewt>
mathiasbynens: whatwg or webapps

[10:19:24.0000] <Hixie>
zcorpan: the problem with such a hook is that it would jam in my half-complete changes as well :-)

[10:19:34.0000] <Hixie>
zcorpan: however if you ever make changes that aren't reflected within 24 hours, ping me

[10:27:36.0000] <jgraham>
Hixie: Surely the solution to that is to have your thing create a copy of his input, and his thing use the last copy rather than the current file

[10:27:47.0000] <jgraham>
Er

[10:27:58.0000] <jgraham>
Your thing create a copy of your input

[10:28:31.0000] <Hixie>
it does.

[10:28:58.0000] <Hixie>
but sometimes i do this:

[10:29:01.0000] <Hixie>
1. create edit

[10:29:02.0000] <Hixie>
2. regen

[10:29:19.0000] <Hixie>
3. edit the edit, but it's in a poorer state now (e.g. bad markup)

[10:29:21.0000] <Hixie>
4. go to sleep

[10:29:47.0000] <Hixie>
if zcorpan triggers a thing then, then you either blow away my step 1 changes, or inject my step 3 changes

[10:30:03.0000] <Hixie>
i guess i could make a copy of the copy when i regen

[10:30:23.0000] <Hixie>
i'll have to add something like that when i get to that part of my new pipeline

[10:30:30.0000] <Hixie>
right now i'm still just building the HTML parser :-)

[10:30:49.0000] <Hixie>
(only doing it in my free time, so...)

[10:31:54.0000] <Domenic_>
rebuilding Git on top of svn, one step at a time.

[10:33:23.0000] <jgraham>
Yeah, it does seem like yor problem would be solved by correct use of a VCS

[10:33:51.0000] <jgraham>
But in the absence of that, I don't understand why making a copy duing step 2 wouldn't work

[10:34:09.0000] <jgraham>
If zcorpan caused a new build it would be based on the step 2 copy

[10:35:17.0000] <SamB>
Hixie: What, no test instance or anything?

[10:35:39.0000] <Hixie>
i like to live on the edge, man!

[10:35:53.0000] <Hixie>
jgraham: yeah, it could work

[10:42:40.0000] <Hixie>
anyone know Frederik S (fs⊙oc)'s last name?

[10:42:42.0000] <Ms2ger`>
"W3C Invites Implementations of W3C DOM4"

[10:42:52.0000] <Ms2ger`>
Hixie, presumably "S"

[10:44:09.0000] <Hixie>
well that's always possible i guess

[10:44:35.0000] <mathiasbynens>
Hixie: Fredrik Söderquist

[10:45:57.0000] <Hixie>
thanks!

[10:54:15.0000] <Hixie>
MikeSmith: you around?

[11:33:40.0000] <TabAtkins>
Hixie: Yeah, drop @global. (I saw you already have, just supporting the decision.)  If we need something like it, we'll define it in Scoping ourselves.

[11:33:51.0000] <Hixie>
k. thanks.

[11:55:05.0000] <Hixie>
uh

[11:55:23.0000] <Hixie>
can someone come up with a demo that shows firefox setting FocusEvent.relatedTarget to something other than 'null'?

[11:57:59.0000] <Ms2ger`>
Hixie, initFocusEvent? :)

[12:02:40.0000] <Ms2ger`>
But smaug____ can probably find a case

[12:05:37.0000] <tobie>
Is [Constructor((Foo or [EnsureUTF16] DOMString))] valid WebIDL. I think not from reading the spec. Can someone confirm? http://heycam.github.io/webidl/#EnsureUTF16

[12:06:47.0000] <smaug____>
Hixie: focusin/focusout events

[12:07:21.0000] <Hixie>
smaug____: wow, only for those? not focus/blur?

[12:08:00.0000] <smaug____>
er

[12:08:02.0000] <smaug____>
hmm

[12:08:04.0000] <smaug____>
sorry

[12:08:23.0000] <smaug____>
Hixie: in FF focusin/out aren't implemented, and so aren't .relatedTarget setting

[12:09:20.0000] <smaug____>
/me looks at the code still

[12:10:12.0000] <Hixie>
i haven't specced focusin/focusout either

[12:10:23.0000] <Ms2ger`>
tobie, isn't, you forgot the argument name </unhelpful>

[12:10:42.0000] <smaug____>
well, some of it is in D3E

[12:11:10.0000] <smaug____>
Hixie: but yeah, FF doesn't set .relatedTarget to anything useful yet in case of focusevent

[12:11:12.0000] <smaug____>
known bug

[12:11:45.0000] <tobie>
Ms2ger`: might be helpful, actually. Let me check.

[12:15:49.0000] <tobie>
Ms2ger`: so no, that's actually not the issue.

[12:16:51.0000] <tobie>
So is the following WebIDL construct valid? [Constructor((Foo or [EnsureUTF16] DOMString) str)]

[12:18:29.0000] <Ms2ger`>
I suspect not

[12:19:28.0000] <Domenic_>
JakeA: for service worker caches, can you explain why there are so many overloads? Overloads always scare me.

[12:20:22.0000] <JakeA>
Domenic_: can only think of URLs vs requests off the top of my head

[12:20:36.0000] <tobie>
JakeA:

[12:20:49.0000] <JakeA>
But have been drinking so may be forgetting others

[12:21:05.0000] <tobie>
^ sorry, silly irc client.

[12:21:42.0000] <Hixie>
smaug____: fascinating

[12:21:49.0000] <JakeA>
tobie: s'ok, made me feel popular

[12:22:11.0000] <Hixie>
/me is trying to spec relatedTarget, but it's not clear what exactly it should point to

[12:22:14.0000] <tobie>
JakeA: having issues with an probably invalid WebIDL construct in SW

[12:22:39.0000] <smaug____>
Hixie: that part is something D3E tries to spec, to some extent

[12:24:00.0000] <tobie>
JakeA: turns out it's in the cache Domenic_ was just mentioning: https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#cache

[12:24:01.0000] <Hixie>
smaug____: the extent of their speccing relatedTarget durin 'blur' is "event target receiving focus"

[12:24:28.0000] <Hixie>
smaug____: which is great except with iframe and dialog and so on there could be multiple elements in multiple browsing contexts :-)

[12:24:38.0000] <Hixie>
smaug____: so... not so helpful in practice

[12:24:59.0000] <JakeA>
tobie: hmm, will need to check to see if that's up to date, proposed a lot of change to that API recently

[12:25:19.0000] <smaug____>
yup, that is still unclear

[12:25:32.0000] <smaug____>
must not reveal nodes from other domains

[12:25:34.0000] <tobie>
JakeA: [EnsureUTF16] can be applied to an argument apparently not to a type.

[12:25:40.0000] <smaug____>
/me wonders if webkit or blink does that

[12:25:57.0000] <tobie>
JakeA: (if I read the WebIDL spec correctly, which frankly, would surprise me.)

[12:25:58.0000] <smaug____>
given that they don't have any security checks there based on the JS wrappers

[12:29:29.0000] <Hixie>
smaug____: they seem to only reveal elements from the same document

[12:29:55.0000] <Hixie>
e.g. the blur when you blur an element to focus one outside an iframe doesn't have a relatedTarget

[12:30:40.0000] <Hixie>
i wonder what to do with the one fired at non-elements

[12:30:51.0000] <Hixie>
make it Event, like in webkit? make it FocusEvent with no relatedTarget?

[12:31:00.0000] <Hixie>
as in, null

[12:31:26.0000] <Hixie>
what if you move focus from one dialog to another... there's two focus/blur pairs, one for the control in the first dialog and the control in the second dialog, and one for the dialogs

[12:31:41.0000] <Hixie>
should the relatedTarget of the controls be null? and the relatedTarget of the dialogs be the dialogs?

[12:31:52.0000] <Hixie>
what's the use case for relatedTarget?

[12:32:11.0000] <Domenic_>
JakeA: ah you're right it got better since I last looked. Still don't quite understand how such different objects can be used. Is it just a convenience for cache.whatever(req.url, ...)?

[12:35:14.0000] <smaug____>
Hixie: use case is to know where the focus is moving from/to

[12:35:19.0000] <smaug____>
use case is fine

[12:36:01.0000] <zewt>
may be more useful to know from/to when you're eg. an event listener on document rather than the control itself, and you want to do an animation from the old thing to the new thing or something like that

[12:42:29.0000] <Hixie>
smaug____: that's what it gives you, but i mean the use case. Like, why would you use that information.

[12:42:47.0000] <JakeA>
Domenic_: a url will be converted to a basic GET request. The defaults are defined by the Request constructor. Feedback on this API is very welcome though!

[12:42:48.0000] <Hixie>
zewt: hmm, animating from one to the other is an interesting idea

[12:43:02.0000] <Hixie>
zewt: though you could do that by just listening to focus events and tracking where you last went

[12:43:04.0000] <zewt>
contrived, not sure i've needed to use relatedTarget myself

[12:43:42.0000] <Hixie>
in the case of a dialog you'd probably not want to animate away from one control to the other when changing dialogs

[12:43:49.0000] <Hixie>
you'd presumably want a per-dialog animation state

[12:43:50.0000] <zewt>
what if nothing is focused for a while, then the user focuses something, and you only want to animate for a transition, and not do the animation from something that was focused earlier

[12:43:59.0000] <Hixie>
so that argues for relatedTarget staying within its most local scope

[12:44:11.0000] <Hixie>
zewt: there's always _something_ focused

[12:44:14.0000] <zewt>
you'd need to add a timer to try to guess whether it was a direct transition or if there was some delay, which seems to be the main thing relatedTarget gives you

[12:44:28.0000] <Domenic_>
JakeA: hmm well I trust you guys have found it important to have a convenient way of doing that, i.e. the convenience of using url instead of `new Request({ url: ... })` outweighs the implicitness.

[12:45:13.0000] <Domenic_>
JakeA: but I like that there is such an equivalence, i.e. Requests are the "real" keys and URLs are just sugar; I was afraid that caches had two kinds of keys

[12:47:32.0000] <zewt>
Hixie: it seems like there's nothing focused if I click on text

[12:47:46.0000] <Hixie>
the browsing context is focused, at least

[12:47:48.0000] <zewt>
(the window has a focus message, but window focus/blur seems independent of element focus/blur)

[12:47:58.0000] <zewt>
(which is confusing)

[12:48:01.0000] <Hixie>
it's all the same algorithm per the spec these days

[12:48:06.0000] <Hixie>
http://www.whatwg.org/specs/web-apps/current-work/#focus-update-steps

[12:48:09.0000] <zewt>
it looks distinct from testing in chrome, at least

[12:48:35.0000] <zewt>
that is, i get focus/blur messages for window, and focus/blur messages for my <input type=text>, and i can get focus for both at the same time

[12:49:08.0000] <Hixie>
yeah, it's a hieararchy of focus

[12:49:21.0000] <Hixie>
hierarchy even

[12:49:52.0000] <zewt>
i guess i can see that

[12:50:35.0000] <zewt>
that means that if you were trying to track focus yourself (to emulate relatedTarget), you'd need to maintain a stack, which would be brittle

[12:51:06.0000] <Hixie>
maintaining it yourself would be a huge pain

[12:51:11.0000] <Hixie>
since it can cross iframe boundaries and so on

[12:51:49.0000] <Hixie>
ok i think the logical thing to do is to only set relatedTarget for the outermost thing that receives the focus/blur events, and then only set it if it's an Element

[12:51:58.0000] <Hixie>
outermost things

[12:52:14.0000] <Hixie>
the last entry in old chains and new chains

[12:52:22.0000] <Hixie>
after step 1 has pruned the end of the lists

[12:53:50.0000] <zewt>
weird, no focus event for the iframe itself if focus is inside the iframe (haven't needed that, it's just what i expected to happen)

[12:55:43.0000] <Hixie>
yeah teh iframe and its Document are kinda treated as one

[12:56:12.0000] <zewt>
i have a capturing listener on window, and if I focus an iframe inside it, the window just gets a blur

[12:56:20.0000] <Hixie>
hm actully...

[12:56:26.0000] <zewt>
i'd have thought i'd get a focus with a target of the iframe

[12:56:34.0000] <Hixie>
that may have been one of the things i'm trying to change with that new algorithm

[12:56:34.0000] <zewt>
like how mouseover works

[12:57:16.0000] <zewt>
https://zewt.org/~glenn/foo1.html

[12:57:18.0000] <zewt>
fwiw

[13:03:57.0000] <SamB>
Hixie: didn't you keep notes on that?

[13:04:14.0000] <Hixie>
the spec is my notes :-)

[13:04:49.0000] <Hixie>
it's easy enough to figure out just by reading the spec, i just didn't read the spec in response to zewt's comment :-)

[13:11:21.0000] <marcosc>
Hixie: with the <link rel=manifest> thing, I need to say that the user agent is not required to "obtain the resource" until needed, if ever (e.g., for the purpose of bookmarking). However, the link element has text about delaying the load event of a document until the resource being pointed to is obtained. Clearly, we don't want to delay the load event (as the manifest may never get loaded by the UA). I'm wondering, do we need in HTML a special exte

[13:11:22.0000] <marcosc>
rnal link that is low priority (may never be loaded) and that doesn't block the document load event from firing? The same could apply to <link rel=icon> - as those resources may never be loaded by the browser until needed.

[13:14:38.0000] <Hixie>
marcosc: the spec doesn't say that it delays the load event until the resource is obtained

[13:14:48.0000] <Hixie>
marcosc: it says it delays the load event "until all the attempts to obtain the resource and its critical subresources are complete"

[13:14:57.0000] <Hixie>
marcosc: if you don't begin an attempt, the load event isn't delayed

[13:15:04.0000] <marcosc>
ah

[13:15:11.0000] <Hixie>
indeed the very same paragraph explicitly says:

[13:15:19.0000] <Hixie>
"Resources that the user agent has not yet attempted to obtain, e.g. because it is waiting for the resource to be needed, do not delay the load event."

[13:15:37.0000] <Hixie>
it's literally the next sentence

[13:16:01.0000] <marcosc>
Sorry, got stuck on that sentence

[13:16:05.0000] <Hixie>
see http://www.whatwg.org/specs/web-apps/current-work/#link-type-stylesheet for wording for how to trigger that stuff

[13:16:34.0000] <marcosc>
ok, awesome, then I think we are good.

[13:16:55.0000] <Hixie>
interestingly, rel=icon doesn't ever say to obtain anything, heh

[13:17:03.0000] <marcosc>
yeah

[13:17:16.0000] <marcosc>
I noticed that

[13:17:18.0000] <marcosc>
:)

[13:18:02.0000] <marcosc>
manifest and icon are pretty much the same

[13:39:29.0000] <arunranga>
hi abarth, we’re trying to nail down the origin of blob: URLs and data: URLs (that’s https://www.w3.org/Bugs/Public/show_bug.cgi?id=24998 but specifically http://lists.w3.org/Archives/Public/public-webapps/2014JanMar/0682.html).

[13:39:45.0000] <abarth>
hi

[13:39:46.0000] <abarth>
ok

[13:40:03.0000] <abarth>
have you nailed down the syntax of blob URLs?

[13:40:21.0000] <arunranga>
Yes, the syntax of a blob: URL is probably nailed down.

[13:40:41.0000] <arunranga>
Currently we’ve pegged the origin of the blob: URL to the origin of the incumbent settings object

[13:40:56.0000] <arunranga>
But we can’t gather that *from* the blob: URL alone.

[13:42:44.0000] <arunranga>
If you’ve got opinions on how we should fix this, and whether we should do the same thing for data: URLs as for blob: URLs, either of those two (email or bug) would be good places to weigh in :-)

[13:50:37.0000] <abarth>
what does a blob URL look like?

[13:50:45.0000] <abarth>
can you give me an example of one?

[13:51:16.0000] <abarth>
I ask because last time I studied this problem, different browsers used different syntax for blob URLs

[13:51:22.0000] <abarth>
which made the more complex problems intractable

[13:51:45.0000] <zewt>
well, you inherently can't get the origin of a blob url if it's revoked

[13:52:17.0000] <zewt>
abarth: though, since blob URLs have no meaning and there should never be any blob URLs stored anywhere, it might be possible to change that (even though the feature is already out there)

[13:52:27.0000] <zewt>
(not that that's necessarily the right thing to do)

[13:53:00.0000] <abarth>
zewt: those statements depend on the syntax of blob URLs

[13:53:34.0000] <zewt>
there is no syntax, right? it's just blob: + undefined data (that usually looks random)

[13:53:50.0000] <SamB>
abarth: there is none! what you see is an ill-uu-u-u-sion

[13:54:33.0000] <zewt>
since the data has no meaning to scripts, you could change that to "blob: + origin + arbitrary data" (or blob: + sha1(origin) + data" or something) without breakage

[13:55:05.0000] <abarth>
zewt: right, it's the "undefined data" part that's problematic

[13:55:08.0000] <arunranga>
well, there is a syntax in that we do blob: + schemeid with schemeid typically being a UUID

[13:55:20.0000] <SamB>
who does that?

[13:55:20.0000] <abarth>
i'm happy to discuss a security model for blobs once folks agree on a syntax for blob URLs

[13:55:33.0000] <abarth>
that doesn't involve leaving platform-visible strings as implementation-defined

[13:55:50.0000] <zewt>
arunranga: individual implementations might have some pattern (like always looking like a UUID), but hopefully nobody's embedding info the web might be depending on

[13:56:04.0000] <abarth>
zewt: that hope seems wildly optimistic to me

[13:56:29.0000] <zewt>
abarth: maybe, but I'm not sure I can contrive a way people might be depending on that

[13:56:32.0000] <arunranga>
(Chrome annotates the blob: URL sometimes so that it looks like this — blob:http://google.com[uuid]

[13:56:34.0000] <arunranga>
)

[13:56:40.0000] <zewt>
yuck

[13:56:41.0000] <tobie>
slightlyoff: which file am I supposed to edit to modify the WebIDL in SW?

[13:56:43.0000] <arunranga>
Not sometimes/ all the time

[13:56:51.0000] <arunranga>
I don’t like it :(

[13:56:55.0000] <SamB>
indeed yuck

[13:56:56.0000] <abarth>
hence the ability to get the origin of a revoked blob URL

[13:56:56.0000] <arunranga>
And I wish they didn't

[13:57:01.0000] <tobie>
slightlyoff: and in which branch?

[13:57:03.0000] <abarth>
wishing and ponies

[13:57:05.0000] <arunranga>
Fx doesn’t do it

[13:57:07.0000] <SamB>
that's a terrible syntax

[13:57:21.0000] <zewt>
that's not necessarily a bad way to do it, but it's bad to put data inside blob URLs that people might look at and go "hey, I can parse info out of that", if only one vendor is doing it

[13:57:30.0000] <SamB>
you should standardize a different syntax just to spite them

[13:57:32.0000] <abarth>
zewt: this has all been discussed before

[13:57:33.0000] <SamB>
one with a : in it

[13:57:39.0000] <SamB>
after the origin

[13:57:41.0000] <abarth>
and each vendor appears entrenched in their position

[13:57:43.0000] <zewt>
abarth: that's nice :)

[13:58:04.0000] <arunranga>
abarth, zewt: what if this was what it looked like: http://dev.w3.org/2006/webapi/FileAPI/#DefinitionOfScheme

[13:58:21.0000] <arunranga>
If we agreed on that (big if) could you suggest an origin ?

[13:58:23.0000] <abarth>
there is no such thing as an opaque string

[13:58:31.0000] <abarth>
strings in JavaScript are not opaque

[13:58:37.0000] <abarth>
they're sequences of characters

[13:58:40.0000] <abarth>
hence the lie

[13:59:16.0000] <arunranga>
abarth, the idea was unguessable.

[13:59:33.0000] <abarth>
the participants in the working group did not agree on a syntax

[13:59:38.0000] <abarth>
which is why the spec is vague

[13:59:43.0000] <abarth>
and why this area of the platform is a mess

[13:59:51.0000] <arunranga>
abarth, agreed

[13:59:53.0000] <Ms2ger`>
Yay, consensus

[13:59:53.0000] <SamB>
I assume "opaque" means something like "the meaning is not in the characters"

[14:00:04.0000] <abarth>
SamB: that's not what it means

[14:00:19.0000] <zewt>
"opaque" should mean at least "there's nothing users can try to parse out of this"

[14:00:25.0000] <abarth>
anyway, as I wrote above, I'm happy to talk with you about a security model after you get folks to agree on a syntax for the URLs

[14:00:27.0000] <arunranga>
abarth, on syntax: is UUID a bad idea ?

[14:00:32.0000] <zewt>
which blob:http://google.com fails at

[14:00:39.0000] <abarth>
arunranga: I'm not the person you need to convince about the syntax

[14:00:50.0000] <abarth>
I don't care at all beyond that it needs to be interoperable

[14:00:50.0000] <zewt>
that said, i'm not sure why the origin would be in the URL

[14:00:57.0000] <abarth>
the current situation isn't remotely interoperable

[14:00:57.0000] <arunranga>
abarth, the history of this is that Darin didn’t want a restriction to UUID

[14:01:07.0000] <abarth>
darin -> fishd ?

[14:01:12.0000] <zewt>
you have a live registry somewhere of blob URLs -> blobs; store it in there (means you can't get the origin after the blob URL is revoked, but that shouldn't matter)

[14:01:28.0000] <arunranga>
abarth, yep :( But Hixie’s formulation effectively made it UUID

[14:01:31.0000] <abarth>
yes, the history is that people did not agree on a syntax

[14:01:40.0000] <abarth>
that does not match reality

[14:02:34.0000] <arunranga>
abarth, OK. I’ll file bugs to not make claims that are misleading like “opaque” but if we insisted on UUID, so that it was something like blob:UUID, would we be better off?

[14:04:37.0000] <zewt>
arunranga: won't help unless chrome people can be convinced to get the origin out of the URLs

[14:05:10.0000] <arunranga>
I think we should roll up the sleeves and try and sort this out. It’s hard, but that’s why I’m pestering abarth

[14:05:11.0000] <SamB>
hmm, won't that make debugging harder?

[14:05:18.0000] <arunranga>
:-)

[14:05:44.0000] <zewt>
i don't think it's necessarily bad to put the origin in there like that, it's just bad that one vendor decided to do that

[14:06:26.0000] <abarth>
zewt: I don't think you're going to get very far in this discussion if you use biased language like that

[14:06:49.0000] <zewt>
sounds like this whole discussion upsets you, but that's not my fault :)

[14:07:55.0000] <arunranga>
abarth, actually the thinking was that since the blob: URL is never *seen* and only passed around, what it actually looked like wasn’t important.

[14:08:18.0000] <arunranga>
abarth, I tended to agree with that thinking, but it’s clear that if we want to evolve an origin concept for blob:, we need more syntax clarity

[14:09:03.0000] <zewt>
arunranga: only if the origin comes by parsing the URL, but since blob URLs have a live registry, is that really the case?

[14:09:24.0000] <arunranga>
abarth, the question is: is there a really good implementation reason for “tagging” the blob:UUID model with more info, such as some implementations do? If not, we could stick to something like blob:UUID.

[14:09:37.0000] <arunranga>
But this is probably not a convo solved in IRC alone, so I’ll take it to the lists!

[14:22:28.0000] <sicking>
arunranga, abarth: I think syntax for blob: depends on what we decide about origins for blob:

[14:23:13.0000] <sicking>
if blob: URIs have an implicit origin, like http: does, and unlike data:, then I think it might be valuable to stick that origin inside the URI

[14:23:37.0000] <sicking>
but if blob: act more like data:, then obviously that does not make sense

[14:24:07.0000] <sicking>
so I think our first step here is to figure out a good story for data:

[14:24:23.0000] <sicking>
since without that I don't think we can answer the question of "should blob: act like data:"

[14:27:40.0000] <slightlyoff>
Tobie: spec/service_worker/index.html in master

[14:28:07.0000] <tobie>
slightlyoff: with all the crazy inline urls and such?

[14:28:33.0000] <tobie>
slightlyoff: I'd want to edit some of the WebIDL

[14:28:42.0000] <abarth>
(sorry, had to run off---back now)

[14:28:54.0000] <tobie>
slightlyoff: and it seems like it's generated from something.

[14:28:56.0000] <slightlyoff>
Going to fix via the framework shortly

[14:29:10.0000] <slightlyoff>
Hand rolled

[14:29:12.0000] <abarth>
arunranga: blob URLs are exposed to web sites, which mean we can't have them be implementation-defined

[14:29:17.0000] <tobie>
oh, my,

[14:29:31.0000] <tobie>
What about using a tool that already works?

[14:29:39.0000] <tobie>
/me hides

[14:30:09.0000] <abarth>
sicking: in chrome, a blob URI is bound to an origin

[14:30:22.0000] <sicking>
abarth: in gecko too

[14:30:27.0000] <Ms2ger`>
tobie, nah, not cool

[14:30:40.0000] <abarth>
the difference is just that chrome writes that origin in the syntax of the blob URI

[14:30:47.0000] <sicking>
abarth: we just don't stick that origin in the actual URI. It's just kept in an internal hash

[14:30:49.0000] <tobie>
Ms2ger`: the hiding part?

[14:30:51.0000] <sicking>
right

[14:30:54.0000] <tobie>
:P

[14:31:05.0000] <marcosc>
seriously, slightlyoff, just use Respec or Anolis. You will spend just as long rolling out your own spec generation thing as you will on the spec.

[14:31:15.0000] <abarth>
I never understood why it's problematic to write that origin in the URI

[14:31:30.0000] <marcosc>
slightlyoff: It also makes it easier for people to contribute/review the spec.

[14:31:34.0000] <Hixie>
all the coolest spec editors roll their own infrastructure

[14:31:34.0000] <sicking>
abarth: i'm happy to go with the chrome approach if we do decide that blob:s should have a bound origin (which I think it should)

[14:32:00.0000] <Ms2ger`>
tobie, existing tools

[14:32:21.0000] <sicking>
abarth: i'm slightly uncomfortable with the "nested URI" aspect of it. But that is probably solvable

[14:32:37.0000] <arunranga>
abarth, sicking: here’s a real world example. This is exactly what Chrome does (I coined it in the dev console) blob:http%3A//aaww.org/9efd7ba9-b707-4262-ab0d-6a395be173f1

[14:32:38.0000] <abarth>
yeah, I wanted to base64 encode it or something

[14:32:46.0000] <abarth>
but there was some reason why someone didn't want to do that

[14:33:18.0000] <abarth>
if you don't put the origin in the syntax

[14:33:19.0000] <arunranga>
sicking, are you uncomf because of information leak?

[14:33:28.0000] <abarth>
you have to decide what happens when someone outside your origin tries to use the URI

[14:33:34.0000] <sicking>
arunranga: no, just implementation issues

[14:33:41.0000] <abarth>
if its in the syntax, you can just reject it syntatically

[14:34:47.0000] <tobie>
slightlyoff: so is editing those by hand worthwhile at present?

[14:34:50.0000] <marcosc>
Hixie: don't encourage him

[14:34:54.0000] <arunranga>
(of course, Fx follows the spec exactly — here’s a blob: URL minted in Fx’s console): blob:2b87eebc-d9ef-954f-a61f-7263e17fba4d)

[14:35:22.0000] <Hixie>
imho editors should work with whatever infrastructure they are most comfortable with

[14:35:33.0000] <Hixie>
if that means rolling your own, then why not?

[14:35:51.0000] <Hixie>
i mean, there's a reason so many of us have done this

[14:35:54.0000] <arunranga>
Hixie, crap. I always knew I wasn’t cool. I just used rberjon’s infrastructure

[14:36:42.0000] <Hixie>
arunranga: if that's what makes you the most productive, seems good to me

[14:36:44.0000] <sicking>
abarth: anyhow, I think the first step here is to figure out security model for data:. I think what we discssued last time has a lot of potential. We should let Anne know about it

[14:36:46.0000] <Hixie>
i used to use bert's

[14:36:52.0000] <Hixie>
now i use gsnedders'

[14:36:57.0000] <Hixie>
soonish i'll use mine :-)

[14:37:08.0000] <sicking>
abarth: once we've figured out data:, we can figure out if we want to reuse that for blob: (I think we won't want to)

[14:37:44.0000] <arunranga>
sicking, abarth: why not just formalize what Chrome is doing, since we think there’s merit in origin extraction from the URL syntax?

[14:38:04.0000] <sicking>
arunranga: if you can convince anne that that's the right thing to do, then i'm all for it

[14:38:34.0000] <abarth>
sicking: if you want to wait for data to be sorted out, you're going to have to wait a long time :(

[14:39:02.0000] <tobie>
Hixie: it's a common tradeoff: either favor external contributions or personal speed.

[14:39:05.0000] <abarth>
sicking: it's just a lot of engineering to change Blink to support a different security model for data

[14:39:09.0000] <arunranga>
sicking, abarth, convincing annevk takes a long time sometimes too

[14:39:39.0000] <abarth>
arunranga: or maybe just a few beers :)

[14:40:00.0000] <arunranga>
/me knew the pros had a trick up their sleeves

[14:40:50.0000] <sicking>
abarth: If you don't think we'll settle data: for a long time, that's enough of an argument for me that we shouldn't use the same thing for blob:

[14:41:30.0000] <sicking>
arunranga: so I think that means that we should spec the Chrome behavior

[14:42:11.0000] <abarth>
I believe the chrome behavior is as follows:

[14:42:15.0000] <sicking>
though people should feel free to fight things out about the syntax (%3A vs. : vs. whatever)

[14:42:22.0000] <Hixie>
tobie: imho editors should never accept contributions in the form of patches, they should make sure they've written all the text themselves so that they're intimately familiar with it. so i don't think it's that much of a trade-off.

[14:42:38.0000] <Hixie>
tobie: the infrastructure doesn't affect contribution speed in the form of bug reports.

[14:42:44.0000] <abarth>
1) you're only allowed to kick off requests for blob URIs that syntatically have the origin of the incumbent script

[14:43:16.0000] <abarth>
2) when loading a blob URI in a browsing context, the origin of the new document is the origin that's syntatically embedded in the URI

[14:43:21.0000] <sicking>
abarth: does 1) apply even in sitatuions where you normally can do cross-origin loads? Like for <img>?

[14:43:26.0000] <abarth>
yes

[14:43:31.0000] <sicking>
cool

[14:43:33.0000] <sicking>
sounds good to me

[14:43:45.0000] <sicking>
ship it!

[14:43:57.0000] <sicking>
this is same as what gecko does, just different syntax

[14:44:21.0000] <sicking>
but i like chrome's syntax more

[14:44:33.0000] <abarth>
the syntax is important in our implementation because the decision can all be made locally

[14:44:44.0000] <abarth>
without race conditions or global synchronization

[14:44:51.0000] <sicking>
right

[14:44:55.0000] <sicking>
which is why I like it :)

[14:45:08.0000] <arunranga>
abarth, 1) matches the spec today absent syntax but 2) seems a bit laxer

[14:45:32.0000] <tobie>
agreed if that's your modus operandi. I drank the forking kool-aid, so patches just seem like a much more natural (and polite) way of interacting.

[14:46:28.0000] <arunranga>
Uhh, no. I take that back.

[14:46:37.0000] <arunranga>
The only thing is syntax

[14:46:49.0000] <sicking>
abarth: out of curiosity, is there a reason that for filesystem: you do filesystem:http://example.com/whatnot, but for blob: you do blob:http%3Aexample.com/whatnot?

[14:47:11.0000] <arunranga>
/me ^^ good question

[14:47:23.0000] <sicking>
abarth: not ':' vs '%3A' after the http

[14:47:30.0000] <sicking>
note*

[14:48:37.0000] <abarth>
dunno, that seems a bit crazy

[14:48:45.0000] <Hixie>
tobie: right. like i said, editors should use whatever they prefer. If they want something that enables them to take patches easily, then obviously they should bear that in mind in their infrastructure selection.

[14:48:58.0000] <abarth>
sicking: I suspect we could change the blob one to match filesystem

[14:49:30.0000] <sicking>
abarth: I *think* there might be URL-parser-sanity reasons to pick one over the other. I don't know which is preferable though

[14:49:41.0000] <sicking>
i guess you guys would have a harder time changing filesystem:?

[14:49:43.0000] <sicking>
:(

[14:51:30.0000] <abarth>
I bet there's content that does "filesystem:" + location.origin + "/path/to/my/file"

[14:51:38.0000] <sicking>
yeah

[14:51:56.0000] <abarth>
it matches what gecko does for jar

[14:51:56.0000] <sicking>
you'll have to add + "temporary/" in there though

[14:52:15.0000] <sicking>
yeah, though jar handling has been a source of a lot of complexity

[14:52:35.0000] <sicking>
i'd like to avoid having that get onto the web

[14:53:20.0000] <SamB>
jar handling is a good example of, um, something that has had to be rethought because of, um, unforeseen implications?

[15:04:00.0000] <arunranga>
does %3A vs : make that big a difference? Maybe only for clarity.

[15:06:19.0000] <sicking>
arunranga: I don't know. I suspect that it doesn't make a big difference but we should check if it matter parsing-wise

[15:07:14.0000] <arunranga>
OK

[15:07:46.0000] <arunranga>
the filesystem:http://dot.com/foo system is more legible, and I have a slight preference for it

[15:28:34.0000] <zewt>
it would need to work for the pattern abarth gave above, and if it needs to work anyway, may as well output it too?

[16:38:21.0000] <caitp>
who wants to clarify something for me so that I don't have to dig through specs to find an answer?

[16:38:56.0000] <caitp>
is a worker supposed to resolve urls from the same base as the context which created the worker, or does it have its own base based on its url


2014-05-09
[19:50:24.0000] <MikeSmith>
Hixie: here now, if you can remember what you had pinged me about

[20:10:51.0000] <Hixie>
MikeSmith: could you create an "HTML - <img>" component in Bugzilla, with simonp⊙oc as the default assignee, auto cc ian⊙hc?

[20:11:06.0000] <MikeSmith>
yup

[20:11:11.0000] <Hixie>
thanks!

[20:16:28.0000] <MikeSmith>
Hixie: OK done

[20:16:34.0000] <MikeSmith>
Hixie: I i

[20:16:36.0000] <Hixie>
thanks!

[20:16:57.0000] <MikeSmith>
I like the new tilted notes/warnings thing

[20:17:02.0000] <MikeSmith>
when did you change that?

[20:17:44.0000] <Hixie>
few days ago

[20:17:50.0000] <Hixie>
glad you like it :-)

[23:53:07.0000] <anvaka>
i'm curious. If html was invented today, how would it look like?

[23:55:05.0000] <anvaka>
would it be still xml-like? or maybe json? or maybe something totally different?

[00:19:14.0000] <MikeSmith>
tyoshino____: should we just replace the content at https://dvcs.w3.org/hg/streams-api/ with a pointer to https://github.com/whatwg/streams ?

[00:19:59.0000] <tyoshino____>
it includes a link to WHATWG one

[00:20:05.0000] <tyoshino____>
though it's not easy to find

[00:27:21.0000] <tyoshino____>
Status of This Document

[00:27:21.0000] <tyoshino____>
...

[00:27:21.0000] <tyoshino____>
The core primitives of the Streams API is now being developped at WHATWG GitHub repository. Please join us to finalize the core primitives. Once it's done, it's planned to be ported to here and extended to meet requirements specific to browser environment.

[00:34:30.0000] <MikeSmith>
tyoshino____: OK

[02:55:08.0000] <tobie>
jungkees: what's the policy for merging changes in the SW repo?

[02:59:42.0000] <jungkees>
For the web spec, you can make PR then Alex any myself will merge that

[03:01:17.0000] <jungkees>
tobie: for other part of the resources, there are quite a few contributors who have the rights I guess

[03:01:53.0000] <tobie>
jungkees: I have commit rights--just wanted to do the right thing. :)

[03:02:11.0000] <jungkees>
tobie: I see :-)

[03:02:22.0000] <tobie>
shouldn't the canonical spec be on the gh-pages branch, btw?

[03:02:43.0000] <tobie>
And not in the master branch?

[03:02:46.0000] <jungkees>
It already is

[03:03:07.0000] <tobie>
oh, is there a cron-job somewhere automatically copying things over?

[03:03:13.0000] <jungkees>
tobie: but basically we are rebasing gh-pages based off of master

[03:03:27.0000] <jungkees>
tobie: so please make changes in the master branch

[03:04:09.0000] <jungkees>
tobie: I don't think there is any automatic stuff

[03:05:01.0000] <tobie>
jungkees: setting up gh-pages that way would have the advantage that when a pull request is merged, the published spec is automatically up to date.

[03:06:18.0000] <tobie>
Right now it's not.

[03:06:31.0000] <jungkees>
tobie: I don't the how to; do you have any pointers that I can refer to?

[03:07:12.0000] <tobie>
I do: http://tobie.github.io/specs-on-github/

[03:07:36.0000] <jungkees>
tobie: thanks

[03:08:13.0000] <tobie>
jungkees: happy to make a PR for your consideration.

[03:08:40.0000] <jungkees>
tobie: thanks tobie!

[03:10:00.0000] <tobie>
jungkees: mind merging https://github.com/slightlyoff/ServiceWorker/pull/265 first?

[03:11:18.0000] <jungkees>
tobie: For web-spec-framework part of it, I would like for Alex to review

[03:11:40.0000] <jungkees>
tobie: thinks he's recovering from surgery now..

[03:11:51.0000] <tobie>
Oh. Wasn't aware.

[03:31:05.0000] <tobie>
jungkees: opened a ticket here: https://github.com/slightlyoff/ServiceWorker/issues/266

[03:33:55.0000] <jgraham>
MikeSmith: yt? Do you have a naming scheme for conformance checker tests? /conformance-checkers/html-aria/roles-properties-supported-inherited/roles-properties-supported-inherited-progressbar-aria-valuetext-Test-string-value.html

[03:34:07.0000] <jgraham>
is longer than 150 characters

[03:34:24.0000] <jgraham>
Which I'm trying to set as the limit for windows compat (sigh)

[03:56:45.0000] <jgraham>
Does anyone who isn't MikeSmith know how the conformance checker test naming scheme works?

[04:03:32.0000] <MikeSmith>
jgraham: ARIA test are imported. I didn't name them. but I can rename them if need. and rename any others. there's not any consistent naming conventions that must be followed there. my test harness doesn't care about the names.

[04:06:40.0000] <jgraham>
MikeSmith: OK. Could we maybe remove the duplication of having rols-properties-supported-inherited in both the directory name and the test title?

[04:06:44.0000] <jgraham>
*roles

[04:06:53.0000] <jgraham>
s/test title/file name/

[04:11:14.0000] <MikeSmith>
jgraham: sure. I'll change them today

[04:17:46.0000] <jgraham>
MikeSmith: https://critic.hoppipolla.co.uk/8c72c580?review=1516 is my attempt. Changes enough to meet the length limits, but not everything systematically

[04:47:07.0000] <MikeSmith>
jgraham: r+ed that part of the review

[04:47:56.0000] <MikeSmith>
btw it would be nice if critic indicated that files had been renamed, the way git log does and the github view does

[04:48:20.0000] <MikeSmith>
instead of just showing added and removed

[04:50:56.0000] <jgraham>
MikeSmith: Yeah :(

[04:54:24.0000] <MikeSmith>
/me finds http://lint.travis-ci.org/

[04:56:37.0000] <sangwhan>
MikeSmith: have you tried the shortcut "m"?

[04:58:01.0000] <sangwhan>
MikeSmith: that will do a second pass scan for renamed/moved files

[04:59:50.0000] <sangwhan>
on directories with lots of very similar files it might trip though

[05:18:03.0000] <MikeSmith>
sangwhan: oh cool

[05:18:08.0000] <MikeSmith>
hadn't tried that

[05:19:25.0000] <MikeSmith>
yeah in this case though it does seem to trip up

[06:38:42.0000] <zewt>
git seems do renames heuristically too, for some reason

[06:39:11.0000] <zewt>
whenever i add a new file that looks like an old one and delete the old one, it shows up in git status (while i'm staging) as a move and change instead of an add and delete (which is really annoying)

[06:59:19.0000] <odinho>
zewt: that's the way it figures out renames. It only tracks content, not metadata like that.

[06:59:43.0000] <odinho>
zewt: Do separate commits if you like.

[07:00:12.0000] <Ms2ger>
But git is superior to hg, because tools can always figure out file moves perfectly after the fact, without any metadata!

[07:00:13.0000] <odinho>
(renames are just delete+add in git anyway, no difference between it, -- the rename is just syntactical sugar to help show what is going on)

[07:00:54.0000] <zewt>
yeah, it's pretty lame

[07:01:25.0000] <jgraham>
Oddly enough git is superior to hg because it has a better cli

[07:01:39.0000] <odinho>
And better model.

[07:01:42.0000] <jgraham>
If you don't believe me, try using mercurial bookmarks for a a while

[07:01:53.0000] <odinho>
Since hg's is mindfuck :)

[07:01:59.0000] <Ms2ger>
Git has a better cli?

[07:02:08.0000] <Ms2ger>
/me is baffled

[07:02:20.0000] <jgraham>
Yeah, it does help that it's possible to actually understand how git works without having to read the source

[07:02:44.0000] <Ms2ger>
... You're joking, right?

[07:02:47.0000] <jgraham>
Ms2ger: I agree this is not the conventional wisdom

[07:03:03.0000] <zewt>
with git you just have to read the whole internet instead

[07:03:05.0000] <jgraham>
(about the cli, not about the model)

[07:03:14.0000] <odinho>
Is it not the conventional wisdom? I've tried and failed to understand hg for weeks and weeks when I had to use it.

[07:03:42.0000] <odinho>
It was horrible. -- Git on the other hand had some explainers of the model that was immediately obvious to me.

[07:03:52.0000] <mark06>
odinho: how does the diff looks like for a "renamed" file?

[07:04:34.0000] <Ms2ger>
odinho, I guess it's hard if you're used to git

[07:04:35.0000] <jgraham>
Conventional wisdom: git has a terrible cli but a simple model once you understand it. Reality: hg and git both have rough edges in their cli but only hg actively tries to prevent you from doing useful things. The hg model seems to be more complex than the git one and isn't really documented.

[07:04:43.0000] <Ms2ger>
And if you try to force git habits onto hg

[07:05:01.0000] <mark06>
zewt: looks like how exactly? you added a file with similar content next to old, deleted file or with same path?

[07:05:12.0000] <Ms2ger>
The reality is that git's is full of rough edges; in hg you have to opt in to them

[07:05:17.0000] <Ms2ger>
Example: git pull

[07:05:31.0000] <jgraham>
Ms2ger: FWIW the "hg community" now seems to believe that mq is a terrible idea and that git-style local branches are good.

[07:05:50.0000] <zewt>
mark06: the usual case where i hit it in practice is when i'm updating an external SDK, where i'll extract foo-1.2.3, delete the old foo-1.2.2 and update a symlink

[07:06:08.0000] <zewt>
i know what's happening, of course

[07:06:23.0000] <Ms2ger>
Well, the "hg community" isn't necessarily right, of course

[07:06:36.0000] <Ms2ger>
Anyway

[07:06:57.0000] <jgraham>
But in this case they have a point because mq defeats the whole point of a vcs unless you add a second vcs on top of the first

[07:07:03.0000] <zewt>
i guess if i was updating it in-place the magic-renaming thing would be better

[07:07:43.0000] <jgraham>
Also, re: no one understanding the model; Mozilla's Try server effectively becomes unusuable after too many people have pushed to it and no one seems to know why

[07:08:02.0000] <jgraham>
So the solution is "reset it every so often"

[07:08:08.0000] <zewt>
jgraham: future

[07:08:28.0000] <jgraham>
Which is laughable

[07:08:29.0000] <Ms2ger>
Sure

[07:09:02.0000] <Ms2ger>
Tryserver is an abuse of hg anyway

[07:09:08.0000] <jgraham>
Why?

[07:09:19.0000] <jgraham>
It seems like a totally legitimate use case

[07:09:53.0000] <mark06>
I find that web interface for hg very counterintuitive, and I saw a doc once on how to set up a mail-on-commit hook... I guess implementing an smtp server from scratch would be easier... I don't know git but it seems counterintuitive too... I use bzr, doesn't hurt me

[07:10:02.0000] <jgraham>
I don't know how try actually works but conceptually the model is just "create a remote branch"

[07:10:59.0000] <mark06>
zewt: if the symlink is versioned, isn't that just right? in fact it has changed

[07:11:30.0000] <zewt>
no, it shows "foo-1.2.3/main.c renamed to foo-1.2.4/main.c, ..."

[07:12:22.0000] <zewt>
afk

[07:14:44.0000] <mark06>
odd, I'd expect it not following the symlink

[07:16:26.0000] <jgraham>
(hg does have some nice features. And I think that changeset evolution could be a good thing, although it remains to be seen if it works well)

[07:19:05.0000] <sangwhan>
fwiw, hg has more sane defaults than git - git's defaults are very weird and do stuff completely unexpected. (see: git pull)

[07:20:43.0000] <odinho>
pull is created for pull-based workflows. But very few seem to use that. Except Linux kernel.

[07:20:44.0000] <sangwhan>
and git's windows support is very laughable

[07:21:42.0000] <odinho>
Git could work much better on Windows if someone who loved Windows would do an implementation though :)

[07:23:13.0000] <jgraham>
Aren't Microsoft using git these days (for some of their open source stuff)? Seems like it could get better if that's the case.

[07:23:40.0000] <davve>
jgraham: They're using libgit2 at least.

[07:23:46.0000] <odinho>
It is getting better. Because many things are stupid. Like msysgit shipping severely outdated openssh which has serious performance issues.

[07:25:07.0000] <sangwhan>
Not sure. Some features in git are implemented as shell script after all, and IIRC a significant amount of native has only a posix implementation. (Hence msys.)

[07:25:29.0000] <sangwhan>
/me might be incorrect, it's been several years since I checked

[07:26:58.0000] <mark06>
odinho: not also the heartbleed breach?

[07:27:30.0000] <sangwhan>
mark06: openssh shouldn't be affected by heartbleed?

[07:27:38.0000] <odinho>
mark06: not used as server, -- only client for downloading git repos etc.

[07:27:40.0000] <zewt>
mark06: symlink doesn't enter into it, it's just a file

[07:27:54.0000] <odinho>
plus what sangwhan said. that's openssl

[07:28:13.0000] <zewt>
git rm -rf foo-1.2.3; tar zxvf ~/foo-1.2.4.tar.gz; git add foo-1.2.4; rm foo; ln -s foo-1.2.4 foo; git add foo

[07:28:44.0000] <sangwhan>
on top of that msys/cygwin IO performance is abysmal when running the same code compared to any proper posix

[07:28:44.0000] <mark06>
I thought openssh used openssl for the backend

[07:28:54.0000] <sangwhan>
mark06: nope

[07:29:01.0000] <zewt>
odinho: still a problem (client has access to the user's private key), just less of one (would need a compromised server for it to matter)

[07:29:44.0000] <odinho>
zewt: okay.  I don't know the area well at all :)

[07:30:59.0000] <zewt>
i don't really know details about the bug, either

[07:31:10.0000] <mark06>
ah I thought ssh was built on top of tls/ssl

[07:32:33.0000] <mark06>
zewt: so foo-1.2.3 is versioned, you delete it, add foo-1.2.4, and it thinks it's a rename?

[07:33:07.0000] <zewt>
yeah, since the files look the same

[07:33:18.0000] <zewt>
like odinho mentioned earlier

[07:34:36.0000] <zewt>
(the original discussion was about critic doing that; i was just observing that it's what git does)

[07:34:56.0000] <jgraham>
The original discussion was about critic *not* doing that

[07:35:00.0000] <jgraham>
Which it doesn't

[07:35:04.0000] <jgraham>
Unfortunately

[07:35:22.0000] <zewt>
11:53 < sangwhan> MikeSmith: have you tried the shortcut "m"?

[07:35:22.0000] <zewt>
11:55 < sangwhan> MikeSmith: that will do a second pass scan for renamed/moved files

[07:35:33.0000] <jgraham>
Yeah OK

[07:35:47.0000] <jgraham>
That is suboptimal in various ways, however

[07:36:02.0000] <jgraham>
(it isn't the default, you can't review files from that view, etc.)

[07:36:16.0000] <mark06>
also, msys (and msysGit) lacks timezone support completely, if you set $TZ for using date.exe correctly, MSVCRT applications get confused instead (IIRC git isn't really compile *for* msys)

[07:37:20.0000] <sangwhan>
zewt: there are some limitations with that feature, sadly

[07:37:59.0000] <sangwhan>
zewt: sort of works when most files have severely different content. i think you can adjust the threshold on the server side somehow if i remember correctly.

[07:39:28.0000] <mark06>
zewt: you say symlink doesn't enter into it, but your code snippet shows it's indeed being/getting versioned... why you add  foo if foo-1.2.4 is already added?

[07:41:00.0000] <zewt>
i've never tried to use git in windows, i just use a linux shell with a cifs mount if i want a git wc to live in windows

[07:41:21.0000] <zewt>
mark06: so the build process knows where to find it

[07:41:45.0000] <zewt>
the symlink has nothing to do with the rename problem, it was just explaining why i'm adding and removing like that

[08:00:08.0000] <mark06>
it actually make it more confusing to me understand... but anyway... you explicitly "git rm" and "git add"... it's really annoying it insisting to mean a rename

[08:02:58.0000] <mark06>
but as someone said, there isn't a concept of rename and I guess it feels free to be "clever", expecting you to cheer on it

[08:04:14.0000] <mark06>
but my bet is it just groks it from the symlink...

[08:23:13.0000] <zewt>
(no, it uses the similarity of the files)

[08:23:40.0000] <mark06>
anyone knows about status of web speech api in firefox? it indeed has a speechSynthesis  but looks useless... (e.g. no SpeechSynthesisUtterance or docs...)

[08:25:16.0000] <mark06>
that wouldn't hurt, would it? you're trying to cheat git but it is smarter haha...

[08:26:23.0000] <mark06>
initially, I wouldn't  bother since they're actually the same files... but updated to new version...

[09:00:43.0000] <dglazkov>
good morning, Whatwg!

[09:01:35.0000] <IZh>
Good evening.

[09:34:54.0000] <eligrey>
i'm not very familiar with wiki syntax

[09:35:09.0000] <eligrey>
how do i rename http://wiki.whatwg.org/wiki/NavigatorCores to NavigatorHWConcurrency

[09:35:17.0000] <eligrey>
or at least redirect to that

[09:35:33.0000] <eligrey>
(from the current page, that is)

[09:37:03.0000] <Domenic_>
WebIDL question (seriously asking): why not use `partial interface Navigator`? I guess you'd have to duplicate between `partial interface Navigator` and partial interface WorkerNavigator`?

[09:37:11.0000] <Ms2ger>
Yes

[09:37:17.0000] <Domenic_>
OK, cool.

[09:37:40.0000] <Ms2ger>
eligrey, done

[09:37:45.0000] <eligrey>
thanks Ms2ger

[09:37:59.0000] <eligrey>
also is my Navigator implements NavigatorCPU stuff necessary in the idl?

[09:38:22.0000] <eligrey>
i wasn't sure but a chrome eng said it should include that

[15:49:45.0000] <caitp>
anyone want to look at merging https://github.com/w3c/web-platform-tests/pull/976? without that, all/most of the XHR worker tests are broken, pretty much

[16:59:24.0000] <Hixie>
MikeSmith: http://www.whatwg.org/specs/web-apps/current-work/multipage/text-level-semantics.html#the-time-element

[16:59:29.0000] <Hixie>
MikeSmith: enjoy the new styles :-P


2014-05-10
[20:33:16.0000] <MikeSmith>
Hixie: nice

[20:40:12.0000] <MikeSmith>
caitp: merged

[20:42:52.0000] <caitp>
thanks

[20:45:02.0000] <MikeSmith>
caitp: about https://github.com/w3c/web-platform-tests/pull/974 I think you don't want to be looking at https://dvcs.w3.org/hg/xhr/raw-file/default/xhr-1/Overview.html but instead just at http://xhr.spec.whatwg.org/

[20:47:49.0000] <caitp>
if you consider what is on http://xhr.spec.whatwg.org/ to be canonical, then the test should have different assertions. but it's kind of weird because the dcvs.w3.org page and the xhr.spec.whatwg.org are different, and even though the xhr.spec.whatwg.org draft is newer, I can't see in its history where it ever said TypeError

[20:48:23.0000] <MikeSmith>
yeah I looked too and I don't find anything either

[20:48:39.0000] <MikeSmith>
I think you need to get annevk's attention about that one

[20:48:48.0000] <caitp>
so that PR is all about matching what is in xhr.spec.whatwg.org, but one of the editors should make the call about that and maybe update the specs to match

[20:49:49.0000] <MikeSmith>
that responsibility is on the W3C editors I think

[20:50:23.0000] <MikeSmith>
because the W3C version is just supposed to be a copy of the upstream spec iirc

[20:50:41.0000] <MikeSmith>
for the case of the XHR spec

[22:15:36.0000] <Guest54867>
hello ... excuse me .. what is the best way to make transitions between iframe?

[15:06:32.0000] <caitp>
you know what would be useful, if the MouseEvent interface could tell you what kind of "role" a click would play in a UI interaction

[15:07:36.0000] <caitp>
like, for a click event, if (event.role !== "navigate") dontPushState(); or something

[15:07:38.0000] <SamB>
... what if it's actually going to be part of a double click or something?

[15:08:20.0000] <caitp>
well, that part of the story sucks too, but it would work a lot better than MouseEvent.button I think

[15:22:12.0000] <caitp>
I guess presumably if you want to care about dblclick events you need to defer action, and cancel if you get a dblclick event. that isn't very good, but it seems better than worrying about button numbering, since different user agents and configurations could assign different interactions to different buttons

[15:22:37.0000] <SamB>
caitp: indeed

[16:59:32.0000] <Hixie>
so now that an AT user has commented on this controversial heading bug, basically agreeing with me that the problem may be minor, i wonder if faulkner is going to be insulted the way i was, accusing him of hating AT users...


2014-05-11
[01:15:28.0000] <SteveF>
hixie: correction - another AT user has commented

[06:30:10.0000] <annevk>
I wonder what https://twitter.com/heydonworks/status/465407727800709121 is based on

[09:24:34.0000] <Hixie>
anyone have any idea what this is referring to? https://twitter.com/heydonworks/status/465526780011360256

[10:37:30.0000] <jgraham>
Hixie: I guess you sorted it out now, but I suppose it's the thread starting at http://www.w3.org/mid/CAJFUXE8YvpaQY+paif+1Dv0kYjOBAekPMdGD=6ndBam+D3SB5Q⊙mgc

[10:38:56.0000] <Hixie>
last year??

[10:42:01.0000] <jgraham>
I don't see why not

[10:44:24.0000] <Hixie>
well, the thread started cos he said we had a "PR problem"

[10:44:40.0000] <Hixie>
if it's talking about what someone told him privately a year ago, it seems less serious that he made out

[10:48:33.0000] <jgraham>
Well I think the whole thing is a bit silly

[10:49:07.0000] <jgraham>
He seems to be annoyed that hsivonen didn't like his idea and be holding that against the whole WHATWG

[10:49:13.0000] <Hixie>
seems that way

[10:50:06.0000] <jgraham>
But OTOH, you're trying to have a serious discussion on twitter, so there's pretty much no hope of actually understanding each other

[10:51:08.0000] <Hixie>
tell me about it

[10:51:14.0000] <Hixie>
twitter is so annoying to communicate on

[10:51:38.0000] <boogyman>
s/twitter/<other social network>

[10:51:42.0000] <zewt>
it's designed on the premise that nothing that takes more than one breath to say is worth saying

[10:52:21.0000] <Hixie>
boogyman: there's plenty of communication sites where it's way easier to have a serious discussion. e.g. reddit, g+

[10:52:22.0000] <zewt>
though it's pretty severely discriminatory--you can say a lot more on it in JP than western languages

[10:58:20.0000] <Philip`_>
I'm glad the inventors of IRC were clever enough to realise a message could be automatically wrapped onto multiple lines, instead of forcing users to split their messages manually to fit on 80-column screens

[10:58:56.0000] <zewt>
actually, lots of clients don't do that and just truncate after the fact

[11:00:37.0000] <Philip`_>
That's after like 512 characters, not 80

[11:00:48.0000] <Philip`_>
so it's usually fine as long as you're not writing essays

[11:00:57.0000] <zewt>
80?

[11:01:38.0000] <Ms2ger>
Oh look, it's a Philip`_

[11:30:03.0000] <jgraham>
I sort of have a theory that Twitter might be objectively the worst (popular) communication medium ever invented in terms of empathy / abiliy to change people.

[11:30:07.0000] <jgraham>
's minds

[11:30:22.0000] <jgraham>
I don't have any objective way of testing that of course

[12:04:02.0000] <zewt>
being forced to strip content out of your message and saying only the bare shell of your argument can't help


2014-05-12
[18:54:42.0000] <Hixie_>
anyone got any suggestions for how ATs should handle exposing headings on pages like www.terminix.com ?

[18:55:54.0000] <Hixie_>
looks like they just changed <div> for <section> for no apparent reason

[18:56:49.0000] <SamB>
(the solution may involve a large trout?)

[00:33:56.0000] <zcorpan>
jgraham: ping https://critic.hoppipolla.co.uk/r/1464

[00:51:32.0000] <foolip_>
nessy: are Mondays still your WebVTT day?

[00:51:58.0000] <foolip>
now that I'm back in Sweden the time overlap is a lot smaller...

[01:20:59.0000] <annevk>
http://xkcd.com/1367/ <3

[01:21:43.0000] <annevk>
/me is back on the +1 timezone too

[01:28:23.0000] <foolip>
annevk: nice xkcd :)

[01:29:03.0000] <foolip>
annevk: which is the least objectionable w3.org for the DOM fork? https://github.com/silviapfeiffer/webvtt-spec/commit/512ed724dd26e78fdc6c24329b2f70077a7e8fb7

[01:29:09.0000] <foolip>
+URL

[01:29:46.0000] <annevk>
They're all pretty objectionable

[01:30:13.0000] <JakeA>
hah

[01:30:31.0000] <annevk>
But if I was forced to pick, http://w3c.github.io/dom/ maybe?

[01:31:05.0000] <zcorpan>
foolip: can't you reference the whatwg one?

[01:31:31.0000] <foolip>
zcorpan: I'd love to

[01:31:52.0000] <foolip>
I'll just ask nessy then

[01:31:55.0000] <jgraham>
zcorpan: Done

[01:31:59.0000] <zcorpan>
thx jgraham

[01:39:31.0000] <JakeA>
annevk: Any idea how "ready" ES6 maps & iterators are?

[01:39:50.0000] <annevk>
JakeA: ES6 maps are done

[01:40:13.0000] <JakeA>
annevk: Done like promises were, or actually done? :D

[01:40:16.0000] <annevk>
JakeA: iterators are more or less done, though there's a discussion on generators going on still on es-discuss I think

[01:40:29.0000] <annevk>
JakeA: Map is shipped by multiple implementations

[01:40:46.0000] <JakeA>
Gotcha

[01:41:17.0000] <JakeA>
annevk: Worried about iterators and ServiceWorker. Don't want them to hold us up.

[01:41:22.0000] <annevk>
JakeA: they want to sign off on ES6 within a couple of months, so they better not change much

[01:41:53.0000] <annevk>
JakeA: the AsyncMap idea does not make much sense as Domenic_ explained I think

[01:42:18.0000] <annevk>
JakeA: and returning a promise for an iterator does not make much sense either, what you really want is an asynchronous iterator, which is ES7-maybe material

[01:44:02.0000] <JakeA>
annevk: Having an async way to get stuff from a cache is a must & we can't wait for ES7

[01:44:36.0000] <annevk>
JakeA: is iteration a must for v1?

[01:45:34.0000] <annevk>
JakeA: we're discussing two things here; 1) importance of AsyncMap (does not seem important) 2) importance of iteration and whether that should be async-per-item or async-for-all-items-at-once

[01:46:16.0000] <JakeA>
annevk: I'm at-best indifferent to AsyncMap

[01:47:18.0000] <JakeA>
annevk: In terms of iteration, I'm happy to drop forEach, but need to keep values/keys

[01:48:39.0000] <annevk>
JakeA: what I mean by async-iterator btw is that you get a promise of sorts for each value, meaning you can get the initial value much quicker

[01:48:52.0000] <annevk>
JakeA: the current approach requires getting all the keys/values

[01:49:05.0000] <annevk>
JakeA: unfortunately there's no primitive for that yet

[01:49:39.0000] <annevk>
JakeA: but I think if you had an AsyncMap, it'd be more like that

[01:50:35.0000] <annevk>
JakeA: my suggestion would be to not bother with AsyncMap as it cannot exist without an implementation and just create a minimal cache API, explaining the constraints

[01:52:46.0000] <JakeA>
annevk: I don't have many use-cases for getting multiple items out of the Cache/CacheList. It's mostly for cleanup in onactivate.

[01:53:46.0000] <annevk>
JakeA: we could consider offering cleanup methods without exposing the primitives they are built on until we have asynchronous iteration

[01:54:16.0000] <annevk>
JakeA: I recommend looping in Domenic_ when he wakes up in a couple of hours as he prolly has some insight

[01:54:25.0000] <JakeA>
yeah

[01:55:09.0000] <JakeA>
annevk: Don't want to make too many assumptions around use-cases, want it open to devs as much as possible

[01:55:58.0000] <JakeA>
annevk: Will continue this when Domenic_ is up. Maybe slightlyoff too, he's got bigger asyncmap opinions than I do

[03:41:54.0000] <smaug____>
do any algorithm in specs use functions in the pseudocode

[03:42:14.0000] <annevk>
smaug____: what do you mean?

[03:42:40.0000] <smaug____>
perhaps I just need to define two different things

[03:42:56.0000] <smaug____>
where one uses the other one

[03:43:31.0000] <annevk>
smaug____: you're writing a spec?

[03:43:52.0000] <smaug____>
annevk: effectively "pass arguments FOO and BAR to function FOOBAR and store the return value in RETVAL"

[03:43:58.0000] <smaug____>
annevk: just an algorithm

[03:44:38.0000] <annevk>
smaug____: you can do that, but you need to be very clear the function is the initial value of some property at the start of the lifetime of the global scope

[03:44:47.0000] <annevk>
smaug____: so it can't be overwrriten

[03:45:05.0000] <smaug____>
oh, I mean function would be in pseudo-code level

[03:45:10.0000] <smaug____>
not a JS thing or anything

[03:45:20.0000] <annevk>
smaug____: and usually style is Let RETVAL be the result of invoking FOOBAR with FOO and BAR.

[03:45:41.0000] <annevk>
smaug____: oh, that happens all the time, see e.g. how the URL parser is invoked at various places

[03:47:43.0000] <smaug____>
"the result of ..." is perhaps the keyword I need

[03:55:12.0000] <smaug____>
but no real functions

[03:55:26.0000] <smaug____>
one needs to describe what happens

[03:55:35.0000] <smaug____>
in prose

[03:55:50.0000] <smaug____>
and perhaps link to somewhere

[04:08:33.0000] <smaug____>
ah, shadow dom event path makes events to skip window object

[04:24:46.0000] <nessy>
foolip_: yes, Mondays I work on WebVTT and other spec stuff

[04:25:28.0000] <nessy>
foolip, zcorpan: we did end up referencing the WHATWG DOM spec

[04:25:41.0000] <zcorpan>
nessy: cool

[04:25:56.0000] <Ms2ger>
Makes sense

[04:43:14.0000] <zcorpan>
what should i use to create/edit animated gifs?

[05:06:51.0000] <darobin>
zcorpan: the short answer is: you shouldn't

[05:07:06.0000] <darobin>
zcorpan: more helpfully, I guess it depends on what your comfortable environment is

[05:07:17.0000] <darobin>
on the CLI, imagemagick can create animated GIFs

[05:07:34.0000] <darobin>
IIRC there are also some export plugins for Photoshop

[05:07:48.0000] <darobin>
and a bunch of small, simple UI tools

[05:08:04.0000] <darobin>
last I did this was with imagemagick, but it's been a rather long while

[05:08:10.0000] <darobin>
crufty but it works

[05:08:19.0000] <zcorpan>
i don't have photoshop. i can check out imagemagick, thanks

[05:08:37.0000] <darobin>
zcorpan: this seems to have the right docs: http://www.imagemagick.org/Usage/anim_basics/

[05:09:02.0000] <zcorpan>
darobin: perfect

[05:32:11.0000] <annevk>
JakeA: I msised the GitHub issue, seems Domenic_ made identical points to me

[06:40:11.0000] <odinho>
zcorpan: Gimp has an animation extension that I know many people has used. But again, depends on what you need to do/create it from.

[06:44:24.0000] <zcorpan>
Ms2ger: thanks for the chocolate!

[06:44:30.0000] <Ms2ger>
:)

[06:44:41.0000] <newbie|2>
hello ... I would like to create smooth transactions between web pages? you have any advice? some indication?

[06:52:49.0000] <darobin>
odinho: I'm not sure that friends let friends use Gimp :)

[06:57:05.0000] <jgraham>
Eh

[06:57:10.0000] <jgraham>
It's not so bad

[06:57:28.0000] <jgraham>
I mean it's hardly like telling someone to use vim

[06:58:32.0000] <odinho>
I quite like Gimp. :)  Not as much as Inkscape, Darktable and Scribus (for different things though), but I'm quite effective in it if I need to do some manipulating :)

[06:58:51.0000] <darobin>
okay, in fairness I haven't tried it in years

[06:59:03.0000] <darobin>
but the switch from Photoshop was pretty... brutal

[07:03:00.0000] <jgraham>
Darktable is pretty brutal if you have tried Aperture (if I remember which one that is)

[07:03:36.0000] <odinho>
I'm sure, but I haven't.

[07:03:38.0000] <jgraham>
It was like "we almost copied the interface, but only got half the functionality. However we made it four times as complicated so you probably won't notice.:

[07:04:01.0000] <jgraham>
"(but will instead give up in frustration)"

[07:10:36.0000] <darobin>
that's a bit how Gimp felt

[07:11:20.0000] <odinho>
I think it has much to do with which one you do first as well.

[07:11:21.0000] <darobin>
"We copied pretty much all the functionality, but instead of putting it behind convenient key bindings or UI buttons we have this unique approach of a context menu seven levels deep where you can easily find everything"

[07:12:01.0000] <odinho>
Darktable is one of the most effective programs I've worked with for my pictures. So it can't all be bad. I like it a lot.

[07:13:32.0000] <jgraham>
odinho: I might like it if I hadn't previously used Lightroom. Which is what I previously meant when I said "Aperture".

[07:14:40.0000] <odinho>
Yes. I continue to not be amazed that software houses with $millions and many developers, photographers, ux people and the like are able to make good products.

[07:16:05.0000] <jgraham>
I'm not sure I was asking you to be amazed

[07:16:38.0000] <odinho>
You were not, I was saying something about my expectations for different software.

[07:17:50.0000] <odinho>
I have started to use unfree Lightworks for video editing, though. But I still dabble with the free Linux video editors now and then.  But unlike every other field, the free linux video editors are just not good enough.

[07:18:33.0000] <jgraham>
Well that evidently depends on how much you value free / low expectations vs quality

[07:18:53.0000] <jgraham>
I would *love* there to be a guenuine alternative to Lightroom that was open source

[07:19:04.0000] <jgraham>
Maybe Darktable will become that thing

[07:19:18.0000] <jgraham>
Then I wouldn't have to reboot into Windows just to edit photos

[07:19:33.0000] <odinho>
Well, -- I seem not to know what I'm missing from Lightroom, which is just as well for me.

[07:19:35.0000] <jgraham>
But at the moment the quality difference is high enough that I do have to :(

[07:19:46.0000] <odinho>
I'm super happy with Darktable. Gave me much more than any other software I've used before did. :)

[07:20:05.0000] <Ms2ger>
Emscripten lightroom? :)

[07:20:23.0000] <odinho>
Ms2ger: Kinda hard for proprietary software, no?

[07:20:49.0000] <jgraham>
Ms2ger: Yeah, supposedly Adobe like the web today

[07:21:09.0000] <jgraham>
Although I guess they would have to emscripten Lua too, which could be interesting

[07:27:21.0000] <zewt>
gimp just seemed stuck in a mid-90s UI, tons of floaty windows

[07:27:37.0000] <jgraham>
I think they fixed that

[07:27:38.0000] <ondras>
recent builds have the "one window" mode

[07:27:40.0000] <zewt>
been quite a while since i've looked at it (nothing but photoshop is actually an option in the wild, typically)

[07:27:50.0000] <ondras>
OTOH some people prefer that floating approach

[07:28:14.0000] <ondras>
still, the Gimp is very hard to use properly.

[07:28:36.0000] <zewt>
photoshop's learning curve is a bit steep, but everyone has already passed it

[07:29:01.0000] <odinho>
I never understood the "nothing but PS is an option".  I've several times asked people to give before/after pictures they've done, and allow me to do the same thing in Gimp.

[07:30:07.0000] <ondras>
odinho: well the shadow/highlight feature is hard to do properly in gimp

[07:30:10.0000] <ondras>
as an example.

[07:30:45.0000] <ondras>
also, things trivial in PS - text outline/shadow for instance - is complicated in gimp and not adjustable once generated

[07:31:01.0000] <zewt>
i get UI mockups from our artist as PSDs that I have to be able to use (and sometimes edit and send back)

[07:31:10.0000] <zewt>
pretty common

[07:31:20.0000] <zewt>
(not to say file format lock-in is a good thing, but it's there)

[07:32:16.0000] <odinho>
Yeah, I use Inkscape for text and vector stuff.  Only use Gimp for actualy image manipulation.  For adjustment Darktable is better, for vector-stuff Inkscape is better.  For layout Scribus is better.  One tool for each job.

[07:32:26.0000] <ondras>
well PSD as a web developer's input format is also mid-90s if you ask me

[07:32:43.0000] <zewt>
we use PSDs for all UI, works well for us

[07:33:05.0000] <zewt>
(not just for web, for iOS, Android, etc)

[07:33:38.0000] <ondras>
http://shelby.tv/video/youtube/e7-ZnHMDZto/julie-ann-horvath-because-f-k-photoshop-jsconf-eu-2012

[07:34:13.0000] <jgraham>
IIRC the main missing piece in gimp is adjustment layers

[07:34:23.0000] <jgraham>
Which have been coming RSN for like a decade

[07:34:56.0000] <odinho>
jgraham: Yeah, agree. That is sorely missing.

[07:35:41.0000] <ondras>
yeah, those are nice

[07:36:25.0000] <zewt>
iirc it was missing record/playback last time i used it

[08:45:46.0000] <dglazkov>
good morning, Whatwg!

[09:06:21.0000] <JonathanNeal>
Anyone here at Event Apart San Diego?

[10:42:54.0000] <Hixie_>
what is @@unscopables?

[10:44:47.0000] <Ms2ger>
I think the thing to make names not show up in the weird event listener scope pollution thingy

[10:45:28.0000] <miketaylr>
or in with statements?

[10:45:48.0000] <Ms2ger>
Go and wash your mouth with soap

[10:46:07.0000] <Hixie_>
oh hey a Ms2ger

[10:46:12.0000] <Hixie_>
did you get my mail the other day?

[10:46:17.0000] <Hixie_>
i dunno if i have your right address

[10:46:56.0000] <Ms2ger>
Yeah, I got it

[10:47:16.0000] <Ms2ger>
The reason I didn't reply yet is the answer to your question: lack of time :/

[10:51:48.0000] <MikeSmit1>
/me ponders what novel mileage the wags might be able to get out of http://lists.w3.org/Archives/Public/public-html-commits/2014May/0009.html

[10:52:44.0000] <MikeSmith>
"maybe we need a spec that defines 'super well-formed'"

[10:53:26.0000] <MikeSmith>
extra well-formed, exceptionally well-formed, etc

[10:53:40.0000] <MikeSmith>
pathologically well-formed?

[10:54:11.0000] <Domenic>
what ... what is that...

[10:56:10.0000] <MikeSmith>
I think the polyglot document has now reached the point where it's become sentient but also insane and is now trolling itself

[11:03:27.0000] <Hixie_>
anyone around who can review the current createImageBitmap() spec's use of Promises and tell me how to update it to the most recent Promises spec?

[11:03:33.0000] <Hixie_>
it was written back when Promises were in DOM

[11:04:49.0000] <Domenic>
Hixie_: sure

[11:13:20.0000] <Domenic>
Hixie_: https://www.w3.org/Bugs/Public/show_bug.cgi?id=25662

[11:14:53.0000] <Hixie_>
you rock, thanks!

[11:16:25.0000] <Domenic>
Yay ^_^. Going to lunch, but lmk if anything's unclear.

[13:08:57.0000] <zewt>
new URL("foo://bar.com/").host is ""? grr

[13:09:05.0000] <zewt>
(in Chrome, at least)

[13:09:52.0000] <annevk>
Hixie_: see ES6 for @@unscopables

[13:10:07.0000] <annevk>
Hixie_: it's a way to hide things from the with statement, and should work for event listeners too

[13:11:55.0000] <zewt>
sounds like a shitty group of superheroes

[14:45:20.0000] <Domenic>
oh dear, I thought navigator.onLine got renamed to navigator.online...

[15:06:38.0000] <Hixie_>
annevk: that sounds very confusing

[15:06:51.0000] <Hixie_>
annevk: having things sometimes work and other times not even though similar things work in different cases


2014-05-13
[19:39:45.0000] <MikeSmith>
Hixie_: fwiw I'm still getting the lots-of-408s problem in Chrome dev

[19:40:21.0000] <MikeSmith>
or actually Chromium in my case, built from latest trunk

[19:41:42.0000] <MikeSmith>
also btw for some time now I been noticing that when I switch to a tab I had in the background with a document in iti, the contents of the tab are blank

[19:42:35.0000] <MikeSmith>
and I have to manually refresh to get the contents to display again

[19:44:51.0000] <MikeSmith>
not always be often. and even when I don't have to manually refresh and the contents get rendered without me doing that, there's a long lag before they actually get re-rendered on their own

[19:45:11.0000] <MikeSmith>
as if it's just completely re-loading the whole document again its own

[19:45:42.0000] <SamB>
MikeSmith: hmm, how long do you wait for the tab to re-draw?

[19:46:16.0000] <MikeSmith>
SamB: 10 seconds or something

[19:46:24.0000] <MikeSmith>
in some cases, forever

[19:46:40.0000] <MikeSmith>
some never redraws on its own

[19:46:55.0000] <SamB>
I've seen similar stuff, but I think it's actually waiting for the tab's pixmap to come back from the pagefile or something

[19:47:08.0000] <MikeSmith>
SamB: ok

[19:47:15.0000] <zewt>
pagefile? who has swap in 2014

[19:47:35.0000] <SamB>
that was in my case, I'm not saying that he's got the same issue

[19:50:46.0000] <MikeSmith>
I been thinking maybe it's some problem in my build environment

[19:58:07.0000] <zewt>
dear firefox: clicking "check for updates" != "download the update without asking"

[19:58:35.0000] <SamB>
there was a recent update?

[19:58:42.0000] <zewt>
and now it updated without asking permission, and everything is fucking broken

[19:58:54.0000] <zewt>
i wish chrome had usable vertical tabs, i'd probably drop firefox entirely

[19:59:06.0000] <zewt>
ugh

[19:59:32.0000] <zewt>
completely broke my extensions and it's way too late to figure out why

[20:00:18.0000] <zewt>
from the looks of the mostly-broken ui, it looks like they're trying to make firefox look... like chrome

[20:01:05.0000] <zewt>
i guess they added a button that's a copy-paste of the menu button in chrome, except it's a terrible grid of icons instead of a real menu

[20:02:23.0000] <caitp>
there's always ESR firefox :p

[20:02:50.0000] <zewt>
this makes me want to just uninstall it and be done with it, but chrome isn't really usable either

[20:02:50.0000] <caitp>
well, maybe not "always", eventually ESR will include post-FF29

[20:03:41.0000] <caitp>
well I guess that leaves konqueror or IE or safari or one of the others then

[20:03:57.0000] <caitp>
netsurf!

[20:04:27.0000] <zewt>
looks like the tab styles changed, the address bar frame is taller, something broke my hack to put the restore/maximize/close windows buttons on the same row as the address bar, there's an extra useless menu button ... lots of garbage to fix tomorrow

[20:05:06.0000] <zewt>
feels like a bunch of upper management going "we can't think of anything useful or beneficial to change, but we have to change something, so here's a list of nonsensical crap to do"

[20:05:33.0000] <zewt>
which is a point that every large project seems to hit periodically in its lifecycle

[20:06:29.0000] <caitp>
well, you know what they say, you can't make everyone happy

[20:07:07.0000] <zewt>
no, it's the "everything is fine, but if we don't keep changing things it'll look like we're not doing our jobs, so change things anyway"

[20:07:55.0000] <zewt>
at least, that's what it looks like to someone whose browser just totally shat itself after an un-asked-for update at 10 PM who now gets to spend hours tomorrow unscrewing everything

[20:08:23.0000] <caitp>
I thought the solution to that was being very vocal in reports to middle management and team meetings to give the appearance of knowing what you're talking about and having a finger on the pulse of the product

[20:08:47.0000] <zewt>
i tend to think that if a product has a pulse, it's been seriously overengineered

[20:09:04.0000] <zewt>
and nobody would ever argue that firefox isn't overengineered...

[20:11:41.0000] <caitp>
the way things are, it's probably pretty difficult to write a browser which works on multiple platforms, including mobile platforms, and deals with all of the craziness of html/xml/css/js/everything else, without being "overengineered", it's hard to solve all of those problems in a simple way :(

[20:11:56.0000] <zewt>
chrome/webkit is *way* less overengineered than firefox

[20:12:01.0000] <caitp>
and then the underlying target platforms evolve as time goes by

[20:18:22.0000] <zewt>
well, tabs opened in chrome to see if it's bearable, but now i have 8 chrome windows, since i can fit maybe 1/4 as many tabs per window in chrome...

[22:49:23.0000] <annevk>
Hixie_: the idea is that you shouldn't rely on scoping of with or event handlers

[23:06:29.0000] <SteveF>
hixie: correction re http://lists.whatwg.org/pipermail/help-whatwg.org/2014-May/003918.html you wrote "and in some accessibility tools that haven't yet been

[23:06:30.0000] <SteveF>
updated to match the HTML spec" No accessibility tools or browsers have implemented the acc layer aspect of outline algo.

[23:10:38.0000] <SteveF>
hixie: and you are now advising: "my recommendation is to use <h2>-<h6> with <section>" which is what the W3C HTML spec advises

[23:41:16.0000] <IZh>
Where is Ben?

[00:09:26.0000] <MikeSmith>
IZh: Ben who?

[00:10:33.0000] <IZh>
MikeSmith: Ben Schwarz.

[00:22:24.0000] <MikeSmith>
benschwarz: ↑

[00:58:24.0000] <zcorpan>
foolip: flip pass condition in https://critic.hoppipolla.co.uk/r/1499 ?

[01:27:42.0000] <foolip>
zcorpan: um, yes, it's a star in my inbox

[01:39:00.0000] <foolip>
zcorpan: updated https://critic.hoppipolla.co.uk/r/1499

[01:40:33.0000] <zcorpan>
foolip: reviewed

[01:48:17.0000] <MikeSmith>
https://twitter.com/Formation_media/status/466126996767256576

[01:50:15.0000] <foolip>
zcorpan: feedback on https://github.com/w3c/web-platform-tests/pull/970#issuecomment-42585194 and my comment requested

[02:18:09.0000] <zcorpan>
hmm. do browsers not prompt to unload for nested browsing contexts?

[02:20:41.0000] <jgraham>
Not sure

[02:31:23.0000] <Ms2ger>
/me grumbles

[02:32:23.0000] <Ms2ger>
"Start and end tag tokens have a tag name, a self-closing flag, and a list of attributes, each of which has a name and a value."

[02:33:03.0000] <Ms2ger>
"When the steps below require the user agent to adjust foreign attributes for a token, then, if any of the attributes on the token match the strings given in the first column of the following table, let the attribute be a namespaced attribute, with the prefix..."

[02:33:16.0000] <Ms2ger>
You didn't say anything about namespaced attributes!

[02:49:14.0000] <zcorpan>
annevk: is there a different component for the w3c xhr spec?

[02:49:36.0000] <annevk>
zcorpan: why are you asking me?

[02:50:12.0000] <zcorpan>
annevk: because maybe you know, and i don't see hallvord around

[02:50:23.0000] <annevk>
zcorpan: I've no idea

[02:50:27.0000] <zcorpan>
ok thx

[02:52:15.0000] <zcorpan>
ok if i reopen and reassign to hallvord?

[02:53:11.0000] <zcorpan>
MikeSmith: can you create a new component for w3c xhr fork?

[02:53:16.0000] <annevk>
I'd rather you don't do that

[02:53:39.0000] <annevk>
That muddles the public record of the XHR spec even more

[04:59:31.0000] <MikeSmith>
what should we don instead?

[05:00:08.0000] <MikeSmith>
is hte source of the w3c one in github?

[05:03:07.0000] <MikeSmith>
if the w3c XHR spec is still claiming just to be a snapshot of the whatwg content then it seems like they just need to merge annevk's latest upstream changes

[05:08:52.0000] <annevk>
MikeSmith: there's a weird fork now because they tried to make a stable v1 again

[05:13:12.0000] <MikeSmith>
annevk: yeah I read Hallvord's comment about it

[05:13:26.0000] <MikeSmith>
oh now about the stable v1 thing though

[05:13:31.0000] <MikeSmith>
ah

[05:13:39.0000] <MikeSmith>
yeah this is coming back to me now

[05:14:02.0000] <MikeSmith>
we don't need as stable v1

[05:14:24.0000] <MikeSmith>
I forget who's claiming we need one

[05:14:32.0000] <MikeSmith>
annevk: Microsoft?

[05:14:38.0000] <annevk>
no idea

[05:14:52.0000] <jgraham>
I was in the room

[05:14:58.0000] <jgraham>
and I have forgotten too

[05:15:33.0000] <jgraham>
I think "everyone" agreed it would be "easy" and so there was no problem with making one

[05:16:23.0000] <Ms2ger>
All we need is half a dozen editors

[05:18:59.0000] <annevk>
jgraham: so "list consensus" is "room consensus"?

[05:19:09.0000] <annevk>
/me just ran into https://github.com/w3c/web-platform-tests/pull/974

[05:21:32.0000] <annevk>
"I…confess to a strong bias against the fashion for reusable code. To me, 're-editable code' is much, much better…" - Donald Knuth

[05:33:11.0000] <jgraham>
annevk: I am very confused by that PR and hope you will sort it all out

[05:33:57.0000] <annevk>
jgraham: I think hallvors need to come up with some pointers

[05:53:15.0000] <odinho>
I normally review xhr tests, I stayed well clear of that one :P

[07:06:48.0000] <benschwarz>
annevk: if you're here when iZh is, tell him to email me?

[07:07:03.0000] <benschwarz>
he's been trying to catch me for a week straight, but our timezones are clearly bulllllshit

[07:07:16.0000] <annevk>
benschwarz: ok

[07:07:41.0000] <benschwarz>
annevk: thanks for being my bot :-)

[07:10:46.0000] <TabAtkins>
benschwarz: Sorry, I keep telling iZH to stop being a jerk and just either email or announce his questions in the chat, but he refuses.

[07:10:49.0000] <TabAtkins>
Very frustrating.

[07:11:42.0000] <Ms2ger>
There's no need to call anyone a jerk

[07:13:12.0000] <TabAtkins>
When multiple people have repeatedly asked someone to respect a common etiquette guideline, and they refuse...

[07:31:56.0000] <estellevw>
The list attribute is supported on <input type="range">. How is the browser supposed to handle a drop down menu on a slider widget? Is there someplace where this is explained in the spec. As far as I can tell, no browser supports this, but I don't know what I should be looking for since it makes little sense to me.

[07:33:03.0000] <estellevw>
I did find this example http://www.w3.org/TR/html5/forms.html#range-state-(type=range) that uses it in the w3 spec, but implementing that does nothing

[07:33:07.0000] <Ms2ger>
Oh dear

[07:33:17.0000] <Ms2ger>
Why would you be looking at that ancient thing?

[07:34:01.0000] <estellevw>
that was the only place I found an example of what is stated as support in http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html

[07:49:32.0000] <estellevw>
Does anyone know?

[07:56:59.0000] <zewt>
fascinated at how websocket is painfully complex because it layers on top of http so it can transparently work through http routers, and ... doesn't work through http routers, so it's just grossly complex for the fun of it

[08:00:57.0000] <zcorpan_>
jgraham: how do i trickle the response in a .py file handler?

[08:03:03.0000] <jgraham>
zcorpan_: Either directly by using time.sleep, or in a slightly cumbersome way by importing the pipes file. I think there's an example of the latter somewhere

[08:03:31.0000] <zcorpan_>
http://wptserve.readthedocs.org/en/latest/response.html second example?

[08:04:07.0000] <jgraham>
Yep

[08:04:55.0000] <zcorpan_>
thx

[08:06:05.0000] <jgraham>
eventsource/resources/cors.py has an example of using a pipe inside a .py file

[08:37:10.0000] <JonathanNeal>
Good morning anyone in SD. Anyone at Event Apart?

[09:07:03.0000] <dglazkov>
good morning, Whatwg!

[09:35:57.0000] <rillian>
has the DataCue proposal been discussed on the list? I can't find it in the archives.

[09:39:32.0000] <Hixie_>
rillian: it was an HTMLWG invention, I don't think it was ever discussed on the WHATWG list. It was discussed on the blink-dev list where I explained why I thought it didn't make much sense as written.

[09:42:19.0000] <rillian>
Hixie_: ok, thanks. I found that discussion.

[09:42:38.0000] <rillian>
I pretty much agreed with you, fwiw

[09:43:50.0000] <rillian>
an in band text track is an interesting alternative to the metadata object I tried to get support for a couple of years ago

[09:44:22.0000] <Hixie_>
i think the underlying use case for datacue makes a lot of sense. exposing the text tracks that are in all these files, etc.

[09:44:23.0000] <rillian>
but DataCue as written is a weird half-solution

[09:44:29.0000] <Hixie_>
but yeah, as written it doesn't really make sense

[09:45:41.0000] <rillian>
I don't actually understand the motivation there. It's like they don't expect user agents to actually parse out the data they want, so they want a fallback for their polyfill...and then to make that fallback the default behaviour?

[09:46:03.0000] <rillian>
is the data they actually care about secret somehow? Too much work to spec a parser for?

[09:47:10.0000] <Hixie_>
beats me

[09:47:29.0000] <Hixie_>
i don't understand how a parser could fill in the DataCue data structure without parsing the format in the first place

[09:47:36.0000] <Hixie_>
and if it has parsed it, why not expose more?

[09:48:03.0000] <rillian>
as I understand it, the parser is supposed to stop at the demuxer level

[09:48:17.0000] <rillian>
so it returns unparsed data items from the specific track

[09:48:17.0000] <Hixie_>
the right solution imho is to do the same as WebVTT does: provide an API for the format you parse

[09:49:01.0000] <rillian>
so you get native-code overhead levels when dealing with the video datarate, and it pops out stuff for a js-level parse to consume at texttrack data rates.

[09:49:10.0000] <rillian>
Hixie_: I agree

[09:49:57.0000] <rillian>
or figurate out some way to mark the origin and spec how to create VTTCues from it

[09:50:35.0000] <rillian>
*figure

[13:06:50.0000] <Hixie_>
Domenic: the exceptions i'm talking about aren't exceptions any author should ever see

[13:07:37.0000] <Hixie_>
Domenic: i presume that you don't think that calling the method that returns a promise with arguments that would cause it to throw TypeError should throw the TypeError in the promise -- this would be equivalent, just more elaborate type checks

[13:07:38.0000] <Domenic>
Hixie_: JS doesn't really have any distinction between different kinds of exceptions, apart from compile-time errors vs. runtime errors.

[13:07:51.0000] <Hixie_>
sure, but APIs do. Humans do.

[13:07:55.0000] <Domenic>
Hixie_: no, that is exactly how promise-returning methods behave; argument validation errors become rejected promises.

[13:08:01.0000] <Hixie_>
o_O

[13:08:05.0000] <Hixie_>
wow

[13:08:09.0000] <Hixie_>
really?

[13:08:12.0000] <Domenic>
Indeed.

[13:08:26.0000] <Hixie_>
that seems... absurd

[13:08:26.0000] <Domenic>
It's an async function, so it uses the async channel for all its non-compile-time errors.

[13:08:40.0000] <Domenic>
That's why I said WebIDL will fix this for you

[13:08:57.0000] <Hixie_>
that's really really bad for authors.

[13:09:06.0000] <Domenic>
If your function is promise-returning, WebIDL will ensure any sync-thrown exceptions get turned into rejected promises, including e.g. ones from the overload resolution algorithm.

[13:09:15.0000] <Hixie_>
it means that when i make a typo, i now get it reported in some unrelated part of my code instead of right where the error occurs.

[13:09:25.0000] <Domenic>
No, you get it reported right where the error occurs...

[13:09:40.0000] <Domenic>
It's just like sync errors, you just use a different mechanism for catching them (or not)

[13:09:42.0000] <caitp>
people seem to like it, and for some reason invite me to speak at conferences about the aplus/commonjs version of promises, so authors seem to enjoy it

[13:09:46.0000] <Hixie_>
var promise = foo.someAPI(someBogusArgument);

[13:09:50.0000] <Domenic>
the stack trace still points to the location at which the error was thrown

[13:09:58.0000] <Hixie_>
where's the debugger going to break?

[13:10:10.0000] <Domenic>
if there's no catch for that promise, the debugger breaks on that line

[13:10:23.0000] <Domenic>
assuming you have "break on uncaught exceptions" turned on.

[13:10:28.0000] <Hixie_>
how?

[13:10:37.0000] <Domenic>
I mean, I can show you the Chrome patch, if that helps?

[13:10:42.0000] <Hixie_>
i mean, i haven't decided what i'm going to do with the promise yet

[13:10:56.0000] <Hixie_>
maybe i will set a handler for catching problems two years from now in a setTimeout callback

[13:11:17.0000] <Domenic>
yeah, in that case, it's just like if you catch the error further up the stack: the debugger is giving you  false positive

[13:11:25.0000] <Domenic>
the debugger does this already for sync errors

[13:11:59.0000] <Domenic>
so correction: it's more like "break on all exceptions" than "break on uncaught exceptions"

[13:12:03.0000] <Hixie_>
wait so the debugger is actually breaking _before_ the promise's rejection is handled?

[13:12:26.0000] <Hixie_>
so this is much more like a language feature than something built on the language

[13:12:34.0000] <Domenic>
indeed

[13:12:40.0000] <Domenic>
it's getting syntax in ES7

[13:12:41.0000] <Hixie_>
how do we "explain" that?

[13:12:50.0000] <Domenic>
well, first there were Turing machines...

[13:13:23.0000] <Hixie_>
so there's no way for me to implement my own promise-like thing that has this "stop the debugger on some random other line" behaviour?

[13:13:55.0000] <Domenic>
I mean, in general there is no way to implement your own debugger without C++

[13:14:11.0000] <Domenic>
the debugger is a privileged API

[13:14:16.0000] <Domenic>
part of the browser UX, etc.

[13:14:21.0000] <Hixie_>
sure but previously i could throw an exception

[13:14:28.0000] <Hixie_>
or do a callback

[13:14:28.0000] <Domenic>
we don't attempt to explain browser UX generally

[13:14:36.0000] <Hixie_>
but this is like some weird hybrid

[13:15:57.0000] <Hixie_>
this is weird

[13:16:08.0000] <Hixie_>
so as a JS author, i can write a function that can throw or return a promise

[13:16:13.0000] <Hixie_>
but as a spec author i can't?

[13:16:31.0000] <Domenic>
yeah, we try to provide spec authors tools to write best-practice functions

[13:16:33.0000] <Domenic>
I mean you can always use prose

[13:16:46.0000] <Hixie_>
i'm very skeptical about this being best practice

[13:17:11.0000] <Hixie_>
TypeError being a run-time thing rather than compile-time thing is bad enough, but now it's not even run-time, it's barely even an error

[13:17:27.0000] <SamB>
Domenic: what *is* the best practice?

[13:17:43.0000] <Domenic>
SamB: async functions signal errors through promises; sync functions signal them through exceptions.

[13:17:44.0000] <Hixie_>
just some random notification you get on a callback in a different task

[13:18:06.0000] <SamB>
errors should be signalled when found, no?

[13:18:33.0000] <Domenic>
SamB: indeed, although signalled through the appropriate channel for the type of programming the user is engaging in.

[13:18:39.0000] <Hixie_>
putting logic errors into the same bucket as unexpected errors imposed from the outside world seems like a huge mistake.

[13:18:46.0000] <SamB>
yeah

[13:18:46.0000] <Domenic>
This is just how JS works

[13:18:53.0000] <Domenic>
There is no separation between "logic errors" and "typo errors"

[13:19:06.0000] <Domenic>
err, "logic errors" and "outside world errors"

[13:19:12.0000] <Hixie_>
i should be able to hand a promise to someone else safe in the knowledge that it's not going to notify the other person that i failed to give the right arguments

[13:19:19.0000] <Domenic>
trying to use the exception vs. callback channels to signal that is no good

[13:19:20.0000] <SamB>
Domenic: well, if the error is "your arguments didn't make any sense" you don't need to find out about it asynchronously or never ...

[13:19:37.0000] <Domenic>
Hixie_: why? That's not true for a synchronous function

[13:19:45.0000] <Hixie_>
Domenic: sure it is

[13:19:47.0000] <Domenic>
Hixie_: handing someone a promise is like handing someone a function, essentially

[13:19:51.0000] <caitp>
if your arguments don't make sense, presumably the function you called which returns a promise will throw before giving you a promise

[13:19:56.0000] <SamB>
Domenic: nooo it isn't

[13:20:06.0000] <Domenic>
Hixie_: someoneElse(function () { JSON.parse("{forgotMy: 'quotes' }"); })

[13:20:19.0000] <SamB>
Domenic: it's like handing them the return value of a function

[13:20:19.0000] <Domenic>
caitp: no, it won't, it will return a rejected promise

[13:20:22.0000] <Hixie_>
Domenic: right now, if you pass me a "success" callback and a "failure" callback, and there's some logic error in my code, i'm not going to call failure, i'm going to throw to the caller.

[13:20:38.0000] <Domenic>
SamB: that's not true, because promises represent async operations, as well as representing async values.

[13:20:42.0000] <caitp>
Domenic: it might return a rejected promise, but it doesn't have to

[13:21:01.0000] <Hixie_>
caitp: Domenic is saying that it'll return a promise that gets rejected with the exception that would have been thrown.

[13:21:10.0000] <Domenic>
caitp: it does, if it's using WebIDL

[13:21:27.0000] <caitp>
you mean for a native DOM method which returns a promise

[13:21:36.0000] <SamB>
... maybe we should see what Twisted does?

[13:21:53.0000] <caitp>
because for anyone outside of browser/dom-land, there is no such guarantee

[13:22:04.0000] <zewt>
twisted is probably the python api that i hate the most

[13:22:11.0000] <SamB>
hmm.

[13:22:13.0000] <Domenic>
caitp: sure, unless those people are using `async function` from ES7 & transpiler friends. Those also give that guarantee.

[13:22:17.0000] <SamB>
zewt: what do you prefer?

[13:22:24.0000] <zewt>
takes one of the cleanest languages/platforms out there and makes it incomprehensible and complex

[13:22:37.0000] <caitp>
does traceur already try to transpile from ES7? :p

[13:22:49.0000] <Domenic>
caitp: yes

[13:22:49.0000] <zewt>
i just use python, never found a need for anything like twisted

[13:22:56.0000] <caitp>
i'm shocked, i'm stunned

[13:23:16.0000] <Hixie_>
the claim that there's no difference between logic errors and unexpected error conditions is just wrong, IMHO. Sure, there's no difference at the level of "instanceof", but there is _absolutely_ a difference for programmers.

[13:23:24.0000] <SamB>
/me wonders if he should point out what happens when you type Ctrl-C while CPython is just warming up ...

[13:23:53.0000] <Domenic>
Hixie_: I agree, but I don't think they should be signaled through completely different channels, where one breaks your program flow and the other is caught.

[13:24:04.0000] <Domenic>
Hixie_: I think it should be signaled through better error type information, so you can do discriminatory catches

[13:24:09.0000] <Hixie_>
the logic error one should _absolutely_ break your program flow.

[13:24:09.0000] <SamB>
Domenic: but that's basically what programmers WANT to happen

[13:24:14.0000] <Hixie_>
it _should_ be a compile-time error.

[13:24:18.0000] <Domenic>
SamB: that is false

[13:24:20.0000] <SamB>
because the program is broken anyway

[13:24:31.0000] <Hixie_>
it _should_ be caught before you even close the IDE

[13:24:32.0000] <Domenic>
Hixie_: it should not break your control flow; that prevents you from writing resilient components that don't affect the result of the system

[13:24:38.0000] <Domenic>
SamB: the program is not broken

[13:24:48.0000] <Hixie_>
it should break ASAP, and as hard as possible.

[13:24:50.0000] <Domenic>
SamB: at this very moment at work I am working on a page which is not broken, but only a tiny part of it is, because of this property

[13:24:54.0000] <Hixie_>
so that it is caught and fixed ASAP.

[13:24:59.0000] <SamB>
Domenic: if you want resiliance, you must catch stuff, as always

[13:25:09.0000] <SamB>
obviously logging it somewhere

[13:25:20.0000] <Domenic>
SamB: exactly! And for async methods you catch stuff using `.catch()`

[13:25:32.0000] <Hixie_>
i don't even think "type error" from arguments being wrong should be catchable. like i said, it _should_ be a compile-time error, IMHO.

[13:25:50.0000] <Domenic>
Hixie_: http://esdiscuss.org/topic/try-catch-conditional-exceptions-in-light-of-generators

[13:25:56.0000] <SamB>
Hixie_: catching it might actually help get errors somewhere useful in some systems though

[13:26:15.0000] <Hixie_>
SamB: i think it should fire onerror, for that kind of thing

[13:26:19.0000] <Domenic>
Yeah, since we don't have a compiler to check all this code ahead of time, it's really useful to be able to handle the errors dynamically.

[13:26:35.0000] <Domenic>
Build isolated systems that can contain any errors within that part of the system

[13:26:37.0000] <Domenic>
And so on

[13:27:22.0000] <Hixie_>
man, JS just becomes less and less a language that i want to use

[13:27:26.0000] <Domenic>
Hixie_: I am a fan of http://esdiscuss.org/topic/try-catch-conditional-exceptions-in-light-of-generators#content-10

[13:27:48.0000] <SamB>
Hixie_: you could make up your own __attribute__ ;-P

[13:28:09.0000] <SamB>
/me mumbles something about caja

[13:28:22.0000] <Hixie_>
Domenic: yeah, something liek that is similar to the "unique IDs per spec throw point" idea we were throwing around recently

[13:28:49.0000] <Hixie_>
but fundamentally, the problem with that entire page is that the premise is wrong

[13:28:54.0000] <Hixie_>
the "return res" thing should fail to compile.

[13:28:55.0000] <Hixie_>
imho.

[13:29:25.0000] <Hixie_>
(i understand doing that in js is non-trivial, though really 'use strict' should have been a time to do it if we ever were going to fix this once and for all)

[13:30:28.0000] <SamB>
Hixie_: you're saying generators shouldn't ever be allowed to return? I agree.

[13:30:36.0000] <SamB>
lets see what happens in Python ...

[13:30:51.0000] <Hixie_>
no i'm saying that the typo should be caught by the compiler.

[13:31:00.0000] <SamB>
wait, how would that happen?

[13:31:10.0000] <Hixie_>
there's no variable called "res" in scope.

[13:31:27.0000] <Domenic>
Yeah, that kind of error stems from the global object being in scope

[13:31:28.0000] <Hixie_>
in sensible languages, that's catchable at compile-time.

[13:31:29.0000] <SamB>
(how do you know what's in scope?)

[13:31:44.0000] <Hixie_>
well like i said, in JS this is non-trivial.

[13:31:47.0000] <Domenic>
There was hope that in ES6 modules the global object would not be in scope, so you could add this kind of static checking

[13:31:47.0000] <SamB>
Python and JavaScript are not sensible in that way :-(

[13:31:55.0000] <Hixie_>
but that's the main problem with JS, IMHO.

[13:32:01.0000] <Domenic>
But unfortunately it was deemed to WATish to remove the global object from the scope

[13:32:13.0000] <Domenic>
and so we lost compile-time checking of all bindings :(

[13:32:19.0000] <SamB>
though I guess in Python there isn't exactly an object that is the global scope?

[13:32:23.0000] <Hixie_>
the vast majority of my errors in JS are things like passing the wrong number or types of arguments. The idea that this is going to be even less quickly catchable is really not pleasing to me.

[13:32:35.0000] <Ms2ger>
"Most untrusted events SHOULD NOT trigger default actions, with the exception of click or DOMActivate events."

[13:32:39.0000] <Ms2ger>
Ah, D3E

[13:32:45.0000] <SamB>
Hixie_: yeah, that's my problem with it too

[13:33:22.0000] <SamB>
I have enough trouble debugging people's pages for them when I get to *see* the exceptions they don't catch ...

[13:33:29.0000] <SamB>
(or for me)

[13:33:58.0000] <estellevw>
I didn

[13:34:06.0000] <estellevw>
t  get an answer this morning so I

[13:34:11.0000] <estellevw>
ll try again

[13:34:12.0000] <estellevw>
The list attribute is supported on <input type="range">. How is the browser supposed to handle a drop down menu on a slider widget? Is there someplace where this is explained in the spec. As far as I can tell, no browser supports this, but I don't know what I should be looking for since it makes little sense to me.

[13:34:31.0000] <Domenic>
estellevw: I imagine that's up to the browser implementers.

[13:34:48.0000] <Domenic>
estellevw: so if nobody's implemented it yet, then probably nobody has any idea, and whoever gets there first gets to decide.

[13:34:49.0000] <estellevw>
if you have a slider UI, how can you implement a drop down list?

[13:34:58.0000] <SamB>
estellevw: probably never anything

[13:35:10.0000] <SamB>
it might just be an oversimplification in the content model?

[13:35:23.0000] <SamB>
or maybe for when you mutate an input

[13:35:45.0000] <Hixie_>
estellevw: it wouldn't be a drop-down widget, it'd be tick marks

[13:35:47.0000] <estellevw>
it makes sense if range is not supported.

[13:35:49.0000] <Domenic>
estellevw: for example it might be a set of snap points

[13:35:53.0000] <Hixie_>
estellevw: there's examples in the spec, see the type=range section

[13:35:57.0000] <SamB>
hmm, tick marks

[13:36:04.0000] <estellevw>
i see the tick marks,

[13:36:06.0000] <SamB>
<- ignore this idiot

[13:36:07.0000] <estellevw>
that makes sense

[13:36:14.0000] <zewt>
you can't return (with a value) from a python generator

[13:36:19.0000] <Domenic>
second example at http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#range-state-%28type=range%29

[13:37:10.0000] <estellevw>
now that I understand it, i'll retest

[13:37:13.0000] <estellevw>
thanks

[14:09:12.0000] <caitp>
Hixie_, the thing which is insane is how as you said, combinations of settings can have different, but related meanings --- so you can't just handle each flag independenly, you also have to look at potential combinations of different flags, and currently there are currently (in stable Chrome, I'm not looking at the spec right now to see if it's changed), like 10 flags, so if have 10 things to handle independently, and

[14:09:13.0000] <caitp>
 then if you have like 10^2 for combinations of 2, 10^3 for combinations of 3, etc.. you have a whole pile of possibilities to handle, because the information is not conveyed in a very good way

[14:10:14.0000] <Hixie_>
what's the altnative? a single attributes with n^m possible values?

[14:10:22.0000] <caitp>
so before html5 constraint validation came along, the validation handling in Angular could be a lot simpler, but now it becomes ridiculously complicated

[14:10:55.0000] <Hixie>
why would it be any different?

[14:12:43.0000] <caitp>
previously for instance, we could just look at an inputs value and test it against a regular expression to decide if it's a valid number, now the browser does that for us and doesn't expose a value to us if it's wrong, and it makes it more complicated to figure out what the issue is and report the correct information to the user

[14:13:18.0000] <Hixie>
so before you could determine if the value was bad input or not by using a regular expression, whereas now that is exposed to you in a single boolean, and the single boolean is more complicated?

[14:13:43.0000] <Hixie>
i really don't follow

[14:14:04.0000] <caitp>
the boolean is more complicated, because it means different things depending on the state of different flags

[14:14:30.0000] <caitp>
this means that we aren't actually shrinking the codebase, we have to grow the codebase to accomodate the crazy constraint validation story which prevents us from doing it the legacy way

[14:14:54.0000] <Hixie>
badInput _always_ means "the input the user provided is not something i can turn into submittable data"

[14:14:57.0000] <Hixie>
it never means anything else

[14:15:02.0000] <Hixie>
regardless of the other values or attributes

[14:15:56.0000] <caitp>
well, unfortunately in our case it's a bit more complicated than that, although hopefully that will be resolved soon (there's a pipeline structure which causes all kinds of grief when combined with html5 constraint validation)

[14:16:22.0000] <Hixie>
why do you think the boolean "means different things depending on the state of different flags"? what other things does it mean?

[14:16:49.0000] <Domenic>
is there context for this discussion? It sounds interesting.

[14:16:54.0000] <caitp>
if you have valueMissing, you have to care about whether badValue is set or not

[14:17:04.0000] <Hixie>
Domenic: https://www.w3.org/Bugs/Public/show_bug.cgi?id=25369

[14:17:06.0000] <caitp>
because if badValue is set, valueMissing is irrelevant

[14:17:14.0000] <Hixie>
caitp: so just check badInput first?

[14:17:20.0000] <Hixie>
caitp: how is that different than before?

[14:17:36.0000] <Domenic>
I have historically had problems with the HTML validation API but I think Hixie fixed them a while ago by adding a method that did something I wanted... I'm fuzzy on the details. Something related to showing the UI without submitting the form, perhaps.

[14:17:51.0000] <Hixie>
caitp: before, if the regexp didn't match the "has digits" regexp, you had to check if it was blank or not, no?

[14:18:04.0000] <caitp>
these checks have to happen in a bunch of different places and the end result is that it kind of sucks =( but I think we may be able to work around it for angular, however I imagine it will be a pain for other libraries too

[14:18:19.0000] <Hixie>
caitp: what i don't understand is why this is worse with the current API than it was before

[14:18:30.0000] <caitp>
because it grows the code way more than it should need ot

[14:18:31.0000] <Hixie>
caitp: it seems to be it should be at worst the same, and probably significantly better.

[14:18:38.0000] <caitp>
ideally, constraint validation should shrink the codebase

[14:18:41.0000] <Hixie>
caitp: why does it grow the code? give me concrete examples man.

[14:18:45.0000] <caitp>
instead of making it more complicated and cumbersome

[14:19:45.0000] <caitp>
so, we have to support some legacy browsers without constraint validation (old IE), so we can't really get rid of all of the old stuff. But in addition to the old stuff, we now have to add some tests to make sure they don't do the wrong thing when constraint validation is available

[14:20:06.0000] <caitp>
and when it is available, we still need to do more tests to handle all of the different states, for each routine responsible for validation

[14:20:12.0000] <Hixie>
ok if the reason the new API makes things bigger is that you have to support the new API and no API, then _any_ new API will have this problem.

[14:20:23.0000] <caitp>
well, not necessarily

[14:20:43.0000] <caitp>
if we didn't have the "badInput === empty string" thing, then it would be totally invisible to us and we wouldn't have to care

[14:21:35.0000] <Hixie>
can you show me the code you have now, and the code as it would look if whatever change you want was in the spec?

[14:22:26.0000] <caitp>
https://github.com/angular/angular.js/blob/master/src/ng/directive/input.js most of the validation story is in there, although one of the other people is working on a big refactor which will hopefully address the issues with it

[14:25:59.0000] <Hixie>
caitp: but what would change, specifically?

[14:26:20.0000] <caitp>
well, there are a few things in there that are just plain wrong right now, but lets see

[14:30:19.0000] <Domenic>
curious, does this have actual implementations http://www.w3.org/TR/CSS2/aural.html ?

[14:31:16.0000] <caitp>
well, the code is pretty wrong right now hixie, right now the number validator does the right thing, but the required validator needs to know to ignore if badInput is set

[14:31:54.0000] <caitp>
someone should make that change, will do it later. but I still think that valueMissing should really only mean "the user didn't type anything", and should not be affected by badInput

[14:32:16.0000] <Hixie>
Domenic: some obscure Emacs mode i think vaguely tries to implement it, and Opera once had an implementaton of some sort, but basically, no.

[14:32:37.0000] <Domenic>
Hixie: sounds about what I expected. 2 independent implementations, but not really.

[14:32:39.0000] <Hixie>
caitp: valueMissing has little to do with what the user entered. The "value" in "valueMissing" is the .value attribute.

[14:32:53.0000] <Hixie>
Domenic: certainly not enough to pass any test suite barrier

[14:33:13.0000] <caitp>
the argument that I've been making on that thread, is that it really should be related to what the user enters

[14:33:25.0000] <Hixie>
caitp: it's saying "this form can't be submitted because this control says it's "required" but i don't have something to submit"

[14:33:42.0000] <Hixie>
caitp: well we could talk about a new attribute that has more to do with what the user entered, but what's the use case?

[14:33:43.0000] <caitp>
the form will have another reason not to submit in that case, though, will it not?

[14:33:50.0000] <Hixie>
caitp: like what?

[14:33:55.0000] <caitp>
like suffering from bad input

[14:34:35.0000] <caitp>
if required is true and you enter a bad value and try to submit, Chrome will tell you that your value is broken, not that you forgot to enter a value for a required field

[14:34:40.0000] <caitp>
this is the sensible use case

[14:34:50.0000] <caitp>
like, it just kind of intuitively makes sense to humans

[14:35:28.0000] <caitp>
you don't want to type "moo" into a number input and be told "*age is a required field", because psychologically that just doesn't click

[14:37:49.0000] <Hixie>
sure. that's why you check badInput before valueMissing when reporting things.

[14:37:54.0000] <Hixie>
That's not n*m complexity

[14:37:56.0000] <Hixie>
that's just n complexity

[14:38:07.0000] <Hixie>
it's just that you have to check them in order.

[14:38:14.0000] <Hixie>
similarly, you check badInput before patternMismatch

[14:38:33.0000] <caitp>
right, but if my validator is only responsible for verifying that you've entered a value, why should I even have to care if you've entered a bad value? I should only care that you've entered a value at all

[14:39:38.0000] <caitp>
it should not even be concerned with the badInput flag, ideally

[14:39:45.0000] <caitp>
that's all i've been saying in that bug

[14:40:42.0000] <caitp>
it's a separation of concerns issue, you could say

[14:40:59.0000] <caitp>
and an issue of simplification

[14:41:38.0000] <caitp>
anyways, I should probably reply on the bug so that there's a historical record of it, but I don't have time at the moment due

[15:02:16.0000] <Hixie>
caitp: why would you ever want to know if you've entered a value, but not care if the value is valid or not?

[15:04:51.0000] <caitp>
because that's really all a "required" validator needs to do

[15:06:23.0000] <caitp>
a required validator is concerned with whether or not you've entered a value, an email validator is concerned with your input matching the requirements from some RFC or W3/WHATWG recommendation, your number validator cares that you've entered a number in some fashion, but they shouldn't need to mix their concerns

[15:08:49.0000] <Hixie>
dglazkov: ping

[15:09:15.0000] <Hixie>
caitp: if all you want to do is tell the user they are supposed to have entered a value, you don't have to do anything. The browser will just do it for you.

[15:09:59.0000] <caitp>
if you're lucky and you're targetting a modern browser which implements constraint validation correctly (which certainly isn't always the case)

[15:10:15.0000] <Hixie>
well if you're not then again, the current API is kinda irreelvat...

[15:10:17.0000] <Hixie>
irrelevant

[15:10:42.0000] <caitp>
or if you want to do something like render custom validation messages in some pretty widget kit, or whatever

[15:12:14.0000] <Hixie>
honestly i don't see why "a required validator" is something you'd even have

[15:12:17.0000] <Hixie>
i mean, it's two lines of code

[15:12:41.0000] <Hixie>
if (the thing is required and it's not given) reportInAPrettyFashion(that the thing is required and it's not given)

[15:13:12.0000] <Hixie>
i feel like anything more than that is probably over-engineered.

[15:13:19.0000] <caitp>
because in framework-land, things are designed to make building applications easier, so we don't really deal with totally imperative win32-api-looking stuff

[15:13:36.0000] <caitp>
well, you could argue that, but if nobody over-engineered things, the WWW wouldn't exist :p

[15:16:33.0000] <caitp>
all I'm saying is, what is the use in valueMissing caring about badInput, when A) it only ever gets set if required is used, and B) browser-native validation messages will ignore it if badInput is set instead

[15:18:25.0000] <caitp>
like, what is the use case for setting valueMissing when badInput is set, how do people get use out of that, apart from requiring them to add an extra logical OR operator that should really be unnecessary

[15:20:19.0000] <caitp>
I get that you're saying it means "the value property is empty", but the question is, why do we care, unless the user has not entered anything

[15:20:49.0000] <caitp>
browsers don't care, so why should script contexts have to care

[15:47:17.0000] <Hixie>
caitp: valueMissing doesn't care about badInput. That's my point.

[15:47:40.0000] <Hixie>
caitp: valueMissing isn't special here. All the other validation attributes work the same way.

[15:48:13.0000] <Hixie>
caitp: you don't need any additional operators. If you want to report that the user has entered bad input, you check badInput. That's all.

[15:48:32.0000] <Hixie>
caitp: so you don't have to care. Just don't check it.

[15:48:41.0000] <Hixie>
in other news, anyone have any idea what https://www.w3.org/Bugs/Public/show_bug.cgi?id=25442 is about?

[15:49:53.0000] <caitp>
that's not true, if we want to provide a good user experience, then we do have to care =( I don't think this is getting through to you

[15:50:38.0000] <caitp>
anyways, it's not the biggest problem in the world, but it's something which is pretty nonsensical and probably shouldn't be

[15:57:27.0000] <Hixie>
caitp: it's clearly not getting through to me.

[15:57:55.0000] <Hixie>
caitp: you ask "why do we care", i told you you don't have to care, you respond "we do have to care"

[15:58:00.0000] <Hixie>
caitp: i'm not understanding

[15:58:10.0000] <caitp>
okay, lets try this

[15:59:00.0000] <caitp>
pretend your body is a validation framework, and your left hand is responsible for determining whether a value has been entered at all, and your right hand is responsible for determining if an entered value fits some format

[15:59:22.0000] <caitp>
your left hand doesn't know anything about the right hand, and vice versa, nor should it

[15:59:44.0000] <Hixie>
arv_: any further input on https://www.w3.org/Bugs/Public/show_bug.cgi?id=25522 ?

[15:59:56.0000] <Hixie>
caitp: that's a silly design.

[16:00:18.0000] <caitp>
so, someone gives your right hand an apple, but it only wants an orange, and it considers this value to be invalid. your left hand should not have to care that your right hand was handed an apple

[16:00:37.0000] <caitp>
because your left hand should only have to care if the right hand was given anything at all

[16:00:44.0000] <Hixie>
caitp: that's like saying "i'm going to make a text edit box. Now this function is responsible for the first character entered, and this one is responsible for the second character entered. I wish the API didn't provide both characters in the same attribute, that makes it hard for me to split the logic in this way."

[16:00:59.0000] <caitp>
they are concerned with two different things, one limb is worried about the presence of a value, the other limb is worried about the format/type of value

[16:01:22.0000] <Hixie>
it would be a different matter if "determining whether a value has been entered at all" was some complicated operation requiring 5 or 50 or 500 lines of code or something.

[16:01:36.0000] <Hixie>
but it's literally a one line expression with two parts

[16:01:47.0000] <caitp>
sure, and like I said, it's not the biggest problem at all

[16:01:50.0000] <Hixie>
"does it have bad input, and if not, does it have good input"

[16:02:00.0000] <caitp>
but, serious question, why should your left hand have to care if the right hand gets an apple or orange

[16:02:13.0000] <Hixie>
to continue your analogy, that doesn't take a whole hand to do, it's something your small finger's knuckle can do.

[16:02:16.0000] <caitp>
why is it concerned with that at all

[16:02:31.0000] <caitp>
what is the benefit that it gains from asking the right hand what it got

[16:02:52.0000] <Hixie>
sure, why should the code that deals with the first character be concerned with the code that deals with the second character?

[16:03:03.0000] <caitp>
what does this enable us to communicate to the user that we otherwise couldn't, without needing the extra test

[16:03:05.0000] <Hixie>
i mean, superficially, it sounds like a perfectly reasonable question.

[16:03:30.0000] <Hixie>
but when you get down to it, it just means the code is organised in an overly-generic way and could be made far simpler.

[16:04:10.0000] <caitp>
at an application level it could be, but when you're writing a way for people to structure their applications, it doesn't work very well to have too much intermingling

[16:04:57.0000] <caitp>
GreenTea developers don't want to write the form nonsense by hand, because they get a nice declarative interface that does what they want for them

[16:05:38.0000] <caitp>
and that nice, declarative interface, ideally, doesn't have to worry too much about different validation states that it shouldn't be concerned with

[16:05:54.0000] <Hixie>
i agree

[16:07:15.0000] <Hixie>
still not following how we get from "people should be able to write forms declaratively" to "the code that makes validation UI pretty needs to carefully check whether you entered a value COMPLETELY SEPARATELY from carefully checking whether you entered a valid value"

[16:08:11.0000] <caitp>
well, that's just the way it is in angular, and it sort of magically makes something similar to html5 constraint validation work in (somewhat) legacy browsers

[16:08:37.0000] <Hixie>
but why is it that way? what benefit is there from doing something this complicated way rather than the simpler way?

[16:08:53.0000] <caitp>
because it ends up being simpler to actually build an application with it

[16:09:21.0000] <Hixie>
i don't believe that at all.

[16:09:28.0000] <Hixie>
i don't believe you could even tell the difference.

[16:09:43.0000] <Hixie>
can you show me the difference?

[16:09:57.0000] <Hixie>
(i don't understand why an application would be aware of this internal detail at all)

[16:10:13.0000] <caitp>
oh, the application wouldn't be

[16:10:21.0000] <Hixie>
...

[16:10:24.0000] <caitp>
like I said, it's not the biggest problem in the world

[16:10:31.0000] <caitp>
we can get around it with the extra logic

[16:10:47.0000] <caitp>
but I don't think we should _need_ to, because it doesn't really enable anything

[16:10:53.0000] <Hixie>
it seems to me like you could get around it with _less _logic.

[16:11:31.0000] <Hixie>
i'm not understanding why you split "has a value" from "has a valid value". Do you split "has an underflow" from "has an overflow"?

[16:11:33.0000] <caitp>
well, hopefully matias gets to delete a lot of code after refactoring it, because yeah, the original design was a bit problematic in some ways

[16:12:04.0000] <caitp>
well, the fact that you can have underflow and overflow simultaneously isn't totally good, but that's less of an issue

[16:12:13.0000] <caitp>
because at least they're related to the same set of attributes

[16:12:21.0000] <Hixie>
um

[16:12:26.0000] <caitp>
min and max

[16:12:36.0000] <Hixie>
underflow isn't related to max

[16:12:40.0000] <Hixie>
and overflow isn't related to min

[16:12:49.0000] <caitp>
conceptually, min and max are related

[16:12:54.0000] <Hixie>
in fact having a value and having a valid value are _more closely_ related.

[16:12:59.0000] <Hixie>
since they both relate to .value

[16:13:30.0000] <caitp>
conceptually, min and max are both to do with a similar "kind" of validation, do you know what I mean

[16:13:45.0000] <caitp>
you have a range, you're either inside that range or outside of it

[16:13:59.0000] <caitp>
maybe there is no bounds on the left or right side of the range, maybe the range is inside out, it doesn't matter, it's all about a range

[16:14:07.0000] <Hixie>
"did you enter a valid value" and "did you enter any value" are "both to do with a similar kind of validation" also

[16:14:30.0000] <Hixie>
i mean, so much so that i'd do them as one test

[16:14:33.0000] <caitp>
"did you enter a number" "no I entered an animal name"

[16:14:44.0000] <caitp>
"did you enter anything" "yes"

[16:14:46.0000] <Hixie>
(unlike min and max, which i would handle as separate tests, with different messages)

[16:15:22.0000] <Hixie>
you can violate min, you can violate max, you can in some weird cases violate both, they're orthogonal. Same with step. Another orthogonal check.

[16:15:32.0000] <caitp>
the presence or absence of a value is different from the well-formed-ness of a present value

[16:15:37.0000] <Hixie>
But the test of whether you entered something naturally subsumes whether you entered something valid.

[16:15:44.0000] <Hixie>
they're _not_ orthogonal.

[16:15:49.0000] <caitp>
sure they are

[16:16:01.0000] <caitp>
no value is a perfectly well-formed value

[16:16:29.0000] <caitp>
if the value isn't required, then you have no reason to complain about it. if the value is required, then you don't want to complain by saying "you didn't enter anything"

[16:16:39.0000] <caitp>
they are unrelated things

[16:18:30.0000] <caitp>
so if your left hand doesn't want to ask the right hand if the value is acceptable, then right now, the metaphorical validation tool will report a message which seems "weird", because it's reporting a nonsensical error

[16:19:29.0000] <caitp>
it's not a huge problem to check the flag, I just argue that it should not be necessary, and doesn't really make sense to need to ask

[16:25:32.0000] <Hixie>
i don't think it makes sense not to do these together.

[16:25:38.0000] <Hixie>
actually that's not quite true

[16:25:40.0000] <Hixie>
let me rephrase

[16:25:54.0000] <Hixie>
even if you do them separately, i don't think it makes sense to do any checks if badInput is true.

[16:26:00.0000] <Hixie>
so you have to check badInput first.

[16:26:11.0000] <Hixie>
for example, if badInput is true, you wouldn't care if the value didn't match the pattern.

[16:26:16.0000] <Hixie>
or was overflowing.

[16:26:23.0000] <Hixie>
so just test that first.

[16:26:48.0000] <Hixie>
you don't have to test multiple things at once, or have complicated expressions.

[16:27:02.0000] <Hixie>
just if (e.validityState.badInput) { ... }

[16:28:14.0000] <caitp>
so, the issue with this is it sort of imposes a specific order that the ValidityState must be checked in

[16:28:23.0000] <caitp>
in order to avoid the extra condition checks

[16:28:26.0000] <Hixie>
yes

[16:28:37.0000] <Hixie>
this seems nice and easy since code tends to have a defined order it runs in :-P

[16:28:48.0000] <boogyman>
It's probably personal preference, but I really despise being told bit by bit how my input doesn't fit into an applications specification. If it doesn't fit, I'd like to be told the requirements, not only that the "input" needs to include letters.

[16:29:10.0000] <Hixie>
yeah, totally

[16:29:23.0000] <Hixie>
the case we're talking about is only cases where badInput applies, though

[16:29:27.0000] <Hixie>
things like type=number

[16:29:31.0000] <caitp>
like this? https://yearofmoo.github.io/ngMessages/

[16:29:38.0000] <boogyman>
The interface should make it stupid simple for the User to help themselves and provide valid input.

[16:30:10.0000] <Hixie>
"This web page has disabled automatic filling for this form" gah

[16:30:16.0000] <caitp>
that's really the goal

[16:30:30.0000] <caitp>
make things stupid simple

[16:30:39.0000] <caitp>
so that even a ruby developer can do it

[16:30:44.0000] <caitp>
(i'm kidding, I'm kidding)

[16:31:03.0000] <zewt>
Hixie: cheers to features which are designed specifically to work against the user's wishes

[16:31:13.0000] <Hixie>
blimey that page has a lot of divs and class names

[16:31:19.0000] <Hixie>
zewt: hm?

[16:31:25.0000] <zewt>
23:27 < Hixie> "This web page has disabled automatic filling for this form" gah

[16:31:37.0000] <Hixie>
ah yeah, i hate that feature

[16:31:52.0000] <zewt>
user wants autocomplete? too bad, the browser doesn't serve the user

[16:31:59.0000] <caitp>
well, it's a demo application, so he probably wanted you to actually try entering things

[16:32:30.0000] <caitp>
I love how the year 0000 is an invalid year, that's great

[16:32:57.0000] <boogyman>
imo, i think autocomplete should not be a markup option for pii data.

[16:33:20.0000] <caitp>
boogyman, I think a lot of applications have, or at least think they have, a good reason to disable it

[16:33:41.0000] <boogyman>
and by pii, i mean name,address,cc, etc...

[16:33:53.0000] <caitp>
like, the president's web application for entering the nuclear launch codes

[16:33:55.0000] <zewt>
it's one thing to disable autocomplete-by-default, but the user should always have a "that's nice, do it anyway" button

[16:33:57.0000] <caitp>
probably don't want that autofilled

[16:34:33.0000] <Hixie>
yeah, that's the example in the spec :-)

[16:34:54.0000] <Hixie>
boogyman: how do you mean?

[16:35:05.0000] <Hixie>
boogyman: like, a page shouldn't be able to say "this is where the user should enter their address"?

[16:35:07.0000] <zewt>
autofill isn't the problem in that case, it's "you shouldn't have remembered this in the first place", heh

[16:35:40.0000] <zewt>
(and I'm not convinced of that, either)

[16:35:44.0000] <boogyman>
im saying that upon navigating to a page, it should not auto populate my pii data.

[16:35:45.0000] <caitp>
i think you could argue that disabling autofill encourages people to come up with really bad passwords

[16:36:00.0000] <caitp>
but even so, you know

[16:36:33.0000] <boogyman>
i know that's difficult to enforce, because <input type=text> can be any of the above, or it could be "enter your favorite color".

[16:36:38.0000] <zewt>
disabling autofill for passwords should never be allowed

[16:36:54.0000] <zewt>
(if you don't let me autofill passwords, then I'm going to copy-and-paste the password, which is definitely worse)

[16:38:07.0000] <boogyman>
I don't know, maybe limit the scope to pci, but i would see that's more on the authors, then the spec / ua impl.

[16:38:27.0000] <boogyman>
than*

[16:40:06.0000] <zewt>
browsers generally don't autofill anything these days, until you tell them you want them to

[16:40:06.0000] <Hixie>
boogyman: oh browsers don't do that as far as i know. But anyway, check out autocomplete="" in the HTML spec, and requestAutocomplete()

[16:40:22.0000] <Hixie>
boogyman: (browsers shouldn't prefill anything automatically)

[16:40:28.0000] <Hixie>
boogyman: (without user request, i mean)

[16:40:48.0000] <zewt>
browsers are confident enough in autocomplete to explicitly support it for credit card info now, and i haven't had any issues of that getting input when I didn't want it to

[16:40:55.0000] <boogyman>
Oh, I know how to implement it, I'm saying that sites that do pre-populate lose my trust

[16:41:56.0000] <caitp>
you mean if it prepopulates it while rendering markup server-side?

[16:42:11.0000] <zewt>
(don't know what you mean by "sites that pre-populate", we're talking about browser autocomplete, not sites, and browsers don't prepopulate...)

[16:42:14.0000] <caitp>
can that actually happen?

[16:42:25.0000] <zewt>
if the site itself can autocomplete, it already knows who you are :)

[16:42:37.0000] <caitp>
that's not exactly true

[16:43:18.0000] <caitp>
you can set up an autofilling demo on jsfiddle or a throwaway heroku or something that your browser has never seen before, it will still be perfectly happy to autofill for you from your profile

[16:43:40.0000] <zewt>
that's the browser autocompleting, not the site

[16:44:36.0000] <caitp>
if the site is autofilling for you, it could still be from local storage or a cookie

[16:44:52.0000] <caitp>
which is arguably gross, but at least it's not network traffic

[16:44:54.0000] <zewt>
just don't know what he means by "sites that do pre-populate lose my trust"--sites don't autofill, browsers do (and they don't do it "pre-"), so why blame sites?

[16:45:24.0000] <zewt>
afk, going home

[16:45:48.0000] <boogyman>
zewt: yes, but the site has access to disable the auto-population

[16:47:18.0000] <boogyman>
my argument is that i should have to explicitly tell a site i want auto-population on, before the UA capability is even acknowledged.

[16:57:38.0000] <Hixie>
i'm not really following the attack vector you're concerend about

[16:59:23.0000] <boogyman>
I use public computers frequently, and it's a chore to go into the settings of the UA and disable auto complete.

[16:59:33.0000] <zewt>
are you saying sites should disable autofill? because i'm saying they shouldn't, and they shouldn't even have the option


2014-05-14
[17:00:17.0000] <zewt>
... so you want sites to arbitrarily disable browser features for everyone? whether you want autofill is an issue between you and your browser, not websites

[17:00:21.0000] <boogyman>
zewt: yes, and i know i am in the minority, but i know i am more data sensitive than most.

[17:01:57.0000] <boogyman>
it's my personal opinion that this should be an "opt-in" option for sites, not an "opt out" by UA, but as i stated before, that's really on the authors, not the spec.

[17:02:21.0000] <zewt>
sorry, but unless you can defend that a bit better, i think that's an opinion without merit

[17:03:14.0000] <zewt>
"browsers should make it easier to globally disable autofill" would be fine, but "99% of users should have an inconsistent and severely inconvenient browsing experience so 1% of people don't have to go into a menu" frankly seems absurd

[17:03:55.0000] <caitp>
you'd hope that public computers give you a new profile every time you login, and I think most/many do

[17:04:22.0000] <caitp>
but the world is a big place, and there are an awful lot of public computers

[17:04:48.0000] <zewt>
personally i'd say if you're entering information into a public computer, no matter what settings you're changing it'd better not be sensitive info

[17:05:22.0000] <zewt>
if you have access to change settings (and if the profile doesn't reset every time, as caitp says), then you probably have access to install user scripts for the next guy...

[17:07:42.0000] <boogyman>
the opinion has merit, just probably not applicable to the "99%" as you stated.

[17:08:27.0000] <zewt>
no opinion has merit if it's not defended :)

[17:10:00.0000] <zewt>
bleh, still need to unscrew firefox after that last horrific update, and I assume the inspector still doesn't work with chrome windows...

[17:10:51.0000] <caitp>
what do you mean by "upload user scripts", anyway? you mean like, they'd sign into someone elses account because the info was autofilled, and exploit that by using their credentials to get some other exploit onto the server?

[17:11:02.0000] <boogyman>
The opinion was based upon the notion that i don't believe pii/pci data should have the option to enable autocomplete=on, but the difficulty there is around defining unique inputs for things that will contain that type of data, but once again, it's really up to the authors to implement the most semantically appropriate tag.

[17:11:12.0000] <zewt>
no, just install a foo.user.js as a plugin

[17:11:53.0000] <zewt>
that's not really defending the opinion at all, it's just stating it

[17:12:18.0000] <zewt>
*why* do you think that I should be disallowed from having my billing and shipping info autofilled?

[17:12:55.0000] <caitp>
because it's good practice to memorize your credit card number and home address

[17:14:31.0000] <boogyman>
while i agree caitp, that's not a reason for why the spec should demand it. the defense comes in the form of personal defense of that information and business liability (although you really cannot prevent stupid).

[17:14:49.0000] <caitp>
that was not a serious statement boogyman, it can be hard to tell with me sometimes

[17:14:55.0000] <boogyman>
There's always a tradeoff of ease of use and security and performance.

[17:16:01.0000] <caitp>
I think the trade off between security and ease of use is often imaginary

[17:16:20.0000] <caitp>
it's more like security -> ease of use -> privacy

[17:16:25.0000] <zewt>
well, if you're not going to explain why you think the vast majority of users in the world should be severely inconvenienced, then I'm moving on

[17:16:33.0000] <boogyman>
how do you define "new login", because most places I know do not default their "internet" icons to launch in private mode.

[17:17:03.0000] <zewt>
and yeah the browser inspector is still unusable in chrome ... it can attach to the browser window, but it won't actually inspect things like tabbrowser

[17:17:15.0000] <zewt>
in firefox, rather

[17:17:16.0000] <boogyman>
zewt: identity theft is a huge inconvenience.

[17:17:23.0000] <caitp>
and I'm sure bruce schneier or someone has written endless articles about how you can actually get quite good security which is easy to use, just at the expense of depending on third parties like Apple or Facebook

[17:17:49.0000] <zewt>
non-sequiturs are also inconvenient

[17:18:37.0000] <boogyman>
how was my statement not relevant?

[17:18:58.0000] <zewt>
incidentally, both chrome and FF let you open windows that don't store any info ("incognito window", "private window") with a single hotkey, so "i don't want to go into settings and disable things" is a non-argument too

[17:20:04.0000] <boogyman>
zewt: again not for the spec, but tell that to chrome on android devices. it remembers url history.

[17:21:00.0000] <zewt>
and that's an argument to email google and ask for a private browsing mode in android, not for anything else

[17:35:42.0000] <Hixie>
boogyman: so wait, back up. what are you worried about will happen with these shared computers?

[17:39:13.0000] <boogyman>
having any of my information stored by the browser or site that i do not authorize.

[17:43:06.0000] <caitp>
I think it's a fair point, that the next billion or 2 billion people on the net might not all have the technical know-how to cover their tracks when they need to, or might otherwise not have an opportunity to do that, and this can lead to breaches of privacy

[17:43:33.0000] <caitp>
which is a different kind of security violation, but it's not irrelevant

[17:45:33.0000] <caitp>
I don't think you can really solve that problem at the W3C or WHATWG though, that's something individual applications and browser vendors need to worry about, and is probably not a real argument against autofill

[17:46:04.0000] <Hixie>
boogyman: well, stored by the browser is up to the browser and how you configure it. stored by the site, if you don't want the site to store your information, good luck. :-)

[17:46:19.0000] <Hixie>
boogyman: doesn't seem to have much to do with autofill though

[17:48:10.0000] <caitp>
it would be good if you could create a law by which all user agents had to abide, which ensured that it was easy to understand and configure privacy settings

[17:48:12.0000] <boogyman>
auto-fill is a post storage concern. If the UA did store the data, it could then auto complete(fill) those same fields.

[17:48:25.0000] <caitp>
and magically ensured that all users knew about them and their importance

[17:51:13.0000] <caitp>
but as good as that might be, it's probably not something feasible in the real world

[17:52:17.0000] <zewt>
(keep laws out of browsers used by people in every country)

[17:56:20.0000] <zewt>
well, fixed up the broken tab bar, time for the address bar...

[17:56:57.0000] <SamB>
zewt: how's your status bar doing?

[17:57:49.0000] <zewt>
i don't have one of those. heh

[18:01:58.0000] <zewt>
https://zewt.org/~glenn/blah.png getting there

[18:38:24.0000] <zewt>
oh jesus, the address bar animates around

[18:43:27.0000] <SamB>
zewt: OUUUCH

[18:43:43.0000] <SamB>
I can't *wait* for australis to hit ESR

[18:54:27.0000] <zewt>
https://zewt.org/~glenn/blah2.png well, good enough for now

[22:01:29.0000] <zewt>
wonder which tab in firefox is making my cpu spin up constantly

[22:01:33.0000] <zewt>
mysteries

[02:10:23.0000] <darobin>
quick question for the webidl2.js interface: what's a good name for a type that can take another type as a parameter? (cc tobie)

[02:10:37.0000] <darobin>
e.g. Promise<Foo> or sequence<Bar>

[02:10:44.0000] <darobin>
parametrised type?

[02:12:35.0000] <tobie>
We need that because some specs (*cough* ServiceWorkers *cough*) are extending the Promise type e.g.: ResponsePromise<any>

[02:13:14.0000] <darobin>
and it would be nice if what you get in the AST matched something that people can vaguely understand

[02:14:55.0000] <tobie>
note that ResponsePromise<any> isn't supported by WebIDL atm, though.

[02:15:15.0000] <tobie>
(no idea what the plan is)

[02:20:45.0000] <darobin>
tobie: http://en.wikipedia.org/wiki/Generic_programming might be the right answer

[02:21:13.0000] <darobin>
though all I read about this is about Generic classes being parametrised with a type (or variants thereof) so I reckon the "parametrized" instinct might be correct

[02:22:33.0000] <darobin>
JakeA: re the "if there's an appcache with the SW" question, how about if instead of your option we require the UA to pull out a robotic arm and stab the developer in the face?

[02:22:54.0000] <JakeA>
haha

[02:25:00.0000] <tobie>
that's going to be hard to write tests for.

[02:25:27.0000] <JakeA>
darobin: There's a robotic arm in one of our hardware labs with the sticker "Warning: This machine will not only kill you, it will cause great pain as it does so"

[02:27:23.0000] <darobin>
tobie: I'm getting several people saying "generic"

[02:27:47.0000] <darobin>
tobie: also, it'd be nice to have a test for e.g. Promise<Promise<sequence<DOMStrig>>>

[02:27:59.0000] <darobin>
JakeA: hahaha, that's pretty cool

[02:28:35.0000] <tobie>
it would be nice indeed.

[02:29:03.0000] <tobie>
OK, I'll add such a test.

[02:30:25.0000] <darobin>
tobie: do you mind also s/parametrized/generic/?

[02:30:33.0000] <tobie>
so it would be: { generic: true, genericType: "Promise" }?

[02:30:42.0000] <darobin>
the AST is horrible already, if we can make it a little more readable

[02:30:45.0000] <darobin>
yeah, that WFM

[02:31:03.0000] <tobie>
don't make it look like "parametrized" was my idea. :P

[02:31:19.0000] <darobin>
I guess we don't need generic: true if we have genericType, though

[02:31:21.0000] <darobin>
heh

[02:31:39.0000] <darobin>
I did tell you it was the first thing that popped up :)

[02:31:58.0000] <darobin>
but I'm happy with whatever you come up with

[02:32:02.0000] <tobie>
yeah we could have: { generic: null } and {generic: "Promise" }

[02:32:11.0000] <darobin>
that WFM

[02:32:29.0000] <tobie>
ok.

[02:32:35.0000] <darobin>
thanks a lot!

[02:32:38.0000] <tobie>
np

[02:46:55.0000] <annevk>
SimonSapin: http://stackoverflow.com/questions/2050973/what-encoding-are-filenames-in-ntfs-stored-as

[02:48:29.0000] <SimonSapin>
thanks annevk, but that doesn’t really answer my question

[03:04:56.0000] <jgraham>
Hmm, I thought generic(s) was the language feature enabled by something that could be parameterised over types rather than the name for the thing itself

[03:05:02.0000] <jgraham>
But maybe I am wrong

[03:06:12.0000] <jgraham>
(and that Foo<T> where Foo and T are types implied that Foo is a parameterised type)

[03:09:40.0000] <jgraham>
Hmm, but wikipedia seems to use "generic type" so ignore me

[03:11:02.0000] <darobin>
jgraham: I sort of thought that but basically walked the same path you just did

[04:21:46.0000] <tobie>
likewise.

[04:22:48.0000] <tobie>
when we have Foo<Bar> , Foo's the Generic type and Bar's the parameterized type, correct?

[04:23:07.0000] <tobie>
s/correct/do we agree/

[04:23:54.0000] <tobie>
^ jgraham, darobin

[04:24:37.0000] <darobin>
tobie: hmmm, I'm not sure that's the correct terminology, or in fact that there *is* a correct terminology that holds across the board

[04:24:42.0000] <darobin>
why do you need the distinction?

[04:24:56.0000] <tobie>
For the README. :)

[04:25:58.0000] <tobie>
Promise<any> => { generic: "Promise", idlType: "any" } reads kind of weird tbh.

[04:26:32.0000] <tobie>
But oh well.

[04:35:29.0000] <annevk>
I don't think it's generic at the moment

[04:35:34.0000] <annevk>
There's sequence<T> and Promise<T>

[04:38:12.0000] <tobie>
annevk: great use of `generic` in the above sentence.

[04:38:42.0000] <tobie>
annevk: agree WebIDL doesn't support that at present. But SW requires it.

[04:39:24.0000] <annevk>
tobie: I might be missing something, what does SW require?

[04:39:38.0000] <tobie>
ResponsePromise<T>

[04:40:03.0000] <tobie>
I'm not advocating for this, btw. Just pointing it out.

[04:40:04.0000] <annevk>
Ah subclassing. Subclassing is not supported by IDL basically

[04:40:16.0000] <tobie>
agreed.

[04:40:21.0000] <annevk>
We need Team Domenic(tm) for that

[04:40:23.0000] <tobie>
Question is: will it?

[04:40:29.0000] <tobie>
K.

[04:40:41.0000] <annevk>
Yeah, once we align with ES6, @@create will be sprinkled around the DOM

[04:40:55.0000] <annevk>
Implications unforeseen

[04:41:09.0000] <tobie>
Well, in the meantime, the parser supports that more generic syntax for generics.

[04:41:54.0000] <tobie>
that is, once darobin pulls in https://github.com/darobin/webidl2.js/pull/15

[04:42:05.0000] <annevk>
cool

[04:48:43.0000] <darobin>
tobie: and merged it is

[04:48:45.0000] <darobin>
shipping now

[04:49:02.0000] <tobie>
awesome. ty.

[04:50:27.0000] <darobin>
tobie: and npm published as 2.0.6 — thanks a bundle!

[04:52:04.0000] <tobie>
Yes. Now only  [EnsureUTF16] needs fixing.

[04:57:36.0000] <annevk>
tobie: so did you see my latest question in that bug?

[04:58:05.0000] <annevk>
tobie: I think if everyone agrees that UTF16String means code units in, scalar values out, we should move ahead and use that as a type

[04:58:16.0000] <annevk>
tobie: and add a typedef to DOMString for now

[04:58:44.0000] <tobie>
I did see the question. Didn't understand most of your premises, though. :(

[04:58:49.0000] <annevk>
/me seems the amount of tabs tobie uses, wonders how he copes

[04:59:00.0000] <tobie>
/me doesn't

[05:16:42.0000] <zcorpan>
jgraham: fyi http://dev.w3.org/csswg/cssom-view/#the-features-argument-to-the-open()-method

[05:23:25.0000] <darobin>
tobie: re appcache, it might indeed be a good idea to campaign to phase it out once SW becomes broadly available

[05:23:26.0000] <jgraham>
zcorpan: That seems exactly equivalent to what's in the HTML spec (every actual action is optional), so it's rather unfortunate that it doesn't live there. It also doesn't seem to actually match UAs  (c.f. https://developer.mozilla.org/en-US/docs/Web/API/Window.open )

[05:26:41.0000] <zcorpan>
jgraham: i recall seeing different behavior when testing it (unsurprisingly), so i specified what i thought was most useful

[05:26:56.0000] <zcorpan>
jgraham: what in particular did you have in mind not matching UAs?

[05:28:03.0000] <jgraham>
zcorpan: Well it seems to have fewer features and a different default behaviour (I'm just comparing to the MDN page)

[05:29:34.0000] <erlehmann>
signing web content via pgp has probably been brought up several times, any idea why it was not successful? http://daten.dieweltistgarnichtso.net/src/http-content-pgp-signature/

[05:30:09.0000] <jgraham>
e.g. based on the Gecko bug report I assume that "" is treated like no value passed, but "null" implies the default when passing a value which include e.g. scrollbars=no

[05:31:56.0000] <erlehmann>
annevk some time ago i had a proposal that media elements in html could be addressed using media fragments. would this require changes in the URL spec? http://daten.dieweltistgarnichtso.net/src/media-fragments-html-polyfill/

[05:32:04.0000] <zcorpan>
jgraham: ok, thx. yeah the spec doesn't have such "default" behavior

[05:33:47.0000] <zcorpan>
i see now that both chrome and firefox open a new tab for empty features but a popup for non-empty

[05:37:06.0000] <jgraham>
Yeah, this seems to be pretty nasty and confusing :(

[05:39:39.0000] <zcorpan>
jgraham: i looked through the list in MDN and didn't see any feature name that i want to put in the spec. but let me know if something is needed for compat

[05:43:47.0000] <jgraham>
zcorpan: Well I guess people are relying on specific features, maybe for intranet apps. So the default behaviour should match and there should be some escape hatch for using the other tokens, I guess

[06:11:17.0000] <SimonSapin>
erlehmann: The URL spec provides a string for the fragment, that string could be parsed as a media fragment or as something else. They seem pretty independent

[06:18:22.0000] <erlehmann>
SimonSapin the point is that my polyfill introduces the concept of a sub-fragment. but other specs already have this, so it probably makes sense to specify this on an HTML level, no?

[06:18:52.0000] <SimonSapin>
what’s a sub-fragment?

[06:19:15.0000] <erlehmann>
SimonSapin see the example at http://daten.dieweltistgarnichtso.net/src/media-fragments-html-polyfill/

[06:19:23.0000] <erlehmann>
it links to http://daten.dieweltistgarnichtso.net/src/media-fragments-html-polyfill/#audio&t=8

[06:19:54.0000] <erlehmann>
which means „the resource embedded by the element with the id audio at time 8“

[06:21:39.0000] <SimonSapin>
Hum, maybe that should be in HTML near http://whatwg.org/C#scroll-to-fragid , but I don’t think it needs any change in the URL spec

[06:21:47.0000] <erlehmann>
or http://daten.dieweltistgarnichtso.net/src/media-fragments-html-polyfill/#video&t=00:20

[06:21:47.0000] <erlehmann>
the video at time 00:20

[06:29:45.0000] <zewt>
well, media fragments are only for media resources (like an actual image or video), right? it's a lot more complex if you want to do it to html, where the fragment is in use

[06:31:14.0000] <zewt>
sounds like a case for the ##key=value thing that was talked about a few weeks ago

[06:35:32.0000] <erlehmann>
SimonSapin sorry

[06:36:11.0000] <erlehmann>
connection was lost

[06:36:30.0000] <erlehmann>
SimonSapin did you see my last messages about http://daten.dieweltistgarnichtso.net/src/media-fragments-html-polyfill/#video&t=00:20 signifying the video element at time 00:20?

[06:37:03.0000] <zewt>
erlehmann http://krijnhoetmer.nl/irc-logs/whatwg/20140514#l-633

[06:37:07.0000] <erlehmann>
thx

[06:37:17.0000] <SimonSapin>
erlehmann: yes. Did you see mine? http://krijnhoetmer.nl/irc-logs/whatwg/20140514#l-626

[06:38:02.0000] <erlehmann>
yes, zewt, something like http://example.org#video##t=00:20 would probably result in even less collisions with actual content

[06:38:37.0000] <zewt>
specifically, it allows authors to have hash urls that by design are compatible with ##stuff (not that it would happen automatically, of course)

[06:38:40.0000] <erlehmann>
though i have gone through content already and the ampersand followed by letters followed by an equals sign is really rare

[06:39:34.0000] <erlehmann>
SimonSapin http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2012-December/080689.html

[06:39:36.0000] <zewt>
i've done it personally, so i doubt it

[06:39:54.0000] <erlehmann>
> Also, img elements could certainly benefit from spatial media fragments.

[06:40:15.0000] <erlehmann>
zewt in ids of elements?

[06:40:44.0000] <zewt>
i often use urls like http://foo.com/server/path?server=1&query=2#client/path?client=1&query=2

[06:40:49.0000] <erlehmann>
zewt http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2012-December/080703.html

[06:41:04.0000] <erlehmann>
zewt so you have then an element with id „client/path?client=1&query=2” ?

[06:41:37.0000] <zewt>
where "server/path?server=1&query=2" and "client/path?client=1&query=2" are logically equivalent and parsed the same way, except the former is for the server's use and the latter is for script use

[06:41:51.0000] <zewt>
no, of course not, it's for history API-based scripts

[06:41:51.0000] <erlehmann>
sounds exceedingly brittle

[06:41:58.0000] <erlehmann>
well, then we have no conflict

[06:42:00.0000] <zewt>
nope, works perfectly fine

[06:42:04.0000] <erlehmann>
conflict only would be if there is a collision

[06:42:34.0000] <zewt>
there's a conflict because i might have a client query key named "t", which could suddenly trigger a video to seek or something

[06:43:06.0000] <erlehmann>
zewt only if you have a video that has an id!

[06:43:11.0000] <erlehmann>
that is the whole point of my proposal

[06:43:32.0000] <erlehmann>
take http://example.com/server/path?server=1&query=2#client/path?client=1&query=2&t=3

[06:43:57.0000] <zewt>
a lot of assumptions, and it prevents the use of your thing with client-side queries, which is exactly something the ##thing is meant to allow

[06:43:57.0000] <erlehmann>
then you would need to have a video with the id of 'client/path?client=1' for anything to go haywire

[06:44:06.0000] <erlehmann>
can you point me to the ## thing?

[06:44:24.0000] <erlehmann>
i just want a simple thing to link to media on web pages. this is currently *not* possible

[06:44:33.0000] <zewt>
it was a long and noisy discussion that i probably should have summarized on the list

[06:45:38.0000] <zewt>
(one sec, i summarized it on irc at the time, searching for it)

[06:45:41.0000] <erlehmann>
i am not at all interested in javascript. i just want to conflicts

[06:45:46.0000] <erlehmann>
no conflicts

[06:45:57.0000] <erlehmann>
and a simple declarative way to say „this video on that page at that time“

[06:46:02.0000] <erlehmann>
HEY LOOK AT THAT KITTEN

[06:46:15.0000] <erlehmann>
something that currently needs js which is implemented differently every single time

[06:46:25.0000] <erlehmann>
or stuff like „hey, look at her face here on this page“

[06:46:29.0000] <zewt>
we shouldn't be introducing features that "aren't interested in javascript"

[06:46:41.0000] <erlehmann>
oh you

[06:46:56.0000] <erlehmann>
read that again. *i* am not interested in javascript.

[06:47:03.0000] <erlehmann>
the feature should surely not prevent its use

[06:47:09.0000] <zewt>
which implies "i don't care if this feature works with JS"

[06:47:18.0000] <erlehmann>
wrong

[06:47:33.0000] <erlehmann>
it implies “i don't want a feature that needs js”

[06:47:56.0000] <zewt>
... what needs js?

[06:48:59.0000] <zewt>
the point is allowing browser features in the fragment to be compatible with scripts that also use the fragment (not for browser features to require JS when they don't have to)

[06:49:22.0000] <erlehmann>
because we already have an incompatible mess of scripts that forward to a point in time of an embedded media resource

[06:52:35.0000] <erlehmann>
sorry, network

[06:53:09.0000] <zewt>
the ## proposal is essentially: http://foo.com##key1=value2##key2=value, or http://foo.com#anything##key1=value1##key2=value2, probably parsed as "search for ##key1= in the hash, the value is everything until the next # or the end of string" (doesn't need to be anything fancier than that, I think)

[06:54:02.0000] <erlehmann>
zewt doesn't that ensure that private semantics are used?

[06:54:03.0000] <zewt>
the main use case at the time was http://foo.com##text=hello ("find the first string "hello" and jump to it")

[06:54:10.0000] <zewt>
erlehmann: what do you mean?

[06:54:22.0000] <erlehmann>
ah, i misunderstood it probably.

[06:54:33.0000] <erlehmann>
private semantics, that people “invent“ keys

[06:54:50.0000] <erlehmann>
like with hashbangs

[06:54:59.0000] <zewt>
it's intended to be used for browser features like these, while allowing users to put their own stuff in the hash like I do (without them colliding)

[06:55:07.0000] <erlehmann>
i see

[06:55:21.0000] <caitp>
lets not encourage making uris even less uniform and more stupid

[06:55:23.0000] <caitp>
please

[06:55:26.0000] <erlehmann>
i see users putting “their own stuff” in the hash as something evil

[06:55:26.0000] <caitp>
they're bad enough as it is

[06:55:27.0000] <zewt>
eg. if I have http://foo.com#activeTab=settings, the two can coexist: http://foo.com#activeTab=settings##text=hello

[06:55:40.0000] <erlehmann>
what caitp says

[06:55:58.0000] <zewt>
caitp: right, this is meant to give some uniformity to custom hash stuff (it can't enforce it, but it gives an option)

[06:57:00.0000] <zewt>
erlehmann: well, i couldn't disagree more :)

[06:57:09.0000] <zewt>
but that's probably too long a discussion for now as I need to head to work

[06:57:36.0000] <caitp>
people already don't really understand uris, and abuse them in all sorts of bizarre ways that they were never intended for

[06:57:45.0000] <zewt>
but people putting data in the hash is a common, accepted practice, supported by the web (History.pushState) and it's not going away

[06:57:48.0000] <caitp>
it doesn't need another abuse vector @_@

[06:57:56.0000] <erlehmann>
yeah, what caitp says

[06:58:12.0000] <erlehmann>
this recent “haha, privacy is bad enough, lets give more fingerprinting options” is something like that

[06:58:21.0000] <erlehmann>
“the web is broken, lets break it more!”

[06:58:44.0000] <zewt>
alright, this conversation is turning rhetorical rather than informative so I'm headed to work now :)

[06:59:43.0000] <TabAtkins>
erlehmann: Not really.  The fingerprinting thing is "We're already broken almost completely, and are very unlikely to fix it in any meaningful way, so more breaking doesn't hurt anything.".

[07:00:16.0000] <zewt>
(though it does seem a little weird to say "putting data in the hash is evil and abusive" alongside "i want to encode video timestamps in the hash" is a very confusing pair)

[07:00:34.0000] <zewt>
(that was a fascinating sentence structure)

[07:00:38.0000] <TabAtkins>
It's an aspect that hits a maximum brokenness and then doesn't get more broken, unlike other things.

[07:00:45.0000] <caitp>
don't irc while you drive, zewt

[07:00:48.0000] <caitp>
jeeze man

[07:01:08.0000] <zewt>
irc has the effect of sucking people back in and making them late for work :P

[07:01:58.0000] <erlehmann>
TabAtkins i know, but i think it is really a bad thing to inform untrusted software of how much resources it can afford to waste regardless.

[07:02:31.0000] <TabAtkins>
erlehmann: As argued by multiple other people, you can already figure this out roughly with a pretty easy stress-test.

[07:04:19.0000] <erlehmann>
TabAtkins i think one should not make it easier.

[07:04:38.0000] <erlehmann>
OTOH, maybe you don't think that the linux OOM killer is a pretty good idea.

[07:04:53.0000] <erlehmann>
because if an application wants to “stress test” the memory subsystem, it will be terminated

[07:05:01.0000] <TabAtkins>
Shrug. It *is* a useful piece of information.

[07:05:01.0000] <erlehmann>
what's your stance on that?

[07:05:21.0000] <erlehmann>
and that i think not. i think it is something that encourages wasteful programming.

[07:05:47.0000] <erlehmann>
and user differentiation. i have already seen web pages that tell me to get a new graphics card.

[07:05:57.0000] <erlehmann>
which makes the web less universal

[07:06:12.0000] <caitp>
if people had to be competent kernel developers to write web applications, the web would be a lot tinier

[07:06:15.0000] <erlehmann>
“this web pages needs at least 4 cores”

[07:06:28.0000] <erlehmann>
caitp it is not about kernel developers. it is about app developers

[07:06:36.0000] <TabAtkins>
I have some webapp that benefits from parallelization.  It's silly to spawn up more workers than a comp can possibly use; it'll just mean I waste more time in scheduling.

[07:06:46.0000] <erlehmann>
as soon as you find out that there *is* an OOM killer, you try to allocate the least amount of memory reasonably possible

[07:06:51.0000] <erlehmann>
lest your app is killed

[07:07:42.0000] <erlehmann>
TabAtkins that's quite true. though my core uno machine only becomes notably less responsive when load is >200

[07:07:47.0000] <erlehmann>
so kudos to the scheduling people

[07:08:07.0000] <erlehmann>
(yes, two zeros)

[07:08:41.0000] <erlehmann>
TabAtkins may i ask why “use all available resources” is important in your case?

[07:09:06.0000] <erlehmann>
instead of having a baseline and then going all linear growth / exponential backoff from that?

[07:09:39.0000] <TabAtkins>
Because it's simpler and more likely to get right immediately.  It's definitely not as good as dynamic scaling, but is simpler.

[07:10:50.0000] <erlehmann>
TabAtkins so what would happen if something like your page is opened in two tabs?

[07:10:55.0000] <erlehmann>
both spawn maximum workers?

[07:11:04.0000] <TabAtkins>
Yeah, probably.

[07:11:16.0000] <TabAtkins>
I mean, the thing in back is gonna get scaled back by the browser anywya.

[07:11:49.0000] <erlehmann>
well, then it sounds to me that the “give me an integer for concurrency” proposal is simple and more likely to be horribly wrong

[07:11:57.0000] <erlehmann>
because if it is simple, people will use it

[07:12:11.0000] <TabAtkins>
More likely to be right than guessing an arbitrary number, which is what most people do today.

[07:12:16.0000] <erlehmann>
and advice might be “spawn the number of workers that navigator.concurrency” gives

[07:12:22.0000] <erlehmann>
instant scheduler hell.

[07:12:35.0000] <TabAtkins>
The options are: (1) guess, (2) use what the browser tells you, or (3) implement dynamic perf scaling.

[07:12:45.0000] <TabAtkins>
The first two are way easier, and (2) is better than (1).

[07:12:47.0000] <erlehmann>
maybe (3) can be made easier

[07:13:00.0000] <caitp>
it would help if people stopped thinking of concurrency as multithreading

[07:13:18.0000] <TabAtkins>
Everyone keeps suggesting that we can invent things that make (3) and other more complex multi-core scheduling easier. But nobody's produced such a thing, so shrug.

[07:14:57.0000] <caitp>
ideally you shouldn't have to care how many processing units you have to decide how many coroutines you need

[07:15:11.0000] <caitp>
because they shouldn't be related

[07:15:26.0000] <erlehmann>
TabAtkins i think the difference is that some people (me included) think that more deliberation is going to produce a better outcome than immediate action.

[07:16:53.0000] <erlehmann>
TabAtkins there is precedent for gcd-style stuff in js https://github.com/skylar/node-tasks/blob/master/examples.js

[07:17:18.0000] <TabAtkins>
And you're more than welcome to deliberate and develop such a thing so we can replace it.  In the meantime, replacing the "just guess a number" approach is a benefit, simplifies something you can already do, and can be done on every other platform.

[07:19:19.0000] <erlehmann>
why not have a call that instantiates a worker and then provides a return value to say if it is safe to instantiate another?

[07:19:27.0000] <erlehmann>
or something?

[07:19:28.0000] <erlehmann>
hmm

[07:19:37.0000] <caitp>
TabAtkins, if workers were more like goroutines or even rust tasks, (which they already are, sort of, in an API sense), it becomes much less of a problem, because you don't necessitate a new thread or process

[07:19:40.0000] <erlehmann>
i'm pulling that out of my ass and should really not comment on that. i am not qualified.

[07:19:51.0000] <caitp>
and you don't have to worry as much about how many simultaneous jobs you can run

[07:19:58.0000] <caitp>
they may or may not be simultaneous, it's not important

[07:20:01.0000] <TabAtkins>
erlehmann: How is that not equivalent to just providing a number of workers you can instantiate up front?

[07:20:48.0000] <TabAtkins>
caitp: Yeah, even lighter-weight routines are nice, but they're not what Workers are.

[07:21:01.0000] <caitp>
but they could be

[07:21:13.0000] <erlehmann>
TabAtkins it encourages dynamic scaling

[07:21:25.0000] <caitp>
web developers don't need pthreads

[07:21:49.0000] <caitp>
ensuring that they're heavyweight creates this problem and doesn't necessarily benefit people

[07:21:58.0000] <TabAtkins>
erlehmann: Devs would just quickly gen everything they need until they get a false return value.  Identical to getting the number up-front and generating the number they need.

[07:22:14.0000] <TabAtkins>
caitp: Sometimes you do need heavier threads.

[07:22:32.0000] <caitp>
sometimes, but what if you need them and only have a single core machine

[07:22:35.0000] <erlehmann>
i think the distinction between threads and coroutines is pretty arbitrary

[07:22:43.0000] <caitp>
but you still have two tasks you want to run concurrently

[07:22:59.0000] <TabAtkins>
caitp: Well they get scheduled against each other then.  Ah well.

[07:23:07.0000] <caitp>
I mean, you could let the OS do the scheduling for you, but then you have the cost of context switching between them

[07:23:15.0000] <caitp>
and that's not very helpful is it

[07:24:47.0000] <caitp>
the browser has this knowledge, and it can decide to split things across 1, 2, 4, 8 or N jobs, the developer shouldn't have to care. even if they think they need to care, they probably don't

[07:26:07.0000] <erlehmann>
what caitp says

[07:26:22.0000] <erlehmann>
if they think they have to care, there should be an api to group workers that should be run in parallel

[07:26:38.0000] <jgraham>
TabAtkins: AFAICT the arguments in favour of .hardwareConcurrency simultaneously assume that you can just rely on the scheduler to cover you when you spin up N workers on an N core machine and M cores are either unlike the other cores, or are running some other tasks, and assume that the scheduler can't cover you if you just guess that "8" is probably

[07:26:43.0000] <jgraham>
TabAtkins: AFAICT the arguments in favour of .hardwareConcurrency simultaneously assume that you can just rely on the scheduler to cover you when you spin up N workers on an N core machine and M cores are either unlike the other cores, or are running some other tasks, and assume that the scheduler can't cover you if you just guess that "8" is probablyQuery matches in addon-sdk/Makefile.in Line 	Code Snippet

[07:26:50.0000] <jgraham>
Hmm

[07:27:05.0000] <zewt>
parse error, redo from start

[07:27:05.0000] <jgraham>
that "4" or "8" is probably an OK value

[07:28:25.0000] <TabAtkins>
Not quite for the latter one.  It's that we can improve over just guessing "8"; for machines with less useful cores, you can use the smaller number and avoid contending with the scheduler overhead unnecessarily.

[07:28:46.0000] <TabAtkins>
(Computer's about to die, so I'll probably check out.)

[07:30:03.0000] <jgraham>
An improvement that is likely to be just as wrong in many cases seems like a very margianal improvement indeed

[07:31:01.0000] <TabAtkins>
Luckily it's a very marginal cost as well.

[07:34:41.0000] <zewt>
when one implementor says "we'll just cap it to 8 [and screw over people with powerful computers]" it makes one skeptical, heh

[07:35:55.0000] <caitp>
exactly what are you doing in your web app that you need 10+ proper threads?

[07:36:58.0000] <zewt>
what? any task that's CPU-bound and parallelizes well ("reencode lots of files from MP3 to Vorbis", etc)

[07:37:59.0000] <jgraham>
(I also note that 1 worker = one thread is not required anywhere)

[07:38:19.0000] <caitp>
it's not required, but it is pretty much hinted at

[07:38:22.0000] <jgraham>
(and that's not how presto implements it, for example)

[07:38:51.0000] <zewt>
yeah, that should be treated as an implementation detail

[07:39:18.0000] <caitp>
the spec says that workers are heavyweight, and can be pretty much expected to be OS threads

[07:39:19.0000] <zewt>
no sense creating lots of system threads if they're I/O-bound workers that sit around waiting for messages a lot

[07:39:33.0000] <zewt>
the spec is occasionally mistaken

[07:39:35.0000] <caitp>
in other words no scheduling algorithm is specified and it's up to the host platform

[07:39:50.0000] <caitp>
unless the browser comes up with something on its own, which may or may not be adequate

[07:41:07.0000] <zewt>
the spec doesn't distinguish between the "OS" and the "browser" in any real way, as far as I know, they're all just implementation details

[07:42:41.0000] <caitp>
i'm not saying the web workers spec should tell browsers how to schedule microtasks or anything, but it would probably be good if browsers were encouraged to implement them

[07:43:36.0000] <zewt>
what detectable behavior do you think is underspecified?

[07:44:07.0000] <zcorpan>
caitp: workers don't have to be heavyweight though. i think the impl in presto was lightweight, but then it also didn't take advantage of multiple cores

[07:44:36.0000] <caitp>
it's not that they have to be heavyweight

[07:44:51.0000] <caitp>
but the spec sort of says "they're probably heavyweight, they're allowed to be heavyweight"

[07:44:57.0000] <zcorpan>
yeah

[07:45:14.0000] <caitp>
and as a result, they likely are OS threads

[07:45:28.0000] <zewt>
i'd expect browsers to have a small pool of real threads, and to schedule workers on them, so it would use multiple cores but also allow limiting the number of real threads and not taking whole threads for blocking workers

[07:45:53.0000] <Domenic>
Normatively workers are "a separate thread or process or equivalent construct"

[07:45:55.0000] <caitp>
welcome to chromium where you have entirely different processes all over the place

[07:46:45.0000] <zewt>
not using multiple real threads is lame and poor implementation quality, but the spec shouldn't try to prevent it (if browsers want to pretend that each tab only gets one CPU, they can do that)

[07:47:58.0000] <jgraham>
Domenic: "equivalent construct" is a lot of leeway

[07:49:17.0000] <zewt>
Domenic: i don't think a phrase starting with "i.e." can be considered normative, heh

[07:49:36.0000] <Domenic>
zewt: I think "i.e." can; "e.g." cannot.

[07:50:04.0000] <zewt>
more practically, i'm not sure what detectable behavior we're talking about that we think is wrong or underspecified

[07:50:33.0000] <jgraham>
I'm not sure I think that anything is wrong or underspecified

[07:51:55.0000] <caitp>
I don't think you want the spec to encourage applications to care about how many cores they have available

[07:51:58.0000] <caitp>
just IMO

[07:52:17.0000] <caitp>
the browser should care, but script contexts not so much

[07:52:25.0000] <zewt>
are you referring to the "are workers threads" discussion, or are you talking about something else?

[07:52:46.0000] <caitp>
I'm referring to the "integer telling you how many cores you have" thing

[07:52:57.0000] <zewt>
okay, context change marker needed :)

[07:53:05.0000] <zewt>
i'm very unconvinced about that feature too

[07:54:15.0000] <zewt>
(not to say I'm totally convinced against it, either)

[07:55:45.0000] <caitp>
in my mind, once you start going down that road, before you know it you've got WebIDL mapping 1:1 with pthreads

[07:55:51.0000] <caitp>
and nobody wants that

[07:55:58.0000] <Domenic>
asm.js people want that

[07:56:05.0000] <zewt>
sounds like a bit of a giant leap

[07:56:06.0000] <caitp>
they think they want that, they don't really

[07:56:19.0000] <Domenic>
no, literally, e.g. epic games wants to be able to compile their pthread-using C++ to JS

[07:56:40.0000] <zewt>
that stuff has always seemed like impractical nonsense to me

[07:57:03.0000] <caitp>
I think it is okay to say "hint that this worker probably wants to have its own OS thread"

[07:57:20.0000] <zewt>
why would you need to do that?

[07:57:33.0000] <caitp>
because maybe you're Epic Games or whoever

[07:57:49.0000] <zewt>
sorry, that does help explain what we're talking about now

[07:58:08.0000] <Domenic>
yeah, this is a different discussion, i was jumping off of your full pthread-API idea

[07:58:12.0000] <zewt>
but it seems like we're far away from "scripts want to know how many threads to use"

[07:58:20.0000] <caitp>
it's all related

[07:58:21.0000] <Domenic>
web workers, even as heavyweight threads, are so far from pthreads

[07:58:29.0000] <caitp>
so, there's a distinction between concurrency and parallelism, do you agree

[07:58:40.0000] <caitp>
concurrent tasks may or may not be run in parallel

[07:58:46.0000] <zewt>
they're synonyms, so no

[07:58:52.0000] <caitp>
they're not actually synonyms

[07:58:59.0000] <Domenic>
i am not really interested in a first-principles schooling on concurrency vs. parallelism, so count me out.

[07:59:01.0000] <caitp>
people mistake them for synonyms, but they're not

[07:59:23.0000] <zewt>
yeah i have things i'd rather be doing

[07:59:53.0000] <caitp>
that's fine, but it's worth learning about when you have time

[08:00:11.0000] <zewt>
than "take two words that every english speaker uses interchangeably and assign subtle extra meanings to them that nobody has used since their college class on threading fifteen years ago"

[08:01:34.0000] <caitp>
well, getting too philosophical about it isn't really worth doing

[08:02:16.0000] <caitp>
but the point is, you have N things you want to do, and you want to do them roughly simultaneously to meet some end

[08:02:40.0000] <caitp>
you might do them in parallel, or you might do them in sequence a little bit of each at a time

[08:02:49.0000] <caitp>
both are concurrent

[08:03:06.0000] <caitp>
the distinction, ideally, does not matter to the developer

[08:03:11.0000] <zewt>
not sure how that matters here

[08:04:22.0000] <caitp>
it matters because when you stop caring about parallelism vs concurrent, you stop needing to worry about the hardware limits of your platform

[08:05:13.0000] <caitp>
the browser allocates your task somewhere, whether on the current thread or some new thread, and you're none the wiser

[08:05:20.0000] <caitp>
that's how it should be, invisible to the web developer

[08:05:43.0000] <zewt>
sounds very academic; in practice if you start far more processes than CPUs you pay a cost of extra overhead

[08:05:55.0000] <caitp>
because the web developer does not know or care whether she's running her task on a different core or not, she doesn't need to care how many cores there are

[08:06:33.0000] <caitp>
right, so the browser will be clever and not start more threads than it thinks are appropriate

[08:06:54.0000] <zewt>
if you have an embarassingly parallel problem to solve (eg. "do a bunch of work to each of 1000 files") which can scale to any number of CPUs, and you want your program to work well on both 2-CPU machines and 128-CPU machines, you don't want to just start 128 processes, since the 2-CPU machine will have a ton of extra overhead as a result

[08:07:24.0000] <zewt>
currently the browser has no idea what the threads are for, so it has no way of knowing what to do

[08:07:30.0000] <caitp>
you're a web application, you aren't going to try and do the work that a 128-processor machine will do

[08:07:38.0000] <caitp>
it's not realistic

[08:08:18.0000] <zewt>
for example, if each worker is processing one file, then the ideal thing for the browser to do in that particular case is to run two workers at a time, and just queue the others and not do any work on them

[08:08:47.0000] <caitp>
I'm a microtask, for my current turn through my event loop, I'm doing this much work, and taking this long

[08:09:00.0000] <caitp>
the browser keeps track of this information, and uses it to schedule how long I run

[08:09:07.0000] <caitp>
if I do a lot of work, maybe I get moved to a new thread

[08:09:22.0000] <caitp>
if I stop doing a lot of work, maybe I join the main thread

[08:09:27.0000] <caitp>
it's not super relevant

[08:09:34.0000] <caitp>
we can do the math and sort it out

[08:09:42.0000] <jgraham>
caitp: Most browser engines can't suspend scripts midway through execution, so that idea doesn't work

[08:10:37.0000] <caitp>
you mean chopping up a turn through the event loop

[08:10:45.0000] <caitp>
yes, that would take some work

[08:10:55.0000] <jgraham>
Presto could

[08:11:03.0000] <zewt>
jgraham: if browsers are putting workers on a single thread and can't suspend them, that sounds like a big bug

[08:11:52.0000] <caitp>
if you're running V8's jit compiled code on the main thread, you might have a hard time stopping it

[08:11:54.0000] <zewt>
if one worker going while(true); can stop other workers from ever running

[08:12:10.0000] <gsnedders>
zewt: There's a reason why Presto was the only one that could suspend and did workers on a single thread :)

[08:12:16.0000] <caitp>
course, it doesn't have to be hard to stop it, that could change

[08:12:37.0000] <gsnedders>
caitp: Carakan's JIT had no effect. Essentially it could suspend at any point GC could run. Which is plenty of places.

[08:12:39.0000] <jgraham>
zewt: I don't know that there is any combination of browser that does multiple workers per thread and can't suspend

[08:12:43.0000] <gsnedders>
I think.

[08:13:05.0000] <jgraham>
It's just that there is only one that does multiple workers per thread

[08:13:12.0000] <jgraham>
and it isn't actively developed

[08:13:31.0000] <caitp>
which is too bad, because that's really the right way to do it

[08:13:31.0000] <gsnedders>
Except that can't have been it. Because how would that handle while(true);... oh well, I forget

[08:16:31.0000] <caitp>
anyways yeah, it's a bit of work for jit compiled script, but I think it would be good to encourage implementations to do that, instead of exposing all of the pthreads nonsense to web developers

[08:16:53.0000] <caitp>
not that workers are a bad thread api

[08:17:03.0000] <caitp>
if you're going to have heavyweight threads, web workers aren't a bad approach

[08:17:45.0000] <gsnedders>
Maybe we could stop on any backedge too, idk?

[08:17:50.0000] <jgraham>
I think it would be a *lot* of work to allow that, mainly in the dom code rather than in the js engine

[08:18:10.0000] <jgraham>
And it's not really clear that it helps with the fundamental problem

[08:18:26.0000] <caitp>
the fundamental problem of doing lots of things?

[08:18:32.0000] <jgraham>
In fact it might well make it worse (by trashing the cache)

[08:18:43.0000] <caitp>
oh probably

[08:19:04.0000] <caitp>
but I mean, context switches between OS threads aren't really free either

[08:19:04.0000] <gsnedders>
I don't think there was any complexity in the DOM? The big problem was the cost of reflowing too often.

[08:19:20.0000] <gsnedders>
Because nobody else would reflow during JS execution.

[08:19:31.0000] <jgraham>
gsnedders: I think there was

[08:19:38.0000] <gsnedders>
But someone who has current access to Presto is probably better to speak to than the two of us. :P

[08:19:50.0000] <jgraham>
But you would have to ask bratell or jl or someone

[08:20:26.0000] <gsnedders>
idk, I never touched the DOM code much

[08:20:40.0000] <zcorpan>
jgraham: i can't get the response writer thing to work. the resource never finishes loading

[08:21:03.0000] <jgraham>
zcorpan: Are you setting a content-length header?

[08:21:13.0000] <zcorpan>
hmm. nope

[08:21:47.0000] <jgraham>
zcorpan: You either need to set a content-length header of make sure that the connection gets closed after the response finishes

[08:22:55.0000] <jgraham>
which you can do by setting response.close_connection = True

[08:23:25.0000] <zcorpan>
content-length worked. thanks

[08:23:42.0000] <jgraham>
OK. Are the docs wrong? This changed when we enabled HTTP/1.1

[08:24:17.0000] <jgraham>
It looks like they are

[08:24:26.0000] <zcorpan>
the example in https://github.com/w3c/wptserve/pull/24 doesn't do either at least

[08:24:46.0000] <mathiasbynens>
http://validator.nu/ is down

[08:27:03.0000] <zcorpan>
hsivonen: MikeSmith: ^

[08:32:45.0000] <hsivonen>
mathiasbynens: thanks. It's up again now.

[08:32:59.0000] <mathiasbynens>
hsivonen: thanks!

[09:07:40.0000] <JonathanNeal>
Is there anything like http://api.jquery.com/closest/ coming into native JS?

[09:10:54.0000] <jgraham>
JonathanNeal: I don't think anyone is working on that

[09:14:41.0000] <Domenic>
that would be nice

[09:14:50.0000] <Domenic>
it is a kind of shitty name though

[09:14:59.0000] <Domenic>
.ancestor(selector) might work better

[09:35:10.0000] <darobin>
Domenic: .ancestor(selector) would sound to me more like jQuery's .parents(selector)

[09:35:29.0000] <Domenic>
darobin: singular vs. plural seems to be the key here

[09:35:32.0000] <Domenic>
.ancestors vs. .ancestor

[09:36:01.0000] <darobin>
Domenic: mmmm, I'm not so sure — I mean they do rather different things

[09:36:28.0000] <darobin>
or rather, I take your point, but that sort of difference in behaviour for just one "s" scares me

[09:36:41.0000] <darobin>
(not to say that closest() is great either)

[09:48:16.0000] <zewt>
in this case i'd say "closest" is a good name just because it's the one people are alreay familiar with (that and there's no well-known tree structure term for it)

[09:48:34.0000] <zewt>
i often roll that function myself, and I call it "closest" too

[09:48:59.0000] <Domenic>
zewt: you don't think "ancestor" is a well-known tree struture term?

[09:49:19.0000] <zewt>
Domenic: it's wrong, because this.closest() can return this

[09:49:22.0000] <zewt>
this isn't an ancestor of this

[09:49:31.0000] <Domenic>
ah, it can? I've never actually used that.

[09:49:44.0000] <Domenic>
in that case I agree .closest() sounds best.

[09:49:47.0000] <zewt>
yeah, and i often depend on that behavior

[09:50:59.0000] <Domenic>
http://dom.spec.whatwg.org/#trees "inclusive ancestor" heh

[09:51:51.0000] <zewt>
for example, container.addEventListener("click", function(e) { var actualTarget = e.target.closest(".button"); }, true);

[09:52:29.0000] <zewt>
where the .button might actually also be the target

[09:52:33.0000] <Domenic>
(doesn't currentTarget work for that?)

[09:53:29.0000] <zewt>
if you have <div class=container><div class=button><lots of stuff/></div></div> and you click somewhere inside "lots of stuff", <div class=button> is nothing special to the event

[09:53:55.0000] <zewt>
so it just means "see if we clicked a .button, or something nested inside a .button (we don't care which)"

[09:55:48.0000] <Domenic>
Ah yeah, I guess this is usually abstracted away from me by jQuery et al's event delegation

[09:56:08.0000] <Domenic>
$('.container').on('click', '.button', function (e) { /* e.currentTarget is always the .button */ })

[10:40:58.0000] <JonathanNeal>
Domenic: ancestor suffers the same problem as contains https://developer.mozilla.org/en-US/docs/Web/API/Node.contains

[10:41:12.0000] <JonathanNeal>
It implies that it does not match itself.

[10:41:33.0000] <Domenic>
JonathanNeal: yeah, scroll up a bit :)

[10:42:38.0000] <JonathanNeal>
I read, but I thought it was worth bringing up a related method and quantifying it a bit more.

[10:44:12.0000] <JonathanNeal>
I just posted https://github.com/jonathantneal/closest I rather niavely ask people to write a spec if they think it deserves to be a real DOM method. I wish I could provide better direction. Can you think of a way to provide more constructive direction?

[10:46:53.0000] <JonathanNeal>
*naively

[10:50:56.0000] <Domenic>
I'm not sure what you're asking.

[10:51:43.0000] <Domenic>
the spec is probably one line, e.g. some slightly-better phrased version of "return the first inclusive ancestor of element"

[10:52:04.0000] <Domenic>
(The better-phrasing would come in re: making sure "first" is well-defined.)

[10:52:22.0000] <SamB>
innermost?

[10:52:33.0000] <Domenic>
just needs to be something already defined in the DOM standard

[10:52:41.0000] <Domenic>
not sure if there's an ordering on inclusive ancestors

[10:53:37.0000] <Domenic>
"that is last in tree order" might work

[10:59:11.0000] <JonathanNeal>
If any of you can think of one that is sympathetic with the existing DOM, would you ping me when you share it? I’ll update the documentation. What I want to do in the README is tell people “If you want to see this in a real DOM standard, do the following:”

[11:01:23.0000] <Domenic>
the answer to that is "convince annevk to add it and convince implementers to implement it."

[11:01:25.0000] <Domenic>
as always.

[11:30:17.0000] <jcgregorio>
gah, I wasn't logged in when I submitted: https://www.w3.org/Bugs/Public/show_bug.cgi?id=25716

[11:30:35.0000] <jcgregorio>
in case anyone wants to update the bug to list me as the reporter

[11:33:38.0000] <smaug____>
jcgregorio: I don't think you can change the reporter in bugzilla

[11:34:14.0000] <jcgregorio>
smaug____: OK, thanks

[14:28:10.0000] <zewt>
dear world: if your documentation contains the phrase "Alice wants to", please step away and let somebody else write the documentation

[14:28:15.0000] <zewt>
(thanks)

[14:29:24.0000] <odinho>
But if the alternative is no documentation?

[14:30:21.0000] <zewt>
i'd almost take no documentation over getting a headache reading about some make-believe Alice when i'm trying to read technical docs

[14:34:25.0000] <jgraham>
If your documentation contains "Alice wants to" you are either doing cryptography, or trying to make your software seem as complex as crypto

[14:34:38.0000] <odinho>
Yeah. Alice and Bob.

[14:35:34.0000] <zewt>
in this instance it's Amazon API docs, some of which is silly complex

[14:35:35.0000] <jgraham>
Hurrah, time for an early xkcd http://xkcd.com/177/

[14:36:06.0000] <zewt>
(though this particular API is probably the simplest amazon API I've ever seen--read a URL from inside a VM, it spits out your instance's ID)

[15:48:01.0000] <aretecode>
In CSS, what is the term for the definition "The group of all Rule Set(s)" ?

[15:54:53.0000] <estellevw>
block?

[15:56:57.0000] <caitp>
in the CSSOM or something else?

[16:11:38.0000] <aretecode>
Yes, caitp

[16:11:52.0000] <aretecode>
estellevw, like `Rule Set Block` ?

[16:27:54.0000] <zewt>
grr, firefox has been chewing a whole CPU and spinning my fans up nonstop since that last update

[16:33:54.0000] <jgraham>
zewt: If you can isolate the problem at all, report a bug

[16:34:01.0000] <jgraham>
It is working fine for me at least

[16:38:22.0000] <zewt>
it's probably some tab causing it, and binary searching my dozens of tabs would be tedious

[16:38:48.0000] <zewt>
(same tab set as before the update where it didn't happen, though)


2014-05-15
[18:05:58.0000] <coolbot95>
<meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=no" /> <-- What is this? What exactly does it do, and why?

[18:07:17.0000] <boogyman>
coolbot95:@link https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag

[18:07:53.0000] <coolbot95>
/me refuses to support cellphones.

[18:08:54.0000] <boogyman>
its not just for palm devices

[18:23:34.0000] <coolbot95>
Then what?

[00:10:07.0000] <mathiasbynens>
people don’t seem to know about `window.URL` ☹ http://devblog.arnebrasseur.net/2014-05-HTML-and-URIs-in-Javascript#comment-1386556461

[00:33:51.0000] <MikeSmith>
mathiasbynens: hmm yeah

[00:34:06.0000] <MikeSmith>
mathiasbynens: I guess they don't know about https://github.com/annevk/url/ either

[00:34:55.0000] <MikeSmith>
and https://github.com/Polymer/url

[03:27:27.0000] <tobie>
Lazy question: can fetch be polyfilled in terms of xhr?

[03:54:26.0000] <zcorpan>
tobie: what do you mean by "fetch"?

[03:55:20.0000] <jgraham>
zcorpan: Presumably annevk's new API to replace XHR but add more promises

[03:58:48.0000] <jgraham>
/me isn't sure if/where that is actually specified. The Request and Response objects seem to have IDL but no spec in Service Worker

[03:59:15.0000] <jgraham>
but I don't see an interface for using them outside a Service Worker context

[04:09:12.0000] <tobie>
right

[04:09:46.0000] <tobie>
zcorpan: https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-global-scope-fetch

[04:10:49.0000] <tobie>
my understanding it the fetch algo is defined in the fetch spec along with the Response and Request objects, while the fetch api is defined in SW.

[04:11:45.0000] <tobie>
I would argue that the fetch api should be available outside of the SW context (I suppose that is the plan).

[04:17:44.0000] <darobin>
tobie: last I hear that was still being discussed

[04:18:20.0000] <darobin>
that said I see no a priori reason why it wouldn't be possible to implement a nicer, promisy API atop XHR

[04:19:12.0000] <zcorpan>
tobie: as far as i can tell that spec has some abilities that xhr does not. for instance setting arbitrary request headers

[04:19:25.0000] <jgraham>
Having two different apis for getting resources seems quite bad. Having each avaliable only in a certain context seems like a disaster

[04:19:55.0000] <tobie>
jgraham: ++

[04:20:53.0000] <darobin>
jgraham: that's pretty much what the discussion was, yes

[04:23:33.0000] <tobie>
zcorpan: not sure, see: "The forbidden author header names" in http://fetch.spec.whatwg.org/#requests

[04:23:56.0000] <jgraham>
darobin: That doesn't seem like a discussion? I mean the only point that you can debate is "is XHR so bad that we need a new API to do basically the same thing". Once you decide that you are going ahead with the new API, there aren't any sensible choices left apart from "make the new API avaliable everywhere"

[04:24:56.0000] <zcorpan>
tobie: where does fetch() filter them out?

[04:25:30.0000] <zcorpan>
tobie: xhr does here http://xhr.spec.whatwg.org/#dom-xmlhttprequest-setrequestheader step 5

[04:25:37.0000] <tobie>
zcorpan: "Fetch end points must enforce restrictions on a request's method and author headers." I suppose.

[04:26:24.0000] <zcorpan>
tobie: not sure if that's a requirement on UAs or on other specs...

[04:26:47.0000] <jgraham>
That's a pretty bizarre requirement

[04:26:58.0000] <jgraham>
It sounds like a requirement on servers, but it doesn't make sense

[04:27:03.0000] <darobin>
jgraham: that was pretty much it — it wasn't discussed for long. There was also the question about phasing out XHR, which is naturally impossible over the sort of time scales we'd normally think about.

[04:27:10.0000] <tobie>
well fetch spec only describes fetch algo

[04:27:41.0000] <jgraham>
zcorpan: I think it's pretty clear that the API spec for fetch is basically missing

[04:27:44.0000] <tobie>
darobin: actually, pretty much no one uses xhr directly, so might be easier than expected.

[04:28:01.0000] <darobin>
tobie: I thought of that, but still

[04:28:03.0000] <tobie>
jgraham: yes, API is defined in SW spec for now.

[04:28:13.0000] <darobin>
"pretty much no one" of something that's used this much is a lot of people

[04:28:30.0000] <darobin>
and that's not counting the millions of copies of libs that use it and aren't evergreen at all

[04:28:32.0000] <jgraham>
tobie: Yeah, but the point is that it isn't

[04:28:51.0000] <darobin>
it doesn't help you that it's used through jQuery for all the jquery.min.js littered all over the place

[04:29:03.0000] <tobie>
good point

[04:29:08.0000] <tobie>
(hadn't thought about that)

[04:29:23.0000] <darobin>
now if we could have evergreen libs, that would rock

[04:29:33.0000] <zcorpan>
what's in the SW spec now is "open up a giant security hole here" :-P

[04:30:07.0000] <tobie>
I don't understand why.

[04:30:14.0000] <tobie>
(honest question)

[04:30:17.0000] <jgraham>
zcorpan: Given the state of the rest of the spec, it's pretty clearly unfinished.

[04:30:43.0000] <jgraham>
But it does seem like opening an issue for this might be a good idea

[04:32:22.0000] <tobie>
zcorpan: I don't understand why this opens up a security issue. SW spec says implement fetch algo. Fetch algo says enforce restrictions on a request's method and author headers

[04:32:28.0000] <zcorpan>
tobie: it invokes the "fetch" algorithm without doing any security-sensitive restrictions that are in place in XHR (such as limiting request headers)

[04:33:10.0000] <zcorpan>
tobie: i don't understand what the "enforse restrictions" requirement means

[04:33:56.0000] <tobie>
oh. I read it as: dissaloow forbidden author header names

[04:34:26.0000] <tobie>
*disallow

[04:34:28.0000] <jgraham>
tobie: The hint that it doesn't make sense is that "enforce restrictions [...]" isn't a link to a definition

[04:34:37.0000] <tobie>
sure.

[04:35:14.0000] <tobie>
So, then yeah, that's probably worth filing

[04:36:00.0000] <tobie>
"fetching end point" would also need to be defined, no?

[04:36:24.0000] <tobie>
or is end point common terminology in spec-land?

[04:36:57.0000] <zcorpan>
yeah it's not clear to me what "fetching end point" means

[04:40:38.0000] <tobie>
annevk: following our conversation yesterday, I jotted some examples down for ResponsePromise vs. Promise: https://gist.github.com/tobie/54fbe04b97d0a0b0b621

[04:40:39.0000] <zcorpan>
tobie: i read it as saying that specs that invoke "fetch" need to be careful not to introduce new security holes, and the fetch() api violates it completely

[04:41:30.0000] <jgraham>
In any case I think "end point" is very confusing

[04:41:32.0000] <tobie>
zcorpan: I see. That's not my reading of it. Good sign this needs clarification.

[04:41:51.0000] <jgraham>
In HTTP APIs, an end point is usually the server

[04:42:04.0000] <tobie>
jgraham: precisely.

[04:42:37.0000] <tobie>
jgraham: I think it means "WebIDL api that implements the algo," though

[04:42:57.0000] <zcorpan>
"These are forbidden so the user agent remains in full control over them. Names starting with `Sec-` are not allowed to be set to allow new headers to be minted that are guaranteed not to come from fetching end points that allow control over headers by authors, such as XMLHttpRequest. [XHR]"

[04:42:58.0000] <zcorpan>
http://fetch.spec.whatwg.org/#concept-forbidden-author-header-names

[04:43:34.0000] <zcorpan>
seems anne meant XHR to be a "fetching end point"

[04:43:54.0000] <tobie>
my understanding too. (See above comment)

[04:44:07.0000] <jgraham>
Yeah, that's just broken terminology

[04:44:58.0000] <jgraham>
Even with that interpretation, I think it's trying to impose a MUST level requirement on the consumer of the fetch spec i.e. the service worker spec, that the service worker spec doesn't meet

[04:45:20.0000] <jgraham>
So there are bugs in multiple places

[04:45:42.0000] <tobie>
annevk: I find error handling hard to reason about in both cases. That said, I do tend to thing that your ResponsePromise with direct access to a stream seems to lead to more usable API overall.

[04:46:46.0000] <zcorpan>
http://w3cmemes.tumblr.com/post/66950616884/hober-tells-it-like-it-is-and-isnt-scared-to-be

[04:46:55.0000] <tobie>
annevk: …but I think you might want to generalize the concept beyond ResponsePromise (and call it StreamPromise or some such)

[05:02:45.0000] <annevk>
tobie: there should be some way to rewrite the regular promise one with new syntactic sugar that makes it more appealing though

[05:02:56.0000] <annevk>
tobie: the fetch().get("body") stuff we discussed

[05:03:31.0000] <annevk>
tobie: as for errors, there's a ton of potential errors

[05:04:48.0000] <annevk>
MikeSmith: W3C Bugzilla is slow :/

[05:06:12.0000] <caitp>
you can only expect so much from 321mb of perl

[05:11:36.0000] <MikeSmith>
annevk: will check once I'm back home

[05:17:58.0000] <tobie>
annevk: right. now I remember that part. Glad I jotted these examples down or I would just have forgotten everything about the pro getter thing.

[05:18:30.0000] <tobie>
With regards to errors, my question was more about where those errors would end up being reported.

[05:18:59.0000] <tobie>
On the stream / the promise / both / depends

[05:19:33.0000] <annevk>
if there's an error with the promise the stream will error, so both

[05:19:52.0000] <annevk>
they end up in the console, where uncaught exceptions go to die

[05:27:42.0000] <tobie>
OK, my examples have lots of issues. Fixing them right now and adding the get() examples.

[05:53:54.0000] <tobie>
annevk:

[05:54:02.0000] <tobie>
Updated the example: https://gist.github.com/tobie/54fbe04b97d0a0b0b621

[05:54:23.0000] <tobie>
I don't think the Promise.prototype.get buys us much.

[05:55:19.0000] <annevk>
tobie: I think you want both .get and async invoke

[05:55:41.0000] <annevk>
Domenic might be able to help

[05:56:25.0000] <annevk>
.get("body").call("pipe", new CSVParser())

[05:56:40.0000] <annevk>
note that there is a bit of a difference between the three examples when CSVParser is invoked

[05:57:12.0000] <annevk>
Hmm, not sure that .call would actually work

[05:57:26.0000] <annevk>
No it wouldn't

[05:57:32.0000] <tobie>
invoke would, though

[05:57:54.0000] <tobie>
.get("body").invoke("pipe",  new CSVParser())

[05:58:36.0000] <tobie>
annevk: what's the difference between the three examples?

[05:59:17.0000] <annevk>
tobie: timing

[06:01:16.0000] <tobie>
I don't see how that's possible unless ES6 promises were able to resolve before the next turn of the event loop

[06:02:05.0000] <tobie>
(but I often don't see how something is possible because I don't look at it properly :/)

[06:03:18.0000] <caitp>
i think you always want them to resolve on the next turn, otherwise you risk a nice big stack overflow

[06:03:24.0000] <caitp>
and you don't want that

[06:04:24.0000] <tobie>
caitp: among other issues. :)

[06:04:42.0000] <tobie>
biab

[06:34:10.0000] <zcorpan>
annevk: how well have you tested starting fetches while a fetch is in flight (for the same url)? is that covered in the fetch spec?

[06:34:29.0000] <annevk>
zcorpan: no, that could be covered a whole lot better

[06:34:39.0000] <annevk>
zcorpan: it's actually a problematic scenario for service workers

[06:35:10.0000] <annevk>
zcorpan: you probably want to do most of Fetch in the same way, and only do this when you hit the network

[06:36:13.0000] <zcorpan>
annevk: ok. i'm testing it now for <img> trying to figure out how that should work, but i'm not sure how much i should leave to the fetch spec and how much i should deal with myself

[06:36:25.0000] <annevk>
tobie: it's just that CSVParser() is invoked a bit earlier in the ResponsePromise scenario

[06:36:47.0000] <annevk>
zcorpan: <img> has some special handling

[06:37:06.0000] <annevk>
zcorpan: are you aware of the bug asking for image fetching to be made generic?

[06:37:17.0000] <zcorpan>
annevk: yeah i saw it

[06:37:29.0000] <annevk>
zcorpan: the document image cache or whatever it's called these days is something that's not for Fetch though

[06:38:31.0000] <zcorpan>
annevk: ok

[06:53:25.0000] <Domenic>
tobie: annevk: I'm missing some context. But I am skeptical of ResponsePromise.

[06:54:28.0000] <annevk>
Domenic: now would be a great time to come up with alternatives

[06:54:46.0000] <Domenic>
annevk: what does ResponsePromise even solve

[06:55:01.0000] <annevk>
Domenic: BlinkOn wants to ship in stable per end of August or so

[06:55:16.0000] <annevk>
Domenic: the ability to get to a stream without callbacks

[06:55:23.0000] <annevk>
Domenic: fetch(x).body

[06:55:32.0000] <Domenic>
annevk: why not fetch(x => x.body)

[06:56:10.0000] <Domenic>
a promise for a response is much more coherent than a response that is a promise

[06:56:17.0000] <annevk>
Domenic: you mean fetch(x).then(r => r.body) ?

[06:56:27.0000] <Domenic>
annevk: yes, sorry, need coffee -_-

[06:56:38.0000] <annevk>
Domenic: because it's not as nice

[06:56:47.0000] <Domenic>
O_O

[06:57:04.0000] <annevk>
with fetch(x).body you can then pipe that into something else much more easily

[06:57:15.0000] <Domenic>
so if fetch(x).body is the body, what does fetch(x).then(r => what is r) ?

[06:57:28.0000] <Domenic>
fetching a response is inherent async

[06:57:37.0000] <Domenic>
you shouldn't be able to pipe it anywhere until you actually have the response

[06:57:43.0000] <annevk>
r would be a Response object instance

[06:58:02.0000] <Domenic>
so .body is literally a getter for this.then(r => r.body)

[06:58:25.0000] <annevk>
Domenic: it gives a Stream that starts streaming once the promise resolves

[06:58:44.0000] <Domenic>
annevk: you can't have a response stream until the request completes

[06:59:02.0000] <Domenic>
the stream you're getting is no longer a coherent conceptual object

[06:59:11.0000] <Domenic>
it is some combination of ArtificiallyPausedStream + ResponseStream

[06:59:26.0000] <Domenic>
but ArtificiallyPausedStream has the exact semantics of a promise

[06:59:29.0000] <annevk>
I find that hard to follow

[06:59:30.0000] <Domenic>
so just use promises for that

[06:59:44.0000] <annevk>
I guess it might be okay

[06:59:47.0000] <Domenic>
also: the real comparison is between (await fetch(x)).body and fetch(x).body

[07:00:00.0000] <annevk>
(I'm not really married to the design, just trying to see if I can defend it)

[07:00:07.0000] <Domenic>
it is weird to get a response before the request completes

[07:00:27.0000] <Domenic>
(for some definition of "completes", that probably means something more like "connection established")

[07:01:00.0000] <annevk>
request complete is basically defined as getting a response a back that is not a redirect

[07:01:09.0000] <Domenic>
yeah

[07:01:13.0000] <annevk>
as you can't observe redirects

[07:01:26.0000] <Domenic>
i feel like there is an HTTP term for this I should know

[07:02:08.0000] <annevk>
nah it's Fetch

[07:02:08.0000] <Domenic>
it is not a horrible design i guess

[07:02:18.0000] <annevk>
it's a browser variety of HTTP

[07:02:18.0000] <Domenic>
it has straightforward desugaring into something understandable

[07:02:23.0000] <Domenic>
heh, that's fair

[07:02:36.0000] <annevk>
it's a little ugly, but most things are

[07:02:43.0000] <Domenic>
but i think it conceptually muddies the waters for very little convenience gain

[07:02:56.0000] <Domenic>
i think it's nicer to be able to tell a straightforward story about what's involved

[07:02:57.0000] <annevk>
it's mostly that we cannot change it

[07:03:10.0000] <annevk>
redirects have to be atomic

[07:03:10.0000] <Domenic>
i went back to talking about RequestPromise lol

[07:03:15.0000] <annevk>
oooh

[07:03:29.0000] <annevk>
I'm fine with just a promise

[07:03:41.0000] <annevk>
the whole promise subclassing I'm not exactly sold on

[07:03:51.0000] <Domenic>
yeah I mean I think it should be for generic things like CancellablePromise

[07:04:04.0000] <Domenic>
or LazyPromise

[07:04:20.0000] <Domenic>
things that add fundamentally new, but broadly-reusable, capabilities.

[07:04:45.0000] <Domenic>
(fun fact: nobody knows whether it should be CancellablePromise or CancelablePromise)

[07:07:46.0000] <annevk>
caitp: it might be a while before I define the Content-Length stuff

[07:08:02.0000] <annevk>
caitp: feel free to point to tests or browser results in the bug meanwhile though

[07:08:39.0000] <annevk>
Domenic: it's event.cancelable

[07:09:19.0000] <Domenic>
Ah, that helps. If any CancelablePromise work takes place in TC39 let's not forget that.

[07:09:35.0000] <caitp>
it seems like browsers have already decided what they want to do, and gecko has already decided not to do it, so it seems like a weird thing to explicitly specify, since it doesn't matter

[07:09:48.0000] <caitp>
but alright

[07:10:03.0000] <Domenic>
EVERYTHING MUST BE SPECIFIED

[07:11:06.0000] <Domenic>
(see also: thread surrounding https://twitter.com/sgalineau/status/466720865346797568 )

[07:24:38.0000] <annevk>
TabAtkins: http://dev.w3.org/csswg/selectors/#scope-contained- is that trailing hyphen intentional?

[08:42:57.0000] <dglazkov>
good morning, Whatwg!

[09:00:36.0000] <annevk>
jgraham: zcorpan: if something is unclear, you could file a bug

[09:02:39.0000] <jgraham>
Indeed. Want to add a bug report box? :)

[09:08:36.0000] <annevk>
jgraham: if you select the text you can file a bug about it, seems easy enough

[09:11:50.0000] <jgraham>
Uh, yeah if you like mystery meat UIs I guess.

[09:12:13.0000] <jgraham>
I had no idea that would work, and I can't see any reason I should expect it to

[09:40:29.0000] <Domenic>
oooh wow yeah i didn't know either

[09:40:40.0000] <Domenic>
maybe add it to the line at the top giving the bug URL

[09:50:51.0000] <annevk>
jgraham: file a bug on zcorpan for that

[09:52:07.0000] <jgraham>
zcorpan has his own bug tracker?

[09:53:35.0000] <jgraham>
(I honestly don't know where you want me to file the bug)

[10:03:17.0000] <annevk>
jgraham: on https://github.com/whatwg/resources.whatwg.org/ I guess

[10:03:24.0000] <annevk>
jgraham: file-bug.js is his

[10:06:24.0000] <jgraham>
annevk: That appears to have issues disabled

[10:06:35.0000] <jgraham>
And I can't see a component in W3C Bugzilla

[10:06:40.0000] <annevk>
jgraham: fixed

[10:07:36.0000] <jgraham>
Well I could have changed the setting too. Doesn't mean that anyone is planning to look at the issues :)

[10:11:59.0000] <jgraham>
https://github.com/whatwg/resources.whatwg.org/issues/2 fwiw

[10:57:46.0000] <IZh>
Hi Hixie.

[11:03:20.0000] <Hixie>
hey

[11:06:05.0000] <Ms2ger>
Finally!

[11:09:32.0000] <Hixie>
finally?

[11:10:07.0000] <Ms2ger>
IZh has been saying hi to you for weeks

[11:10:14.0000] <Hixie>
heh

[11:10:18.0000] <Ms2ger>
TabAtkins is severely annoyed

[11:10:52.0000] <Hixie>
we could start saying hi to him instead

[11:11:34.0000] <Hixie>
i wish bugzilla had a way to select bugs assigned to me where i had commented but where i wasn't the one who'd last commented

[11:13:56.0000] <IZh>
By saying "Hi" I am checking, whether someone is here now. :-) I prefer to wait instead of posting to black hole and grepping logs for answers. ;-)

[11:14:57.0000] <IZh>
For example, I can't reach Ben Schwarz for a month. I'm saying "Hi" in private. ;-)

[11:15:27.0000] <IZh>
Hixie: What is the difference between 2 examples of iframe's seamless attribute?

[11:15:52.0000] <Hixie>
you're better off just asking the question and seeing if anyone answers, imho :-)

[11:16:02.0000] <IZh>
Hixie: They are looks same to me.

[11:16:09.0000] <Hixie>
i'm not the only one who can answer technical questions here. indeed i'm not even the most competent at doing so. :-)

[11:16:15.0000] <jgraham>
IZh: Of course if you keep doing that then eventually people will /ignore you and you will find it very hard to talk to anyone ;)

[11:16:16.0000] <Hixie>
which examples?

[11:16:49.0000] <jgraham>
s/that/pinging people without asking questions/

[11:17:02.0000] <IZh>
I need an answer about TOC od web-developers edition of the document. As I understand only Ben can answer.

[11:17:45.0000] <IZh>
Hixie: <nav><iframe seamless src="nav.include.html"></iframe></nav>

[11:17:55.0000] <IZh>
Hixie: and the previous one.

[11:18:30.0000] <IZh>
Hixie: I mean, the shorter example do not adding any new information to the longer one.

[11:18:43.0000] <Hixie>
yeah, for the dev spec one you'll need ben. Maybe try asking him on twitter? He hangs out there more than here IIRC.

[11:18:48.0000] <Hixie>
looking...

[11:19:47.0000] <Hixie>
hm yeah those do seem a bit redundant

[11:21:00.0000] <IZh>
Yes.

[11:26:33.0000] <annevk>
jgraham: ta

[11:26:54.0000] <annevk>
IZh: Ben said you should email him

[11:27:33.0000] <IZh>
By the way, I have been for years on IRC channels where everyone said Hi/Bye, and that was ok. It was impolite if you are not saying high when you entered the room. ;-) That was in 1996-2000.

[11:27:52.0000] <IZh>
annevk: Thank you.

[11:27:54.0000] <annevk>
IZh: customs change ;-)

[11:27:56.0000] <Hixie>
IZh: don't worry about the cranky people here :-P

[11:28:17.0000] <annevk>
haha

[11:30:41.0000] <tantek>
Hixie++

[11:33:03.0000] <Hixie>
IZh: fixed the examples for you

[11:36:32.0000] <IZh>
Hixie: Thanks.

[11:37:40.0000] <Ms2ger>
Hixie, http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#dom-document-0 confuses me, want to elaborate? :)

[11:37:59.0000] <Hixie>
which part, the "newest" part?

[11:38:26.0000] <Ms2ger>
Yeah

[11:38:43.0000] <Hixie>
http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html#initialise-the-document-object

[11:38:46.0000] <Hixie>
first step

[11:39:44.0000] <Hixie>
hm, seems i broke my "affected topics" detector

[11:39:49.0000] <Hixie>
will have to look into that after lunch

[11:40:19.0000] <IZh>
Hixie: The paragraph " When used in HTML documents, the allowed content model" near the end of iframe's section seems to me not human readable. :-) I read it 5 times before understand.

[11:40:43.0000] <Hixie>
please file a bug - i gotta go to a meeting

[11:40:48.0000] <Hixie>
(you can use the widget in the bottom left to file a bug)

[11:41:02.0000] <Ms2ger>
Hixie, "and change the document attribute of the Window object..." sounds like the COMEFROM style bz always complains about :)

[11:41:34.0000] <Hixie>
you can file a bug too :-P

[11:41:37.0000] <Hixie>
and now i'm gone :-P

[11:41:38.0000] <IZh>
Hixie: it's not a bug. It's just a very long sentence.

[11:44:30.0000] <Ms2ger>
Hixie, oh, the "open bug" link is nice

[11:49:46.0000] <Domenic>
IZh: http://nohello.com/

[11:51:41.0000] <TabAtkins>
/me is planning something in Bikeshed to help reduce COMEFROM effects.

[11:52:41.0000] <IZh>
I have never heard any complains from people I said Hello to...

[11:52:49.0000] <TabAtkins>
IZh: Except me.

[11:53:20.0000] <TabAtkins>
Read that link. This is an async medium. It's really very annoying if I'm in a room and have to deal with a ping and then wait for someone to actually ask their question.

[11:53:31.0000] <caitp>
IZh I think most people are able to context switch and can take Hello as just a greeting, but maybe not everyone

[11:53:34.0000] <TabAtkins>
And it's even worse when I'm not in the room because of differing timezones, and have to deal with multiple content-free pings.

[11:55:02.0000] <IZh>
TabAtkins: My greetings are typically personalized. I don't expect answers from someone else when I talk personally.

[11:55:27.0000] <TabAtkins>
This doesn't seem to have been true for your pings of Hixie and others in this room over the past weeks.

[11:55:50.0000] <TabAtkins>
And it's also frustrating when you repeatedly look for one person to ask a question to, when you have no idea if someone else can answer your question as well or better.

[11:56:03.0000] <TabAtkins>
Just email people if you really, *really* want to talk to a single person.

[11:56:56.0000] <IZh>
When I pinged Hixie, I know for sure that only he can answer. The same story with Ben.

[11:57:49.0000] <TabAtkins>
Except that you're wrong, because you just asked Hixie, and he said he didn't know the answer.

[11:58:05.0000] <IZh>
Sorry for annoying.

[11:58:18.0000] <TabAtkins>
It would seem to be an extraordinarily rare circumstance for someone to know they have no idea what the answer to a question is, but be certain of exactly who can answer it.

[11:58:49.0000] <TabAtkins>
I'm just going to /ignore you if you keep it up, no skin off my back.

[12:04:25.0000] <IZh>
TabAtkins: I'll try to be less annoying. But I want to note, that I don't need any help. I want to help and to contribute. So I will loose nothing in any case.

[12:05:03.0000] <TabAtkins>
Feel free to help and contribute, that's great.  Just do it by pinging people *with a message*, so you can get your answer in one day rather than multiple attempts over a week or longer. ^_^

[12:05:33.0000] <tantek>
Domenic - wow someone made a one page website of that. Ok, I've added it as sub-variant of "Don't presence query". tantek.com/w/CommunicationProtocols#Dontpresencequery

[12:24:16.0000] <IZh>
First rule of the WHATWG club: Never say "Hi" to TabAtkins. ;-)

[12:31:55.0000] <caitp>
you've just pinged him again, dangnabbit

[12:32:02.0000] <caitp>
or her, idk

[12:34:06.0000] <odinho>
Tab is a he :)

[12:41:12.0000] <caitp>
it's not good to make assumptions, always cover your bases with or clauses

[12:47:35.0000] <zewt>
i assumed annevk was a guy (though I did check before committing to a pronoun)

[12:47:36.0000] <odinho>
True, you never know what people are on the internet.  Like Ms2ger. :]  But I've met Tab.

[12:47:52.0000] <zewt>
(call it statistics)

[12:48:00.0000] <odinho>
zewt: I thought he was a girl before he came into my office and was a guy. :P

[12:48:24.0000] <SamB>
I either saw a picture or the pronouns on his blog

[12:48:31.0000] <SamB>
or possibly on IRC

[12:49:12.0000] <SamB>
er, wait, probably not actual pronouns

[12:49:15.0000] <odinho>
Not that it changed anything. Gender is a bit unimportant, but we (I) seem to devote brain cells to it anyway. :P

[12:50:32.0000] <caitp>
it's unimportant until you hurt peoples feelings and then you feel terrible =(

[12:51:50.0000] <zewt>
it matters as far as our common language being one dependent on gender-specific pronouns :P

[12:51:56.0000] <odinho>
Yeah.

[12:55:50.0000] <zewt>
suppose I should really say sex-specific pronouns, since gender means something different when talking about language

[12:57:39.0000] <coolbot95>
Can somebody summarize the current state of non-Flash-based audio support in modern browsers? As well as the actual standard?

[12:58:04.0000] <coolbot95>
Do we yet have multi-voice (basically unlimited samples played at once) and panning?

[12:58:07.0000] <coolbot95>
And volume.

[12:58:19.0000] <coolbot95>
Those three features are the absolute minimum IMO.

[12:58:51.0000] <coolbot95>
I'd love being able to modify samples as they play, for example to make it feel like you are underwater.

[12:58:52.0000] <coolbot95>
Or in a church.

[12:58:53.0000] <caitp>
i don't think you ever get unlimited high quality mix channels

[12:59:03.0000] <coolbot95>
Unlimited or "high enough".

[12:59:19.0000] <coolbot95>
Last time I checked, it was only 1 voice, which is retarded at a 1940s level.

[12:59:41.0000] <coolbot95>
Flash can apparently play "basically unlimited" samples.

[12:59:46.0000] <caitp>
have you seen http://hya.io/#/ /

[12:59:54.0000] <caitp>
been a while since I looked at it, but I recall it worked pretty well

[13:00:16.0000] <coolbot95>
Huh?

[13:00:19.0000] <coolbot95>
Did you even read what I asked?

[13:00:22.0000] <caitp>
I did

[13:00:32.0000] <coolbot95>
I'm not looking for advice on a library. I'm wondering about the state of the standard and the implementations.

[13:00:41.0000] <coolbot95>
I already use a different library, which uses a Flash hack.

[13:00:41.0000] <caitp>
er, it's not advice or a library

[13:00:48.0000] <caitp>
it's an example application which mixes multiple audio channels

[13:00:53.0000] <caitp>
and it sounds pretty good

[13:01:18.0000] <coolbot95>
Hmm...

[13:01:28.0000] <coolbot95>
Well, it's no good if it runs for me but not others.

[13:01:34.0000] <coolbot95>
IE users must have it too.

[13:01:53.0000] <odinho>
coolbot95: No, that's not how standards work.

[13:01:59.0000] <caitp>
i hear internet explorer is real popular in the musician and sound design community

[13:02:31.0000] <coolbot95>
caitp: I'm not sure if that's supposed to be a joke.

[13:02:37.0000] <caitp>
it is

[13:02:38.0000] <odinho>
coolbot95: That's how web dev works. You think you can't shut out IE. But that's how it is with standards, they can't be implemented right after they're made.

[13:02:56.0000] <coolbot95>
caitp: What makes you think game players are "musicians" or "sound designers"?

[13:03:18.0000] <caitp>
well i'm sure there's some overlap on the venn diagram

[13:04:16.0000] <caitp>
anyways the point is that web audio has been used and is being used, and it's not perfect, but it sounds ok

[13:04:30.0000] <caitp>
you can do cool stuff with it

[13:08:52.0000] <coolbot95>
If it doesn't have panning, volume and multi-voice, it's useless for games.

[13:10:26.0000] <caitp>
with web audio you're basically setting up a mixer. the mixer isn't without limits, but you can do a lot with it

[13:10:49.0000] <caitp>
although I think there are some bugs in blink's implementation which could cause problems for long-lived applications right now

[13:21:44.0000] <coolbot95>
I have no idea what you mean.

[13:21:47.0000] <coolbot95>
I just know what I've seen.

[13:21:51.0000] <coolbot95>
Or heard.

[13:22:08.0000] <caitp>
okay, lets make another example

[13:22:34.0000] <caitp>
so a long time ago, a few companies used to make video game consoles

[13:23:05.0000] <caitp>
one of them was Sega, and in the late 80s, they produced one which controlled sound using an 8bit microcontroller hooked up to a very cheap sound chip

[13:23:32.0000] <caitp>
this imposed some restrictions on what sort of sounds could be made, it was essentially a cheap DX7

[13:24:31.0000] <caitp>
with 6 FM channels, you'd have either one carrier and one modulator, or one carrier and 2 modulators, and you could have 2 or 3 of those combinations pretty much

[13:24:55.0000] <caitp>
this imposed a limit on the number of voices you could make, and a limit on the timbre of those voices. and yet, people still did awesome stuff with them

[13:25:18.0000] <caitp>
even with a very limited mixer, you can still make marketable, quality stuff

[13:49:10.0000] <TabAtkins>
zewt: Nope, gender-specific is the right word for it.  "sex" and "gender" are distinct concepts.

[13:59:53.0000] <zewt>
saying "gender" next to "pronoun" implies the linguistic meaning of the word "gender", which it's not

[14:00:03.0000] <zewt>
heh, unstable sort detected in chrome

[14:00:39.0000] <zewt>
i have the network inspector open, and a few requests are bouncing around randomly, seems like the request timestamp is the same and they're not sorting for display in a consistent way

[14:01:54.0000] <SamB>
... isn't it worrisome that they have the same timestamp?

[14:02:08.0000] <zewt>
not sure, probably depends on the resolution

[14:02:32.0000] <zewt>
it could easily get two URLs to fetch in the same millisecond, if they come in the same chunk of parsing the HTML

[14:02:52.0000] <SamB>
oh sure, but why would it have such a low resolution?

[14:03:14.0000] <zewt>
no idea how it works, but that's what you'd get if you were using Date

[14:03:22.0000] <SamB>
seriously?

[14:03:45.0000] <zewt>
Date.now() gives integer milliseconds

[14:03:52.0000] <SamB>
Date does only down to a whopping millisecond?

[14:06:53.0000] <zewt>
i'd be more surprised at using an unstable sort; every sort I've seen in years has been stable, you'd have to go hunting for one that isn't (or roll it yourself, but who does that)

[14:08:01.0000] <Ms2ger>
Quick?

[14:09:12.0000] <SamB>
zewt: hmm, sort(1) has a flag for wanting stability

[14:09:24.0000] <SamB>
implying that the default might be unstable

[14:10:18.0000] <zewt>
python, javascript, c++ sorts are all stable, i don't think i've ever come across a case where having a stable sort isn't better than not

[14:10:51.0000] <SamB>
huh, looks like GNU sort is intentionally antistable

[14:10:57.0000] <zewt>
when given the choice between "predictable behavior" and "unpredictable behavior"...

[14:10:59.0000] <SamB>
unless you ask for it to be stable

[14:11:13.0000] <SamB>
or, wait

[14:11:28.0000] <zewt>
never really noticed with /usr/bin/sort, since i rarely use it for multi-level sorts

[14:11:35.0000] <SamB>
"no ordering options other than --reverse" probably just means "ignore everything but reverse", doesn't it

[14:11:45.0000] <SamB>
s/ reverse/ --reverse/

[14:12:52.0000] <Hixie>
blimey

[14:13:04.0000] <zewt>
crikey

[14:13:43.0000] <Ms2ger>
/me waves

[14:13:55.0000] <zewt>
hi

[14:14:12.0000] <tantek>
/me waves bye!

[14:30:16.0000] <coolbot95>
This chair rattles...

[14:30:21.0000] <coolbot95>
I hate rattly shitty chairs.

[14:31:37.0000] <TabAtkins>
zewt: Regardless, that's just a matter of a correct term being ambiguous in a particular situation.  "Sex-specific pronouns" is still just incorrect.

[14:32:07.0000] <TabAtkins>
Also, I've never seen a gendered pronoun, in the sense of a gendered noun.

[14:32:29.0000] <TabAtkins>
"gendered pronoun" always means "referring to a specific gender of person", afaict.

[14:42:31.0000] <caitp>
i think it depends who you ask, since people come up with all kinds of different ways to refer to tom neuwirth and his stage personality! but it's getting a bit tumblr in here, time to move onto other endeavors

[14:45:50.0000] <Hixie>
so... how do i find out if mozilla has implementor interest in a feature?

[14:46:03.0000] <Hixie>
tantek, Ms2ger, sicking, annevk: ping ^

[14:46:12.0000] <Hixie>
for example https://www.w3.org/Bugs/Public/show_bug.cgi?id=25663

[14:46:54.0000] <Ms2ger>
Ask

[14:47:16.0000] <Ms2ger>
Since mounir is gone...

[14:47:42.0000] <Hixie>
ask whom?

[14:48:14.0000] <Ms2ger>
#content

[14:48:24.0000] <Hixie>
i have like a hundred of these...

[14:48:38.0000] <Ms2ger>
Oh dear

[14:48:54.0000] <Hixie>
https://www.w3.org/Bugs/Public/buglist.cgi?list_id=36950&query_format=advanced&resolution=---&target_milestone=Needs%20Impl%20Interest

[14:49:09.0000] <caitp>
one of the other vendors could send an intent to ship on a mailing list or bug?

[14:49:16.0000] <Ms2ger>
Ugh

[14:49:19.0000] <Ms2ger>
bz :)

[14:49:56.0000] <Hixie>
i try cc'ing the people that https://wiki.mozilla.org/Modules/Core says i should ping, but i don't often get a response that way

[14:50:33.0000] <Ms2ger>
Yeah, people are busy :)

[14:53:03.0000] <Hixie>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=25699 (appcache related) would be particularly useful to get feedback on asap

[14:53:22.0000] <Ms2ger>
I don't know who does appcache

[14:53:25.0000] <Ms2ger>
Maybe smaug____ does

[14:54:48.0000] <sicking>
Hixie: sadly i don't know that we have anyone really owning form controls any more

[14:55:10.0000] <tantek>
Hixie, I'd ping sicking re: anything appcache / offline / storage related (they're quite interconnected) - and there he is

[14:55:18.0000] <sicking>
Hixie: jwatt and bz might be good people to ask

[14:55:57.0000] <sicking>
Hixie: regarding anything appcache, my answer is basically "we're unlikely to invest in appcache at all at this point"

[14:56:15.0000] <tantek>
Hixie, your general meta approach of querying a handful of mozilla folks about who to ping is a reasonably useful late-binding approach to figuring out who to ping about what in particular

[14:56:29.0000] <sicking>
we're hoping to deprecate it fairly agressively once SW ships. I don't have an ETA on that though

[14:56:51.0000] <Hixie>
yeah. this particular bug is about mitigating a potential security issue.

[14:56:57.0000] <Hixie>
tantek: k

[14:57:34.0000] <sicking>
Hixie: yeah. That might be the only exception. I skimmed the bug but it wasn't clear to me that it was serious enough. My gut instinct is that it isn't

[14:58:35.0000] <sicking>
Hixie: I could check with out security team. That's probably the right thing to do

[15:04:25.0000] <smaug____>
Ms2ger: appcache? not me

[15:04:55.0000] <Ms2ger>
smaug____, yeah, we found sicking :)

[15:21:31.0000] <zewt>
that frustration of finding a tool that seems to work well, until you use it for a couple days to find lots of rough edges and people complaining about them in trackers


2014-05-16
[17:37:43.0000] <zewt>
attempts at isolating firefox 29 chewing cpu constantly: fruitless

[17:38:03.0000] <zewt>
seems like it's just a small, constant amount of cpu per tab (and I have lots of tabs), since no matter how I close blocks of tabs, cpu usage drops linearly

[17:42:18.0000] <SamB>
zewt: does it not have a profiler?

[17:44:57.0000] <zewt>
i don't know, i can't find any equivalent of chrome's task manager (which is a lot easier to implement in a process-model browser, of course)

[17:45:39.0000] <zewt>
but stress level tangibly increased by having my cpu fan spinning nonstop

[17:49:58.0000] <SamB>
zewt: huh, I thought it had one of those now

[17:50:31.0000] <zewt>
if it does I haven't tripped over it yet

[17:50:40.0000] <zewt>
there's a profiler, but it looks like a regular per-page profiler

[18:00:39.0000] <kbrosnan>
it has a profiler

[18:00:53.0000] <kbrosnan>
https://developer.mozilla.org/en-US/docs/Performance/Profiling_with_the_Built-in_Profiler

[18:02:15.0000] <SamB>
zewt: yeah, you'll want to profile the chrome

[18:02:33.0000] <SamB>
you might need to do that special out-of-process thing

[18:03:06.0000] <SamB>
"sorry mario, your devtools are in another process!"

[18:03:55.0000] <SamB>
boogyman: your cloak isn't too effective if you join channels before it kicks in ...

[18:05:09.0000] <boogyman>
SamB: the cloak is "there" because i donated.

[18:05:18.0000] <zewt>
a lot of networks just mask everyone's hostname

[18:09:19.0000] <zewt>
(you have to donate for privacy?)

[18:10:46.0000] <zewt>
well, as soon as i turned the profiler on, the problem went away

[18:10:51.0000] <zewt>
some things never change

[18:11:24.0000] <SamB>
maybe they shouldn't have made it possible to turn it off ;-P

[04:18:59.0000] <annevk>
JakeA: did you follow the discussion I had with Domenic about ResponsePromise -> Promise?

[04:19:33.0000] <annevk>
JakeA: jungkees: I think he made a reasonable point that we should just have fetch() return a Promise for a Response, no subclassing warranted

[04:20:44.0000] <JakeA>
/me reads

[04:23:50.0000] <jungkees>
annevk: can you share some pointer to the discussion?

[04:26:05.0000] <JakeA>
jungkees: http://krijnhoetmer.nl/irc-logs/whatwg/20140515#l-420

[04:28:09.0000] <JakeA>
annevk: ResponsePromise isn't doing anything special right now. It has toBlob on it, which is handy but not so handy that I want to get into the promise subclassing mess :D

[04:28:37.0000] <JakeA>
annevk: If we use a Promise initially, how much breakage would happen if we switched to a subclass later?

[04:29:14.0000] <JakeA>
annevk: Not just thinking of ResponsePromise, but also the cache methods that return a promise for an array - the possibility of making them something both promise-like and async iterable later

[04:37:31.0000] <annevk>
"[charter] Joint work with TAG on their Packaging on the Web spec?; deadline May 21" worst thread in a while

[04:38:16.0000] <annevk>
JakeA: returning a subclass later is thought of as being reasonably safe

[04:38:17.0000] <jgraham>
You sound like comic store guy's more reasonable cousin

[04:38:36.0000] <annevk>
JakeA: we're considering it for query/queryAll for instance (return Array for now, Elements later)

[04:39:57.0000] <JakeA>
/me shakes hands with annevk & Domenic in a weird 3-way handshake

[04:40:12.0000] <JakeA>
annevk: consider ResponsePromise dropped

[04:41:00.0000] <annevk>
cool

[04:43:22.0000] <JakeA>
annevk: We renamed purpose to context right? Are you still interested in having that on Request objects?

[04:43:30.0000] <JakeA>
(rather than event objects where it is now)

[04:44:49.0000] <annevk>
JakeA: I think grouping it all on Request is fine

[04:45:24.0000] <annevk>
JakeA: We could either have a more pure "HTTP-like Request" class and a bunch of parameters, or we could just group them all together as we've done so far

[04:46:20.0000] <annevk>
JakeA: the pure style is somewhat attractive I have to say, but basically more involved

[04:46:36.0000] <JakeA>
annevk: It's called "context" now right?

[04:46:41.0000] <annevk>
JakeA: yes

[04:46:54.0000] <annevk>
http://fetch.spec.whatwg.org/#concept-request-context

[04:47:43.0000] <annevk>
JakeA: we could also call it "API" I suppose

[04:47:57.0000] <annevk>
JakeA: but that's not a great property name

[04:54:14.0000] <JakeA>
annevk: https://github.com/slightlyoff/ServiceWorker/issues/279

[05:01:14.0000] <nedt>
hello!

[05:01:43.0000] <nedt>
I’m looking for a suitable meta tag name for monitoring purpose but can’t anything, but the pingdom

[05:02:05.0000] <nedt>
is there any hash, uid, monitoring meta name I’ve missed?

[05:18:59.0000] <espadrine>
how is inline SVG (in HTML code) supposed to react when using innerHTML?

[05:19:16.0000] <espadrine>
Firefox parses it using the HTML parser, Chrome using the SVG parser…

[05:19:24.0000] <pdr>
espadrine, are you sure?

[05:19:30.0000] <espadrine>
pdr: https://thefiletree.com/espadrine/bugs/svg-innerHTML/index.html?plug=none

[05:19:59.0000] <espadrine>
it breaks because the HTML pass doesn't recognize it as valid

[05:20:05.0000] <espadrine>
at least, I think

[05:20:33.0000] <espadrine>
also, things like inserting <rect /><rect /> yields <rect><rect></rect></rect>

[05:21:41.0000] <espadrine>
according to the dev tools

[05:21:42.0000] <pdr>
espadrine, chrome is parsing that with the html parser in the same way as the inline svg case. I'm not sure what's up with firefox though.

[05:23:04.0000] <espadrine>
pdr: so, chrome does things right, and firefox is the one with the bug?

[05:23:08.0000] <espadrine>
I'll file it.

[05:23:34.0000] <pdr>
espadrine, try to dig into what firefox is doing first. But I do think chrome is correct in this case

[05:28:50.0000] <davve>
espadrine: firefox has a known bug; puts elements in the wrong namespace, IIRC.

[05:29:50.0000] <davve>
https://bugzilla.mozilla.org/show_bug.cgi?id=886390

[05:29:52.0000] <espadrine>
davve: good to know; I'm asking on #developers at mozilla

[05:45:00.0000] <jgraham>
espadrine: Talk to hsivonen

[05:50:37.0000] <zcorpan>
espadrine: i guess what firefox does matches an older revision of the spec

[05:52:57.0000] <espadrine>
zcorpan: yep. The updated spec is more intuitive.

[06:03:32.0000] <nedt>
ok then, anyone here who can help me getting a wiki account?

[06:05:44.0000] <JakeA>
nedt: I don't own any wikis, but you probably need to state which wiki you want an account on & what permissions you're wanting

[06:05:52.0000] <JakeA>
(& why)

[06:05:57.0000] <nedt>
http://wiki.whatwg.org/

[06:06:07.0000] <nedt>
because of the meta tag I asked about an hour ago

[06:06:34.0000] <jgraham>
nedt: I think annevk can help

[06:06:44.0000] <jgraham>
Certainly Hixie can later

[06:08:24.0000] <nedt>
I would be even more happy if there is an existing meta extension that gives a simple hash for monitoring etc. without being specific to a service. But couldn’t find one

[06:12:28.0000] <JakeA>
What's the hash used for?

[06:13:57.0000] <nedt>
mostly for monitoring. i.e. verifing a site is up and everything needed to output the page (cms, db, …) is working.

[06:14:34.0000] <nedt>
there is the pingdom metaextension of the google-site-verification, but using them for an other service feels like misusing

[06:14:35.0000] <annevk>
nedt: pm with a username/password

[06:14:48.0000] <annevk>
nedt: not password, email address

[06:15:08.0000] <annevk>
/me always forgets

[06:20:32.0000] <annevk>
jgraham: I think you should be able to create accounts too

[06:21:09.0000] <jgraham>
Oh really?

[06:31:43.0000] <annevk>
jgraham: http://wiki.whatwg.org/index.php?title=Special:UserLogin&type=signup

[06:32:53.0000] <jgraham>
annevk: Interesting

[06:33:24.0000] <annevk>
most longtime users of the wiki can do it

[07:24:13.0000] <annevk>
TabAtkins: SimonSapin: querySelector/querySelectorAll can pass unpaired surrogates into the "CSS" parser; problem?

[07:25:41.0000] <TabAtkins>
Nope, not a problem. As part of parsing, the input stream gets cleaned up, which'll eliminate unpaired surrogates.

[07:26:12.0000] <SimonSapin>
annevk: CSSOM (both per spec and in impls) too. Currently they go through unchanged. I don’t like it, but I don’t know if we can change it

[07:26:50.0000] <SimonSapin>
TabAtkins: I don,t belive we hav ethat particular cleanup

[07:27:25.0000] <SimonSapin>
(sorry for the mangling, SSH is not very responsive over mobile in a moving train)

[07:27:42.0000] <TabAtkins>
Oh, you're right, we only kill nulls.

[07:27:49.0000] <TabAtkins>
Hm, I bet we could fix that.

[07:28:04.0000] <TabAtkins>
Keep things consistent between input and escapes.

[07:28:59.0000] <TabAtkins>
SimonSapin: Why would you think we couldn't change it?  Where do you think unpaired surrogates might be used?  Only possible useful spot would be in Selectors, and I doubt there are many pages with purposefully unpaired surrogates in class/etc.

[07:30:57.0000] <annevk>
hmm, come to think of it, if you change that, run it by bz

[07:31:13.0000] <annevk>
I could see people assigning random strings to id/class and expect that to work

[07:34:11.0000] <SimonSapin>
TabAtkins: not that it’s useful, but who know what crazy things people are doing in JS

[07:34:22.0000] <SimonSapin>
it’s just selectors, it’s all of CSSOM

[07:34:32.0000] <SimonSapin>
it’s not just selectors, it’s all of CSSOM

[07:35:14.0000] <TabAtkins>
annevk: If we change it at the preprocessing level, it'll still work (you'll be setting a different string, but also querying the same, different, string).

[07:35:25.0000] <SimonSapin>
but maybe we can get away with it. I’d be happy to

[07:35:32.0000] <TabAtkins>
SimonSapin: None of CSSOM is happy with unpaired surrogates except selectors and a few custom idents.

[07:36:14.0000] <TabAtkins>
Which means that either you're explicitly putting unpaired surrogates in your markup (crazy?!?) or you're setting them in JS (and they'll get cleaned up in the same way, so they continue to match).

[07:36:39.0000] <SimonSapin>
TabAtkins: could you bring it up at the f2f? I’ll try to join by phone in your afternoons

[07:36:41.0000] <TabAtkins>
annevk: Oh wait, nm, they wouldn't get cleaned up if you set class/id.

[07:37:00.0000] <TabAtkins>
SimonSapin: Add it to the wiki?

[07:37:37.0000] <annevk>
TabAtkins: you can't do it through markup, has to be JS

[07:37:55.0000] <annevk>
TabAtkins: no text encoding allows for unpaired surrogates

[07:37:57.0000] <TabAtkins>
annevk: Ah, good.

[07:38:26.0000] <SimonSapin>
yeah, anything from Encoding is clean

[07:38:27.0000] <TabAtkins>
Then maybe we can make a coordinated change between DOM and CSS, get unpaired surrogates cleaned up everywhere at once?

[07:38:32.0000] <SimonSapin>
it’s only JS strings

[07:41:02.0000] <SimonSapin>
anything you can write/append to in chuncks, there is a risk that each half of a surrogate pair be in a different chunck, but is still ends up paired correctly

[07:41:24.0000] <annevk>
TabAtkins: for DOM in general that's a no :(

[07:42:14.0000] <TabAtkins>
annevk: What do you think about just cleaning up id/class and maybe attrs?

[07:42:48.0000] <annevk>
TabAtkins: I wonder if anyone is willing to take a perf hit on that and whether it's actually worth it

[07:43:17.0000] <annevk>
TabAtkins: kinda depends too on what you see as the bottom layer, if it's JS, getting rid of the unpaired surrogates is kinda pointless

[09:39:24.0000] <Domenic>
annevk (or anyone): what decides whether an API wants ScalarValueString? It seems to be something to do with URLs?

[09:42:29.0000] <Hixie>
never heard of it

[09:43:36.0000] <jgraham>
Sounds like something annevk made up

[09:43:56.0000] <jgraham>
Since he's the only person that uses "Scalar Value" to mean something related to unicode

[09:44:55.0000] <Hixie>
i use "scalar value" in the parts of the spec that interface with Unicode...

[09:49:15.0000] <jgraham>
Hixie: No, you use "Unicode scalar value" and define a synonym

[09:49:23.0000] <Hixie>
that's what i mean

[09:49:42.0000] <jgraham>
Your only use of "scalar value" is in the normal meaning

[09:49:42.0000] <Hixie>
i basically do "import scalar value as..." :-)

[09:49:53.0000] <Hixie>
oh anne uses it for a non-unicode meaning?

[09:50:20.0000] <jgraham>
No, annevk uses "scalar value" for "unicode scalar value"

[09:51:12.0000] <Hixie>
so his use is the normal meaning too

[09:51:18.0000] <jgraham>
by "normal meaning" I mean "unrelated to unicode"

[09:51:55.0000] <Hixie>
you just quoted the part of the spec where i use it in the unicode sense :-)

[09:51:57.0000] <jgraham>
The only use of "scalar value" in HTML is "The meter element also does not represent a scalar value of arbitrary range"

[09:51:57.0000] <Hixie>
i'm confused

[09:52:12.0000] <Hixie>
plus the two uses i just mentioned, where i'm interfacing with the unicode spec

[09:52:23.0000] <jgraham>
No, that's *unicode* scalar value

[09:52:57.0000] <Hixie>
"unicode scalar value" contains "scalar value"...

[09:53:04.0000] <Hixie>
this conversation is making my head hurt

[09:55:13.0000] <jgraham>
I don't see why it's confusing

[09:55:29.0000] <Hixie>
well part of it is i've not yet woken up :-)

[09:55:39.0000] <jgraham>
There are two distinct terms; "scalar value" and "unicode scalar value"

[09:56:07.0000] <Hixie>
to me, "unicode scalar value" contains the term "scalar value", and both contain the term "scalar".

[10:06:34.0000] <dglazkov>
good morning, Whatwg!

[10:17:59.0000] <SamB>
jgraham: those might seem distinct at the markup level, but in English it is just as Hixie says

[10:19:47.0000] <jgraham>
It really isn't

[10:19:56.0000] <SamB>
though reading the scrollback it does seem like if you mean a special unicode concept, you should either use the word Unicode or state up front that you're going to be omitting it from the term for brevity

[10:20:07.0000] <jgraham>
They are different compound nouns

[10:39:06.0000] <Domenic>
ScalarValueString is the new name for [EnsureUTF16] DOMString apparently

[10:56:47.0000] <IZh>
Hixie: Hi. There is a bug in acknowledgements section.

[10:57:18.0000] <IZh>
... Alexey Feldgendler, &Acy;&lcy;&iecy;&kcy;&scy;&iecy;&jcy; &Pcy;&rcy;&ocy;&scy;&kcy;&ucy;&rcy;&yacy;&kcy;&ocy;&vcy; (Alexey Proskuryakov), Alexis Deveria,...

[10:58:22.0000] <ap>
IZh: ?

[10:59:07.0000] <IZh>
ap: Why there are entities instead of characters?

[11:00:05.0000] <ap>
IZh: oh. that I don't know or care about - it looks correct in a browser :)

[11:00:34.0000] <IZh>
http://www.whatwg.org/specs/web-apps/current-work/multipage/acknowledgments.html#acknowledgments

[11:01:25.0000] <IZh>
ap: Hmm... Perhaps mobile browser is buggy... Wait.

[11:02:02.0000] <IZh>
No. The same bug.

[11:03:23.0000] <IZh>
The problem is bacause the ampersand was escaped as &amp;. Double escaping problem.

[11:04:36.0000] <ap>
IZh: I see now. It's correct on http://www.whatwg.org/specs/web-apps/current-work/, but yes, double escaping in acknowledgments.html

[11:05:02.0000] <IZh>
Yes.

[11:05:10.0000] <ap>
much appreciated (hopefully Hixie will see and fix this) :)

[11:07:01.0000] <IZh>
I have filed a bug.

[12:43:20.0000] <Hixie>
IZh, ap: yeah, known bug with the multipage splitter. I'm slowly working on revamping my pipeline which will fix this.

[12:48:46.0000] <IZh>
 Hixie: the page splitter double escapes?

[12:49:07.0000] <Hixie>
the page splitter has some parsing/serialising bugs

[12:49:38.0000] <Hixie>
right now the pipeline isn't using a modern HTML parser throughout, which has all kinds of weird bugs

[13:03:23.0000] <Hixie>
if i have a suggestion for a test for the html test suite, where do i put it?

[13:03:25.0000] <Hixie>
http://software.hixie.ch/utilities/js/live-dom-viewer/saved/3026

[13:03:43.0000] <jgraham>
Hixie: A suggestion for a test rather than a test?

[13:03:53.0000] <Hixie>
well i haven't made it use the complicated harness stuff

[13:04:01.0000] <zcorpan>
Hixie: https://github.com/w3c/web-platform-tests/issues

[13:04:07.0000] <Hixie>
thanks

[13:04:19.0000] <zcorpan>
Hixie: feel free to assign to me

[13:05:06.0000] <jgraham>
Well the way it's written it would have to be a reftest, but I guess you could fix that

[13:05:20.0000] <Hixie>
no idea how to assign the bug

[13:05:22.0000] <Hixie>
https://github.com/w3c/web-platform-tests/issues/993

[13:06:10.0000] <Hixie>
in other news, has there been any movement on providing a "directory" API to go with the File API?

[13:06:13.0000] <jgraham>
You might not be allowed to assign the bug because github is strange

[13:06:19.0000] <jgraham>
Anyway, I did it

[13:06:52.0000] <zcorpan>
github--

[13:29:33.0000] <Domenic>
Hixie: the "new" filesystem API seems to be directory based

[13:30:15.0000] <Domenic>
I am not sure how I feel about that; most native FS APIs I have used are just plain filename based, with e.g. a directory listing API that accepts a path, but no first-class realization of directories

[13:35:46.0000] <Hixie>
Domenic: how much buy-in does it have?

[13:50:42.0000] <Domenic>
Hixie: hard to say, but from what I've seen it has tentative buy-in from Mozilla and Google? Not quite finished yet though so I imagine they're taking wait-and-see positions...

[13:52:12.0000] <Hixie>
Domenic: wait who's speccing it if not a browser vendor?

[13:52:59.0000] <Domenic>
Hixie: looks like Mozilla. I probably shouldn't be trying to summarize something I've only half paid attention to...

[13:53:11.0000] <Hixie>
heh

[14:24:14.0000] <Hixie>
so someone once complained of the spec, "can't find html5 counterpart of many html 4.01 specifications"

[14:24:17.0000] <Hixie>
i wonder what they meant

[14:26:48.0000] <Domenic>
it may be *harder* to find

[14:27:33.0000] <zewt>
pretty meaningless without specifying "many"

[14:33:02.0000] <Hixie>
some other feedback: "information is there but in planty so you end up reading all night when you need just few lines"

[14:33:06.0000] <Hixie>
sounds about right

[14:36:28.0000] <Hixie>
also i love the people who ask for a way to jump back to the top dearly

[14:36:30.0000] <Hixie>
but darlings

[14:36:33.0000] <Hixie>
learn about the "home" key

[14:36:34.0000] <Hixie>
please

[14:37:41.0000] <Hixie>
MikeSmith: you any idea how we could adjust the spec to address things like "should be easier to check questions such as can a p tag contain a div" ?

[14:41:33.0000] <Domenic>
Interesting, yeah, I've found myself asking that question a lot

[14:41:44.0000] <Domenic>
in developers edition you can follow links pretty easily

[14:41:48.0000] <Domenic>
for content models

[14:42:00.0000] <tantek>
nearly all the restrictions about what tags can contain what other tags or not were some of the dumbest things to put into HTML

[14:42:06.0000] <tantek>
did nothing but confuse people

[14:42:28.0000] <tantek>
so the more we can get rid of those, the better

[14:42:43.0000] <tantek>
p is a great example of wrongness

[14:44:33.0000] <Hixie>
i dunno about that

[14:44:49.0000] <Hixie>
the restrictions aren't really restrictions, they're just cases that make no sense and are likely an indication of an error

[14:45:22.0000] <Hixie>
e.g. putting an ordered list in an <h1> is very unlikely to be what the author meant, and so it's helpful if we can flag that

[14:45:45.0000] <Hixie>
Domenic: is it not easy to follow the links on the big version of the spec?

[14:58:11.0000] <annevk>
Domenic: where it needs to be put into something that does not expect unpaired surrogates

[14:58:25.0000] <annevk>
Domenic: URL and Encoding are such layers

[15:19:47.0000] <Hixie>
/me pokes at the style sheet some more

[15:19:55.0000] <Hixie>
tried to add more White Space.

[15:34:30.0000] <benjamingr>
Is there any standard regarding getting the amount of memory JS consumes in a web page? I'm using memory.performance in Chrome and I was wondering if there is anything I should look at in terms of standards

[15:51:30.0000] <Hixie>
benjamingr: what kind of standards?

[15:51:38.0000] <Hixie>
benjamingr: (the answer is probably "no")

[15:51:55.0000] <Hixie>
benjamingr: like, requirements on how much a browser should use for a given page?

[15:57:40.0000] <benjamingr>
Hixie:  as in, be able to get the amount of available memory for the page in the browser, or a vague indication of it

[15:58:01.0000] <zewt>
even the browser probably doesn't know that

[15:58:03.0000] <Hixie>
oh, i see

[15:58:30.0000] <Hixie>
maybe in the web perf wg's set of specs?

[15:58:35.0000] <benjamingr>
In chrome, I can get it via the performance.memory object

[15:58:36.0000] <Hixie>
i don't know of anything offhand

[16:12:48.0000] <Hixie>
whatwg spec editors: if your spec is too big for browsers to do the transitions i just added without making scrolling painful, add class=big to your <html> element.


2014-05-17
[19:50:26.0000] <MikeSmith>
Hixie: about "should be easier to check questions such as can a p tag contain a div" no ideas jump to mind

[19:51:50.0000] <MikeSmith>
but, well, the content model is a hyperlink that says "phrasing content" and if you click on that link you get http://www.whatwg.org/specs/web-apps/current-work/multipage/elements.html#phrasing-content

[19:52:25.0000] <MikeSmith>
which is a complete list of elements that are allowed as phrasing content

[19:52:42.0000] <MikeSmith>
so not sure how much easier you can make it than you already have

[19:53:52.0000] <Hixie>
yeah i dunno either

[19:54:36.0000] <MikeSmith>
Hixie: I guess instead of that hyperlink, the complete list of those elements could be repeated at each place where you have "content model: hyperlink" now. But I don't think most people would think that'd be in improvement.

[19:56:22.0000] <MikeSmith>
or maybe the problem is that whoever reported that instead wants to have the list of elements that are _not_ allowed. Maybe they don't understand that by not being listed, that means they're not allowed.

[19:56:38.0000] <MikeSmith>
But if so I don't think most people have that confusion problem.

[19:57:37.0000] <MikeSmith>
so anyway "p can't contain div" seems pretty clear from what you have now. About as clear as you can practically make it.

[19:57:51.0000] <Hixie>
yeah maybe

[19:58:09.0000] <Hixie>
one thing i'm thinking of doing is having popups appear when you hover over a link, essentially telling you what the link points to

[19:58:14.0000] <Hixie>
no idea how i'm gonna do that exactly

[19:58:17.0000] <Hixie>
but that could solve this

[19:58:46.0000] <MikeSmith>
ah yeah, that would be helpful

[19:59:51.0000] <MikeSmith>
for the content model links, popups with the list of elements for "phrasing content" and "flow content" would be good

[20:00:42.0000] <MikeSmith>
and also for whatever the other classes of content are that are referenced in the content model sections

[20:33:36.0000] <MikeSmith>
/me wonders what transitions Hixie is talking about

[20:43:27.0000] <Hixie>
load the multipage version of the spec

[20:43:30.0000] <Hixie>
or the dom spec

[20:48:33.0000] <Hixie>
MikeSmith: see them?

[21:48:08.0000] <MikeSmith>
Hixie: stepped out for a bit, looking now

[21:49:33.0000] <MikeSmith>
Hixie: page transitions?

[21:49:43.0000] <MikeSmith>
gradients at the end?

[21:56:34.0000] <JonathanNeal>
Anyone in here have experience with createShadowRoot?

[23:16:33.0000] <Hixie>
MikeSmith: move your cursor off the page for a bit

[23:17:30.0000] <MikeSmith>
Hixie: ok, trying now

[23:18:20.0000] <MikeSmith>
Hixie: ah the link thing?

[23:18:32.0000] <Hixie>
not just links, but yeah

[23:18:32.0000] <MikeSmith>
I thought that was a browser bug :)

[23:18:37.0000] <MikeSmith>
yeah

[23:18:46.0000] <MikeSmith>
but now that I know what it is I like it

[23:18:51.0000] <Hixie>
some people seem to want less colour

[23:18:52.0000] <Hixie>
so...

[23:19:03.0000] <MikeSmith>
ah yeah it's very slow transition

[23:19:07.0000] <Hixie>
personally i use the colour to figure out what's going on

[23:19:12.0000] <MikeSmith>
Hixie: bingo

[23:19:41.0000] <JonathanNeal>
These are the 4 “element query” techniques I’ve heard of. Am I missing others? https://gist.github.com/jonathantneal/d4e27ac9a65a426e6870

[23:21:08.0000] <MikeSmith>
Hixie: yeah the color is there for genuine functional purposes. I think the people who don't like are people who don't actually use the spec, or don't need to. And for them it just hurts their purist aesthetic sensibilities about what a good document should look like in general, I guess

[23:21:19.0000] <Hixie>
yeah

[23:21:28.0000] <Hixie>
i also added a lot of whitespace, which i think works ok

[23:22:16.0000] <MikeSmith>
Hixie: yeah I think we can all agree that more whitespace is better

[23:22:23.0000] <Hixie>
within reason

[23:22:55.0000] <MikeSmith>
sure yeah

[23:23:05.0000] <Hixie>
it did add about 50 pages to the pdf version...

[23:25:56.0000] <MikeSmith>
Hixie: well anybody who's nuts enough to try to print out the whole PDF doesn't have anybody to blame but themselves

[23:26:05.0000] <Hixie>
hah

[23:32:55.0000] <MikeSmith>
hmm wchen adding Gecko support for <template> in application/xhtml+xml

[23:33:13.0000] <MikeSmith>
I wonder if other engines are doing that too

[23:34:41.0000] <MikeSmith>
I can't remember what the decision about that was... I vaguely recall it being "we don't need to make <template> work for XML" being what everybody agreed to at one point at least

[23:37:14.0000] <MikeSmith>
Hixie: oh I see you do actually cover it now in the "Parsing XHTML documents" section

[23:39:50.0000] <MikeSmith>
Hixie: action item: XML Core WG to add <template>-parsing steps to the errata for the stable TR draft of XML 1.0 Fifth Edition

[23:41:00.0000] <Hixie>
/me glares at MikeSmith 

[00:41:57.0000] <MikeSmith>
/me stumbles across https://developer.mozilla.org/en-US/docs/Web/API/Navigator.requestWakeLock

[02:17:37.0000] <IZh>
Hi. It seems that something is changed in CSS file http://www.whatwg.org/style/specification. The prince PDF generator complains: warning: failed to parse all CSS rules.

[02:28:47.0000] <IZh>
Currently PDF document generation is aborted at any error or warning. I prefer to generate clean documents. ;-) But I can ignore this warning.

[02:30:02.0000] <IZh>
By the way, what CSS validator you are using? I tried http://www.css-validator.org/, and it complains with lots of warnings and errors.

[02:40:42.0000] <MikeSmith>
IZh: the CSS validator has some known issues. there are some CSS3 things it doesn't recognize. e.g., content leader

[02:41:51.0000] <IZh>
MikeSmith: Is there any other validators that can parse CSS3 correctly?

[02:44:08.0000] <MikeSmith>
IZh: maybe, but none that I know of. Myself I don't usually bother to validate my CSS unless I'm forced to

[03:01:41.0000] <IZh>
Hixie: In css rules for h1, h2, h3, h4, h5, h6 on line 44 "optimiseLegibility" -> "optimizeLegibility".

[03:03:44.0000] <IZh>
Also the block "DELETE ME" at the end is incorrectly commented because of nested comments that will produce parse errors.

[06:30:12.0000] <MikeSmith>
IZh: probably best to file bugs for those

[06:37:41.0000] <IZh>
MikeSmith: I've sent a letter to Hixie. By the way, I have bought one commercial validator, so soon there will be more bug reports. ;-)

[07:06:37.0000] <JonathanNeal>
Curious, if external SVGs can have media queries, does that mean sticking a lot of SVGs on the page is as taxing on the browser as sticking a lot of iframes on the page?

[08:11:24.0000] <annevk>
JonathanNeal: depends on how you embed them

[08:54:08.0000] <JonathanNeal>
annevk: is there a better way to embed them where they still respond to embedded media queries?

[09:47:48.0000] <JonathanNeal>
annevk: i was using <object>

[09:51:58.0000] <JonathanNeal>
Which is the defacto method I think people are using.

[11:24:01.0000] <gsnedders>
How is one meant to decide what URL schemes are safe to allow through a sanitizer?

[11:24:06.0000] <gsnedders>
Because, ergh.

[11:34:42.0000] <gsnedders>
Also, I hate the html5lib sanitizer.

[12:24:46.0000] <gsnedders>
jgraham: html5lib/html5lib-python#151 should be quick/easy to deal with, plz.

[12:40:32.0000] <IZh>
On main page of whatwg.org "lang" attribute is missing on <html>.

[12:47:47.0000] <tantek>
YAGNI

[13:55:26.0000] <gsnedders>
Wait, what? html5lib-tests includes tests for lone surrogates in the tokenizer tests, but not in the tree-construction tests? Um, okay.

[14:49:54.0000] <Hixie>
JonathanNeal: <object> for svg is in fact exactly equivalent to <iframe> under the hood, iirc

[14:50:36.0000] <JonathanNeal>
Hixie: KNEW IT! Thanks a ton.

[14:51:19.0000] <JonathanNeal>
Okay Hixie, the followup is: is it taxing on a page to have a bunch of SVGs loaded with <object>?

[14:51:33.0000] <Hixie>
no more so than having a bunch of <iframe>s

[14:51:42.0000] <JonathanNeal>
And is that taxing?

[14:51:44.0000] <Hixie>
more so than having inline svg, probably, though

[14:51:52.0000] <JonathanNeal>
(when I said “KNEW IT” I meant in the sense of “ah good, the data suggested this”)

[14:52:17.0000] <Hixie>
iframes are as taxing as a new tab, basically. well, not quite as much.

[14:52:28.0000] <Hixie>
i would treat a Document as expensive, in theory

[14:52:30.0000] <Hixie>
in practice...

[14:52:53.0000] <Hixie>
what do i know

[14:53:07.0000] <Hixie>
the doc i publish is 1000+ pages

[14:53:21.0000] <JonathanNeal>
A document or a tab is pretty expensive, no? Or are they as expensive as createDocumentFragment?

[14:53:45.0000] <Hixie>
document fragments are (hopefully) way cheaper than whole documents, which are way cheaper than document+window pairs

[14:54:17.0000] <JonathanNeal>
Is <object> cheaper than document+window? Same with <iframe>?

[14:54:56.0000] <Hixie>
object or iframe = document+window

[14:55:10.0000] <JonathanNeal>
ouch.

[14:55:29.0000] <Hixie>
i should say, object when rendered using a nested browsing context = iframe = document+window

[14:56:09.0000] <caitp>
do any user agents actually have a concept of browsing contexts as they are in the web apps specs

[14:56:38.0000] <JonathanNeal>
The <object data="path/to/some.svg"> method was recommended for svgs + art direction. I never thought about them being mini iframes scattered throughtout the page.

[14:57:11.0000] <Hixie>
caitp: the spec is written to match what browsers do, so, in theory, at least, yes... i'm sure there's differences though

[14:58:17.0000] <caitp>
I saw a bug on gecko that involved a bunch of hacks to implement a subset of it as specified, and as far as I can tell there's no proper analog in blink, so I'm not sure if that's actually the case

[14:58:57.0000] <caitp>
unless opera/webkit/ie are doing it all

[14:59:08.0000] <Hixie>
how does what the browsers have differ from the spec? (and could you phrase your answer in the form of a bug report at http://whatwg.org/newbug :-) )

[15:00:51.0000] <caitp>
well, it's not somethig that's necessarily worth fussing about, I think it's not unmanageable, it's just that none of it is really organized in an easy way to simplify doing browsing context work

[15:01:01.0000] <caitp>
like you have a bunch of things that do part of it, but not all of it

[15:02:22.0000] <JonathanNeal>
Hixie: would you say technique #4 is the most expensive? https://gist.github.com/jonathantneal/d4e27ac9a65a426e6870

[15:02:37.0000] <JonathanNeal>
re: our conversation about <iframe>.

[15:58:43.0000] <Hixie>
JonathanNeal: i have no idea. measure it. :-)

[15:59:30.0000] <JonathanNeal>
You kind, terrible, wise person.

[16:04:47.0000] <gsnedders>
In totally unrelated news, trying to decide what laptop to buy is absolutely aggrevating.

[16:13:22.0000] <JonathanNeal>
gsnedders: can’t decide which macbook is best?

[16:14:23.0000] <gsnedders>
I really just want to get something not that expensive to use as a desktop replacement while travelling till I graduate

[16:14:39.0000] <gsnedders>
And the MBPs fail the "not too expensive" part :)

[16:15:19.0000] <tantek>
gsnedders, MBA11 fully loaded.

[16:15:48.0000] <gsnedders>
I really want something with a bigger screen. Like, I literally am only going to be using it while at my parents and while on holiday, pretty much

[16:16:36.0000] <gsnedders>
Because around uni I typically just use tablet or computers in the lab… and I scarcely have much in way of reason to even be around campus next year

[16:20:54.0000] <gsnedders>
I mean, I'm still using an ancient MBP 17". But it's still mostly fine. Could do with a bit more RAM, an SSD, and a faster processor… But for how much I use it, it is basically fine…

[16:21:31.0000] <gsnedders>
I could go through the horrible process of replacing the HDD with an SSD, which is pretty hellish as it's not a user-replacable part.

[16:22:45.0000] <Hixie>
what do you use a laptop for?

[16:26:11.0000] <JonathanNeal>
gsnedders: 8GB of RAM => $40, 200GB SSHD => $110.

[16:26:47.0000] <gsnedders>
A mixture of doing random stuff on the web and email (and, ergh, Flash on OS X's performance is bad enough 1080p video on YouTube doesn't play back entirely smoothly…) and whatever assignments uni throws at me, mostly. It's the video playback and compile/test times that make me want to upgrade it, really.

[16:26:55.0000] <gsnedders>
JonathanNeal: Chipset only support 6GB of RAM.

[16:27:04.0000] <JonathanNeal>
I did that to my wife’s 2009 MBP and it sings. Of course, back then $110 couldn’t get you 200GB of solid state.

[16:27:09.0000] <gsnedders>
JonathanNeal: And putting an SSD in it is *hard*.

[16:27:16.0000] <gsnedders>
JonathanNeal: This is a mid-07 MBP :)

[16:27:34.0000] <JonathanNeal>
Yea, before the body change.

[16:27:56.0000] <gsnedders>
Indeed. The Unibodies have user-accessible drives, don't they?

[16:43:04.0000] <Hixie>
gsnedders: sounds like a chromebook would be sufficient

[16:44:03.0000] <gsnedders>
Hixie: That's fine except for the doing random uni assignments bit. Which next year is basically going to be my project. It's nice being able to have spec open next to code. :)

[16:45:30.0000] <Hixie>
install ubuntu on a chromebook? :-)

[16:45:47.0000] <Hixie>
(https://github.com/dnschneid/crouton)

[16:46:12.0000] <gsnedders>
I more meant having the screen space to do so :)

[16:46:49.0000] <Hixie>
you need bigger than 12"?

[16:47:07.0000] <Hixie>
make that 14"

[16:48:08.0000] <Hixie>
( http://www.google.com/intl/en/chrome/devices/chromebooks.html#hp-cb-14 )

[16:48:55.0000] <gsnedders>
For something I'm using as a work computer, yeah, I'd rather. But I'm probably just silly from having a 30" monitor at home :)

[16:49:18.0000] <Hixie>
if you want a laptop with bigger than 14" screen, then yeah, mbp.

[16:49:30.0000] <Hixie>
or just get an external monitor...

[16:51:03.0000] <gsnedders>
mhmm, yeah, maybe that would be the best idea

[16:51:42.0000] <Huvet>
Hi, I'm using version 0.999 of html5lib for python and get this error:

[16:51:45.0000] <Huvet>
python -c "import html5lib; html5lib.parse('&#3;', treebuilder='lxml')"

[16:51:53.0000] <Huvet>
ValueError: All strings must be XML compatible: Unicode or ASCII, no NULL bytes or control characters

[16:51:59.0000] <gsnedders>
Yes, known bug.

[16:52:07.0000] <Huvet>
is this a bug I should report or is this known and fixed?

[16:52:18.0000] <gsnedders>
Neither. Known and unfixed. :)

[16:52:28.0000] <gsnedders>
"Soon".

[16:52:39.0000] <Huvet>
thanks, will hack around then, all entities below a certain number?

[16:53:35.0000] <gsnedders>
See ihatexml

[16:53:50.0000] <Huvet>
if you want it seen in the wild it's on this page: https://celebrity.yahoo.com/the-insider/watch-zach-galifianakis-interview-bradley-224209765.html

[16:53:51.0000] <gsnedders>
And it's not just entities, lxml never sees it as an entity

[16:53:53.0000] <Huvet>
ok!

[16:54:08.0000] <gsnedders>
Like, "\x03" would trigger the exact same case

[16:55:34.0000] <gsnedders>
Huvet: Essentially, we should be checking it matches the Char production in XML 1.0 (Fourth Edition)

[16:56:15.0000] <Huvet>
that's way over my head, but I feel happy that you know how to fix it :)

[16:57:03.0000] <Huvet>
I'll just regexp it away and be happy that stuff doesn't break

[16:57:08.0000] <Huvet>
I'm a simple person like that

[16:57:13.0000] <gsnedders>
Also pretty much all that code is broken for anything outside of the BMP (i.e., anything above U+FFFF). So I was rather planning on rewriting it all.

[16:57:14.0000] <Hixie>
presumably another tree builder would fix it?

[16:57:23.0000] <gsnedders>
Also what Hixie just said :)

[16:57:29.0000] <Huvet>
yes, not using lxml threebuilder works

[16:58:21.0000] <Huvet>
but I'm using cssselect (https://pypi.python.org/pypi/cssselect) and it depends on lxml


2014-05-18
[17:09:10.0000] <Huvet>
seems to work for my use case (for anyone reading the log later on):

[17:09:11.0000] <Huvet>
import unicodedata def remove_control_characters(html):     html = re.sub(ur"&#(\d+);", ur"\x\1", html)     return "".join(ch for ch in html if unicodedata.category(ch)[0] != "C")

[17:10:03.0000] <gsnedders>
wait, that works?

[17:10:21.0000] <gsnedders>
Oh, wait, that's the raw string \x\1

[17:11:21.0000] <Huvet>
well, I could also be making a fool of myself, and messing up all the entities

[17:11:37.0000] <gsnedders>
I'm trying to remember what this does off-hand :)

[17:11:59.0000] <Huvet>
let me actually make sure this works... ;)

[17:17:36.0000] <Huvet>
import unicodedata def remove_control_characters(html):     html = re.sub(ur"&#(\d+);", lambda c: unichr(int(c.group(1))), html)     return "".join(ch for ch in html if unicodedata.category(ch)[0] != "C")

[17:17:51.0000] <Huvet>
that actually works, only for hex coded entities

[17:18:13.0000] <gsnedders>
That doesn't cause errors?

[17:18:14.0000] <gsnedders>
Huh

[17:19:14.0000] <Huvet>
it seems to work with realworld html at least

[17:22:50.0000] <Philip`>
As long as nobody uses &#x3;

[17:22:59.0000] <gsnedders>
Philip`: you live!

[17:24:44.0000] <Huvet>
Philip`: thx, added: html = re.sub(ur"&#x(\d+);", lambda c: unichr(int(c.group(1), 16)), html)

[17:25:28.0000] <Philip`>
Huvet: Might want &#x([0-9a-fA-F]+);

[17:25:47.0000] <Philip`>
or &#[xX]([0-9a-fA-F]+);

[17:26:21.0000] <Huvet>
what, you mean hex character can go to 16!? ;)

[17:26:26.0000] <Philip`>
Depending on how accurate you want to be, you might have to write an entire HTML parser in a regex

[17:26:46.0000] <Huvet>
yeah, I've read on stackoverflow that that is a great idea

[17:26:54.0000] <gsnedders>
You need to handle <script>, <textarea>, and a couple of others too.

[17:26:55.0000] <gsnedders>
:)

[17:27:52.0000] <Huvet>
this is just an ugly hack, until you fix it the non-hacky way

[17:28:14.0000] <Huvet>
135 domains, so quite controlled environment

[03:32:52.0000] <annevk_>
JonathanNeal: <object> is like <iframe> for SVG

[03:33:06.0000] <annevk_>
JonathanNeal: you get a browsing context and such

[09:07:11.0000] <annevk>
JakeA: I expanded the list of request contexts somewhat: http://fetch.spec.whatwg.org/#concept-request-context

[09:07:22.0000] <annevk>
JakeA: at some point I should probably start maintaining the IDL enum

[09:15:05.0000] <JakeA>
annevk: looks good. Where is the context set, thought the various specs when they call fetch?

[09:15:17.0000] <annevk>
JakeA: that's the idea

[09:15:37.0000] <annevk>
JakeA: specs migrating to Fetch is going to happen at some point

[09:36:36.0000] <annevk>
mounir: when you implemented navigator.languages, did you ensure it returns a JavaScript Array object?

[09:36:48.0000] <annevk>
mounir: the specification wants to return an IDL array, which seems broken

[09:39:56.0000] <annevk>
mathiasbynens: https://gist.github.com/annevk/6bfa782752dde6acb379

[09:41:47.0000] <mathiasbynens>
annevk: agreed completely, but how to convince tc39?

[09:41:54.0000] <mathiasbynens>
i couldn’t even get es-discuss excited

[09:42:25.0000] <annevk>
mathiasbynens: I think to some extent it depends on putting it on the agenda and preparing a detailed proposal

[09:42:44.0000] <annevk>
mathiasbynens: and then unfortunately getting someone to put it in their face when they have a meeting

[09:42:57.0000] <mathiasbynens>
annevk: you stopped attending?

[09:42:59.0000] <annevk>
mathiasbynens: hopefully that last step evolves to a more open process

[09:43:39.0000] <annevk>
mathiasbynens: I attended twice to get to know everyone and tell them the platform guys mean no harm and we want better IDL and what not just as much as the next guy

[09:44:06.0000] <Ms2ger>
So why would you ever want to put something into ES?

[09:44:12.0000] <annevk>
mathiasbynens: I don't think there's much value in me attending more for now, maybe once we come to another impasse

[09:44:22.0000] <mathiasbynens>
Ms2ger: cause then it’s not just available in browsers

[09:44:40.0000] <zewt>
javascript is pretty irreelvant outside of browsers

[09:45:11.0000] <zewt>
irrelevant, even

[09:45:12.0000] <Ms2ger>
I don't see why that'd necessarily require having TC39 mess with it either

[09:45:36.0000] <annevk>
Ms2ger: a) gets considered as part of the design of new objects (important for structured cloning) and maybe even get syntax support (might be interesting for workers some day) and b) someone else gets to maintain it and fix the bugs

[09:46:08.0000] <annevk>
a) seems somewhat more important, but b) is very nice too

[09:46:31.0000] <mathiasbynens>
zewt: you’re funny :)

[09:46:48.0000] <Ms2ger>
mathiasbynens, you're unhelpful

[09:47:06.0000] <mathiasbynens>
oh, zewt wasn’t kidding?

[09:47:35.0000] <Ms2ger>
So it's really just because TC39 ignores the rest of the platform, unless you put it in their spec?

[09:49:01.0000] <mathiasbynens>
not just that, it would also mean that non-browser ES engines can stop making up their own stdlibs that do similar things than what’s already in browsers

[09:50:02.0000] <Ms2ger>
They already can

[09:50:41.0000] <mathiasbynens>
ok then i guess the point is that not just tc39 ignores the rest of the platform

[09:51:03.0000] <annevk>
Ms2ger: I don't think they ignore the rest of the platform; they didn't invent new byte types

[09:51:32.0000] <annevk>
Ms2ger: they did refactor them and make them work nicely with arrays and now build new things on top (value objects)


2014-05-19
[19:12:06.0000] <MikeSmith>
foolip: I see that Denis responded to some (but not all) of your review comments at https://critic.hoppipolla.co.uk/r/604

[19:13:09.0000] <MikeSmith>
foolip: if you could check and see if any of the remaining open issues in that review can be close that would be great

[19:13:47.0000] <MikeSmith>
foolip: that way we can get them down to just the ones that are actually still waiting on Denis

[19:14:13.0000] <MikeSmith>
foolip: and then I can ping Denis and ask him if he can make time to look back at them

[19:15:06.0000] <MikeSmith>
foolip: we're no longer paying Denis to work on the testsuite, and this is the last PR we still have open from the time when we did have him working on tests

[19:34:35.0000] <MikeSmith>
so the "is" attribute is not actually formally defined anywhere yet, right?

[19:35:01.0000] <MikeSmith>
at least not in http://w3c.github.io/webcomponents/spec/custom/

[19:35:14.0000] <MikeSmith>
it's mentioned there but never defined

[19:35:29.0000] <MikeSmith>
dglazkov: ↑☃

[20:12:50.0000] <caitp>
hixie linked me to a sufficiently normative definition of it, but I can't recall where it was, @MikeSmith

[20:13:22.0000] <caitp>
there are like dozens of those specs, makes it really hard to find things =)

[20:14:16.0000] <MikeSmith>
caitp: yeah

[20:14:34.0000] <MikeSmith>
caitp: OK thanks I guess I'll give up looking for it for now

[20:14:57.0000] <caitp>
if i still have the bugmail i can probably dig it up

[20:15:30.0000] <caitp>
mm, nope, gone

[21:34:00.0000] <TabAtkins>
Hixie: We just agreed to kill the image-orientation property, so we need the exif autorotate attr.  (dbaron needs the functionality *somehow*, and wants to make sure it's a sure thing).

[21:34:40.0000] <TabAtkins>
http://lists.w3.org/Archives/Public/www-style/2013Jul/0568.html

[21:35:07.0000] <TabAtkins>
wrong window, sorry

[22:42:41.0000] <mikey85>
hello everyone :)

[22:42:45.0000] <mikey85>
God bless everyone :)

[22:42:58.0000] <mikey85>
message me if you would like to make friends with a good hearted Christian :)

[22:45:46.0000] <MikeSmith>
TabAtkins: wrong window again man, plus you've now exposed you super-secret mikey85 alternate nick

[23:31:36.0000] <hober>
MikeSmith||

[23:31:39.0000] <hober>
err, ++ even

[23:40:37.0000] <sangwhan>
MikeSmith: smooth

[00:04:14.0000] <TabAtkins>
MikeSmith: That's hardly even a secret.

[00:06:05.0000] <zcorpan>
Hixie: i notice there's an "HTML - <img>" component in bugzilla now. maybe the bug filer should select that component for img bugs? and i guess i can move the existing ones

[00:07:00.0000] <MikeSmith>
zcorpan: yeah Hixie asked me to make that component for exactly what you just described

[00:10:41.0000] <zcorpan>
ok cool

[00:12:15.0000] <zcorpan>
Hixie: for the record i don't like the fading thing. i'd prefer if the styles are stable so i don't have to keep moving my mouse while reading and not lose track of where the links are

[00:12:46.0000] <zcorpan>
Hixie: i'd be OK with having the links always be black and underlined, or some such

[00:15:28.0000] <TabAtkins>
Fading thing?

[00:15:36.0000] <TabAtkins>
Oh, I saw it.

[00:18:31.0000] <TabAtkins>
But yeah, agree that the fading thing is annoying.  At least keep the underlines.

[00:21:37.0000] <zcorpan>
i'd find the fading annoying even if it keeps the underlines. it's distracting me that it fades back and forth

[00:34:59.0000] <Ms2ger>
gsnedders, IE6 still supported? I missed it

[00:53:38.0000] <MikeSmith>
I like the fading thing. But I guess I'm weird.

[00:54:59.0000] <MikeSmith>
But I like the colors too, so I'd rather have the colors than having the links always be black or whatever other compromise

[00:55:26.0000] <MikeSmith>
and the complainers that are color-averse would just have to find some way to live with it

[01:03:47.0000] <annevk_>
http://www.openbsd.org/papers/bsdcan14-libressl/mgp00013.html whoa, OpenSSL had EBCDIC support

[01:42:10.0000] <sangwhan>
wonder if libressl is nuking that perl generated assembly nonsense in openssl

[02:01:11.0000] <MikeSmith>
can the empty string be a valid "source size list"? http://picture.responsiveimages.org/#valid-source-size-list

[02:01:46.0000] <MikeSmith>
is that BNF? does the lack of brackets around something mean it's required?

[02:01:56.0000] <MikeSmith>
what does "#" means?

[02:14:16.0000] <MikeSmith>
/me finds "A hash mark (#) indicates that the preceding type, word, or group occurs one or more times, separated by comma tokens (which may optionally be surrounded by white space and/or comments)." http://drafts.csswg.org/css-values/#component-multipliers

[02:14:55.0000] <MikeSmith>
good times

[02:15:31.0000] <mounir>
annevk: I believe the array thing is on purpose

[02:16:08.0000] <annevk>
mounir: can you restate that?

[02:19:08.0000] <mounir>
annevk: regarding navigator.languages

[02:19:19.0000] <mounir>
it returns an Array that has to be the same unless the values have changed

[02:19:30.0000] <mounir>
so you get previousValue == navigator.languages

[02:30:01.0000] <annevk>
mounir: so you return a JavaScript Array?

[02:30:06.0000] <annevk>
mounir: the IDL says otherwise

[02:30:35.0000] <mounir>
annevk: that's a Gecko quirks

[02:30:46.0000] <annevk>
mounir: in the spec

[02:31:10.0000] <mounir>
annevk: the spec says DOMString[]

[02:31:21.0000] <mounir>
annevk: this is what my Blink patch does

[02:31:39.0000] <mounir>
annevk: and in Gecko, sicking said that for some reasons, the right way was sequence<DOMString>

[02:31:46.0000] <mounir>
because of binding generator or something

[02:32:22.0000] <Ms2ger>
mounir, DOMString[] is bad

[02:33:59.0000] <mounir>
Ms2ger: don't be judgmental with that poor thing

[02:34:01.0000] <tobie>
Is there a palatable doc somewhere that explains the diff between DOMString[], sequence<DOMString>, Foo extends Array and the like?

[02:34:14.0000] <annevk>
mounir: [] is an IDL bug and needs to die

[02:34:37.0000] <mounir>
annevk: I understand that

[02:34:41.0000] <annevk>
tobie: not really, mostly we need someone to maintain IDL

[02:34:47.0000] <Ms2ger>
Then why are you using it in blink?

[02:35:21.0000] <tobie>
annevk: the language in WebIDL is NOT palatable.

[02:35:50.0000] <Ms2ger>
tobie, there will be no need to explain DOMString[] if DOMString[] is gone, though

[02:36:24.0000] <tobie>
Ms2ger: right, but in the meantime would be useful.

[02:36:46.0000] <tobie>
Ms2ger: I expect it's going to last a while before it is gone.

[02:39:07.0000] <annevk>
tobie: depends on when IDL becomes maintained again

[02:40:03.0000] <tobie>
annevk: sure, but we're still going to see references to it all over the place.

[02:41:02.0000] <annevk>
tobie: except at that point it'll be "oh this is invalid IDL, please fix"

[02:41:30.0000] <Ms2ger>
We can't, it's in CR

[02:41:39.0000] <tobie>
^ that.

[02:41:40.0000] <annevk>
lol

[02:42:00.0000] <Ms2ger>
We'll just reference a WebIDL draft from 2008

[02:42:11.0000] <tobie>
or already published as a REC, etc.

[02:42:49.0000] <annevk>
something something http://annevankesteren.nl/2012/11/process

[02:45:15.0000] <tobie>
I thought heycam was maintaining WebIDL (and that he currently was on holidays, hence the delay)

[02:46:05.0000] <Ms2ger>
He's not exactly quick to respond when he's not on holiday either

[02:47:05.0000] <annevk>
heycam has a ton of other responsibilities

[02:47:28.0000] <annevk>
IDL at this point requires about three to six months FTE

[02:55:09.0000] <annevk>
http://www.w3.org/TR/DOM-Level-3-Events/#widl-DocumentEvent-createEvent o_O

[02:55:22.0000] <SimonSapin>
sangwhan: http://youtu.be/GnBbhXBDmwU?t=51m9s

[02:59:06.0000] <darobin>
heh, annevk talking in FTEs

[02:59:19.0000] <darobin>
you can almost feel the manager waking up in there :)

[02:59:21.0000] <darobin>
/me ducks

[03:08:05.0000] <annevk>
mounir: I guess I still don't understand; are we returning a JavaScript Array?

[03:08:17.0000] <annevk>
mounir: seems like in Gecko we are; what about Blink?

[03:10:20.0000] <annevk>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=25800 #w3confusion

[03:11:45.0000] <mounir>
annevk: isn't what the spec says?

[03:11:55.0000] <annevk>
mounir: no

[03:15:06.0000] <mounir>
annevk: the spec says DOMString[], how isn't that a JS array?

[03:15:08.0000] <mounir>
I'm confused

[03:15:16.0000] <annevk>
mounir: it's an IDL array

[03:15:27.0000] <mounir>
annevk: and that's not seen as an array in JS?

[03:15:35.0000] <annevk>
mounir: correct

[03:15:59.0000] <annevk>
mounir: read http://heycam.github.io/webidl/#es-array and weep

[03:16:54.0000] <mounir>
oh boy...

[03:19:12.0000] <mounir>
annevk: btw, the sequence<T> of Gecko is a hack in the sense that WebIDL doesn't allow returning sequence<T> from an attribute

[03:20:51.0000] <annevk>
yeah I know about that; I don't like how IDL has the same "types" for arguments and return values

[03:22:46.0000] <sangwhan>
SimonSapin: oh boy, the perl is still there

[03:24:14.0000] <jgraham>
/me is quite confused about why you would want different types for arguments and return values

[03:24:54.0000] <annevk>
jgraham: the argument one is not a type, it's a coercion

[03:25:38.0000] <jgraham>
A coercion to a type

[03:25:53.0000] <mounir>
annevk: seriously, this "platform array" thing is pretty confusing

[03:26:07.0000] <annevk>
mounir: you can consider it dead

[03:26:15.0000] <Ms2ger>
/me promotes mounir to WebIDL editor

[03:26:49.0000] <mounir>
Ms2ger: if you do that, don't complain when you become a Gecko DOM peer ;)

[03:27:00.0000] <Ms2ger>
Ha

[03:27:13.0000] <Ms2ger>
Not like I have time to do Gecko reviews anyway

[03:28:26.0000] <mounir>
Ms2ger: you wouldn't be the first reviewer without time for reviews ;)

[03:29:18.0000] <Ms2ger>
Hmm

[03:29:26.0000] <Ms2ger>
Should window.HTMLAllCollection exist?

[03:29:28.0000] <Ms2ger>
I guess so

[03:34:52.0000] <mounir>
annevk: what's the simplest/quickest way to check if an array is a js-array?

[03:35:12.0000] <annevk>
mounir: use isArray maybe

[03:36:24.0000] <mounir>
annevk: that wouldn't return true for a non-js array?

[03:36:46.0000] <annevk>
mounir: it shouldn't

[03:36:53.0000] <mounir>
it seems that the Blink bindings return a JS array then

[03:37:26.0000] <annevk>
mounir: another test you could do is push a number or string on the array and see if it's there

[03:39:19.0000] <mounir>
annevk: working in Blink, failing in Gecko

[03:39:46.0000] <annevk>
weird

[03:40:49.0000] <mounir>
annevk: it says that l.push() isn't extensible in Gecko

[03:41:25.0000] <annevk>
mounir: but Array.isArray(obj) returns true in Gecko?

[03:41:48.0000] <mounir>
yep

[03:41:53.0000] <annevk>
o_O

[03:42:12.0000] <annevk>
"ask bz"

[03:46:36.0000] <mounir>
annevk: I probably did something wrong ;)

[04:28:27.0000] <foolip>
MikeSmith: I've commented on the open issues

[04:37:22.0000] <tobie>
Sounds like I'm not the only one utterly confused by the []/sequence, etc. mess.

[04:37:23.0000] <MikeSmith>
foolip: thanks much

[04:39:08.0000] <tobie>
annevk: isn't sequence<foo> just saying: this function/attribute will duck-type?

[04:39:55.0000] <TabAtkins>
So, if I'm returning a Promise which will resolve to a JS array of FontFace objects, the right type for the return value is Promise<sequence<FontFace>>, right?

[04:40:05.0000] <TabAtkins>
/me put that in Font Loading today, so he hopes it's right.

[04:40:15.0000] <tobie>
yup

[04:40:25.0000] <TabAtkins>
kk

[04:41:21.0000] <tobie>
actually, I'm not sure you can use sequence<foo> for return types.

[04:42:10.0000] <annevk>
tobie: as argument it means the implementation will iterate over the object (using Symbol.iterator) to get the list of values; as return value it means JS Array

[04:42:10.0000] <TabAtkins>
ARGH

[04:42:17.0000] <TabAtkins>
annevk: Okay, cool.

[04:42:24.0000] <tobie>
oh. OK.

[04:45:37.0000] <tobie>
It would be helpful to use different syntax for these two different things.

[04:46:31.0000] <tobie>
Why don't we use Array<Foo> for the return type?

[04:57:28.0000] <tobie>
Looking at the WebIDL bug tracker, I get a better sense of what annevk, Ms2ger were referring to.

[05:02:36.0000] <barnabywalters>
anyone here know if work to add native Promise support to XMLHttpRequest is being done somewhere?

[05:03:19.0000] <zcorpan>
barnabywalters: i think that will be called "fetch()"

[05:03:43.0000] <annevk>
tobie: see above where I said we should have different syntax for argument / return value (or get vs set)

[05:04:11.0000] <barnabywalters>
zcorpan: interesting, do you have a URL to a spec? I couldn’t find one easily, might not be looking in the right places

[05:04:43.0000] <zcorpan>
barnabywalters: i saw something in ServiceWorker but it's wasn't fleshed out when i looked at it

[05:04:50.0000] <gsnedders>
Ms2ger: Yeah. I mean, pretty much everyone using IE6 isn't using a server OS, but still. :)

[05:05:07.0000] <tobie>
annevk: yeah. I guess it's inevitable with a not strongly typed language.

[05:05:59.0000] <annevk>
tobie: ToPromise / Promise; Iterable / Array

[05:06:00.0000] <tobie>
annevk: on second thought, I'm not even sure strong type has anything to do with it.

[05:06:19.0000] <tobie>
annevk: ++

[05:07:01.0000] <tobie>
annevk: how does that work for attributes which are rw?

[05:07:34.0000] <annevk>
tobie: I think for properties we need to be more clear on whether they have getter/setter or are a data property

[05:07:44.0000] <annevk>
tobie: currently everything is a getter/setter, but that seems somewhat wrong

[05:09:01.0000] <barnabywalters>
zcorpan: hrm okay, might try diving into ServiceWorker then

[05:09:30.0000] <tobie>
barnabywalters: there's also the fetch spec.

[05:09:48.0000] <barnabywalters>
tobie: that sounds good — link?

[05:09:54.0000] <annevk>
barnabywalters: the idea is fetch(Request req).then(Response r => ...)

[05:09:55.0000] <barnabywalters>
http://fetch.spec.whatwg.org/?

[05:10:04.0000] <tobie>
barnabywalters: yes

[05:10:20.0000] <tobie>
but the fetch JS API isn't defined there.

[05:10:27.0000] <annevk>
barnabywalters: that's where the API will eventually end up, currently it's just defining the network stack

[05:10:28.0000] <barnabywalters>
annevk: ah so xhr is being split into Request and Response objects now?

[05:10:49.0000] <annevk>
barnabywalters: roughly

[05:11:03.0000] <annevk>
barnabywalters: if you look at http://xhr.spec.whatwg.org/ you'll see it's defined in terms of Fetch too

[05:12:36.0000] <TabAtkins>
annevk: I'd be happy if WebIDL arguments were all named interface-like and return types were named object-like.

[05:12:39.0000] <barnabywalters>
annevk: tobie: thanks, I’ll have a read through those

[05:13:48.0000] <annevk>
TabAtkins: I'm not sure what that means I'm afraid; we do have some ideas on revamping the whole interface / [NoInterfaceObject] mess in terms of classes and such

[05:38:58.0000] <zcorpan>
MikeSmith: pointer? https://critic.hoppipolla.co.uk/showcomment?chain=3809

[05:41:25.0000] <zcorpan>
MikeSmith: i can't see anything in www-archive :-(

[05:46:10.0000] <TabAtkins>
annevk: Interface-like means names like "iterable" and "promise-like" and whatnot - adjectives, mostly.  "object-like" are nouns.

[05:46:44.0000] <TabAtkins>
Like difference between "functor" (terrible name, also a noun, so misleading) and "mappable" (accurately describes, indicates that it's a quality of an object)

[05:50:23.0000] <zewt>
functor: callable

[05:50:53.0000] <TabAtkins>
That's part of why the name is so terrible, because it has nothing to do with "function".

[05:51:11.0000] <zewt>
i guess functor is specifically a callable object (in C++), so in that case being a noun is correct

[05:51:14.0000] <TabAtkins>
(A function *is a* functor, but for reasons that have nothing to do with calling.)

[05:52:04.0000] <TabAtkins>
A functor is any object with a .map() operation or equivalent - it holds some values/values in a container or context, and lets you pass functions inside of it to operate on the inner values and return the same context with the return values.

[05:52:30.0000] <zewt>
i'm only talking about c++; i've never seen "functor" used in any other context (and I don't know why anyone would)

[05:53:05.0000] <zewt>
though I guess people call c++ functions functors too, for templates

[05:53:15.0000] <jgraham>
functor in C++ means something entirely different to Haskell I think

[05:53:35.0000] <TabAtkins>
Functor is a category theory term.

[05:53:37.0000] <jgraham>
(I think that mappable is a terrible name)

[05:53:52.0000] <TabAtkins>
It's a thing you can map.  What better name could it have?

[05:54:32.0000] <jgraham>
Well the problem might be that map is a bad name

[05:54:47.0000] <zewt>
without knowing anything about it in advance, it sounds like "can be used as a the key in a dictionary"

[05:54:51.0000] <zcorpan>
TabAtkins: did the @charset use counter ever materialize?

[05:54:57.0000] <zewt>
(the effect of hashable in python)

[05:56:47.0000] <TabAtkins>
zcorpan: No, I haven't actually coded any Blink since the fork.

[05:57:08.0000] <zcorpan>
TabAtkins: ok

[05:57:15.0000] <annevk>
thanks tobie for the ScalarValueString patch

[05:57:27.0000] <TabAtkins>
zewt: The word "map" is pretty common in functional languages (including JS) to mean "call this on every element of the {array, set, etc} and give me a new container with the results".

[05:57:39.0000] <TabAtkins>
Python's map(), JS's Array#map, etc.

[05:57:58.0000] <TabAtkins>
JS also has a Map, to be sure, but Python calls it Dict to avoid confusion.

[05:58:08.0000] <TabAtkins>
(Also, a Map is a functor. ^_^)

[05:58:26.0000] <zewt>
TabAtkins: a terrible mechanism (python's comprehensions are 100x more readable), but i've never seen "map" adjectived

[06:00:03.0000] <zewt>
okay, i only just noticed the "Show: [x] inherited" checkbox on the right of these docs http://msdn.microsoft.com/en-us/library/system.windows.controls.treeviewitem(v=vs.110).aspx

[06:00:31.0000] <TabAtkins>
Comprehensions are great, but not a replacement in all cases.

[06:00:31.0000] <TabAtkins>
[foo(bar) for bar in bars] is worse than bars.map(foo)

[06:00:55.0000] <zewt>
been growling at these horrible docs for making me squint through endless pages of inherited mess for days because they decided to have an obscure "[x] show pages of useless crap" default tucked off to the side

[06:01:30.0000] <zewt>
TabAtkins: i prefer it, to me the extra typing is worth not having to parse two different patterns

[06:02:07.0000] <zewt>
it's also nicer to have (foo(bar) for bar in bars) and {bar: foo(bar) for bar in bars} without having to change modes when i want a different type

[06:03:34.0000] <zcorpan>
all i hear is "foo bar foo bar foo bar"

[06:03:38.0000] <TabAtkins>
Yeah, the other comprehensions are quite nice.

[06:06:06.0000] <zewt>
incidentally, special thanks to c# for adding comprehensions... in a different order, from foo in bar select foo

[06:06:52.0000] <zewt>
just to make sure it's a pain for everyone to context switch

[06:07:20.0000] <darobin>
I always thought "comprehensions" was what you wish you had when you saw Python code

[06:07:55.0000] <jgraham>
darobin: Nah, it's what ruby doesn't give you

[06:08:38.0000] <zewt>
darobintroooooll

[06:27:25.0000] <Ms2ger>
/me wonders if http://code.google.com/p/chromium/issues/detail?id=43394 is ever going to land

[06:31:04.0000] <zcorpan>
Ms2ger: "any time now"

[06:56:25.0000] <TabAtkins>
Note that it's still receiving useful activity. We keep poking at it and trying it out, but it keeps causing perf regressions.

[06:56:30.0000] <TabAtkins>
But they're getting smaller and smaller.

[06:59:08.0000] <zcorpan>
MikeSmith: w3c-test:mirror seems like it doesn't bite for me again :-(

[07:00:00.0000] <Ms2ger>
Without a space?

[07:00:00.0000] <zcorpan>
MikeSmith: https://github.com/w3c/web-platform-tests/pull/996

[07:00:18.0000] <zcorpan>
should there be a space?

[07:00:51.0000] <Ms2ger>
That's what I've done, I think

[07:01:22.0000] <zcorpan>
no dice

[07:01:33.0000] <jgraham>
zcorpan: There is (theoretically) never any point in putting w3c-test:mirror on your own PR

[07:01:50.0000] <jgraham>
If you have permissions to mirror stuff your own PRs should be automatically mirrored

[07:02:09.0000] <jgraham>
So you either don't have permissions or (more likely) the script is broken

[07:02:20.0000] <zcorpan>
yeah ok

[07:04:01.0000] <mathiasbynens>
hsivonen: validator.nu seems down again

[07:07:53.0000] <annevk>
JakeA: we need a story for fetch() outside service workers

[07:08:00.0000] <annevk>
JakeA: I don't think we can squat a global name like that

[07:08:17.0000] <annevk>
JakeA: is it going to be navigator.fetch() outside of workers?

[07:10:44.0000] <JakeA>
annevk: why is window.fetch bad? Likely to be taken by app code?

[07:11:18.0000] <annevk>
JakeA: yeah, taking global names is icky

[07:11:23.0000] <annevk>
JakeA: I'm open to try it I guess

[07:11:57.0000] <JakeA>
annevk: What about Cache and caches?

[07:15:01.0000] <zcorpan>
fetch seems a bit weird to put on navigator

[07:15:17.0000] <annevk>
JakeA: dunno

[07:15:24.0000] <Ms2ger>
location.fetch()

[07:15:33.0000] <jgraham>
Ms2ger is winning

[07:15:52.0000] <zcorpan>
URL.fetch() ?

[07:16:02.0000] <jgraham>
zcorpan takes the lead

[07:16:06.0000] <Ms2ger>
Blob.fetch()

[07:16:16.0000] <zcorpan>
Fetch.fetch()

[07:16:17.0000] <jgraham>
Ms2ger crashes into a wall

[07:16:20.0000] <Ms2ger>
:D

[07:16:34.0000] <JakeA>
f.etch()

[07:16:50.0000] <Ms2ger>
.sketch()?

[07:17:02.0000] <zcorpan>
JakeA: f is unlikely to be taken, seems ok

[07:17:11.0000] <jgraham>
This has gone very Wacky Races all of a sudden

[07:17:55.0000] <jgraham>
With JakeA playing Dastardly

[07:18:28.0000] <JakeA>
haha

[07:19:51.0000] <JakeA>
window.fetch, caches, Cache would obviously be my first choice…

[07:20:07.0000] <JakeA>
window.fetchXML()

[07:20:23.0000] <JakeA>
but it can be used (and will mainly be used) to fetch not-XML

[07:20:39.0000] <gsnedders>
jgraham: Do you want me to rewrite the history of https://critic.hoppipolla.co.uk/r/287 before you review it?

[07:20:47.0000] <Ms2ger>
XMLHttpRequest.fetchHTML()

[07:20:55.0000] <JakeA>
haha

[07:21:05.0000] <Ms2ger>
XMLHttpRequest.fetchHTMLSpdy()

[07:21:23.0000] <JakeA>
The problem with putting it on navigator is it won't be on navigator in the SW

[07:21:53.0000] <jgraham>
The problem with putting it on navigator is that it makes no sense

[07:22:20.0000] <jgraham>
It just ends up as a duming ground for things we were too scared to put on window

[07:22:27.0000] <jgraham>
*dumping

[07:22:33.0000] <jgraham>
gsnedders: Yes

[07:22:45.0000] <JakeA>
like navigator.serviceWorker :D

[07:23:40.0000] <jgraham>
Yeah, pretty much. Things only make sense on navigator if they don't depend on the Window

[07:30:09.0000] <annevk>
jgraham: navigator is a dumping ground

[07:38:31.0000] <jgraham>
annevk: Perhaps, but it's not good

[07:43:06.0000] <Domenic>
annevk: you could block on modules!??!

[07:43:29.0000] <annevk>
Domenic: block service workers on modules?

[07:43:45.0000] <Domenic>
annevk: I assume fetch-outside-workers doesn't block service workers...

[07:47:28.0000] <jgraham>
You could add a .send() method to Request

[07:49:11.0000] <annevk>
new Request(...).send().then(r => ...)

[07:50:35.0000] <Domenic>
hmm

[07:50:39.0000] <gsnedders>
jgraham: there's no prepare rebase link on Critic on that page?

[07:50:49.0000] <tobie>
Request.fetch?

[07:50:52.0000] <Domenic>
feels enough like XHR to trigger some bad feels

[07:51:03.0000] <Domenic>
Request.fetch seems better

[07:53:35.0000] <tobie>
Would be nice to ship fetch outside of SW at the same time (or even before) it is shipped within SW.

[07:53:36.0000] <jgraham>
Do you "fetch" a Request? Surely you "send" a Request?

[07:53:54.0000] <jgraham>
gsnedders: No, you do the opposite

[07:54:10.0000] <jgraham>
gsnedders: https://github.com/mozilla/servo/wiki/Github-&-Critic-PR-handling-101

[07:54:11.0000] <gsnedders>
jgraham: huh?

[07:54:17.0000] <Domenic>
if it's a method on Request.prototype, then send. But if it's a static factory method, then fetch seems better.

[07:54:29.0000] <tobie>
^ that

[07:54:31.0000] <annevk>
you fetch a response using a request

[07:54:45.0000] <tobie>
IO.fetch

[07:54:50.0000] <jgraham>
Request.fetch(request) is going to sound very odd

[07:55:03.0000] <annevk>
jgraham: agreed

[07:55:05.0000] <gsnedders>
jgraham: the first commit on the branch and not the merge-base?

[07:55:23.0000] <jgraham>
Even though it is probably no more verbose than other options, it feels like it is due to the repetition

[07:55:55.0000] <jgraham>
gsnedders: Do your rebase, force push, follow the steps to update critic.

[07:56:20.0000] <gsnedders>
jgraham: I'm following the steps. "Ask for help if this step is daunting"

[07:56:27.0000] <jgraham>
Heh

[07:56:30.0000] <annevk>
this latest email to webkit-dev...

[07:56:35.0000] <annevk>
MikeSmith is gonna love it

[07:56:50.0000] <gsnedders>
jgraham: The parent of the first commit on the branch? So the merge-base?

[07:56:55.0000] <jgraham>
gsnedders: It's the SHA1 of the parent of the first commit on the branch

[07:57:10.0000] <jgraham>
gsnedders: Yes.

[07:57:32.0000] <gsnedders>
jgraham: Okay, done

[07:57:36.0000] <jgraham>
gsnedders: Basically critic constructs a diff of the post-rebase branch compared to the pre-rebase branch

[07:57:57.0000] <jgraham>
So you need to tell it where the post-rebase branch starts

[07:58:39.0000] <gsnedders>
jgraham: Note that this still fails a whole load of tests, but mostly because the tests are kinda broken

[07:59:16.0000] <tobie>
annevk: np. thanks for merging it (SW patch).

[08:03:07.0000] <gsnedders>
jgraham: Why is the review not tracking any more?

[08:05:18.0000] <Domenic>
I didn't realize that fetch() accepted a request. in that case there should almost certainly be a Request.prototype.send() for when you already have a Request object

[08:05:20.0000] <jgraham>
gsnedders: You need to reenable that

[08:05:31.0000] <Domenic>
fetch(), wherever it ends up, seems mostly for the URL-accepting case to me.

[08:05:33.0000] <tobie>
annevk, seems you didn't push it to gh-pages though.

[08:07:34.0000] <tobie>
annevk: which reminds of https://github.com/slightlyoff/ServiceWorker/issues/266

[08:08:14.0000] <annevk>
Domenic: you want Request for all the additional parameters

[08:09:12.0000] <gsnedders>
jgraham: I pressed the button. Nothing happeend.

[08:09:31.0000] <Domenic>
annevk: you could add those as an options object to fetch, hmm. fetch(url, { timeout: 5000 }) vs. (new Request({ url: url, timeout: 5000 }).send()

[08:09:35.0000] <Ms2ger>
gsnedders, force-refresh

[08:10:06.0000] <Domenic>
woah why is there a synchronous flag O_O

[08:10:58.0000] <jgraham>
gsnedders: Force reload

[08:11:05.0000] <jgraham>
gsnedders: Then blame jl

[08:22:31.0000] <gsnedders>
I blame jl.

[08:53:41.0000] <annevk>
Domenic: I think I filed a bug on that, if that's exposed it should only be readonly

[08:55:01.0000] <Domenic>
annevk: when is it useful?

[08:55:33.0000] <annevk>
Domenic: I guess a service worker might want to know about synchronous requests so it can log errors somewhere for the frontend team

[08:55:53.0000] <Domenic>
annevk: ah right i forgot to context switch from fetch to SW's onfetch

[09:22:02.0000] <annevk>
Domenic: I think the idea for fetch() was String or Request

[09:22:24.0000] <Domenic>
annevk: yeah, I guess, just thinking of what people are used to from jQuery etc.

[09:22:28.0000] <annevk>
Domenic: or a dictionary

[09:22:45.0000] <Domenic>
it's a small step from dictionary to string + dictionary ;)

[09:22:51.0000] <annevk>
fetch({url:...}) should work I think

[09:23:12.0000] <Domenic>
the nice thing about fetch(url, {...}) is that it's an easy change from code that does fetch(url)

[09:23:28.0000] <jgraham>
Putting a non-optional parameter into a dict seems ugly

[09:24:29.0000] <Domenic>
that too

[09:25:33.0000] <annevk>
I guess that's fair, ideally we align the Request constructor with that pattern

[09:25:52.0000] <annevk>
I should probably take ownership at some point, not moving very quickly at the moment

[09:27:48.0000] <tobie>
node.js request accepts both req(url, options) and req({url: url, options... })

[09:27:58.0000] <tobie>
fwiw

[09:28:19.0000] <Ms2ger>
That seems somewhat unhelpful

[09:30:38.0000] <tobie>
Ms2ger: people tend to have strongly diverging opinions when it comes to API design.

[09:32:01.0000] <Domenic>
jQuery also accepts both

[09:32:18.0000] <Domenic>
i kind of dislike the both approach also, but not strongly

[09:45:46.0000] <JakeA>
Domenic: annevk: fetch(url) is not as common as maybe originally thought. I'm happy to ditch fetch() for request.send()

[09:46:01.0000] <JakeA>
As long as new Request(url) works

[09:46:14.0000] <Domenic>
JakeA: hmm why is that? $.get(url) is very common...

[09:46:52.0000] <JakeA>
Domenic: actually, I was thinking of ServiceWorker, in a page fetch(url) would be common

[09:47:28.0000] <JakeA>
But new Request(url) seems ok to me. Happy to be wrong though. Feels like a smaller footprint for the window object

[09:50:43.0000] <annevk>
JakeA: we can do fetch(url, rest); new Request(url, rest); fetch(Request); and maybe new Request(Request) (for downgrading a UA-generated object)

[09:52:08.0000] <jsbell>
annevk's suggestion is what I had in my head (apart from Request(Request) but that makes perfect sense)

[09:58:08.0000] <JakeA>
So function fetch(args...) { return new Request(arts)}

[09:58:18.0000] <JakeA>
Ffs, coding on phone

[09:58:45.0000] <JakeA>
So function fetch(args...) { return new Request(args...).send(); }

[09:59:14.0000] <Ms2ger>
...args?

[09:59:49.0000] <JakeA>
Yeah, that, probably (can never remember which side the ... goes on)

[10:02:59.0000] <jsbell>
If it was exactly that, it auto-downgrades a UA-generated object.

[10:03:23.0000] <Domenic>
I like that

[10:05:53.0000] <jsbell>
BTW, is there a doc/thread yet, or just noodling here? (I'm catching up on email after being away for a bit, so may discover it shortly)

[10:12:14.0000] <annevk>
jsbell: noodling here

[10:12:36.0000] <jsbell>
thx

[10:12:42.0000] <JakeA>
What do we mean by downgrades?

[10:13:09.0000] <JakeA>
That happens on .send() right? It becomes "connect" in CSP terms

[10:32:07.0000] <annevk>
JakeA: yeah, I was thinking we could offer explicit syntax for it as well so people can reason about it without doing a fetch

[10:32:19.0000] <annevk>
JakeA: I'm not sure I like the .send() design

[10:37:54.0000] <annevk>
On the other hand, if we name it .send() there's less of a confusion between fetching and fetch()

[10:46:10.0000] <Hixie>
zcorpan: i figured i would filter the incoming bugs for you rather than just automatically send img bugs to you

[10:46:44.0000] <Hixie>
TabAtkins: autorotate="" is in zcorpan's area now, unfortunately, but maybe i can send him a patch or something

[10:47:07.0000] <Hixie>
as far as the fading thing goes, yeah, i don't like it either

[10:47:31.0000] <Hixie>
i'm trying to figure out how to address the feedback that some people have asking for the spec to be less busy, while still addressing the needs of people like me who use the styles to understand what's going on.

[10:48:48.0000] <annevk>
and here I thought my browser had a bug

[10:50:37.0000] <jgraham>
Uh yeah. That seems like a bad idea

[10:50:44.0000] <jgraham>
Why not just drop the underlines?

[10:52:53.0000] <Hixie>
there are two groups of people i'm trying to cater for. group A wants no colour and no underlines. Group B wants colour and underlines.

[10:53:42.0000] <Hixie>
(group A basically wants no hyperlinks visible, the point as far as i can tell is to feel like you're reading a book rather than feel like you're reading a spec with deep links everywhere.)

[10:53:53.0000] <Hixie>
(group B might be just me.)

[10:54:19.0000] <jgraham>
Since I apparently don't fall into either group, I doubt your characterisation is accurate

[10:55:04.0000] <Hixie>
well it's quite likely there are other groups that i should also be trying to cater for, but those were the groups i was trying to cater for.

[10:56:49.0000] <boogyman>
Hixie: I don't think it would be terribly difficult to use alternate stylesheets, right? The question there though is what interface to use to switch between them.

[10:57:21.0000] <jgraham>
I think that hypertext is a great thing and I think it is especially great in the spec, since you basically can't understand it without following links. So I think the "Group A" people have either been mischaracterised or don't really want what they say they want. OTOH I think that underlines are a particularly poor typographical technique since they compete with the letters themselves

[10:57:25.0000] <Hixie>
boogyman: most users don't touch that kind of UI

[10:57:29.0000] <Hixie>
boogyman: so it doesn't solve the problem

[10:57:59.0000] <IZh>
Hixie: Hi. What's the purpose of lots of empty <span></span> in the spec?

[11:00:08.0000] <jgraham>
http://www2003.org/cdrom/papers/refereed/p391/p391-obendorf.html seems relevant

[11:00:31.0000] <Hixie>
jgraham: the feedback specifically is things like "i wish it didn't look like a christmas tree", "too bright and contrasty", "don't like the colour formatting", "excessive hyperlinks make it too busy", "it's a little cluttered and busy", "it's not the prettiest thing in the world", "dislike layout & font", "looks cheap", "ugly colors", "when everything is highlighted italic red green or blue it is hard to distinguish content"

[11:00:33.0000] <jgraham>
"Underlined links seem to substantially decrease the reading performance on Web pages and may add to the reasons why users donít like to read on the Web"

[11:02:20.0000] <jgraham>
Hixie: Those are all arguments in favour of more subtle design, not in favour of removing the most important elements needed to navigate the spec.

[11:02:23.0000] <Hixie>
(not clear that whoever formatted that page is allowed to comment on formatting, but... *reads*)

[11:02:33.0000] <Hixie>
jgraham: concrete suggestions welcome

[11:05:50.0000] <jgraham>
Hixie: Well so far I made one

[11:06:08.0000] <Hixie>
"To reduce the influence that different degrees of interest in the test items would have, we selected a very homogeneous user group. The target group consisted of regular and experienced internet users, as we wanted to assess the willingness of these users to adopt changes in the Web interface."

[11:06:26.0000] <Hixie>
+1 for making a plausible argument for why they only selected people within shouting distance of their office :-)

[11:07:18.0000] <IZh>
Hixie: Sorry. It seems there are no in latest version.

[11:07:45.0000] <Hixie>
IZh: hey, sorry, missed your question. dunno what could cause that, but probably a markup error on my side.

[11:10:16.0000] <jgraham>
Hixie: I also think that the green and the blue and the yellow don't really go together. The green italic text is quite hard to read, and I wonder if CSS-style boxes with a background colour and black text would work better for notes (more like examples)

[11:11:31.0000] <jgraham>
I am terrible at design though so I am really the wrong person to fix things

[11:12:11.0000] <IZh>
Hixie: please look at 4.12.4.2.7 at definition list after "Run the appropriate step..." It consists of only <dd> and no <dt>. Is it correct?

[11:13:24.0000] <Hixie>
jgraham: that paper's interesting, but the conclusion for the spec isn't to get rid of underlines and even less to make hyperlinks only visible on demand, imho. Assuming we treat reading the spec as more like their "link" tasks, it would suggest hyperlinks should be always visible (fewer errors in that case), and looking at the feedback of their overlay vs underline thing, it seems like a toss-up regarding which people like best.

[11:13:40.0000] <Hixie>
jgraham: yeah, same here

[11:13:52.0000] <Hixie>
jgraham: what's yellow?

[11:14:03.0000] <Ms2ger>
The sun?

[11:14:22.0000] <Hixie>
in the spec, doofus

[11:14:32.0000] <Hixie>
IZh: what's the heading of that section?

[11:14:37.0000] <Hixie>
IZh: (i don't have section numbers in the source)

[11:15:10.0000] <IZh>
Hixie: Path2d objects

[11:16:50.0000] <Hixie>
that's weird, wonder why the validator didn't catch that

[11:17:02.0000] <Hixie>
IZh: fixed, thanks

[11:17:59.0000] <IZh>
Hixie: I have bought one commercial validator. And of course couldn't test it against the spec. ;-)

[11:18:25.0000] <annevk>
There's commercial validators now?

[11:18:37.0000] <jgraham>
Hixie: Links on hover are yellow. And link targets

[11:18:49.0000] <IZh>
Hixie: I mean couldn't not test ;-)

[11:19:27.0000] <IZh>
annevk: Yes. There are some good.

[11:19:28.0000] <Hixie>
jgraham: oh the hover effect, ok

[11:20:56.0000] <annevk>
Hixie: I like the new Example / Note / Warning / etc. thing

[11:21:00.0000] <jgraham>
Hixie: I think the conclusions of the study are a) too suble link styling makes people not use links and b) too invasive link styling makes text hard to read. I think that dropping the underlines will help with linear reading

[11:21:05.0000] <IZh>
Hixie: by the way, what is the source for the spec? Xml?

[11:21:19.0000] <jgraham>
I doubt it will make the links invisible, so I don't think we'll hit the error case

[11:22:44.0000] <Hixie>
IZh: some weird variant of HTML with preprocessor directives

[11:23:37.0000] <Hixie>
jgraham: they specifically say in the study (without data sadly) that they think that links that are only distinguished by colour are too subtle (they think it would be the same as tplain text), so that would be case (a)

[11:24:10.0000] <IZh>
Hixie: validator also complains about very long lines. There is, for example, the table of named entities, that is only single line.

[11:24:15.0000] <jgraham>
Hixie: They say without data is about as valuable as I say the opposite without data :)

[11:24:38.0000] <jgraham>
Except that they are presumably trying to justify not taking the time to test that case

[11:25:15.0000] <Hixie>
IZh: that

[11:25:20.0000] <Hixie>
IZh: that's an error in the validator :-)

[11:25:27.0000] <Hixie>
jgraham: exactly :-)

[11:26:10.0000] <IZh>
Hixie: it only complains about syntax highlighting. Also is is not very huumsn

[11:26:26.0000] <IZh>
Hixie: human readable

[11:26:32.0000] <jgraham>
/me discovers that http://usability.gov doesn't underline links

[11:27:08.0000] <jgraham>
Actually I think the fact that so many sites now don't underline links sort of puts the anecdata on my side of the argument

[11:27:28.0000] <IZh>
Hixie: and some browsers performed bad when you try to view source of the document with such long lines.

[11:29:55.0000] <Hixie>
i find sites that don't underline links very confusing, personally

[11:31:56.0000] <annevk>
I think I agree with jgraham

[11:32:28.0000] <annevk>
color is quite a good indicator and the underline makes the text harder to parse

[11:37:43.0000] <Hixie>
so without the underline, how do you distinguish a <code> snippet that's a link from one that isn't?

[11:38:09.0000] <IZh>
Hixie: one long line contains 314187 characters. :-)

[11:38:18.0000] <Hixie>
IZh: yeah, it's machine-generted :-)

[11:42:03.0000] <IZh>
Hixie: the links to [CSSFONTLOAD] and [PAGEVIS] at the end of the spec are 404.

[11:42:13.0000] <annevk>
Hixie: maybe that should have the color of :link / :visited and simply use monospace

[11:42:41.0000] <Hixie>
annevk, sicking: ok, reload a whatwg spec, tell me how bad it is...

[11:42:45.0000] <annevk>
Hixie: :hover / :focus could add the underline

[11:43:52.0000] <Hixie>
IZh: sigh, w3c

[11:43:58.0000] <annevk>
Hixie: in http://url.spec.whatwg.org/#dom-url TypeError is grey

[11:43:59.0000] <Hixie>
anyone know the currently URLs of http://dev.w3.org/csswg/css-font-load-events/ and http://www.w3c-test.org/webperf/specs/PageVisibility/ ?

[11:44:19.0000] <Hixie>
annevk: yeah, that's a non-hyperlink, non-definition <Ccode> block.

[11:44:22.0000] <Hixie>
<code> even

[11:44:48.0000] <annevk>
so only code that's hyperlink or <dfn> is orange?

[11:44:54.0000] <IZh>
Hixie: Is this it? http://dev.w3.org/csswg/css-font-loading/

[11:45:17.0000] <annevk>
TabAtkins: ^^ might want to set up redirects

[11:45:51.0000] <IZh>
http://dev.w3.org/csswg/css-font-loading/

[11:45:59.0000] <IZh>
http://dev.w3.org/csswg/css-fonts-3/

[11:46:00.0000] <annevk>
Hixie: there's http://www.w3.org/TR/page-visibility/ can't find editor's draft :/

[11:46:21.0000] <Hixie>
IZh: none of those seem to define FontLoader... i wonder if FontLoader is dead or something

[11:46:29.0000] <Hixie>
annevk: currently, yeah

[11:46:39.0000] <Hixie>
annevk: i've no idea if that's reasonable

[11:46:51.0000] <annevk>
Hixie: FontLoader is dead I think

[11:47:01.0000] <Hixie>
huh

[11:47:07.0000] <Hixie>
guess i'd better file a bug to handle that...

[11:47:12.0000] <annevk>
Hixie: no editor's draft would mean no maintenance

[11:47:31.0000] <annevk>
Hixie: http://dev.w3.org/csswg/css-font-loading/ has an alternative AIP

[11:47:32.0000] <IZh>
Hixie: http://www.w3.org/TR/2012/WD-css3-fonts-20121211/ The old one defines it.

[11:47:33.0000] <annevk>
API*

[11:47:40.0000] <Hixie>
file a bug

[11:47:41.0000] <Hixie>
er

[11:47:43.0000] <Hixie>
fileD a bug

[11:47:50.0000] <Hixie>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=25812

[11:48:01.0000] <Hixie>
IZh: (thanks for finding these!)

[12:12:34.0000] <IZh>
Hixie: Is it good or bad when quoted string attributes spans across several lines?

[12:16:19.0000] <IZh>
Like: <a href=#syntax title="the

[12:16:30.0000] <IZh>
HTML syntax">HTML syntax</a>

[12:27:55.0000] <IZh>
There are some of these in the spec.

[12:31:26.0000] <caitp>
it works in current browsers, so presumably the parsing spec allows for it

[12:31:32.0000] <caitp>
unless it's just a happy accident

[12:36:29.0000] <IZh>
Hixie: In the end of the section "The WorkerGlobalScope common interface" there is empty link <a href=#dom-workerglobalscope-location></a> before the word "attribute".

[12:37:59.0000] <IZh>
Hixie: The same thing in the section "Standard metadata names": using the <code title=attr-lang><a href=#attr-lang></a></code> attribute...

[12:39:47.0000] <Hixie>
izh: looking...

[12:40:26.0000] <Hixie>
TabAtkins: what's the state of the art with respect to positioning something relative to an ancestor element (e.g. one with position:relative) for 'top', and relative to another (e.g. the root element or ICB) for 'left'?

[12:41:39.0000] <Hixie>
IZh: thanks, fixed

[12:41:43.0000] <SamB>
Hixie: don't you need nasty hacks for that?

[12:42:15.0000] <Hixie>
SamB: that's what i'm asking

[12:42:23.0000] <Hixie>
so far for elaborate cases i'm not finding any real solutions

[12:42:34.0000] <Hixie>
it's even worse because i have some elements with position:relative for unrelated reasons, too

[12:43:34.0000] <IZh>
What's the purpose of &blank;? How it differs from ordinary space?

[12:44:25.0000] <Hixie>
it's visible, for one

[12:44:40.0000] <Hixie>
it's used to show that there is a space, in code examples where spaces matter

[12:44:57.0000] <Hixie>
(this glyph used to be a lot more commonly used in computer manuals from a few decades ago)

[12:45:11.0000] <IZh>
Ahh... Sonething like '_' ?

[12:45:20.0000] <Hixie>
yeah

[12:45:37.0000] <Hixie>
jgraham: i've changed the :target style to not be yellow too.

[12:52:08.0000] <IZh>
I'm curious, will ever document title support markup? ;-) I want green window caption. ;-)

[13:03:32.0000] <Hixie>
IZh: given that document titles are getting less and less used in the UI, i doubt there's much demand to make them harder to implement :-)

[13:07:31.0000] <jgraham>
Hixie: I think that's a win

[13:09:02.0000] <SamB>
/me is greatly saddened by the disuse of document titles :-(

[13:10:11.0000] <SamB>
however, it's not bloody likely that they'll be getting any such fancy features

[13:11:02.0000] <SamB>
the places where they probably still are used -- normal WMs on *nix come to mind -- can't handle anything fancy anyway

[13:12:04.0000] <SamB>
/me sorta feels like it might be nice if stray tags were stripped rather than shown verbatim though

[13:17:40.0000] <IZh>
One more question. Is it possible to change facicon ob the fly?

[13:20:22.0000] <SamB>
IZh: well, what happens if you change the relevant link element(s)?

[13:21:06.0000] <IZh>
SamB: perhaps it will work.

[13:31:58.0000] <IZh>
 is available. And in the case of no connection it will display an error instead of old cached version. I spend lots of time in a waiting for cellular network to appear. Probably some pragmas could force the browsers to display old cached page when they can't fetch a new version instead of showing dumb error.

[14:33:24.0000] <JonathanNeal>
How are element queries coming along?

[15:28:37.0000] <TabAtkins>
Hixie: What is FontLoader and what were you using it for?  If you just want to load a font via JS, FontFace is constructable.

[15:28:58.0000] <TabAtkins>
Hixie: There is no way to position the top and left of an element relative to different things at the moment.

[15:39:37.0000] <Hixie>
TabAtkins: i don't recall. something in HTML. i filed a bug on myself to figure it out.

[15:39:57.0000] <Hixie>
TabAtkins: re positioning: k. anything on the radar for that?

[15:47:57.0000] <JonathanNeal>
To whomever it concerns, I have filed my latest element query pleas @ http://discourse.specifiction.org/t/element-queries/26/last

[15:54:40.0000] <TabAtkins>
Hixie: Nope, nothing right now.  I have plans, but no timeline for achieving them.

[15:54:48.0000] <Hixie>
k

[15:56:28.0000] <Domenic>
http://gridstylesheets.org/ is a related prolyfill/ideation exercise

[15:57:15.0000] <Domenic>
i want to try it on a small project and see how i feel afterward

[15:57:42.0000] <Domenic>
i could easily see it either being "wow this is amazing we must have this" or "meh that really doesn't work in practice, nice try"

[16:09:03.0000] <JonathanNeal>
Domenic: were you the one who replied to me?

[16:10:14.0000] <JonathanNeal>
If it was, I appreciate you citing TabAtkins’ blog as the canonical reply. But, at the same time, arrrrr! I had a bunch of links in my post, but discourse doesn’t let me add more than one or two.

[16:18:12.0000] <zewt>
are clipboard events those sort of broken ancient events that have side-effects when fired from script (like click)?

[16:19:03.0000] <zewt>
it doesn't seem like they are in testing, but hallvord implied that they are on the list (and he's apparently the editor of the clipboard spec)

[16:24:47.0000] <JonathanNeal>
Domenic: re: gss, it’s amazing that we can think up entirely different ways to write stylesheets, and its best marketing is still “now you can vertically center something”

[16:31:59.0000] <gsnedders>
Okay then, to continue my questioning from yesterday: which Chromebook do I want? Given they basically all have 1366x768 displays, I guess there's no point in going for one of the larger ones? AFAICT, the HP Chromebook 11 seems to have the best screen of them, but it does have a now ancient SoC in it…

[16:38:21.0000] <JonathanNeal>
gsnedders: that sounds all right. I’m very productive on 1440x900.

[16:41:22.0000] <gsnedders>
/me vaguely wonders about selling his tablet

[16:41:57.0000] <gsnedders>
I just don't use it that much…

[16:50:45.0000] <JonathanNeal>
gsnedders: i used mine for one project, and my 1 year old found a better use for it, namely the tinkerbell film series.

[16:52:19.0000] <gsnedders>
All the Chromebooks seem to be somewhat flawed. The HP Chromebook 11 has a wonderful screen, but opinions are mixed on the keyboard, and apparently performance isn't brilliant with a few tabs open… On the other hand, the Dell Chromebook 11 has a less good screen but better everything else…


2014-05-20
[17:07:21.0000] <TabAtkins>
gsnedders: Buy a Pixel.

[17:08:22.0000] <gsnedders>
TabAtkins: no. :)

[17:08:37.0000] <TabAtkins>
Too pricey, or does it fail one of your other criteria?

[17:08:59.0000] <gsnedders>
Too pricey. If I'm dropping that money, I'd get a Macbook of some variety.

[17:11:31.0000] <gsnedders>
(and then just entirely replace my existing MBP, instead of getting something more to replace my tablet than anything else)

[17:54:25.0000] <zewt>
the Most Annoying Thing On The Internet: http://social.msdn.microsoft.com/Forums/en-US/53ae87d1-dd83-4a44-8303-4a31c9c37015/stopping-scrollviewer-from-auto-scrolling-when-item-gets-focus

[17:54:35.0000] <zewt>
"how do I do this thing?" "never mind, here's the solution" *404*

[17:56:25.0000] <caitp>
there are many annoying things on the internet, there will be many more in the future

[17:56:33.0000] <caitp>
exponentially more

[19:18:36.0000] <zcorpan>
Hixie: i can fix the autorotate thing relatively soon i think

[19:29:24.0000] <MikeSmith>
 zcorpan John told me he'd replied -- replied to you, I think.

[19:33:14.0000] <zcorpan>
MikeSmith: i don't see anything in my inbox and i don't see anything in http://lists.w3.org/Archives/Public/www-archive/2014May/thread.html

[19:34:55.0000] <zcorpan>
MikeSmith: he had replied to denis in private before all three of us emailed him and cc-ed www-archive i think, but i wanted a public record

[19:36:20.0000] <zcorpan>
MikeSmith: so the critic issue actually isn't resolved yet afaict

[19:36:41.0000] <Hixie>
zcorpan: cool. it sounds pretty straightforward. file a bug on me once you've done it to add it to the index. thanks!

[19:37:15.0000] <zcorpan>
Hixie: ok

[19:38:13.0000] <MikeSmith>
zcorpan: OK, when we have cases like this I'd like to suggest we open separate issues and then close the PR, if this kind of problem is the only thing blocking it

[19:38:33.0000] <MikeSmith>
zcorpan: I think it's bad for everybody to keep PRs hanging open for months on end

[19:39:03.0000] <MikeSmith>
zcorpan: they get stale and people lose interest in following up on them

[19:39:54.0000] <MikeSmith>
zcorpan: or in in this specific case, the guy who was responsible for that PR no longer is paid to work on testing, and has moved on

[19:40:21.0000] <zcorpan>
MikeSmith: i don't disagree that it's bad to have PRs open for a long time

[19:40:33.0000] <MikeSmith>
zcorpan: I'll ping John again and ask him if he can reply to your www-archive message

[19:41:09.0000] <zcorpan>
ok great

[19:42:01.0000] <zcorpan>
Hixie: as for styling, e.g. the stylesheet for http://dev.w3.org/csswg/cssom/ is a lot less busy than the whatwg stylesheet, but still has enough visible cue (at least for me) to see where the links are

[19:44:13.0000] <zcorpan>
Hixie: i'm not saying that stylesheet is without problems, but i agree with jgraham that it should be possible to create a stable and subtle yet usable style. i'm not sure i agree with jgraham about the underline, it doesn't bother me and something other than color is necessary for people with some color-blindnesses (unless you can find a color that works for all common color blindnesses)

[19:44:56.0000] <zcorpan>
(maybe a lighter shade would work to make a contrast difference even if you can't distinguish the color?)

[19:45:35.0000] <MikeSmith>
Hixie: as far as the undelrines, what zcorpan said

[19:45:56.0000] <MikeSmith>
people who have a problem with underlines are going to have a hard time on the internet

[19:47:33.0000] <MikeSmith>
Hixie: the underlines have a utility -- exactly the utility that you mentioned earlier (distinguishing, e.g., between hyperlinked <code> and unhyperlinked -- or whatever specific case you mentioned)

[19:48:36.0000] <MikeSmith>
Hixie: I think some people are willing to sacrifice the utility of the spec to aesthetics or making it look less "busy" or however they're stating it

[19:49:57.0000] <SamB>
hey, I've heard of this thing called alternate stylesheets

[19:50:00.0000] <zcorpan>
(i don't personally have a problem with the "busy" style, so long as it doesn't do the fading thing)

[19:50:19.0000] <MikeSmith>
zcorpan: yeah

[19:50:23.0000] <zewt>
things nobody should ever have to use: alternate stylesheets

[19:50:45.0000] <zcorpan>
SamB: that has already been brought up

[19:50:54.0000] <SamB>
'kay

[19:51:55.0000] <zewt>
don't know what's changed, but the main TOC is pretty hard to look at right now, probably too much space around everything

[19:52:39.0000] <MikeSmith>
zcorpan: I could live without the fading thing, but I thought it was a good clever solution to the problem Hixie was trying to solve. Now, I think, it would be nice to solve that problem if it's solvable, but I'm not sure it is, and maybe it's not worth spending a lot of time trying to solve.

[19:53:19.0000] <MikeSmith>
zewt: hmm yeah maybe there's too much line space there now

[19:53:27.0000] <zewt>
looks like all numbered lists have that problem

[19:53:45.0000] <MikeSmith>
zewt: ah yeah, seems so

[19:54:01.0000] <MikeSmith>
I guess Hixie should just rachet that back down a bit

[19:54:19.0000] <zewt>
dotted lists are fine

[19:55:14.0000] <MikeSmith>
anyway it would be a shame to see that spec change in ways that it less usable for implementors, even it if it made it slightly more usable for others

[19:56:57.0000] <MikeSmith>
I've never had any problem with the colors or anything else. in fact, the opposite -- I really appreciate that all those various cues are there are value them. I couldn't care less if it looks "busy" as long as it makes it easier for me to find what I need

[19:57:14.0000] <MikeSmith>
I'm not reading it for fun

[19:58:04.0000] <MikeSmith>
if people want less busy, there's always IETF style

[19:58:25.0000] <zewt>
80 column with hardcoded page breaks for 80x55 daisy wheel printers?

[19:59:13.0000] <MikeSmith>
zewt: yeah but I meant more the lack of colors and the lack of hyperlinks

[20:00:20.0000] <SamB>
I like it how zewt says it though

[20:00:26.0000] <SamB>
I mean, it's funnier that way

[20:00:31.0000] <SamB>
not that I'd want to see the spec like that

[20:00:45.0000] <zewt>
i didn't have any issues with the formatting, my main issue with the spec is just wishing it loaded faster, heh

[20:01:13.0000] <zewt>
(maybe if the multipage referencing worked better i'd use it, though being able to text search the whole spec is probably also hard to do without)

[20:01:26.0000] <SamB>
so you want it to be less busy on the *inside*

[20:01:34.0000] <SamB>
me too

[20:01:58.0000] <zewt>
i don't know the first thing about why it's so slow, heh ("it's huge" is obviously a part, but I assume it's more complicated than that)

[20:02:10.0000] <SamB>
I remember a time when I could actually load the single-page spec

[20:02:58.0000] <zewt>
guess I could load it with no styles or scripts and find out

[20:03:26.0000] <TabAtkins>
It's huge, it does some JS loops over the whole document, and I'd bet the selectors aren't well-optimized.

[20:06:17.0000] <zewt>
"no copyright is asserted on this file"? is that really a valid way to disclaim copyright? heh

[20:10:03.0000] <MikeSmith>
Hixie: about the validator not catching the <dd> thing before you fixed it, I think it might have been because validator.nu hasn't been synched for a while and has an older version of the schema that wasn't going <dl><dt><dd> checking correctly for a while after we made the change to allow <script> and <template> in there

[20:11:30.0000] <MikeSmith>
Hixie: I think it works as expected in the current source and at http://sideshowbarker.net:8888/ and http://validator.w3.org/nu/

[20:22:35.0000] <TabAtkins>
zewt: No, it's not a valid way.  Copyright is automatic regardless of what you say.

[20:23:03.0000] <TabAtkins>
At least in US law, and most other countries.

[20:24:57.0000] <Hixie>
MikeSmith: cool

[20:25:10.0000] <Hixie>
i should probably change to ssb.n:8888

[20:25:36.0000] <Hixie>
btw re the style sheet, there were some substantial changes earlier today, so i'm letting it sit for a few days to see how people like it

[20:26:38.0000] <Hixie>
(in particular, i think it might be less busy that the /csswg/cssom/ style sheet at this point)

[20:35:07.0000] <TabAtkins>
Still super-hate the fading thing.

[20:35:25.0000] <TabAtkins>
I didn't hate it earlier, but it's fading on me. ^_^

[20:36:22.0000] <Hixie>
it's long gone

[21:14:12.0000] <TabAtkins>
Oh, hm, must need to force-refresh.

[21:33:14.0000] <zcorpan>
MikeSmith: can you look into the w3c-test:mirror thing? i want some people to look at the tests without having them clone and get wptserve running

[21:34:18.0000] <zcorpan>
MikeSmith: the PR is https://github.com/w3c/web-platform-tests/pull/996

[21:35:27.0000] <zcorpan>
oh i see you replied in #testing

[21:41:07.0000] <MikeSmith>
zcorpan: checkong on it now

[21:50:32.0000] <zcorpan>
MikeSmith: thanks!

[21:50:46.0000] <zcorpan>
MikeSmith: maybe i don't have the right permissions, like jgraham said?

[21:52:40.0000] <MikeSmith>
yeah checking on that too

[21:55:35.0000] <MikeSmith>
zcorpan: http://w3c-test.org/submissions/996/

[21:55:41.0000] <MikeSmith>
still working on the underlying cause

[21:56:20.0000] <zcorpan>
MikeSmith: thank you

[21:58:41.0000] <MikeSmith>
zcorpan: fwiw as far as the underlying cause, I think it might be a github bug

[21:58:59.0000] <MikeSmith>
because the script relies on https://api.github.com/repos/w3c/web-platform-tests/collaborators

[21:59:14.0000] <MikeSmith>
the sync script

[21:59:37.0000] <MikeSmith>
zcorpan: and you're not listed there and neither am I

[21:59:51.0000] <zcorpan>
weird

[22:00:02.0000] <MikeSmith>
yeah

[22:00:27.0000] <zcorpan>
i can report it to github if you like

[22:00:38.0000] <MikeSmith>
zcorpan: yeah please do if you have time

[22:01:44.0000] <MikeSmith>
zcorpan: and in the mean time I guess the workaround to get something mirrored is to ask somebody who's actually listed there to add a comment

[22:02:34.0000] <MikeSmith>
jgraham is not there either, no Ms2ger, so I guess we really should be checking it against some other list if there is one

[22:03:13.0000] <zcorpan>
MikeSmith: what's your github handle?

[22:03:25.0000] <MikeSmith>
zcorpan: sideshowbarker

[22:08:17.0000] <zcorpan>
MikeSmith: ok reported. didn't get a URL or anything for the issue and i failed to get under 140 chars so i didn't get a gold star

[22:08:32.0000] <zcorpan>
but i'll let you know when i get a reply

[22:13:12.0000] <MikeSmith>
zcorpan: thanks

[22:13:17.0000] <MikeSmith>
win 27

[23:05:22.0000] <zcorpan>
Hixie: i think i didn't write ""; but actually wrote "list of available images"; in https://www.w3.org/Bugs/Public/show_bug.cgi?id=25797

[23:06:07.0000] <zcorpan>
Hixie: is there a bug somewhere tampering with it or am i mistaken about what i wrote? :-)

[23:06:54.0000] <Hixie>
i don't log anything for file-bug.cgi, so dunno

[23:07:06.0000] <zcorpan>
ok

[23:07:11.0000] <Hixie>
but i can't imagine what i could do to cause that :-)

[23:07:30.0000] <zcorpan>
yeah i dunno either

[23:07:42.0000] <zcorpan>
maybe it was what i wrote

[23:08:06.0000] <Hixie>
wait, i do log something

[23:08:11.0000] <Hixie>
when did you file this? just now?

[23:08:24.0000] <zcorpan>
2014-05-19 07:37:09 UTC

[23:09:19.0000] <Hixie>
/me tries to work out what time zone he's in

[23:09:30.0000] <Hixie>
that's either two minutes in the future or an hour ago

[23:09:47.0000] <Hixie>
wait wtf

[23:09:52.0000] <Hixie>
this computer's clock is WAY off

[23:11:45.0000] <IZh>
Hixie: Hi. Last PDF was not generated because of missing fonts. It seems there are new rare characters in the spec. :-) I'll find suitable font and regenerate it.

[23:12:06.0000] <Hixie>
hehe thanks :-)

[23:12:54.0000] <Hixie>
zcorpan: ok according to the logs if there's a bug it's somewhere in Apache or Perl's core libraries

[23:13:17.0000] <Hixie>
zcorpan: because my code gets the text, then logs it immediately before fiddling with it, and it logged "".

[23:14:17.0000] <zcorpan>
Hixie: so that means it's unlikely that there is a bug

[23:14:42.0000] <zcorpan>
i can try filing a new bug with what i think i wrote, and see if it reproduces

[23:14:48.0000] <Hixie>
occam's razor suggests there isn't a bug. murphy's law suggests there is. your call. :-)

[23:16:32.0000] <zcorpan>
didn't reproduce

[23:19:24.0000] <IZh>
I have written a script that looks for missing characters and prints font list that contains it sorted by number of missing characters found in each font. :-)

[23:50:13.0000] <IZh>
Hixie: I've fixed it. :-)

[23:51:50.0000] <IZh>
Hixie: Currently the document needs 15 fonts. (And some web-fonts too.)

[00:47:01.0000] <annevk>
Hixie: I think the only reason you wanted FontLoader or some such is to be able to have a solution for fonts in workers

[00:47:07.0000] <annevk>
Hixie: in combination with <canvas> in workers

[00:56:58.0000] <TabAtkins>
Which exists!

[00:57:58.0000] <TabAtkins>
I need to make FontFace objects transferable, but you can definitely construct them inside of a worker and add them to the font source.

[00:58:22.0000] <TabAtkins>
Hm, I'm adding a .fonts property to the worker global.  Is that okay?  Should I be doing something else?

[00:58:29.0000] <TabAtkins>
It's added to document in normal pages.

[01:10:29.0000] <annevk>
TabAtkins: why not CSS.fonts ?

[01:11:49.0000] <TabAtkins>
annevk: Good question, I guess.

[01:20:49.0000] <annevk>
TabAtkins: I guess another thing to think about is how this would work with modules

[01:21:32.0000] <annevk>
TabAtkins: presumably once you import "css" this should be imported as well, but we haven't really explored the layering of the subsystems I suppose

[01:21:48.0000] <JakeA>
Hixie: What's your take on promise-vending .loaded() methods (http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2014-March/253949.html)? The HTML Imports spec wants it (https://www.w3.org/Bugs/Public/show_bug.cgi?id=25007) but it'd be great to have it on other <link> elements too (and maybe img, script)

[01:47:22.0000] <annevk>
JakeA: why methods?

[01:52:10.0000] <JakeA>
annevk: because they're of the moment. As in, img.src = foo; img.loaded().then(...); img.src = bar; img.loaded().then(...)

[01:52:51.0000] <JakeA>
felt like methods made more sense, but it wouldn't break my world if they were properties :D

[02:09:09.0000] <annevk>
JakeA: if you invoke loaded() multiple times, do you get the same object?

[02:10:20.0000] <JakeA>
annevk: Yes, unless there's a good reason not to. Of course, as soon as you change "src" the promise vended by loaded() changes

[02:10:33.0000] <annevk>
JakeA: in that case a property seems fine

[02:11:40.0000] <JakeA>
annevk: navigator.serviceWorker.whenReady should be the same I guess

[02:11:51.0000] <JakeA>
(although I hate that API with a passion, but don't have a better idea)

[02:12:03.0000] <annevk>
JakeA: yeah makes sense

[02:34:37.0000] <tobie>
It feels kind of weird to have a promised not related to the action itself.

[02:35:24.0000] <tobie>
As in: img.loadResource(url).then(...

[02:42:08.0000] <JakeA>
tobie: I don't think it's a big deal. People have been using whatever.ready(callback) in various libraries

[02:42:47.0000] <annevk>
tobie: it's just status observation, seems fine for one-offs

[02:44:52.0000] <tobie>
Yeah. There seems to be cases where there's no other solution than that one. Thinking out loud really, but it seems it would help if we can classify those.

[02:47:50.0000] <hsivonen>
mathiasbynens: validator.nu seems to be up for me. maybe it was just busy earlier?

[02:50:41.0000] <tobie>
Seems most of them are around the declarative/imperative boundary (not sure whether this helps).

[02:55:23.0000] <mathiasbynens>
hsivonen: yeah, works fine now. I’ll keep an eye on it

[03:06:32.0000] <annevk>
tobie: well, serviceWorker.whenReady is not on that boundary I think

[03:07:03.0000] <JakeA>
Neither is document.ready()

[03:07:12.0000] <annevk>
tobie: I think the pattern is more that if you have something that multiple parties might want to observe, you need to expose it independently from the action

[03:07:25.0000] <tobie>
doc.ready is.

[03:07:25.0000] <annevk>
tobie: as a status-promise

[03:07:30.0000] <JakeA>
Or anyParserInsertedElement.loaded()

[03:07:46.0000] <annevk>
(again, I'd prefer document.ready and ele.loaded)

[03:08:02.0000] <JakeA>
ah yes, sorry

[03:08:06.0000] <tobie>
you mean props?

[03:08:11.0000] <tobie>
I agree.

[03:08:29.0000] <JakeA>
document.querySelector('img').loaded.then(...)

[03:09:09.0000] <mathiasbynens>
document.images[0].loaded.then(…)

[03:09:21.0000] <mathiasbynens>
</code-golf>

[03:09:45.0000] <JakeA>
haha

[03:10:26.0000] <JakeA>
but your IRC handle is longer, so it almost balances out

[03:12:59.0000] <tobie>
None of these (.ready, .ready() .whenReady()) are particularly nice. :(

[03:14:10.0000] <JakeA>
What's not nice about it? Do you feel the same about jquery's $(document).ready(callback)?

[03:14:21.0000] <tobie>
yeah. it's terrible.

[03:15:06.0000] <tobie>
but less ugly with a callback then with a promise.

[03:16:18.0000] <JakeA>
Got anything more constructive? :D

[03:16:41.0000] <tobie>
Man, I wish I had.

[03:18:11.0000] <TabAtkins>
FontFace uses a .loaded attribute to expose a promise.

[03:18:27.0000] <TabAtkins>
tobie: A promise is a callback. ^_^

[03:19:42.0000] <JakeA>
TabAtkins: Ohh, I didn't realise that. Well, that's all the more reason for these to be attributes & not methods

[03:19:50.0000] <tobie>
agreed.

[03:19:52.0000] <annevk>
Oh right, TabAtkins is in Seoul, it all makes sense now

[03:20:01.0000] <TabAtkins>
Hah, wondering about my timezone?

[03:20:03.0000] <tobie>
when(font.loaded).then

[03:20:18.0000] <TabAtkins>
tobie: ??? No, font.loaded.then(...)

[03:20:22.0000] <tobie>
(sorry, toying with stuff)

[03:20:25.0000] <annevk>
TabAtkins: I was doing the math and at 3-4AM you're usually not around

[03:20:49.0000] <TabAtkins>
annevk: Yeah, checking gavin's stats I'm virtually never around in the 12am to 6am block.

[03:21:40.0000] <TabAtkins>
Still a good bit behind jgraham in the stats.  I don't think I'll ever move past 5th place.

[03:22:12.0000] <annevk>
Whoa, Hixie made a solid comeback :-)

[03:22:23.0000] <JakeA>
await img.loaded;

[03:22:38.0000] <annevk>
JakeA: you can almost read it

[03:22:52.0000] <JakeA>
wfm

[03:23:19.0000] <tobie>
Only concern I still have is loaded feels a tad like a boolean

[03:23:36.0000] <TabAtkins>
tobie: Was my concern too, but shrug.

[03:23:41.0000] <tobie>
yeah.

[03:23:54.0000] <tobie>
What's gavin's stats?

[03:24:06.0000] <annevk>
tobie: see /topic

[03:24:14.0000] <tobie>
duh

[03:28:14.0000] <jgraham>
Also glob has stats under "about". Not as detailed as gavin's though

[03:28:36.0000] <jgraham>
But using more data, I think?

[03:28:45.0000] <TabAtkins>
dear gavin (or gavin__ ), your stats page doesn't handle unicode properly.

[03:29:11.0000] <TabAtkins>
Saw some curly quotes turned into â€œ

[03:30:11.0000] <TabAtkins>
/me will never get over that Divya holds both first and second place for most all-caps shouting.

[03:30:51.0000] <TabAtkins>
Even when you cut her shouting in half, she beats everyone else.

[03:34:10.0000] <jgraham>
I have a theory that the most productive place to write documentation is on the train. Maybe I should just go and sit on the circle line for the rest of the day.

[03:34:31.0000] <jgraham>
(yes, I know you can't actually just go round and round the circle line anymore)

[03:34:36.0000] <Ms2ger>
Sounds like a theory to be tested

[03:35:08.0000] <TabAtkins>
I certainly like writing on the train.

[03:42:43.0000] <JakeA>
annevk: Looking at https://github.com/slightlyoff/ServiceWorker/issues/235#issuecomment-40742195 - agree the tagging thing is weird, but what can fetchEvent.default() resolve to?

[03:49:26.0000] <JakeA>
annevk: event.default() could do a fetch but return OpaqueResponse for redirects. Could say that OpaqueResponse redirects don't go back through the serviceworker

[03:49:37.0000] <JakeA>
feels like trading one kind of magic for another

[03:50:33.0000] <annevk>
JakeA: I think part of the problem is that you're not observing this from the perspective of how APIs use Fetch (the platform layer, not the API)

[03:50:46.0000] <annevk>
JakeA: most APIs use Fetch and have it follow redirects

[03:51:19.0000] <annevk>
JakeA: the navigate action uses Fetch and explicitly tells it to not follow redirects, it's the only part of the platform that does that as far as I know (and maybe AppCache now?)

[03:51:58.0000] <annevk>
JakeA: so in the typical case all redirects will be followed and you get back a normal Response

[03:52:33.0000] <annevk>
JakeA: in the navigate case you can already get back an OpaqueResponse as the user can navigate away from your site

[03:53:35.0000] <annevk>
JakeA: so there we'd hand back an OpaqueResponse for redirects (because Fetch was instructed not to follow them) and allow the navigate action to inspect that and take appropriate action

[03:54:37.0000] <annevk>
JakeA: but I don't think explaining this in terms of fetch() helps, as that might throw away CSP things, priorities, etc.

[03:55:34.0000] <annevk>
JakeA: also, there's some things we need to consider with respect to what happens when the user navigates away and the service worker hands back a generated response or some such

[03:56:35.0000] <JakeA>
annevk: So, if I have <link rel=stylesheet href=blah>, it goes off into the fetch layer, does its redirects, and gives the page its response. How is the base url of the CSS handled, via the response url?

[03:58:19.0000] <annevk>
JakeA: yes

[03:58:31.0000] <annevk>
(assuming no service workers in play)

[04:11:31.0000] <zcorpan>
Hixie: i ran a screenshot of the spec through a color blindness simulator, and it seems OK with protanopia and deuteranopia (1-5% in males), but the link is almost the same as the surrounding text with tritanopia (< 0.003% of males and females)

[04:12:14.0000] <zcorpan>
(unvisited link, didn't include a visited link in the image)

[04:13:35.0000] <wilhelm>
jgraham: So like Yamanote parties, just more boring? :D

[04:15:13.0000] <zcorpan>
http://www.etre.com/simulate.php?image=defa540b013c2e5c3fdfcbd79b63c773&condition=tritanopia&type=jpeg - tritanopia (zoom in, i guess the blurry result can simulate some other visual impairedness :-P)

[04:26:13.0000] <zcorpan>
Hixie: that said, i think the current style is an improvement

[04:29:06.0000] <jgraham>
wilhelm: I'm not sure I would want to try and work on the Tokyo metro

[04:35:42.0000] <JakeA>
annevk: Can I get a sanity check of this? https://github.com/slightlyoff/ServiceWorker/issues/235#issuecomment-43614413

[04:38:19.0000] <zcorpan>
Hixie: i'm not entirely sure about the :target styling. i think i'd want the arrow and its box to be smaller. some color for that thing seems OK to me

[04:41:12.0000] <wilhelm>
zcorpan: It could be fun to have a designer play with a revision of the stylesheet.

[04:41:16.0000] <wilhelm>
/me has one in mind. (c:

[04:42:07.0000] <zcorpan>
wilhelm: like http://developers.whatwg.org ?

[04:43:35.0000] <wilhelm>
Oh, I hadn't seen that one. That's certainly more readable. (c:

[04:44:42.0000] <zcorpan>
Hixie: the "next" link at the bottom is a nice thing in the dev version

[04:49:10.0000] <annevk>
JakeA: looks wrong

[04:50:17.0000] <annevk>
JakeA: default() just needs to use incoming "fetchStandardRequest" that could have manualRedirect either set to true or false

[04:50:23.0000] <zcorpan>
benschwarz_: seems like the svg doesn't load/exist in http://developers.whatwg.org/content-models.html#kinds-of-content

[04:50:47.0000] <annevk>
JakeA: e.g. <img src=...> comes in SW, SW does default(), redirects will be followed

[04:51:28.0000] <JakeA>
annevk: isn't that correct?

[04:52:30.0000] <annevk>
JakeA: oh wait, I missed the if statement

[04:53:42.0000] <zcorpan>
annevk: so <img> is going to be able to load two resources in parallel

[04:53:59.0000] <zcorpan>
in case that affects things for SW

[04:54:00.0000] <annevk>
JakeA: even so, there's no castToOpaqueResponse needed, that should be wrapped automagically

[04:54:13.0000] <annevk>
zcorpan: that'll just be two events quickly after another

[04:54:54.0000] <annevk>
zcorpan: SW can't do true parallel

[04:55:58.0000] <annevk>
JakeA: as in, the way I think this should work is that .default() just hands the request back to Fetch and Fetch does the rest

[04:56:10.0000] <jgraham>
wilhelm++ for getting a designer to play with the stylesheet. Although they have to understand the functional requirements (most of the things that have style have it for a reason, but the styles that they have aren't necessarily good)

[04:56:29.0000] <annevk>
JakeA: and then Fetch hands a Response, potentially Opaque, back to .default()'s promise

[04:56:56.0000] <zcorpan>
annevk: not sure i follow, but then i basically know nothing about SW :-)

[04:57:21.0000] <annevk>
zcorpan: the network stack is still on a single thread

[04:58:04.0000] <annevk>
zcorpan: anyway, it should be fine

[04:58:10.0000] <zcorpan>
annevk: so you can only fetch one thing at a time in a SW?

[04:58:26.0000] <annevk>
zcorpan: you can queue one thing at a time

[04:58:49.0000] <annevk>
zcorpan: it's a subtle but important difference, and that's not really limited to SW

[04:59:12.0000] <zcorpan>
but then you could have mutliple things fetching at the same time?

[05:00:00.0000] <annevk>
zcorpan: yeah, it's not really different from constructing several XHRs in a row and then invoking send() in them in a row and waiting for data to come back

[05:01:12.0000] <zcorpan>
ok. so i didn't mean that <img> is able to queue two things in parallel. i meant that it could start fetch A at time T and start fetch B at time T+x which would not necessarily abort A

[05:02:11.0000] <wilhelm>
jgraham: Indeed. (c:

[05:02:42.0000] <annevk>
zcorpan: I can't think offhand of places that assume 1 API : 1 fetch

[05:02:59.0000] <zcorpan>
ok

[05:03:25.0000] <annevk>
zcorpan: well... sounds like a potential problem for integrity=""

[05:03:38.0000] <annevk>
zcorpan: and of course you can't control crossorigin for each fetch

[05:04:30.0000] <annevk>
zcorpan: you might want to email public-webappsec⊙wo with regards to integrity="" I suppose, given that this kind of loading is actually a feature people want to use

[05:04:45.0000] <annevk>
s/given/provided/

[05:05:01.0000] <zcorpan>
annevk: do you have a pointer to integrity=""?

[05:05:16.0000] <zcorpan>
annevk: it's not so much want to use, more required for web compat

[05:05:16.0000] <annevk>
zcorpan: http://w3c.github.io/webappsec/specs/subresourceintegrity/

[05:05:33.0000] <annevk>
zcorpan: basically allows you to specify a hash for the resource

[05:08:46.0000] <zcorpan>
so... for example let's say you have <img src=foo integrity=bar> and then, while foo is loading but the dimensions are known, you do .src = 'baz'; .integrity = 'quux'; which starts a pending fetch. then foo completes loading and the UA compares the hash and finds that it doesn't match quux?

[05:11:54.0000] <zcorpan>
maybe the integrity thing could check the value of the integrity attribute at the time you resolve the URL or at the time you start the fetch, instead of when you're done fetching

[05:13:13.0000] <annevk>
zcorpan: it could be an argument for tight coupling the integrity data with the fetch

[05:13:32.0000] <zcorpan>
seems like it does take the integrity at the time of start of fetch

[05:14:40.0000] <zcorpan>
also: monkey patching

[05:14:52.0000] <annevk>
zcorpan: yeah, temporarily

[05:15:38.0000] <annevk>
Temporarily monkey patching is actually somewhat beneficial, it's just that people don't always follow up on cleaning up

[05:15:41.0000] <zcorpan>
it seems like the general approach is compatible with <img>'s dual fetching

[05:15:49.0000] <zcorpan>
yeah

[05:17:42.0000] <zcorpan>
do people want to use integrity together with picture/srcset ?

[05:19:10.0000] <annevk>
prolly

[05:19:26.0000] <zcorpan>
<img srcset="foo.jpg 100w integrity(foo), bar.jpg 200w integrity(bar)"> maybe

[05:19:41.0000] <annevk>
if that works that could be nice

[05:20:08.0000] <annevk>
can you do url(foo.jpg) too?

[05:20:14.0000] <zcorpan>
no

[05:20:18.0000] <annevk>
oh

[05:20:35.0000] <annevk>
I would expect CSS to end up with fetch(foo.jpg, other stuff here)

[05:20:46.0000] <annevk>
and deal with integrity that way if we want it there

[05:21:49.0000] <zcorpan>
can you give an example of how it would work together with some property (like background-image, say)?

[05:25:58.0000] <annevk>
background-image:fetch(foo.jpg, some new syntax)

[05:26:24.0000] <jgraham>
that's pretty ugly

[05:26:56.0000] <jgraham>
(using "fetch" there sounds very imperative whereas css is typically declarative)

[05:28:40.0000] <zcorpan>
annevk: i think foo.jpg will need to be either a string or a url() to remain sanity

[05:29:06.0000] <zcorpan>
but i also agree with jgraham about the imperative part

[05:29:28.0000] <annevk>
zcorpan: I'm sort of indifferent on the name and the syntax particulars

[05:29:41.0000] <zcorpan>
ok

[05:29:58.0000] <zcorpan>
so now there's a thing called image() in css

[05:30:05.0000] <zcorpan>
with some new syntax

[05:30:18.0000] <annevk>
it's more that we need to be able to pass more data along with a URL

[05:30:19.0000] <zcorpan>
so maybe integrity can go in that

[05:30:40.0000] <annevk>
can image() be used for SVG subresources and shapes and things?

[05:30:52.0000] <annevk>
also doesn't work for @import

[05:34:24.0000] <zcorpan>
yeah i guess we've deferred on supporting crossorigin for @import

[05:37:44.0000] <annevk>
:/

[05:38:35.0000] <zcorpan>
maybe i can bring it up tomorrow

[05:38:47.0000] <zcorpan>
is there an email somewhere about this?

[05:39:04.0000] <annevk>
don't think so

[05:39:12.0000] <zcorpan>
can you send one to www-style? :-)

[05:39:18.0000] <annevk>
well, there's a long thread on public-fx somewhere

[05:39:30.0000] <annevk>
regarding what to do with shapes and SVG and what not and how they can all work together

[05:41:22.0000] <annevk>
how can you figure out if two things happen in the same task?

[05:42:26.0000] <zcorpan>
/me doesn't follow

[05:44:27.0000] <annevk>
http://dump.testsuite.org/xhr/upload-events.html I want to know if (upload) "loadend: 1" is in the same task as "xhr onreadystatechange: 2"

[05:46:19.0000] <annevk>
Hmm, in Chrome they are not

[05:54:30.0000] <zcorpan>
annevk: like load() a video in the first event and check the networkState in the second event

[05:55:03.0000] <annevk>
zcorpan: for next time :-)

[05:55:44.0000] <zcorpan>
annevk: if it's NETWORK_NO_SOURCE then they were the same task, if it's NETWORK_EMPTY then they were separate tasks

[05:56:08.0000] <zcorpan>
for a <video> without src or source

[05:58:42.0000] <zcorpan>
annevk: do you have a pointer to public-fx thread?

[06:00:45.0000] <zcorpan>
annevk: otherwise, please send a short message to www-style so i can bring it up tomorrow. now i need to sleep

[06:02:34.0000] <annevk>
zcorpan: around http://lists.w3.org/Archives/Public/public-fx/2013AprJun/thread.html#msg176

[06:11:27.0000] <zcorpan>
annevk: thx

[06:38:52.0000] <foolip>
annevk: but note that <video> doesn't use tasks as per spec in at least WebKit, Blink and Presto, so if it doesn't work be careful about which code to blame :)

[06:39:41.0000] <jgraham>
foolip: That sounded a lot like "if it doesn't work, blame foolip" :)

[06:42:59.0000] <foolip>
jgraham: that wouldn't be entirely unfair :)

[06:52:46.0000] <annevk>
I wonder what happend to HTTPbis https://www.w3.org/Bugs/Public/show_bug.cgi?id=25097#c0

[06:53:03.0000] <JakeA>
annevk: if the request is to the same origin, but it responds with a redirect to /somewhere-else/?secret=1234567890, will that be an OpaqueResponse?

[06:53:29.0000] <JakeA>
annevk: I thought it wouldn't be, which is why I added the cast

[06:55:17.0000] <annevk>
JakeA: yeah, currently Fetch does not say that because the redirect would not be exposed to script, but once that's an option I'll make sure to do that right at the source

[06:55:41.0000] <MikeSmith>
annevk: yeah I thought I remembered seeing a tweet from Julian months ago that implied it had been sent to the IETF editor for publication

[06:57:14.0000] <MikeSmith>
annevk: btw html5.org/tools/web-apps-tracker is hanging atm

[06:57:34.0000] <annevk>
MikeSmith: prolly means svn.whatwg.org is hanging

[06:57:50.0000] <annevk>
hmm no

[06:59:17.0000] <annevk>
MikeSmith: seems to work again

[06:59:43.0000] <MikeSmith>
annevk: yeah wfm too now

[07:40:47.0000] <zewt>
annevk: whew? (re: dodging another onclick)

[07:41:02.0000] <annevk>
zewt: I have no idea what is going on

[07:41:15.0000] <annevk>
zewt: I blame DOM Level 3 Events for not cleaning this up

[07:41:27.0000] <zewt>
i think we should discourage people from ever using the phrase "default action"

[07:41:46.0000] <annevk>
I have been trying to call it out each time I see it

[07:41:55.0000] <annevk>
zewt: what onclick behavior though?

[07:42:21.0000] <zewt>
the fact that onclick does have "in-dispatch" behavior

[07:43:15.0000] <zewt>
i think we need a new name for that, to clearly distinguish it from what people think of as "default actions"

[07:43:34.0000] <annevk>
zewt: pointer to the spec for that? I think I'm missing something

[07:43:38.0000] <JakeA>
annevk: if a fetch is performed as part of a navigation, is the responses url redundant?

[07:43:44.0000] <zewt>
i don't know if it's specced anywhere

[07:43:45.0000] <JakeA>
response's*

[07:44:16.0000] <annevk>
JakeA: could still be relevant if the SW returned something unexpected

[07:44:55.0000] <JakeA>
annevk: like?

[07:45:16.0000] <annevk>
JakeA: navigate to /bar SW returns response for http://www.google.com/

[07:45:35.0000] <zewt>
annevk: https://zewt.org/~glenn/test-stupid-click-event.html

[07:45:37.0000] <JakeA>
annevk: I think the exception there is OpaqueResponse, not url

[07:45:52.0000] <Domenic>
annevk: I think it was good guidance that events are for notification, not actions. I hadn't read that anywhere before.

[07:46:37.0000] <annevk>
JakeA: it's not really an exception

[07:46:50.0000] <annevk>
JakeA: but it would be a CORSResponse

[07:46:59.0000] <JakeA>
That's fine though, isn't it?

[07:47:15.0000] <annevk>
JakeA: but in that case you want to look at the url of the response

[07:47:16.0000] <zewt>
i think there are a couple other events like that but I don't know what they are

[07:47:24.0000] <annevk>
JakeA: you being the navigate algorithm

[07:47:42.0000] <annevk>
Domenic: yeah, maybe I should add that more explicitly to the DOM specification

[07:48:17.0000] <zewt>
i wonder if that could be explained in terms of capturing the event on the link, then queuing a task to look at defaultPrevented after the event finishes... probably not, since that could be broken by stopPropagationImmediate

[07:49:27.0000] <Domenic>
annevk: +1, that would be excellent.

[07:49:40.0000] <annevk>
zewt: so when I tested myself I forgot to generate an event that is a MouseEvent

[07:50:06.0000] <zewt>
sorry, I thought we talked about this before or I'd have made more noise about it

[07:50:21.0000] <JakeA>
annevk: I'm wondering if we can ditch fetchEvent.default(). If subresources have a base url of response.url, but navigations use window.location.href (as in, what's in the url bar), I don't think we need .default()

[07:51:21.0000] <Domenic>
annevk: oh wow, i was wondering when someone would bring up the ArrayBuffer mess

[07:52:06.0000] <annevk>
JakeA: default() is for preserving the request instance

[07:52:36.0000] <annevk>
JakeA: so you preserve e.g. that redirects are not to be followed

[07:52:47.0000] <annevk>
JakeA: and that CSP applies

[07:54:17.0000] <annevk>
zewt: HTML has a bunch of stuff around "synthetic click"

[07:55:45.0000] <annevk>
Domenic: I'm not sure what is going on there

[07:56:02.0000] <annevk>
Domenic: or how their implementations have been moved to ES without anyone else noticing this

[07:56:07.0000] <zewt>
html spec seems to be thrashing chrome on load way more than it was

[07:56:24.0000] <Domenic>
annevk: my guess is that they only looked at the Khronos spec, which doesn't contain neutering? (Is that true?)

[07:56:38.0000] <zewt>
heh now I'm scrolling the spec and getting a transparent background

[07:57:02.0000] <annevk>
Domenic: no Khronos defines what to do when something is neutered

[07:57:06.0000] <annevk>
Domenic: http://www.khronos.org/registry/typedarray/specs/latest/

[07:57:12.0000] <JakeA>
annevk: hmm, true

[07:57:20.0000] <zewt>
annevk: there's "synthetic click activation steps", which has nothing to do with events I think

[07:58:17.0000] <zewt>
(click-like things to do when other things happen, not when the user dispatches his own click event)

[07:58:29.0000] <Domenic>
annevk: welp... more cases where Allen is not properly integrating with existing systems, IMO.

[07:58:40.0000] <Domenic>
/me is still disgruntled about ES tasks vs. HTML microtasks

[07:58:55.0000] <zewt>
why would the language level have tasks? that doesn't even make sense

[07:59:10.0000] <zewt>
tasks are part of the event loop, which don't belong at the language layer

[07:59:29.0000] <annevk>
zewt: how can you have asynchronous language then?

[07:59:48.0000] <zewt>
that doesn't belong at the language layer either

[08:00:10.0000] <annevk>
zewt: I think you're right that HTML basically does not define this; I slowly start to remember a long time ago when we looked at this and decided it was for DOM Level 3 Events to define and that of course never happened

[08:00:18.0000] <annevk>
zewt: see async/await syntax

[08:00:47.0000] <zewt>
especially here, where the web has a complex event loop mechanism; the language is at a lower layer than it

[08:01:14.0000] <zewt>
annevk: i don't think an external spec could define it without monkey patching, since it seems to need a hook in dispatchEvent

[08:04:06.0000] <annevk>
zewt: I found https://www.w3.org/Bugs/Public/show_bug.cgi?id=10897

[08:05:37.0000] <zewt>
don't think the popup counterexample is valid (just check the trusted flag)

[08:06:11.0000] <zewt>
i wrote code myself that dispatched click myself (before I knew what I was doing), so it seems guaranteed that other people have too

[08:06:38.0000] <zewt>
(i was capturing events on document, cancelling them, doing other stuff, then re-dispatching them later; it worked for click, and I recall being annoyed that it didn't work with submit)

[08:06:39.0000] <annevk>
zewt: https://www.w3.org/Bugs/Public/show_bug.cgi?id=12230 seems to be master bug

[08:08:13.0000] <zewt>
(it does work with submit? maybe it was some other event I had trouble with)

[08:08:50.0000] <zewt>
or maybe not (according to comment 10); retesting...

[08:12:12.0000] <zewt>
submits for me in firefox, but not chrome

[08:12:40.0000] <zewt>
(maybe that's what I was annoyed about--probably wrote the code in firefox first)

[08:13:05.0000] <zewt>
(test at same url)

[08:13:09.0000] <dglazkov>
good morning, Whatwg!

[08:14:50.0000] <caitp>
i need to script my client to say good morning like that in every channel, it's so charming

[08:15:13.0000] <JakeA>
annevk: if I do event.respondWith(caches.match('/fallback.html')), what's the base url for the resulting page (assuming no <base> element)? Is it event.request.url or the cachedRepsonse.url?

[08:15:14.0000] <zewt>
(don't, it's really annoying; highlights everyone's window for no reason)

[08:15:33.0000] <JakeA>
annevk: Feels like it should be the former

[08:17:01.0000] <annevk>
JakeA: yes

[08:18:29.0000] <annevk>
JakeA: I think we jotted this on the etherpad at some point

[08:20:07.0000] <JakeA>
annevk: What if fetch(request) didn't follow redirects if the context was one of the navigation ones? Then the only benefit of event.default() is CSP, right?

[08:23:17.0000] <annevk>
JakeA: prioritization

[08:24:30.0000] <annevk>
JakeA: oh, and default() follows redirects for subresources and updates the resulting url

[08:25:12.0000] <annevk>
JakeA: e.g. if you do respondWith(fetch("something-that-redirects")) it wasn't clear to me we'd use the response's url as base URL

[08:27:27.0000] <JakeA>
annevk: I think using the responses url as base url for non-navigations is fine. I wasn't keen on that at first, but it fits in with the fetch spec nicely

[08:28:27.0000] <annevk>
but not with typical server setups

[08:31:56.0000] <JakeA>
annevk: yeah, the concept of responses with a url property felt really alien to me at first

[08:32:55.0000] <JakeA>
annevk: But then, in a typical server setup, the base url would be event.request.url, but if I did event.respondWith(fetch(url)) the base would be url & not event.request.url, right?

[08:33:44.0000] <JakeA>
unless respondWith overrides the response url, but then how can it tell the difference between event.default() and fetch()

[08:37:06.0000] <Domenic>
response URLs make sense to me, they're the URL after all redirects, right?

[08:38:12.0000] <JakeA>
Domenic: yeah, but they don't exist in the traditional client/server model

[08:38:45.0000] <Domenic>
JakeA: right, but there's a difference between ClientRequest/ClientResponse and ServerRequest/ServerResponse

[08:39:06.0000] <Domenic>
if writing a web server, you use the latter; if sending requests as a client, you use the former

[08:39:13.0000] <Domenic>
Node.js actually has 4 different classes for this

[08:39:29.0000] <annevk>
JakeA: Fetch uses the latest url of Request, as url for Response

[08:39:47.0000] <annevk>
JakeA: but note that SW sits a layer deeper

[08:40:07.0000] <annevk>
JakeA: so the latest url of Request is the one that the SW was opened for

[08:40:28.0000] <annevk>
JakeA: if you use default() however, the url of that Request will be updated further

[08:41:47.0000] <JakeA>
Domenic: right, so here's the question, if I do fetchEvent.respondWith(fetch(url)), assuming the fetch is for some CSS, what's the base-url for the response? a) fetchEvent.request.url b) url c) the final redirect while fetching url

[08:43:54.0000] <Domenic>
JakeA: I don't feel qualified to give an answer that fits well with the rest of the moving parts involved, but my gut instinct is c).

[08:44:54.0000] <JakeA>
Domenic: Gut instinct is fine. I think my original instinct was a), but I'm coming round to c)

[08:47:23.0000] <JakeA>
annevk: wouldn't fetch take the response url from response.url, as provided by the serviceworker?

[08:52:30.0000] <gavin>
TabAtkins: blame pisg, probably

[08:53:38.0000] <annevk>
JakeA: not how it's currently written

[08:56:07.0000] <annevk>
JakeA: I feel like I/we should create a series of examples of request / response flows when there's a SW and figure out what all the various parties want to know

[08:56:08.0000] <JakeA>
annevk: I'll make a ticket to try and summarise this. I'd love to kill event.default() if we can

[08:56:34.0000] <annevk>
JakeA: I was hoping that would be done as part of providing hooks for Fetch, but I can take a stab at it too I suppose

[08:57:10.0000] <annevk>
JakeA: killing that does not make much sense to me, I'd prefer we focus on understanding the problem space first

[08:58:05.0000] <JakeA>
annevk: Ok, I'll provide examples in the ticket and see what we're left with

[09:04:46.0000] <JakeA>
annevk: event.default(), .installing/waiting/active/controller, and serviceWorker.waitUntil are keeping me awake at night

[09:08:33.0000] <Domenic>
JakeA: this reminds me, we need to figure out our story for .loaded vs. .loaded()

[09:08:42.0000] <Domenic>
I was going to comment in bug, I should probably do that so that there's a record.

[09:09:01.0000] <Domenic>
but basically https://github.com/w3ctag/promises-guide/issues/25

[09:11:16.0000] <Hixie>
why would loaded() be a method?

[09:11:21.0000] <Hixie>
shouldn't there be one promise per load attempt?

[09:11:39.0000] <Hixie>
the FontFace API approach seems sensible

[09:13:24.0000] <JakeA>
There was a conversation around this earlier http://krijnhoetmer.nl/irc-logs/whatwg/20140520#l-395

[09:13:47.0000] <Hixie>
yes that's what led to my question

[09:14:02.0000] <JakeA>
Doing the same as FontFace is compelling

[09:14:31.0000] <Hixie>
well they should clearly be consistent, but if a method makes more sense thenwe should do that

[09:14:38.0000] <Hixie>
i just don't see why a method would make sense here

[09:14:43.0000] <Hixie>
since it's vending the same value each time

[09:14:47.0000] <Hixie>
a method implies that work is done

[09:14:55.0000] <Hixie>
whereas here no work is done except "return the cached value"

[09:15:13.0000] <JakeA>
well, the value can change

[09:15:23.0000] <JakeA>
if .src is changed

[09:15:26.0000] <JakeA>
but that's easy enough

[09:15:34.0000] <Hixie>
right, but that's the .src setter doing work

[09:15:39.0000] <JakeA>
yeah

[09:15:39.0000] <Hixie>
not loaded()/.loaded

[09:16:11.0000] <Hixie>
in totally different news, i must admit to something. this no-underline style is actually growing on me. i was clearly wrong about that.

[09:17:18.0000] <JakeA>
For the record, I've never found a style-related readability problem with the html spec. Except for that bit where there was a gradient at the top. Those were dark times for the web.

[09:17:21.0000] <Hixie>
the backgrounds on examples and notes are prettier too.

[09:17:43.0000] <Hixie>
JakeA: there's actually a gradient there still. :-D

[09:18:11.0000] <Hixie>
JakeA: and yeah, me either, but we consistently get feedback about it

[09:18:32.0000] <Hixie>
JakeA: i did a survey a few months ago, and it was funny, i got a bunch of feedback "this spec is really pretty" and a bunch of feedback "this spec is really ugly"

[09:19:06.0000] <JakeA>
ohh, the gradient is at the bottom now. Hadn't noticed that

[09:19:36.0000] <Hixie>
i figured it was more subtle than the line that we had before

[09:19:46.0000] <Hixie>
(the line got harder to do right after i added a max-width on body)

[09:29:38.0000] <TabAtkins>
Hixie: FontFace returns a promise from the .load() method, but also exposes a .loaded promise for when you want to listen for the load status without actually triggering a load.

[09:29:45.0000] <Hixie>
right

[09:29:57.0000] <Hixie>
same promise right?

[09:30:09.0000] <Hixie>
.loaded just returns the last value .load() created?

[09:30:32.0000] <TabAtkins>
No, it was easier to just return a fresh promise that is resolved to the .loaded promise.

[09:30:48.0000] <Hixie>
that seems confusing

[09:30:51.0000] <Hixie>
why would it be easier?

[09:31:05.0000] <TabAtkins>
.loaded is the same promise all the time.

[09:31:13.0000] <TabAtkins>
.load() returns fresh promises, I think.  Lemme see...

[09:31:14.0000] <Hixie>
until the next load, right?

[09:31:21.0000] <TabAtkins>
A given font only loads once.

[09:31:24.0000] <Hixie>
ah ok

[09:31:29.0000] <Hixie>
well then why have more than one promise?

[09:31:36.0000] <Hixie>
just have The One Promise Of The FontLoad Object

[09:31:41.0000] <TabAtkins>
Oh, no, they all return the same promise.

[09:31:41.0000] <TabAtkins>
Yes.

[09:31:46.0000] <Hixie>
or if you're doing it the JS style, [[The One Promise Of The FontLoad Object]]

[09:31:50.0000] <TabAtkins>
Every call to .load() returns the .loaded promise.

[09:31:57.0000] <TabAtkins>
That's the [[FontStatusPromise]]

[09:32:05.0000] <Hixie>
called it

[09:32:06.0000] <Hixie>
:-P

[09:32:08.0000] <TabAtkins>
hehe

[09:33:11.0000] <Domenic>
I dunno, I kind of feel that for things that could change, a method might be better?

[09:33:58.0000] <Domenic>
That way, if it's a property, it's the same every time, whereas if it's a method, it's more like "getPromiseForNextTransitionToLoadedState()"

[09:34:05.0000] <Domenic>
except we shorten that to ".loaded()"

[09:34:41.0000] <Domenic>
(or, "whenLoaded()" or "waitForLoad()"??)

[09:34:49.0000] <Hixie>
when* and wait* are ugly

[09:35:03.0000] <Domenic>
when doesn't seem so bad. but yes.

[09:35:15.0000] <Hixie>
but i don't understand what you mean

[09:35:19.0000] <Hixie>
attributes can change

[09:35:34.0000] <Hixie>
if they couldn't, we'd call them constants :-)

[09:35:47.0000] <Hixie>
the thing to avoid with attributes is not that they change when state changes, but that they change every time they are called

[09:35:56.0000] <Hixie>
that is, the getter should be idempotent

[09:36:06.0000] <Domenic>
yeah, that's true

[09:36:06.0000] <Hixie>
but that's all really

[09:36:23.0000] <Domenic>
i think i am just trying to use the method vs. attribute designation to signal something only tangentially-related

[09:37:10.0000] <Domenic>
i.e. we have to classes of these promises: "generic state transitions" for state machines that could go back and forth, or "intrinsic properties of the object" for whether something has completed its one-time transition from not-loaded to loaded, or similar.

[09:37:42.0000] <Domenic>
s/to/two

[09:39:00.0000] <Domenic>
but the methods i am proposing are definitely not actions, so that's a point against methods

[09:39:26.0000] <Domenic>
most getter-methods get named with a `get` prefix, and `.getLoaded()` is horrible...

[09:39:43.0000] <Domenic>
.nextLoad property maybe??

[09:40:03.0000] <TabAtkins>
Domenic: In support of your point, the promise for "are there are pending font loads, or are we cool?" is returned by a method.

[09:40:24.0000] <Domenic>
or i can just be ok with the fact that there will be slightly different types of promises returned, both by getters...

[09:40:25.0000] <Hixie>
i think we should be consistent between one-shot objects and reusable objects, and for one-shot objects "nextLoad" is confusing

[09:40:38.0000] <Hixie>
'loaded' seems fine to me

[09:40:40.0000] <TabAtkins>
I return a fresh promise with every call there, though.

[09:40:44.0000] <Domenic>
Hixie: I think it is exactly that consistency I am arguing against, actually.

[09:40:55.0000] <JakeA>
await document.ready

[09:40:58.0000] <TabAtkins>
I made most of these choices without conscious attempts at consistency, though.

[09:41:09.0000] <Hixie>
most reusable objects are treated by most authors as one-shot objects

[09:41:23.0000] <Domenic>
that is true

[09:41:39.0000] <Hixie>
so i don't think optimising e.g. img for people using it for multiple loads is a good idea

[09:42:06.0000] <Domenic>
i kind of liked the idea of force-feeding authors the knowledge that they are reusable, heh.

[09:42:23.0000] <Domenic>
but in practice, thinking about the dev experience, i guess it's bad

[09:42:34.0000] <Domenic>
you have to keep a table in your head of reusable vs. one-shot objects

[09:42:46.0000] <Domenic>
"use .nextLoad for img, but .loaded for documents..."

[09:43:04.0000] <Domenic>
or, probably worst, "use .loaded() for img, but .loaded for documents..."

[09:43:31.0000] <JakeA>
"await img.loaded" seems better than "await img.nextLoad"

[09:43:54.0000] <caitp>
it doesn't really matter what the API looks like, it's going to both suck and be adequate and even enjoyable simultaneously, depending on who uses it and what problem they're solving

[09:44:33.0000] <JakeA>
I might get a tattoo of that

[09:44:44.0000] <Hixie>
Domenic: documents can be reused

[09:44:50.0000] <Domenic>
welp

[09:45:00.0000] <Domenic>
what *can't* be reused, actually...

[09:45:02.0000] <Hixie>
which i think is a solid argument against making a distinction in the api :-)

[09:45:46.0000] <Hixie>
even xhr can be reused

[09:45:47.0000] <Hixie>
websocket can't

[09:49:27.0000] <Domenic>
JakeA: you have too many internet names

[09:50:02.0000] <JakeA>
Domenic: yeahhhhh, I should probably drop the jaffathecake thing

[09:50:21.0000] <caitp>
why would you want to do that

[09:52:18.0000] <JakeA>
consistency?

[09:52:29.0000] <JakeA>
it's all the rage these days

[09:52:47.0000] <Hixie>
it's been "all the rage" for a long time :-)

[09:53:13.0000] <JakeA>
how appropriate!

[09:53:46.0000] <caitp>
every nickname is just a different expression of a different facet of a different side of your personality's current mood, as it should be

[10:31:19.0000] <Hixie>
Domenic: i don't understand why you keep saying "JavaScript does not make such a distinction"

[10:33:08.0000] <Hixie>
Domenic: it doesn't make a distinction between functions that return a value and functions that don't return a value either, but i hope you agree that to programmers they are different things nonetheless.

[10:33:21.0000] <Ms2ger>
No

[10:33:23.0000] <Ms2ger>
/me ducks

[10:33:36.0000] <Hixie>
Ms2ger: context is https://github.com/domenic/promises-unwrapping/issues/24#issuecomment-43657022

[10:33:49.0000] <Domenic>
I don't agree with that. All functions return a value; sometimes that value is `undefined`.

[10:34:02.0000] <Ms2ger>
See?

[10:34:13.0000] <Hixie>
...

[10:34:30.0000] <Hixie>
Domenic: that is entirely my point.

[10:34:46.0000] <Hixie>
Domenic: all functions return something in JS. but programmers ignore the return values of functions that return undefined.

[10:34:55.0000] <Hixie>
they are different to the programmer.

[10:34:57.0000] <Ms2ger>
inb4 "No"

[10:35:12.0000] <Domenic>
Sure. But language-level features do not do different things with undefined-returning functions vs. anything-else-returning functions.

[10:35:27.0000] <caitp>
where would we be if we weren't putting a reference to an undefined JSValue into EAX after every function call

[10:35:35.0000] <caitp>
it would be chaos

[10:36:16.0000] <Hixie>
Domenic: i don't understand the relevance of your statement

[10:36:45.0000] <Domenic>
Hixie: Language-level features like promises are not designed to handle different types of errors in different ways

[10:37:05.0000] <Domenic>
Hixie: all errors that an async function can result in go through the promise, just like all errors that a sync function can throw get bubbled as exceptions

[10:37:17.0000] <Domenic>
We don't e.g. return some as return values and some as thrown exceptions

[10:37:18.0000] <Hixie>
Domenic: well, a, promised shouldn't be a language-level feature imho. but b, yes, that's the bug.

[10:37:20.0000] <Domenic>
We just throw them all

[10:37:49.0000] <Hixie>
Domenic: i understand what you want. i'm saying it's bad.

[10:37:50.0000] <Domenic>
So similarly deciding to use throw vs. reject as a channel to interject your preference for dividing up errors into two categories is not really good language design

[10:38:04.0000] <Domenic>
ok. well I am saying it's good.

[10:38:08.0000] <Hixie>
i pretty fundamentally disagree here.

[10:38:21.0000] <Domenic>
I can offer years of experience working with promise APIs, if it helps?

[10:38:30.0000] <Hixie>
it does not.

[10:38:31.0000] <Ms2ger>
Your brain must be fried by now :)

[10:39:03.0000] <Hixie>
Domenic: did some promise APIs send TypeErrors on the promises?

[10:39:14.0000] <Domenic>
Hixie: of course, whenever there was a TypeError.

[10:39:45.0000] <Hixie>
how did you implement that?

[10:40:08.0000] <Domenic>
I don't understand the question

[10:40:30.0000] <Hixie>
well your years of using promises in JS had to be built on top of a non-promise-native JS, right?

[10:40:53.0000] <Domenic>
sure

[10:41:07.0000] <Hixie>
and you had IDL-like APIs that did type checking?

[10:41:19.0000] <Domenic>
in some cases, yeah

[10:41:38.0000] <Hixie>
so how did you send the type checks to the promises? they'd be caught before the function's code ran.

[10:41:48.0000] <Domenic>
wait what?

[10:41:56.0000] <Domenic>
i'm in javascript; there are no type checks before the function's code runs

[10:42:05.0000] <Domenic>
the functions code is the thing doing the type checks

[10:42:16.0000] <Hixie>
maybe that's where the disagreement stems from

[10:42:18.0000] <Hixie>
i'm not in JavaScript.

[10:42:20.0000] <Hixie>
i'm in WebIDL.

[10:42:32.0000] <Domenic>
Which is a macro system for writing JavaScript ;)

[10:42:52.0000] <Hixie>
not really, it's usually implemented in C++.

[10:43:04.0000] <Domenic>
Yes, but that C++ just invokes JS engine C++ APIs

[10:43:06.0000] <Ms2ger>
Or Rust

[10:43:15.0000] <Domenic>
And the spec is done in terms of JS semantics

[10:43:18.0000] <Hixie>
i'm finding it hard to express just how much i would hate to use an API where a type error would get sent to a promise.

[10:43:28.0000] <Hixie>
i hate it enough that it's run-time not compile-time

[10:43:38.0000] <Hixie>
but this is like an order of magnitude worse.

[10:43:42.0000] <Domenic>
i mean, i can say the same thing about how much i would hate apis that force me to handle errors through two channels

[10:43:53.0000] <Hixie>
you don't have to handle the errors i'm talking abuot.

[10:43:56.0000] <Hixie>
that's the _entire_ point.

[10:43:56.0000] <Domenic>
you do!

[10:44:03.0000] <Domenic>
when building robust systems, you *definitely* need to handle errors

[10:44:12.0000] <caitp>
why not push for dart then, then you can at least get some level of static typechecking and throw these errors during parsing/compilation rather than at runtime

[10:44:23.0000] <Hixie>
(dart's not even remotely enough.)

[10:44:26.0000] <caitp>
change the web!

[10:44:32.0000] <caitp>
I joke, I joke

[10:45:10.0000] <Hixie>
Domenic: if you call a function with bogus data, but the bogus data is not fatal, then you're just going to call more and more functions with that bogus data. it's going to propagate the errors throughout the system.

[10:45:18.0000] <Hixie>
Domenic: if you instead throw an exception, the code will crash.

[10:45:27.0000] <Hixie>
Domenic: and the damage will be limited.

[10:45:46.0000] <Domenic>
rejections are just as fatal to async systems as exceptions are to sync ones

[10:45:54.0000] <Domenic>
you literally cannot do any more work until you handle the rejection

[10:45:54.0000] <Hixie>
no they're not

[10:45:59.0000] <Hixie>
sure you can

[10:46:06.0000] <Hixie>
var promise = func();

[10:46:08.0000] <Hixie>
moreCode();

[10:46:13.0000] <caitp>
presumably if you get a rejection that you care about, you don't recover

[10:46:16.0000] <Domenic>
you cannot do any more work that depends on the result of that computation

[10:46:36.0000] <Hixie>
sure, but you can do lots more work with the original bad data.

[10:46:41.0000] <caitp>
you don't always care about rejections

[10:46:54.0000] <Domenic>
caitp: you recover, or don't recover, in the same way you would at sync code: add judicious catches at the boundaries of the system to encapsulate parts that can be wrapped and retried/signaled to the user without breaking the rest of the program.

[10:47:08.0000] <caitp>
that's what I'm saying

[10:47:17.0000] <caitp>
it's not too different from regular try/catch

[10:47:26.0000] <Domenic>
it's exactly the same :)

[10:47:32.0000] <Hixie>
you don't have to recover from logic errors at all in sync code. The code is bad. There's by definition no way to recover sanely. The best you can do is catch onerror and send a report to the server, then tell the user that the code is bad.

[10:47:45.0000] <Domenic>
that's just not true. you can easily recover from logic errors

[10:47:56.0000] <Domenic>
this keeps webpages running without breaking at the first sign of things going wrong

[10:47:58.0000] <caitp>
there are a lot of errors that you can recover from

[10:48:05.0000] <caitp>
like JSON.parse() throwing

[10:48:15.0000] <Hixie>
JSON.parse() throwing isn't a logic error.

[10:48:16.0000] <caitp>
not everything is necessarily fatal

[10:48:18.0000] <Hixie>
it's a data error.

[10:48:34.0000] <Hixie>
i'm talking about things like null derefs, calling a function with the wrong arguments, etc.

[10:48:43.0000] <Hixie>
stuff that should never have gotten checked in in the first place.

[10:48:46.0000] <Domenic>
there is no distinction.

[10:48:53.0000] <Domenic>
(in JavaScript)

[10:48:58.0000] <Hixie>
agreed

[10:49:08.0000] <Hixie>
the distinction is a programmer-level distinction.

[10:49:12.0000] <Hixie>
even more important.

[10:49:34.0000] <Domenic>
the user can click into a rare code path that generates a TypeError, and it's nice to be able to say "oops, we couldn't load the current bid right now!" without crashing the entire app/server.

[10:49:49.0000] <Domenic>
you'd give the same error for a NetworkError

[10:49:54.0000] <caitp>
much like you can distinguish from a catch block, you can also distinguish from a rejection handler

[10:50:06.0000] <caitp>
at the programmer-level

[10:50:18.0000] <Domenic>
yeah, in both cases, you might log the NetworkError, but not the TypeError, to the server.

[10:50:43.0000] <Domenic>
er,,, other way around

[10:50:58.0000] <Hixie>
the distinction is at the API level, and it does exist.

[10:51:07.0000] <Hixie>
it's the difference between firing onerror and throwing, today.

[10:51:23.0000] <Hixie>
all i'm saying is that I want my APIs to maintain that difference.

[10:52:08.0000] <caitp>
maybe some day people will be happy with mobile phones statically analyzing scripts for their applications before running, so that they can throw typeerrors that might never be reached

[10:52:39.0000] <Ms2ger>
Hixie, why do you want to set JS back to the stone age?

[10:52:55.0000] <Hixie>
/me feeds Ms2ger

[10:53:02.0000] <caitp>
> implying it ever left the stone age

[11:10:29.0000] <jtcranmer>
Domenic: ping

[11:18:09.0000] <smaug____>
Hixie: want to interpret what http://www.whatwg.org/specs/web-apps/current-work/multipage/association-of-controls-and-forms.html#inappropriate-for-the-control means

[11:20:49.0000] <Domenic>
jtcranmer: pong

[11:22:58.0000] <jtcranmer>
Domenic: when are you planning on working on the streams spec again?

[11:23:29.0000] <Domenic>
jtcranmer: as soon as possible; i had a conversation with an implementer the other day that brought up a number of things to get my head back in the game

[11:25:08.0000] <jtcranmer>
that's good to hear

[11:25:20.0000] <jtcranmer>
I hadn't seen any progress since the CSP... firestorm a month ago

[11:26:21.0000] <smaug____>
Hixie: especially " the first row describing that autofill field in the table below." part

[11:26:43.0000] <smaug____>
also, is anyone shipping this API

[11:26:51.0000] <smaug____>
or could we like... rewrite it

[12:03:10.0000] <Hixie>
smaug____: here now, what's up?

[12:04:42.0000] <smaug____>
trying to interpret what the spec says

[12:05:16.0000] <smaug____>
first, should the tokens be in order

[12:05:30.0000] <smaug____>
"set of space-separated tokens" hints no ordering

[12:05:39.0000] <smaug____>
(since a set isn't normally ordered)

[12:05:47.0000] <Hixie>
are you asking for implementations, or authors?

[12:05:53.0000] <smaug____>
implementations

[12:05:59.0000] <Hixie>
k let me see...

[12:06:00.0000] <smaug____>
but then there is "in the order given below"

[12:06:29.0000] <Hixie>
you want the next section

[12:06:42.0000] <Hixie>
http://www.whatwg.org/specs/web-apps/current-work/multipage/association-of-controls-and-forms.html#processing-model-2

[12:07:13.0000] <smaug____>
then in http://www.whatwg.org/specs/web-apps/current-work/multipage/association-of-controls-and-forms.html#inappropriate-for-the-control I have no idea what it means the there is "name" and under that some other values which are indented a bit

[12:07:30.0000] <smaug____>
are those other values somehow special

[12:07:51.0000] <smaug____>
the text above talks about "first row", but of what

[12:08:06.0000] <Hixie>
are we switching to talking about author conformance criteria?

[12:09:10.0000] <smaug____>
I don't know what in the spec says it isn't implementation thing

[12:10:02.0000] <Hixie>
there aren't any requirements that apply to UAs in that first section

[12:10:43.0000] <Hixie>
it doesn't say that anywhere, it's just a description of what is in that section

[12:10:52.0000] <Hixie>
the only "must"s are things that would apply to authors (and validators)

[12:11:31.0000] <smaug____>
"The attribute, if present, must have a value that is a set of space-separated tokens consisting of either a single token that is an ASCII case-insensitive match for the string "off", or a single token that is an ASCII case-insensitive match for the string "on", or the following, in the order given below:"

[12:11:39.0000] <smaug____>
why is that not for implementations ?

[12:11:57.0000] <Hixie>
it's saying what the value must be

[12:12:05.0000] <Hixie>
how could that be an implementation requirement?

[12:12:13.0000] <Hixie>
i don't understand what the requirement would be if it was an implementation requirement

[12:12:40.0000] <Hixie>
the spec talks a bit about this here: http://www.whatwg.org/specs/web-apps/current-work/multipage/introduction.html#how-to-read-this-specification

[12:12:43.0000] <Hixie>
does that help?

[12:12:50.0000] <Hixie>
(second paragraph)

[12:12:59.0000] <smaug____>
ok, I see

[12:13:11.0000] <smaug____>
this is just unusually hard to interpret

[12:13:20.0000] <smaug____>
also, does anyone implement this stuff yet?

[12:14:05.0000] <smaug____>
(since if not, I might r- patches trying to implement it)

[12:14:13.0000] <Hixie>
yeah, chrome has shipped this for some time. i tried to get impl feedback on it before they shipped but mozilla was being unusually confusing in its responses and didn't give feedback, and apple and microsoft didn't say anything at all iirc.

[12:14:33.0000] <Hixie>
(they waited many months before shipping, and it only got specced a year or so later when mozilla started implementing)

[12:14:57.0000] <Hixie>
(actually, the rAc() is what didn't get specced. I guess the attribute was specced earlier.)

[12:15:15.0000] <Hixie>
i can try to make it clearer

[12:15:21.0000] <Hixie>
not sure what is hard to interpret though

[12:17:08.0000] <smaug____>
well, the whole API is odd

[12:17:50.0000] <Hixie>
how so?

[12:17:54.0000] <smaug____>
trying to do so much using just one attribute

[12:18:32.0000] <Hixie>
it's not doing that much, it's just saying what the field represents

[12:18:54.0000] <smaug____>
in very different level

[12:19:19.0000] <smaug____>
shipping|billing could be one attribute, name etc one

[12:19:36.0000] <smaug____>
home|work|etc one

[12:20:06.0000] <Hixie>
isn't that just syntactically equivalent?

[12:20:13.0000] <Hixie>
i don't understand the difference

[12:20:23.0000] <Hixie>
(except that having multiple attributes means more confusion about when things take effect)

[12:20:46.0000] <smaug____>
easier to understand what the attribute is about

[12:21:12.0000] <Hixie>
seems to me to be exactly equivalent, but ok

[12:21:21.0000] <Hixie>
either way, i didn't design this, i just specced what had shipped

[12:21:22.0000] <smaug____>
but if this is shipping in chrome, perhaps I'll need  to live with this

[12:21:35.0000] <Hixie>
so it's about 2 years too late for that kind of feedback :-)

[12:21:43.0000] <Hixie>
next time, send feedback when it's requested :-)

[12:21:48.0000] <smaug____>
I can't really follow all the spec stuff

[12:22:01.0000] <Hixie>
i hear ya

[12:22:02.0000] <smaug____>
I end up commenting when someone asks for a review

[12:22:57.0000] <smaug____>
Hixie: but ok, thanks

[12:23:57.0000] <Hixie>
fwiw, https://www.w3.org/Bugs/Public/buglist.cgi?query_format=advanced&resolution=---&target_milestone=Needs%20Impl%20Interest is a list of bugs that represent features that are not yet implemented for which feedback is being requested

[12:24:22.0000] <Hixie>
(especially feedback of the form "we want to implement this" or "we think this is dumb and should not exist", but also api design)

[12:24:52.0000] <Hixie>
so looking at that list every few weeks would be a good way to keep on top of this kind of thing in the future

[12:28:50.0000] <smaug____>
/me bookmarks

[12:30:03.0000] <caitp>
if only there were some way to undumb the dumb of old

[12:32:06.0000] <Hixie>
you can have a pretty API, or you can have a successful API. your call. :-)

[12:33:16.0000] <caitp>
lots of pretty people are successful, no reason pretty APIs can't be

[12:44:18.0000] <Hixie>
caitp: i think there is a reason, actually

[12:44:36.0000] <Hixie>
caitp: the problem is that once an API is deployed, you can't change it. But you can't work out how to make it perfect before it's deployed.

[12:49:09.0000] <Philip`>
I think caitp is suggesting that you should design seven billion variations of an API, and then let people work out which ones are pretty, and those ones will become successful

[12:49:37.0000] <caitp>
or you could break peoples applications periodically, preferably early on

[12:49:43.0000] <caitp>
or any number of other ways

[12:50:26.0000] <caitp>
peoples lives don't depend on this stuff, and people aren't going to stop using the web just because they have to change a few letters in some application

[12:51:08.0000] <caitp>
just my opinion, nobody gotta take it, but nobody's life depends on this stuff never changing

[12:51:16.0000] <Domenic>
that's precisely what they'll do

[12:51:27.0000] <Domenic>
or worse, they'll stop using your browser

[12:51:27.0000] <caitp>
what alternative are they going to turn to?

[12:51:47.0000] <Domenic>
iOS/Android

[12:51:53.0000] <Domenic>
and/or a browser that didn't break their sites

[12:52:00.0000] <caitp>
they might go outside or read a book or get back to working on curing cancer

[12:52:21.0000] <Hixie>
breaking people's applications is how you get "pretty and not successful"

[12:52:51.0000] <caitp>
there are plenty of examples of apis with breaking changes which don't really hurt their use

[12:52:58.0000] <caitp>
openGL and openglES for one

[12:53:01.0000] <caitp>
for two, rather

[12:53:06.0000] <Hixie>
(at least, not successful on the scale of the Web or Windows)

[12:53:13.0000] <caitp>
gtk2 vs gtk3

[12:53:27.0000] <Hixie>
get back to me when gtk has a billion users.

[12:53:52.0000] <caitp>
well hopefully it never gets there, if we're lucky it will die off and be replaced by something pretty and successful

[12:54:31.0000] <caitp>
breaking changes are valuable. you don't want them every day, but at least a few times a decade

[12:54:48.0000] <Philip`>
caitp: Assuming you mean the breaking transition from GL to GLES, that worked because GLES existed on a new platform that no existing GL application could possibly run on anyway, so application developers had to start from scratch and could use whatever API was there

[12:55:40.0000] <caitp>
OpenGL2 vs OpenGL3 is massively different, and there have been breaking changes from early gles to more recent gles as well, but it's just an example

[12:55:42.0000] <Hixie>
caitp: https://plus.google.com/+IanHickson/posts/SiLdNL9MsFw

[12:55:59.0000] <caitp>
I've read it, it's a nice post

[12:58:47.0000] <caitp>
but I think people greatly exaggerate the importance of users changing browsers for a while, or of users not browsing the web for a while. It's never going to make any real difference to anybody

[13:00:20.0000] <Hixie>
let's suppose that you're right. it actually still doesn't matter. what matters is that the people developing browsers think it's true.

[13:01:37.0000] <caitp>
imagine if people started using IE again to browse tumblr because of some rendering glitch in a particular theme that affected gecko or blink, due to a breaking change

[13:01:59.0000] <caitp>
maybe you'd see less irrational complaints about "IE is awful/slow/etc", and more reality

[13:02:03.0000] <caitp>
you'd bring honesty back!

[13:02:14.0000] <caitp>
man, that would be great

[13:03:45.0000] <Domenic>
and people would get fired from mozilla and google (or get very poor performance reviews)

[13:03:57.0000] <Domenic>
you have to remember that there are real consequences to effin up the software you ship

[13:04:49.0000] <Hixie>
what would happen is that just one browser (the one that implemented the breaking change) would not work

[13:04:56.0000] <Hixie>
and users would blame the browser and move to another one

[13:05:07.0000] <Hixie>
some very small number of users if it was just one breaking change

[13:05:19.0000] <Hixie>
and the other browser vendors would see this and say "well we're not doing _that_"

[13:05:38.0000] <Hixie>
just look at the level of difficulty that browsers are facing trying to drop showModalDialog()

[13:05:46.0000] <Hixie>
an API that every browser vendor desperately wants to drop

[13:05:58.0000] <Hixie>
an API that has virtually no use on the Web itself

[13:06:11.0000] <Hixie>
an API that causes security problems

[13:06:21.0000] <Hixie>
an API that massively complicates the specs and implementations

[13:06:43.0000] <Hixie>
an API that was originally non-standard

[13:07:19.0000] <caitp>
I know it's hard, Hixie

[13:08:16.0000] <caitp>
but it's hard because of an attitude problem, and that is a bug worth fixing

[13:09:01.0000] <Hixie>
i have no idea whatsoever how to fix humans. good luck. in the meantime...

[13:09:25.0000] <zewt>
if you're working for a browser vendor trying to get politics and practicalities changed, great; if you're not, that's a lovely statement but not an actionable one

[13:09:40.0000] <Hixie>
(this is the same argument i have against RDF&co. Embedding structured data in the web page is essentially a human problem, and it's harder to fix that problem than it is for us to develop NLP.)

[13:10:08.0000] <Hixie>
(not that NLP is easy at all. It's just that social problems are even harder.)

[13:10:13.0000] <Domenic>
an attitude problem O_O

[13:10:31.0000] <caitp>
I think it can be done

[13:10:42.0000] <zewt>
Domenic: that's what business realities look like, when it's not your job :P

[13:11:19.0000] <caitp>
for most of the browser vendors out there, browser use isn't their main business

[13:11:28.0000] <caitp>
well, okay, maybe not most

[13:11:31.0000] <caitp>
lets say 2 out of 5

[13:11:49.0000] <caitp>
maybe you could even throw apple in there too, since they push objc

[13:11:55.0000] <Domenic>
Yes, and for Goldman Sachs, structured investments isn't their main business. Doesn't mean the structured investments group wants to give all their business to Citigroup.

[13:12:24.0000] <caitp>
that's comparing an apple to an orchard, don't you think?

[13:12:29.0000] <Domenic>
not at all

[13:12:30.0000] <caitp>
there's a lot more money in one arena than the other

[13:12:43.0000] <Domenic>
business units and companies and responsibility and performance reviews work the same way in both environments

[13:12:56.0000] <caitp>
thus the attitude problem

[13:13:05.0000] <Domenic>
if you say so...

[13:13:38.0000] <caitp>
when something doesn't have a real impact, either financially or culturally, it must not be held to such a high standard

[13:14:16.0000] <Hixie>
as you said before, it's an attitude problem. Specifically, the attitude of the engineers on the browser teams, and the people who evaluate their performance.

[13:14:27.0000] <Hixie>
for those people, browser use is their main business.

[13:15:59.0000] <Hixie>
btw, even if all the browser vendors were to agree to break things together, even that wouldn't solve your problem. You'd just make the Web platform less attractive and cause Web developers to consider becoming developers for other platforms.

[13:16:11.0000] <caitp>
and that would be just fine

[13:16:17.0000] <caitp>
it really doesn't matter in the grand scheme of things :)

[13:16:25.0000] <caitp>
it really doesn't

[13:16:39.0000] <caitp>
but, I know I don't have to convince you of that

[13:16:48.0000] <Hixie>
well, it greatly matters to me that the open multi-vendor platforms be more successful than the proprietary ones.

[13:17:42.0000] <Hixie>
Also, do you really want to be breaking these web apps? Consider if one of them is the ticketing app for an airline. Suddenly over the course of a week all the browsers stop working on that site. Can you imagine the chaos that that company would face? Now multiply that across the whole of our economy.

[13:18:38.0000] <IZh>
It's hot here today. ;-)

[13:18:42.0000] <caitp>
fortunately, it's possible to have relationships with businesses who use your product, and inform them of coming breaking changes

[13:19:04.0000] <Hixie>
in practice, those relationships don't exist.

[13:19:17.0000] <Hixie>
i mean, i would love to live in the world you describe, don't get me wrong.

[13:19:18.0000] <caitp>
sure they do, I have participated in them

[13:19:22.0000] <Hixie>
but it's not the world i live in.

[13:19:28.0000] <caitp>
you can have more of them

[13:19:57.0000] <caitp>
you can encourage effective communication

[13:20:19.0000] <caitp>
there is no shortage of ways to make things suck less than they do, and just no real effort to take on those endeavors

[13:20:30.0000] <Hixie>
well that's just offensive.

[13:20:34.0000] <caitp>
but I don't want to have a fight about this

[13:20:49.0000] <Hixie>
you basically just said that the last 15 years of my life have been "no real effort"

[13:21:00.0000] <caitp>
oh come now Hixie, I'm not saying that

[13:21:14.0000] <Hixie>
you really did.

[13:21:25.0000] <caitp>
maybe "no real effort" was the wrong choice of words

[13:21:48.0000] <Hixie>
(not just my life, either.)

[13:21:56.0000] <IZh>
Evolution vs revolution.

[13:23:52.0000] <caitp>
various organizations are certainly making an effort to open the process and get more input from different interested parties, so yes, that effort is being made

[13:24:19.0000] <Hixie>
we've also spent years trying to improve the web concretely, by providing better APIs, defining the platform better to improve interop, etc.

[13:24:26.0000] <Hixie>
not to mention all the work on test suites

[13:24:57.0000] <Hixie>
and all the work on developer advocacy

[13:25:12.0000] <Hixie>
and all the work on campaigning to browser vendors that they better support standards

[13:25:25.0000] <Hixie>
and all the work trying to convince each other that particular design patterns are better than others

[13:25:42.0000] <caitp>
and that's all awesome, no doubt

[13:26:00.0000] <Hixie>
what have _you_ done to improve the web?

[13:26:56.0000] <caitp>
I've worked on improving compliance with various proposed standards, improving application frameworks, and am not quiet at all about my opinions on the problems with it and how they can be addressed

[13:27:15.0000] <Domenic>
it's interesting that you flipped the offensive bit at "no real effort"; I flipped it at "attitude problem"

[13:27:15.0000] <caitp>
and have even campaigned to some degree to address some of those problems

[13:27:39.0000] <Hixie>
urls?

[13:27:52.0000] <caitp>
but I'm just one person, and I am very snarky, not necessarily diplomatic

[13:27:57.0000] <caitp>
so campaigning is not my strongpoint

[13:28:17.0000] <IZh>
8

[13:28:26.0000] <IZh>
Oops

[13:35:53.0000] <caitp>
sorry Hixie I didn't mean to come across as saying that there have been __no__ efforts to improve things, but I don't think there has been much of a real effort to give people a reality check about the importance of number-of-downloads/users/etc

[13:36:32.0000] <caitp>
so I apologize for that =)

[13:43:53.0000] <Hixie>
caitp: i think if you tried to tell a browser vendor that users were less important, they'd respond with a precise dollar figure per user and ask you how many dollars you think they should give up in order to make some API slightly prettier

[13:45:23.0000] <caitp>
sure, and then you say "whatever it takes", because the reality is that the revenue models for most of these vendors don't really come from people using their particular browser all the time

[13:45:26.0000] <Hixie>
i also think the reaction would probably depend on whether they were currently increasing in market share or losing it. It's worth noting that Chrome is more willing to break APIs these days than other browsers; I don't think their relative market numbers are unrelated to this.

[13:45:39.0000] <Hixie>
uh

[13:45:52.0000] <Domenic>
what i am hearing is that caitp hates capitalism ;)

[13:45:53.0000] <Hixie>
the revenue model of all browsers is pretty much entirely based on how much they use their browsers.

[13:46:11.0000] <Hixie>
caitp: what do you think the revenue model of browsers is?

[13:46:19.0000] <caitp>
you've got a number of revenue models

[13:46:24.0000] <Hixie>
you do?

[13:46:51.0000] <Domenic>
hmm, i was pretty sure the argument from a few minutes ago was that revenue wasn't important, and people should go outside and read books or something.

[13:46:54.0000] <caitp>
in Mozilla's case, you have donations to the foundation, ad revenue for the corporation. In the case of Google, you have piles of ad revenue. in the case of Mozilla, you have cloud services, OEM licensing, and other models

[13:47:00.0000] <caitp>
in the case of Apple, you have iPhone sales, etc etc

[13:47:32.0000] <caitp>
it's not that revenue isn't important, it's that the impact on revenue breaking changes would have is exaggerated

[13:48:07.0000] <Hixie>
um... you might want to look at mozilla's financials more closely.

[13:48:09.0000] <Domenic>
JakeA: curious what https://twitter.com/trygve_lie/status/468839273010323456 is about?

[13:48:51.0000] <Hixie>
and in the case of iPhone, sales of the device are going to drop if people find that browsers on their device don't work (there's only one rendering engine for all browsers on iPhones)

[13:49:22.0000] <caitp>
and that's only significant if it breaks a huge amount of the web

[13:49:30.0000] <caitp>
you can break a lot with minimal impact

[13:49:33.0000] <Hixie>
what is a huge amount? a million pages?

[13:49:41.0000] <Hixie>
a hundred thousand?

[13:50:25.0000] <caitp>
lets put it this way, hamstersmut.com rendering a paragraph wrong is probably not going to severely impact sales

[13:50:47.0000] <Hixie>
so 2 million?

[13:51:02.0000] <caitp>
a number of pages that have real audiences

[13:51:18.0000] <Hixie>
the tail on the web is very long

[13:51:21.0000] <caitp>
and the number of those pages breaking could be mitigated by discussing with them

[13:51:24.0000] <Hixie>
veeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeery long

[13:51:34.0000] <JakeA>
Domenic: https://twitter.com/leftieFriele/status/468836645362757633, although I was genuinely unaware of the meaning of "webbles", I just found " web rebels " difficult to say

[13:51:42.0000] <Hixie>
google knows of ~100 trillion pages

[13:51:49.0000] <Hixie>
how do you plan to contact them? phone calls?

[13:51:59.0000] <caitp>
mass email to DNS providers >:D

[13:52:30.0000] <Domenic>
JakeA: haha wow

[13:52:32.0000] <Hixie>
yeah, because spamming the world is definitely going to improve sales

[13:53:12.0000] <caitp>
for applications with real audiences, which have a real impact on sales, you could even go with face to face conversation to discuss breaking changes

[13:53:24.0000] <caitp>
does it scale? no, but it doesn't have to

[13:54:37.0000] <Hixie>
100 trillion pages.

[13:55:17.0000] <Hixie>
0.001% of them is a billion pages.

[13:55:32.0000] <Hixie>
i think it might have to scale.

[13:55:34.0000] <caitp>
pages is not necessarily "domains"

[13:56:04.0000] <Hixie>
there's more than a quarter of a billion domains

[13:56:07.0000] <caitp>
and a given organization may have many domains

[13:56:45.0000] <Domenic>
100 trillion, really? that's awesome.

[13:56:45.0000] <Hixie>
0.001% is 2500 domains that have to be contacted

[13:56:59.0000] <caitp>
which is totally doable

[13:57:04.0000] <caitp>
and then you could even bundle them by industry

[13:57:13.0000] <caitp>
government, utilities/transportation, entertainment, etc

[13:57:22.0000] <Hixie>
at five hours per domain, that's a year and a half non-stop per breaking change

[13:57:25.0000] <Hixie>
are you paying for that?

[13:58:10.0000] <Hixie>
also, have you seen the response you get from developers when you tell them there's going to be a breaking change? look in blink-dev at the reaction around showModalDialog().

[13:58:14.0000] <caitp>
out of my own pocket? hey, I'm a genius, not an oil executive

[13:58:22.0000] <Hixie>
so who's going to be paying for it?

[13:58:50.0000] <caitp>
who indeed

[13:59:32.0000] <Hixie>
hello browser vendor executive, please make a choice: we could do nothing, and it would cost nothing, or we could make this breaking change, and it would cost us x% of users or a year and a half of intensive conversations with developers who will be angry at us for breaking their site.

[14:00:07.0000] <caitp>
hey, what is money if it doesn't flow down the river

[14:00:36.0000] <wilhelm>
Hey, opportunity cost. (c:

[14:01:49.0000] <Hixie>
that's true, i forgot about hte opportunity cost. All the effort spent making that breaking change could instead have been spent making the browser a bit faster or more stable or whatever.

[14:02:28.0000] <caitp>
if you remove brokenness, you might see a performance and stability improvement, too :D

[14:02:46.0000] <Hixie>
do you have an example of how that could happen?

[14:02:54.0000] <Hixie>
generally, changing APIs just introduces bugs, it doesn't remove them

[14:03:13.0000] <caitp>
sure, suppose we removed 12 million lines of code, which no longer has to be linked into a binary

[14:03:20.0000] <Domenic>
Hixie: where in the spec would I go to find out what DOM should result from the strings "" vs. " "

[14:03:28.0000] <caitp>
no longer ends up getting called and no longer takes up cache lines

[14:03:46.0000] <caitp>
beautiful

[14:03:54.0000] <Domenic>
Hixie: as in, I saved an empty .html file and opened it in my browser, vs. a one-byte one containing a space.

[14:03:58.0000] <Hixie>
Domenic: you mean in parsing?

[14:04:07.0000] <Domenic>
Hixie: yeah I'd imagine so.

[14:04:09.0000] <Hixie>
Domenic: http://www.whatwg.org/specs/web-apps/current-work/#parsing

[14:04:26.0000] <Domenic>
Noooo trolled by the single-page spec again :P

[14:04:35.0000] <Hixie>
caitp: you were talking about changing APIs, not removing APIs

[14:04:54.0000] <caitp>
it's an example hixie, you could definitely do a lot of both

[14:04:58.0000] <Domenic>
if i were a browser engine implementer i would spend all my time improving browser speed when viewing the html standard, just as a matter of improving my own productivity :P

[14:05:10.0000] <Hixie>
caitp: you say "definitely", but i don't see on what you're basing this

[14:05:33.0000] <Domenic>
Hixie: I really like the new "Note", "Example", etc.

[14:05:36.0000] <caitp>
I base things on hypothetical scenarios

[14:05:45.0000] <Hixie>
Domenic: chrome is pretty fast at loading it. I don't really understand why the other browsers aren't improving to match it.

[14:05:52.0000] <caitp>
it's the best source of evidence

[14:06:11.0000] <Domenic>
(stunned silence)

[14:06:13.0000] <caitp>
such empirical, much scientific, wow

[14:06:36.0000] <Hixie>
i'll take that as a concession speech...

[14:06:42.0000] <caitp>
hardly

[14:07:05.0000] <caitp>
just a little good humour

[14:07:40.0000] <Hixie>
caitp: so what are you basing it on then?

[14:07:53.0000] <caitp>
let me scroll up to see what I said "definitely" baout

[14:07:55.0000] <caitp>
about*

[14:08:18.0000] <Domenic>
Hixie: well it turns out today is not the day I'm going to spend understanding the HTML parsing algorithm :P. Do you happen to know off the top of your head what behavior should be for "" vs " "? I can always test browsers I suppose.

[14:08:22.0000] <caitp>
oh, definitely remove and change apis

[14:08:40.0000] <caitp>
sure, there's a lot of complete crap that you could remove, like most of the parsing algorithm

[14:08:43.0000] <caitp>
(just for example)

[14:08:48.0000] <caitp>
most of the DOM api

[14:09:02.0000] <caitp>
most of CSS

[14:09:24.0000] <Hixie>
Domenic: i can look...

[14:09:42.0000] <caitp>
although removing a lot of that wouldn't make anyone very happy, it would be a marked improvement

[14:10:26.0000] <Hixie>
Domenic: looks like no difference. a space at the very start gets dropped on the floor.

[14:11:08.0000] <Hixie>
caitp: ok so removing "most of the parsing algorithm" would in fact affect trillions of pages on hundreds of millions of domains.

[14:11:25.0000] <caitp>
yeah, but think of how much code smell you could get rid of 8)

[14:11:28.0000] <Hixie>
caitp: so that's a non-starter even if i concede everything you said earlier about how easy it is to make breaking changes

[14:11:58.0000] <Hixie>
caitp: i'm going to assume that "msot of the DOM api" and "most of CSS" are just more "little good humour"

[14:12:03.0000] <Domenic>
Hixie: appreciated, thanks.

[14:12:40.0000] <caitp>
nah, if you could do it all over again, you could learn from past mistakes and improve it, and minimize special casing and bizarre behaviour

[14:12:48.0000] <caitp>
it would be beautiful

[14:13:45.0000] <caitp>
but obviously that's a wild leap beyond removal of simple things

[14:13:54.0000] <caitp>
but oh man, it would be glorious

[14:14:18.0000] <Hixie>
it would be glorious for about a month

[14:14:36.0000] <Hixie>
until the next new feature developed by someone who didn't have anything to do with the initial glorious design was added

[14:14:52.0000] <Hixie>
or until the next browser shipped with a minor bug that the web then started depending on

[14:15:07.0000] <Hixie>
and within a year we'd be back where we started

[14:15:17.0000] <caitp>
yeah but in another 2 decades you could do it all over again

[14:15:25.0000] <caitp>
totally worth it

[14:15:48.0000] <Hixie>
(or, more likely, it wouldn't take off in the first place, since it would have to compete with the existing web, and 100 trillion existing documents in ugly code would trump the 0 documents of beautiful code in users' eyes, since they don't see the code)

[14:15:50.0000] <wilhelm>
caitp: Aw, you're 12 years late. Here you go: http://www.w3.org/TR/xhtml2/

[14:16:06.0000] <caitp>
I have good friends on that WG

[14:16:20.0000] <caitp>
well, the xmlwg

[14:16:27.0000] <Domenic>
hehehehe

[14:16:31.0000] <Domenic>
wilhelm++

[14:16:31.0000] <Hixie>
well that explains a lot

[14:16:41.0000] <wilhelm>
:D

[14:17:40.0000] <caitp>
good people is good people, and sometimes they have sensible ideas

[14:18:04.0000] <jgraham>
caitp: So the real-world example with the closest properties to what you describe was Opera+Presto. It didn't intentionally break APIs, but due to low marketshare sites didn't go out of their way to support it. As a result Opera did a huge amount of outreach to sites, and a huge amount of work on implementation quality. But often sites wouldn't apply fixes even if you literally sent them a patch file to apply to their code. Not small site either; hu

[14:18:34.0000] <wilhelm>
jgraham: /load splitlong.pl

[14:18:55.0000] <jgraham>
wilhelm: Oh, I thought I already had

[14:19:02.0000] <jgraham>
caitp: So the real-world example with the closest properties to what you describe was Opera+Presto. It didn't intentionally break APIs, but due to low marketshare sites didn't go out of their way to support it. As a result Opera did a huge amount of outreach to sites, and a huge amount of work on implementation quality. But often sites wouldn't apply fixes even if you literally sent them a patch file to apply to their code. Not small site either; hu

[14:19:08.0000] <jgraham>
... got hundreds of thousands of Opera users.

[14:19:20.0000] <caitp>
yeah but if all of our mighty browser vendor overlords joined in for the breaking changes, people wouldn't really have a choice. but I do know that it's not something that's going to happen any time soon, it's a pipedream

[14:20:03.0000] <jgraham>
Yes, but getting everyone to act like that isn't a Nash equilibrium

[14:22:20.0000] <Hixie>
jgraham: your text cut off at "Not small site either; hug" then contined with "... got hundreds"

[14:22:24.0000] <Hixie>
continued

[14:23:36.0000] <Hixie>
caitp: i don't think anyone is arguing that "people" aren't "good people". Just that said "people", apparently including you, have an unrealistic idea of what is achievable when it involves changing how people think or act.

[14:24:03.0000] <caitp>
or you know what might happen instead, maybe the WWW will simply stop existing as nationstates put up huge national firewalls, and architect strong protections against those firewalls being undermined, and that greatly reduces the pool of applications that would be affected

[14:24:30.0000] <caitp>
it's not that I have an unrealistic sense of what is achievable

[14:24:37.0000] <Hixie>
that is debatable.

[14:24:38.0000] <caitp>
it's that I have a lot of confidence

[14:24:58.0000] <jgraham>
"huge ones that probably"

[14:25:05.0000] <Hixie>
ok, you have an unrealistic level of confidence in what is achievable.

[14:25:07.0000] <Hixie>
imho

[14:25:21.0000] <wilhelm>
Not unrealistic. Positively harmful. What a waste of good engineers. (c:

[14:25:36.0000] <caitp>
hey, at least I'm not trying to start the next snapchat

[14:27:02.0000] <Hixie>
as jgraham says, getting all the browser vendors to work in this way is not a nash equilibrium. In practice, humans do act to find a nash equilibrium.

[14:46:27.0000] <Hixie>
Domenic: how does the promise pattern fit into models where we use onreadystatechange today, where the object can be in multiple states and transitions through them one by one?

[14:47:46.0000] <Domenic>
Hixie: three answers to that...

[14:47:58.0000] <Domenic>
1) it doesn't; promises are for simple one and done async ops

[14:48:15.0000] <Domenic>
2) it might be useful for users to have a promise for the 80% case, e.g. completely-loaded

[14:49:19.0000] <Domenic>
3) in certain cases it can be natural to model individual state transitions as promises. E.g. you could have both ".headersReceived" and ".loaded" promises. (I don't remember the other ready states besides loaded... picked headersReceived because it seemed plausible.)

[14:49:28.0000] <Domenic>
3) is pretty rare though

[14:50:12.0000] <Domenic>
you could consider document.ready vs. document.loaded as an instance of 3), I guess.

[14:54:44.0000] <Hixie>
Domenic: i'm looking at script and resource loading, and there's all kinds of edge cases, different states, etc.

[14:55:02.0000] <Hixie>
Domenic: e.g. you want to know when some things are downloaded but not yet executed, so you can execute something when everything is ready

[14:55:10.0000] <Hixie>
Domenic: or you want to know when everything has executed, so you can use the api

[14:55:26.0000] <Hixie>
Domenic: or you want to know when things have started downloading, to show progress UI

[14:55:58.0000] <Domenic>
some of the questions to ask are: is it useful for a "late" subscriber to know that these things occurred?

[14:56:27.0000] <Domenic>
e.g. if the script has already executed, do you usually want to run the same code in response to that, as you would run if you had queued up a handler before the execution happened?

[14:56:41.0000] <Domenic>
with events, if you miss your chance for registration, then you have to switch programming patterns

[14:57:00.0000] <Domenic>
if (alreadyExecuted) { doStuff1(); } else { addEventListener("executed", doStuff2); }

[14:57:17.0000] <Domenic>
if doStuff1 and doStuff2 are always the same code, then promises are better

[14:57:23.0000] <Domenic>
if they are always different, events are better

[14:57:46.0000] <Domenic>
(a common case being doStuff1 is a noop, whereas doStuff2 takes action)

[14:58:32.0000] <Domenic>
progress is pretty explicitly out of scope for promises

[14:58:35.0000] <Domenic>
events work well for that

[14:58:53.0000] <Domenic>
although the use case of knowing when progress *starts* is an interesting one... my gut says it's not a common use case?

[14:59:08.0000] <Domenic>
i could potentially see .executed and .loaded as two separate state-transition-signalling promises

[14:59:21.0000] <Domenic>
but i am not sure it is worth the use case

[15:00:07.0000] <Domenic>
oh, the other big question is, can this event occur more than once

[15:00:35.0000] <Domenic>
if it occurs only 0 or 1 times, then a promise might be a good fit. Especially if the alternative to occuring once is an error.

[15:01:07.0000] <Domenic>
More than once, and you should probably not use a promise, except for the cases we were talking about earlier where "most of the time" authors use them as one-shots, like <img>

[15:01:33.0000] <Domenic>
bigger picture

[15:02:26.0000] <Domenic>
the utility of adding promises for e.g. script loading is they are easily combinatored, e.g. Promise.all([script1.loaded, script2.loaded]).then(() => { doStuff(); return script3.loaded.then(() => doStuffDependingOnScript3()); }

[15:03:11.0000] <Domenic>
going through each potential thing that the platform wants to expose and agonizing over the "correct" paradigm to use when exposing is as important as considering the value-add for common use cases like that.

[15:03:22.0000] <Domenic>
s/is as/is not as/

[15:03:56.0000] <Domenic>
although upon reflection it seems likely that script.executed would be more useful in that sense than script.loaded

[15:11:53.0000] <Hixie>
Domenic: well if the .loaded promise needs to get reset each time you load a new one, it's not clear to me why others wouldn't as well

[15:12:03.0000] <Hixie>
Domenic: i'll be providing events for anything provided with promises anyway

[15:12:13.0000] <Hixie>
Domenic: so you always have the choice of doing it the event way

[15:12:17.0000] <Domenic>
Hixie: they probably would need to be reset.

[15:13:51.0000] <Hixie>
also, what's the pattern for handing a promise to an API to tell the API to not do anything until that promise has resolved somehow?

[15:15:39.0000] <Domenic>
"When _p_ becomes fulfilled..." or similar phrasings. There's a particular WebIDL thing you can link to

[15:16:01.0000] <Domenic>
http://heycam.github.io/webidl/#es-promise

[15:16:08.0000] <Domenic>
erform some steps once a promise is settled

[15:16:25.0000] <Domenic>
I had a few more https://github.com/w3ctag/promises-guide#shorthand-phrases

[15:16:32.0000] <Domenic>
but they belong in WebIDL

[15:23:29.0000] <Hixie>
i mean the api surface itself

[15:23:31.0000] <Hixie>
not how to spec it

[15:24:47.0000] <Domenic>
promise.then(theAPI)?

[15:25:04.0000] <Domenic>
or promise.then(() => theAPI(promise)) if it is important the API receives a promise

[15:27:38.0000] <Hixie>
no no, the idea is that the API would be given a handful of promises and other dependencies, and would wait until they've all been fulfilled

[15:27:55.0000] <Hixie>
so you can't just wait until your promise has fulfilled before informing the API for it, otherwise the API wouldn't know to wait

[15:28:38.0000] <Domenic>
I don't quite understand the second sentence, but the first sounds like Promise.all([p1, p2, p3]).then(([v1, v2, v3]) => ...)

[15:32:26.0000] <Hixie>
suppose you have a <script>

[15:32:43.0000] <Hixie>
it depends on an <img> element and another <script> element, identified by IDs, and specified via an attribute in the markup.

[15:32:53.0000] <Hixie>
and another script wants to say "also, wait until promise P is done too"

[15:33:06.0000] <Hixie>
so you have script S, and promise P, and... go

[15:33:50.0000] <Hixie>
or suppose you have a script S and two separate other scripts that don't know about each other want to add promises P1 and P2 to the list of promises that S is waiting on before executing

[15:34:05.0000] <Hixie>
what would the script behind P1 do?

[15:34:21.0000] <Hixie>
S.addDependency(P1)?

[15:35:14.0000] <Domenic>
Oh, we want to add the ability for a script to block another script's execution on arbitrary async events??

[15:35:23.0000] <SamB>
are we trying to add Make to JS now?

[15:35:57.0000] <Hixie>
SamB: see http://www.whatwg.org/specs/web-apps/current-work/multipage#abstract

[15:36:11.0000] <Hixie>
Domenic: right

[15:36:21.0000] <Hixie>
Domenic: (or something else, doesn't have to be a script we're blocking)

[15:36:36.0000] <Hixie>
Domenic: (could be, don't load this style sheet unless all these promises have resolved)

[15:36:41.0000] <Domenic>
Hixie: Do you want to actually block execution, or block other people from being notified of execution?

[15:36:55.0000] <Hixie>
block execution

[15:36:58.0000] <Domenic>
Wait, "don't load this style sheet unless all these promises have resolved" is easy:

[15:36:59.0000] <Hixie>
(and possibly download)

[15:37:07.0000] <benjamingr>
Hixie `.then` unwraps things recursively, if each promise returns a promise for all its dependencies (via .all) , that promises will resolve when all those dependencies are resolved.

[15:37:11.0000] <Domenic>
Promise.all([p1, p2, p3]).then(() => stylesheet.load())

[15:37:27.0000] <Hixie>
there might be two separate scripts independently doing this to the same style sheet

[15:37:41.0000] <Domenic>
So script 2 can affect how script 1 loads resources

[15:37:54.0000] <Domenic>
honestly this feels like a service worker level thing, if you want scripts to interfere with network-level operations like that

[15:38:29.0000] <benjamingr>
loadDependends = (obj) => getDependents(obj).then(deps => Promise.all(deps.map(getDependents))

[15:38:33.0000] <Hixie>
Domenic: i don't really see how this would fit into service workers

[15:39:00.0000] <Hixie>
i've no idea what that code is doing

[15:39:16.0000] <Domenic>
Hixie: onfetch = function (ev) { if (isStylesheetIWantToDelay(ev.req)) { otherPromise.then(() => ev.respondWith(...)); }

[15:39:25.0000] <Domenic>
benjamingr: I don't think that's what Hixie is asking about

[15:39:44.0000] <Domenic>
Hixie: you are saying that you want the ability for scripts to intercept arbitrary resource loads and delay them based on other async ops

[15:39:45.0000] <benjamingr>
Hixie: :) Ok, it takes an object, and calls getDependents on it, then, when those arrive, it maps each dependent to its own dependencies and continues to resolve the dependencies until it reaches everything - I thought that's what you meant.

[15:39:46.0000] <Hixie>
i've no idea what _that_ code is doign either

[15:39:51.0000] <Domenic>
that is basically service worker

[15:40:03.0000] <Hixie>
how does the service worker know what the style sheet is?

[15:40:16.0000] <Domenic>
presumably script1 told it

[15:40:19.0000] <Hixie>
Domenic: not quite, but close

[15:40:42.0000] <Hixie>
the api i'm thinking of would be something like:

[15:40:53.0000] <Hixie>
myStylesheet.addDependency(myPromise);

[15:41:15.0000] <Hixie>
that seems simpler than the stuff y'all are describing above...

[15:41:34.0000] <Hixie>
especially the stuff with => where i can't tell where the lambda starts and where it finishes

[15:41:44.0000] <benjamingr>
Hixie: that has to be a builder pattern though, right? I'd have to call a `.init()` or something, otherwise I would never know when I'm done calling `addDependency`

[15:42:16.0000] <Domenic>
Hixie: that seems like an API you would build on top of service worker, yeah. Only service worker has that kind of interception capability right now.

[15:42:31.0000] <Hixie>
benjamingr: there's a separate method to say "ok now i need you, load all your pending dependencies and once everything is ready, apply yourself and let me know you're done"

[15:42:43.0000] <Domenic>
Hixie: in particular, the ability to interfere with loads you yourself do not execute is the new thing

[15:42:52.0000] <benjamingr>
Ah, I think I understand now, lemme see if I can write something like this in ES5ish

[15:43:08.0000] <Hixie>
Domenic: i don't see what service workers have to do with anything here. How do you delay the application of a <link> element, or <style>, or <img>, or <script>, from a service worker? You can't get to the DOM from those.

[15:43:12.0000] <zewt>
hard to believe that "we don't have code to generate unguessable uuids" is actually being used as a reason for anything

[15:43:23.0000] <Domenic>
Hixie: you prevent the HTTP response from coming back!

[15:43:29.0000] <Hixie>
who said anything about HTTP?

[15:43:35.0000] <zewt>
hard to believe that any browser would generate guessable uuids, for that matter

[15:43:57.0000] <Hixie>
UUIDs are usually surprisingly guessable

[15:43:59.0000] <Hixie>
by design

[15:45:07.0000] <Domenic>
Hixie: it is use-case equivalent to prevent something from being loaded vs. being applied. (You have to be clever and send the response anyway, but delay relaying it to the main thread until the delay is over, so as to avoid extra latency from excessive laziness. But straightforward.)

[15:45:32.0000] <Domenic>
If you disagree with that, then that seems like an argument for separating the APIs that load and apply these resources, more than anything.

[15:45:41.0000] <benjamingr>
Hixie: you mean something like this? https://gist.github.com/benjamingr/749bfe2b3c0411c7430c (in terms of API)

[15:46:06.0000] <Domenic>
that gist is pretty good

[15:46:32.0000] <benjamingr>
whoops, cache is not needed I decided it complicates things so I edited. Sorry about that.

[15:46:50.0000] <Hixie>
Domenic: well you definitely want to be able to fetch the resources ahead of time (and even compile / decode them)

[15:46:56.0000] <Domenic>
in fact it's probably best to ignore my insistence that this is service-worker level and focus on this gist.

[15:47:48.0000] <Hixie>
i don't understand what tht gist is trying to do

[15:47:58.0000] <Domenic>
it is giving you your API

[15:48:07.0000] <Hixie>
how would you use this?

[15:48:08.0000] <Domenic>
var resource = new ResourceBuilder();

[15:48:14.0000] <Domenic>
resourceBuilder.addDependency('foo');

[15:48:19.0000] <Domenic>
reosurceBuilder.addDependency('bar');

[15:48:31.0000] <Domenic>
resourceBuilder.get().then(() => { 'foo' and 'bar' have been loaded })

[15:49:13.0000] <Domenic>
in the gist there is a separation between dependencies (strings in my example) and promises, with the loadDependency function converting dependencies into promises

[15:49:30.0000] <Hixie>
how is this better than just foo.addDependency(bar) ?

[15:49:36.0000] <Hixie>
where foo is an element and bar is a promise

[15:49:41.0000] <zewt>
death to all "Builder" classes

[15:49:56.0000] <Domenic>
Hixie: it's not; if you don't need that extra level of intermediation then it's unnecessary

[15:50:00.0000] <benjamingr>
Hixie: How can you ever know if foo is ready?

[15:50:18.0000] <Hixie>
benjamingr: what do you mean by "ready"? and why would you want to know?

[15:50:19.0000] <zewt>
(usually they're just extra busywork, eg. BlobBuilder vs. new Blob)

[15:50:41.0000] <Domenic>
zewt: Hixie's argument is that the creator of the resource is not the same as the person who adds dependencies to the resource

[15:50:51.0000] <Domenic>
zewt: so you hand out the "building" capability to other people

[15:50:52.0000] <benjamingr>
Hixie: how can I use `foo` if I don't know yet if it has all the dependencies it requires to be used?

[15:51:10.0000] <Domenic>
benjamingr: Hixie: I think you two are talking past each other.

[15:51:26.0000] <Domenic>
Modulo benjamingr's gist having an unnecessary level of indirection, it illustrates exactly what Hixie was asking for.

[15:52:19.0000] <Hixie>
benjamingr: well presumably whoever is doing this would set up all the dependencies before telling anything to actually get applied/executed

[15:53:17.0000] <Domenic>
Here, forked and clarified https://gist.github.com/domenic/f19ba7fb48d53e2590fa

[15:53:34.0000] <Domenic>
i wasn't sure if you wanted resource to load in parallel with dependencies or after it

[15:53:44.0000] <Domenic>
right now it's in parallel

[15:54:06.0000] <benjamingr>
Hixie: this is exactly what the builder does for you and why I used that indirection, the `.get` method is what actually contains the logic to get the instance, and is what gives us a guarantee that we're only going to use the dependencies we have so far to build this instance, if we fail to do it with those resources, we fail. It 'snapshots' the current

[15:54:06.0000] <benjamingr>
dependencies.

[15:55:22.0000] <Hixie>
benjamingr: so suppose that the thing that we're blocking on is  <script src="a.js" whenneeded needs="b.js c.js"></script>

[15:55:25.0000] <Domenic>
.get() is Hixie's "there's a separate method to say "ok now i need you, load all your pending dependencies and once everything is ready, apply yourself and let me know you're done" from earlier

[15:55:50.0000] <Hixie>
benjamingr: and support that one script wants to say "a.js also needs to wait for my style sheet" and b.js wants to say "a.js also needs to wait for my promise"

[15:56:09.0000] <Hixie>
benjamingr: and then once that's all done, some other script calls scriptA.execute()

[15:56:17.0000] <Hixie>
benjamingr: how does your gist fit into this?

[15:56:18.0000] <benjamingr>
Hixie: yes! we'd like a.js loading to trigger loading b.js and c.js too :) That's what I attempted to initially describe with all those arrows (and failed), let me see if I write a more readable function that does it.

[15:57:02.0000] <Hixie>
(the needs="" attribute here being the stuff i proposed last year, syntax probably to change)

[15:57:28.0000] <Hixie>
(well, whenneeded is more likely to change than needs="". people seemed ok with needs="".)

[15:58:56.0000] <Hixie>
/me mumbles, on an unrelated note, about how repeatedly referencing zalgo isn't particularly helpful in making one's case

[15:59:01.0000] <benjamingr>
Hixie: how would we know that b.js also needs d.js or a stylesheet?

[15:59:26.0000] <Hixie>
benjamingr: who's "we" here? and what are those other resources?

[15:59:54.0000] <benjamingr>
Let's say I'm c.js and I'm not in a script tag, how do we know my dependencies? When it was a.js, I knew the dependencies by reading the script tag.

[16:01:54.0000] <Hixie>
how would you not be in a script tag?

[16:02:15.0000] <Hixie>
the only way to run an external script file is from a script element

[16:02:21.0000] <benjamingr>
In your above example, a had a b.js dependency, however - b.js may have dependencies of its own - right? Where are those specified?

[16:02:36.0000] <Hixie>
on the <script src="b.js"></script> element

[16:02:51.0000] <benjamingr>
Ah, cool :)

[16:02:55.0000] <benjamingr>
Ok, gisting

[16:02:59.0000] <Hixie>
needs="" doesn't cause any script to run

[16:03:17.0000] <Hixie>
it just says "I need to have previously had <script>s pointing to these URLs executed"

[16:03:27.0000] <Hixie>
(or, later, modules or whatnot)

[16:04:49.0000] <benjamingr>
I think I understand what we're doing a lot better now, gisting :)

[16:06:15.0000] <benjamingr>
Hixie: what would you like to do about a recursive depencency? Right now I deadlock

[16:07:53.0000] <Hixie>
i can fix those easily enough

[16:07:59.0000] <Hixie>
don't worry about those

[16:08:10.0000] <Hixie>
i'm more interested in what the API looks like

[16:08:18.0000] <Hixie>
the UA-provided API, i mean

[16:09:49.0000] <benjamingr>
Hixie: https://gist.github.com/benjamingr/0ed038727f38fb77e7ee

[16:10:08.0000] <benjamingr>
This is just the function that resolves a dependency, let's add it to the API :)

[16:14:17.0000] <Hixie>
let's try this a different way

[16:14:19.0000] <Hixie>
http://software.hixie.ch/utilities/js/live-dom-viewer/saved/3030

[16:14:28.0000] <benjamingr>
I'm still writing :)

[16:14:30.0000] <Hixie>
what would you put in place of the two places there that say // INSERT CODE ?

[16:15:04.0000] <benjamingr>
ah cool, this is easier

[16:17:45.0000] <Hixie>
(for the record, here's what my current straw man is: http://software.hixie.ch/utilities/js/live-dom-viewer/saved/3031 )

[16:18:36.0000] <benjamingr>
Oh, I thought you wanted me to actually code something that does this :)

[16:18:56.0000] <Hixie>
oh

[16:18:58.0000] <Hixie>
no no

[16:18:59.0000] <Hixie>
sorry

[16:19:30.0000] <Hixie>
that's the browser vendors' problem :-)

[16:19:32.0000] <benjamingr>
Ah, wouldn't that make talking about it easier though?

[16:20:19.0000] <Hixie>
well it couldn't hurt

[16:20:29.0000] <Hixie>
but the end goal is to figure out what the UA API should be

[16:21:14.0000] <benjamingr>
Yeah, but that's hard to do without something working to test on :)

[16:22:52.0000] <Hixie>
i usually find that if i can make a convincing shim that does the same thing, it means i don't need an API

[16:23:16.0000] <Hixie>
so usually i only need to be designing APIs when making a convincing shim is either very hard, or implausible

[16:23:39.0000] <benjamingr>
I can make a convincing shim if I do `data-src` instead of `src`

[16:29:35.0000] <Domenic>
^ pointing to how separating execution from loading is really what's at stake here


2014-05-21
[17:06:32.0000] <benjamingr>
sorry, had to leave, I'll get back to this tomorrow :)

[17:08:10.0000] <coolbot95>
Can somebody tell me what the current state of HTML 5 audio is? I really wish to drop Flash finally now. Does HTML 5 audio - whatever it is called now - have support for multi-voice (multiple samples at once), panning and volume?

[17:08:15.0000] <coolbot95>
And support in all modern browsers?

[17:53:13.0000] <MikeSmith>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=25721 "Does choosing to run a javascript application mean that the user must accept all the choices made by this application?" ...

[17:54:43.0000] <Hixie>
coolbot95: it's called "Web Audio", and I believe the answer is yes

[18:05:58.0000] <zewt>
MikeSmith: bad%20life%20decisions.js

[18:06:14.0000] <Domenic>
MikeSmith: oh my god, that thread, I feel so bad for Ryan :(

[18:14:36.0000] <zewt>
did someone fall into a trap?

[18:23:57.0000] <coolbot95>
Hixie: Hmm...

[18:24:22.0000] <coolbot95>
Hixie: Can you link me to documentation?

[18:24:29.0000] <coolbot95>
It's such a jungle of different terms.

[18:24:43.0000] <coolbot95>
I think they tried to standardize this multiple times?

[18:24:50.0000] <coolbot95>
I really wanna leave Flash 100% now.

[18:24:57.0000] <coolbot95>
No more dependency on Flash objects for audio playback.

[18:33:57.0000] <bengl>
coolbot95: this isn't a half-bad place to start: http://www.html5rocks.com/en/tutorials/webaudio/intro

[18:42:21.0000] <zewt>
i wonder how much less hated windows APIs would be if they released source for them fifteen years ago

[18:43:38.0000] <zewt>
nothing to do with "open source" or changing anything, it's just 100x easier to figure out why their APIs (which are still terrible) are behaving strangely

[18:43:58.0000] <MikeSmith>
Domenic: yeah Ryan's gotta be admired for making the effort. He put way more time responding to that guy than I would have bothered to.

[18:46:47.0000] <MikeSmith>
/me imagines the discussion with the directory about that formal objection... "So here's how the web works, and over here is how this guy would like for it to work instead. Changing the way the entire web works is a bit out of scope for the crypto spec..."

[18:48:13.0000] <hober>
MikeSmith: Domenic: context?

[18:48:37.0000] <SamB>
zewt: then people would complain even MORE if undocumented aspects the behaviour changed, probably

[18:48:47.0000] <MikeSmith>
hober: https://www.w3.org/Bugs/Public/show_bug.cgi?id=25721

[18:48:54.0000] <zewt>
"formal objections" seem to be a pretty reliable way to alienate everyone in earshot

[18:49:27.0000] <MikeSmith>
zewt: :) yeah pretty much. At least the few people who are actually listening

[18:49:37.0000] <SamB>
I think it should be required to wear formalwear to issue a formal objection

[18:50:14.0000] <MikeSmith>
making a formal objection is pretty much never a good idea

[18:50:20.0000] <zewt>
i mean if it was a known mozilla developer we'd probably stop and think "maybe he's doing this for a reason", but invariably it's someone at some hostname nobody's ever heard of

[18:50:52.0000] <SamB>
MikeSmith: the requirement to wear a tuxedo might reenforce that principle nicely

[18:53:20.0000] <zewt>
SamB: i don't really care how much people complain, it makes my life easier

[18:53:44.0000] <zewt>
not that it actually makes things like WPF not nightmarishly broken or anything

[18:53:47.0000] <SamB>
plus I figure the pictures would be funny

[18:54:21.0000] <MikeSmith>
SamB: we should add some other requirement like they have to physically nail the objection to somebody's front door

[18:54:41.0000] <SamB>
while wearing a tuxedo?

[18:54:47.0000] <zewt>
the only platforms I've done UI stuff on in living memory where I could pretty reliably tell what was going on, and avoid spending more time convincing the UI than actually getting stuff done, are the web and ... iOS, oddly

[18:54:55.0000] <SamB>
and post pictures on the 'net?

[18:54:55.0000] <zewt>
wpf: totally broken. android: totally broken.

[18:54:56.0000] <MikeSmith>
SamB: there we go. good brainstorming

[18:55:39.0000] <zewt>
(basically, the APIs that try to force "separation of business logic" crap on you, whether it makes sense or not, tend to be the ones that are nearly unusable)

[18:56:21.0000] <SamB>
wait, there's business logic in android apps?

[18:56:48.0000] <SamB>
/me thought they were all toys

[18:57:19.0000] <zewt>
android has a lack of toys, too, but that's a separate issue

[18:57:22.0000] <coolbot95>
zewt: Huh? The source code for their API? That makes no sense.

[18:57:31.0000] <coolbot95>
That must mean you want them to release the source code for their OS.

[18:57:34.0000] <zewt>
...

[18:57:39.0000] <MikeSmith>
formal objections are usually just a formal statement of "Let this hereby be a formal record of the fact that I've failed to make a convincing argument."

[18:58:07.0000] <zewt>
they release source to chunks of APIs http://referencesource.microsoft.com/#PresentationFramework/src/Framework/System/Windows/Input/KeyboardNavigation.cs

[18:58:31.0000] <SamB>
but not the win32 APIs

[18:58:31.0000] <coolbot95>
But... and API...

[18:58:38.0000] <coolbot95>
Source code... to an API...

[18:58:41.0000] <coolbot95>
/me 's head explodes.

[18:58:47.0000] <coolbot95>
*an API

[18:58:53.0000] <SamB>
coolbot95: it's a common sloppy usage ...

[18:58:57.0000] <zewt>
sorry, you're not being very interesting, informative or helpful

[18:59:17.0000] <SamB>
coolbot95: insert the term "implementation" in there somehow and it will make more sense

[18:59:31.0000] <zewt>
MikeSmith: with the other important detail: "... and I think I should be able to win the argument anyway because my employer gives money to the W3C"

[18:59:45.0000] <MikeSmith>
heh

[18:59:50.0000] <MikeSmith>
yeah that too

[18:59:53.0000] <caitp>
ralph: did you write software to generate those it's vs its typo fix patches, or are you just bored and doing that on your own? if it's software I'd like to see it, I'm interested

[19:00:27.0000] <zewt>
MikeSmith: it's probably the operative part, at least as far as the impression people make on me when they do it

[19:01:30.0000] <MikeSmith>
zewt: though in the case of that bug, their reporter neither works for the w3c nor has ever contributed in any way to developing new security/privacy-related technologies/standards for the platform

[19:01:50.0000] <coolbot95>
I have to use a god damn XMLHttpRequest to load sounds? Why isn't it just like Image()?

[19:01:57.0000] <MikeSmith>
zewt: yeah, that is the impression it makes in most case

[19:02:35.0000] <zewt>
coolbot95: well, god DAMN IT then

[19:03:00.0000] <coolbot95>
zewt: What?

[19:03:12.0000] <SamB>
wouldn't a regular XMLHttpRequest work just fine?

[19:03:51.0000] <zewt>
heretical xhr is cooler than sync xhr, that's for sure

[19:04:03.0000] <coolbot95>
SamB: It makes it look ugly.

[19:04:17.0000] <SamB>
I mean why do you need to use a god damn one

[19:04:19.0000] <coolbot95>
If Image() is done like that, why not Audio()?

[19:04:24.0000] <zewt>
SamB: "whoosh"

[19:04:41.0000] <coolbot95>
It's ugly to have to use an XMLHttpRequest.

[19:05:29.0000] <caitp>
if the api were pretty, it wouldn't be successful

[19:05:41.0000] <MikeSmith>
zewt: also the thing is, the director doesn't really care whether a comment is a formal objection or not. he care about the technical merit of the comment regardless. Also I think that spec is in last call right now, and if so, the WG will anyway be obligated to inform the director about any comments that were not resolved to the commenter's satisfication. So there's no different process effect between making a Last Call comment and making a formal obj

[19:05:50.0000] <caitp>
the only way for it to be successful is for it to be both A) terrible and B) the only option!

[19:06:25.0000] <SamB>
MikeSmith: except the "I'm a douchebag" effect

[19:06:50.0000] <zewt>
well, that's the main effect we've been talking about ... though that perhaps is a more succinct way of putting it

[19:07:20.0000] <coolbot95>
The linked-to article is from 2011.

[19:07:23.0000] <SamB>
I mean the formal objection will communicate this to the director, too

[19:07:28.0000] <coolbot95>
And does not mention anything about volume or panning as far as I can see.

[19:07:32.0000] <coolbot95>
Or about multi-voice.

[19:07:41.0000] <MikeSmith>
/me smiles about caitp's earlier "what is money if it doesn't flow down the river"

[19:07:47.0000] <zewt>
maybe a different aspect is "your arguments are irrelevant because we pay the W3C", which may be why it feels like an insult

[19:07:49.0000] <coolbot95>
It does mention realtime filters, though, which is unexpected.

[19:08:06.0000] <coolbot95>
You'd think panning and volume would be basics.

[19:08:06.0000] <bengl>
coolbot95: https://developer.mozilla.org/en-US/docs/Web_Audio_API

[19:08:13.0000] <coolbot95>
And realtime filters would be fancy.

[19:09:06.0000] <bengl>
coolbot95: also https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement

[19:10:05.0000] <caitp>
it's a great line mike, you've got to drop it at the appropriate time though, like when people are daring you to spend millions of dollars on something that nobody will ever agree on

[19:11:12.0000] <MikeSmith>
heh

[19:25:08.0000] <coolbot95>
Why is audio playback such a massive, over-engineered deal?

[19:25:26.0000] <coolbot95>
Even back in the MS-DOS days, a genius such as John Carmack would still license out the audio playback part.

[19:25:43.0000] <coolbot95>
He could code a fantastic 3D engine for very slow computers, but not audio playback.

[19:25:56.0000] <caitp>
it's just electronics

[19:26:05.0000] <coolbot95>
?

[19:26:33.0000] <caitp>
surely you could build a neve mixer in your garage, how hard could it be

[19:26:45.0000] <coolbot95>
What?

[19:27:05.0000] <caitp>
super simple stuff

[19:52:57.0000] <coolbot95>
Have you been smoking crack cocaine?

[19:55:14.0000] <caitp>
oh dear

[20:03:05.0000] <TabAtkins>
Hixie: The way you handle the "don't do something until this promise I'm handing you settles" is by making a method that takes the promise as an arg.

[20:03:50.0000] <TabAtkins>
ServiceWorker has a .waitUntil(Promise) method for this.

[20:59:53.0000] <Hixie>
TabAtkins: yeah, that's what i assumed. i was getting confused by Domenic and benjamingr :-|

[21:00:13.0000] <Hixie>
TabAtkins: can waitUntil be called several times?

[21:59:59.0000] <TabAtkins>
Dunno.

[22:44:42.0000] <MikeSmith>
Hixie: the URL spec doesn't like your data: URLs http://sideshowbarker.net:8888/?doc=http%3A%2F%2Fwhatwg.org%2Fspecs%2Fweb-apps%2Fcurrent-work%2F

[23:04:17.0000] <zcorpan>
Hixie: i like the rotated labels :-)

[23:50:55.0000] <TabAtkins>
Hixie: And I like the :target styling, and will try to steal it for CSS.

[23:51:37.0000] <Hixie>
man is https://github.com/domenic/promises-unwrapping/issues/24#issuecomment-43714664 really the kind of code we can expect to see when promises are everywhere? that's horrifying

[23:52:06.0000] <Hixie>
just long changes of method calls with no obvious control flow

[23:52:09.0000] <Hixie>
chains

[23:52:17.0000] <Hixie>
TabAtkins: cool

[23:52:58.0000] <Hixie>
MikeSmith: any idea which character it is it doesn't like?

[23:54:00.0000] <TabAtkins>
Hixie: That's already the code we have today with callback functions (see: "callback hell"), except it's worse today due to the rightward march.

[23:54:19.0000] <TabAtkins>
Also terrible error-handling, no free synchronization primitives, etc.

[23:54:45.0000] <Hixie>
i don't recall every writing code that hard to read

[23:54:47.0000] <TabAtkins>
Hixie: Promise code is as close as we can get to straight-line sync code without new JS facilities.

[23:55:05.0000] <TabAtkins>
And new JS facilities *are* coming - the "await" keyword lets you write code that looks sync.

[23:55:31.0000] <Hixie>
yeah except i'll never be able to use it because it screws up throwing TypeErrors...

[23:55:51.0000] <MikeSmith>
Hixie: the braces I think

[23:55:53.0000] <TabAtkins>
Actually, "await fetch()" I suspect would throw a rejection.

[23:55:56.0000] <Hixie>
MikeSmith: ah

[23:56:04.0000] <TabAtkins>
No sure I've heard it.

[23:56:20.0000] <TabAtkins>
Rather, "not sure I've heard of the specific plans for what 'await' does for rejections".

[23:57:16.0000] <TabAtkins>
Because `try { await fetch(...) } catch(e) {...}` can get CPT-transformed into good code for you, in a way that is super clumsy and terrible when doing straight promises by themselves.

[23:57:56.0000] <TabAtkins>
If it makes you feel better, just remember that using raw promises everywhere is a middle step in the evolution of good async handling.

[23:58:09.0000] <TabAtkins>
(And that no matter how bad you think it looks, it looks much worse today.)

[23:58:26.0000] <TabAtkins>
(And if you think you write elegant beautiful callback-hell code, you can do the same thing with promises.)

[00:00:11.0000] <TabAtkins>
Hixie: Basically, check out http://www.xanthir.com/b4P_0. We're still in the Mauvascript stage of async code, with Promises being a pretty band-aid.

[00:02:20.0000] <Hixie>
i don't understand why .foo('5') should fail one way when you typoed "foo" and a different way when you typoed its argument.

[00:02:30.0000] <MikeSmith>
Hixie: btw I notice my chrome doesn't scroll to the right place when I visit http://url.spec.whatwg.org/#url-code-points (though Firefox does). I wonder if it's a side effect of the spec stylesheet redesign, and the :target thing

[00:02:48.0000] <Hixie>
MikeSmith: yeah i've noticed that too. i think it might be, though no idea why or how

[00:03:05.0000] <MikeSmith>
seems like a chrome bug

[00:03:48.0000] <Ms2ger>
Good morning, Hixie

[00:04:51.0000] <Hixie>
yeah i really should head to bed

[00:15:50.0000] <TabAtkins>
Hixie: I typed a more involved argument into GitHub.

[00:16:05.0000] <TabAtkins>
One you have `await` it won't be different (when you use await).

[00:16:44.0000] <TabAtkins>
Right now, and in the future when you're operating on the promise directly, it'll just be a wart from JS not supporting async from the get-go.  Oh well.

[00:18:17.0000] <Ms2ger>
Yay, more warts

[00:18:32.0000] <TabAtkins>
It's an existing wart, so whatevs.

[00:19:22.0000] <Ms2ger>
I think it's funny how quickly promises moved from "the bright new future" to "wart"

[00:19:41.0000] <TabAtkins>
If JS had some different syntax for calling things async, it'd probably work - the language would catch any errors for you and package them into a rejected promise automatically.

[00:19:54.0000] <TabAtkins>
Ms2ger: Why are you implying they aren't both?

[00:20:26.0000] <zcorpan>
annevk: seems we're gonna try url("..." crossorigin etc); and you have to use quotes. possibly also support image("..." crossorigin etc, <color>);

[00:20:27.0000] <TabAtkins>
Promises are the stepping stone towards good async, representing the base notion of an "async value".  They're great, and enable tons of great things that'll make lots of different programming concepts better.

[00:21:16.0000] <TabAtkins>
annevk: Specifically, I'm pretty sure I can adjust Syntax to parse a quoted-string url() as a plain function(), leaving only unquoted urls as a url-token.

[00:21:24.0000] <TabAtkins>
s/function()/function-token/

[00:21:57.0000] <TabAtkins>
SimonSapin: ^^^ also

[00:28:24.0000] <SimonSapin>
TabAtkins: I’m missing context. Why would you want to do that?

[00:28:54.0000] <SimonSapin>
Also, how? It doesn’t sound possible unless you make tokenization context-aware

[00:31:48.0000] <IZh>
Is it possible for IDs to end with "?" character?

[00:33:12.0000] <IZh>
The spec has one. And a href to it.

[00:36:03.0000] <mathiasbynens>
IZh: sure, IDs can contain any symbol except for spaces http://mathiasbynens.be/notes/html5-id-class

[00:40:14.0000] <TabAtkins>
SimonSapin: Nope, no context-awareness needed.

[00:40:55.0000] <TabAtkins>
SimonSapin: After seeing "url(", consume whitespace until the next character is non-whitespace.  If it's a double or single quote, return a function token named "url", otherwise switch into the crazytimes unquoted url consuming code.

[00:41:59.0000] <TabAtkins>
IZh: Note that HTML IDs and the CSS ID selector have different syntaxes.  You could write <div id="foo?">, but to select it would need #foo\?.

[00:43:45.0000] <TabAtkins>
SimonSapin: The reasoning is so we can add cors, integrity, etc to urls in CSS without having to invent a function with a new name.

[00:44:19.0000] <SimonSapin>
TabAtkins: Oh, so <function-token> only for URLs with quoted strings. I thought you meant <function-token name=url content=[<unquoted-url-body>]>

[00:44:49.0000] <TabAtkins>
Yup.

[00:44:50.0000] <IZh>
The spec has <a href=#is-this-html5?>...</a> and <h3 id=is-this-html5?>...</h3>.

[00:45:12.0000] <TabAtkins>
IZh: Yeah, that works.

[00:45:32.0000] <TabAtkins>
(? has a meaning in urls, but only *before* the hash.  Once you're in the hash ? doesn't mean anything special.)

[00:46:44.0000] <TabAtkins>
zcorpan: What's the "rotated labels" you talked about?

[00:47:46.0000] <SimonSapin>
TabAtkins: sounds reasonable. There is a slight impl bug potential in forgetting to update some of the parser places that expect a url token to also look for a function token with name URL, but it may be worth it

[00:48:03.0000] <TabAtkins>
SimonSapin: Yeah, good point.

[00:52:19.0000] <TabAtkins>
SimonSapin: If we were allowed to output multiple tokens in a single pass to/from the initial state, we could handle unquoted urls as functions just fine.

[00:52:28.0000] <TabAtkins>
Hm, except for bad-url I guess.

[00:55:44.0000] <zcorpan>
TabAtkins: "Note" etc in the html spec. you need a browser that supports unprefixed 'transform'

[00:55:58.0000] <SimonSapin>
Some bad-url would become parser-level errors

[00:58:38.0000] <TabAtkins>
zcorpan: Ah, kk.

[01:00:03.0000] <TabAtkins>
SimonSapin: I guess we could still output an error token in that case with the same effect - it's a token that's guaranteed to never be in any grammar.

[01:00:21.0000] <TabAtkins>
But anyway, the guarantee that we only ever output one token per pass is a nice quality to preserve.

[01:01:02.0000] <TabAtkins>
I suppose we could just add a single bit of state to the tokenizer - an "in unquoted url?" bool.

[01:01:02.0000] <benjamingr>
Hixie: half (read 95%) of the time with promises you're not in a sync context but in a promise chain anyway, just like in callbacks often you're inside an emitter callback. A promise rejection that's unhandled causes the chain to stop running (unless it is handled). Throwing synchronously means you create different behavior when you start the chain and when

[01:01:03.0000] <benjamingr>
you're running it.

[01:04:00.0000] <benjamingr>
Maybe you have a point and we have to wrap the initial API calls with `Promise.try` (in ES6, Promise.resolve().then) calls anyway though, thinking about it.

[01:07:35.0000] <TabAtkins>
I mean, that's certainly *a* way to go about things, to guarantee that any mistakes you make don't cause something crazy.

[01:44:57.0000] <JakeA>
annevk: https://github.com/slightlyoff/ServiceWorker/issues/285 - you're saying 1. would be the CSS base url, right?

[01:45:08.0000] <JakeA>
annevk: Because I think Alex thinks it's 2.

[01:45:20.0000] <JakeA>
annevk: (and I think it should be 3, so yey!)

[01:46:40.0000] <annevk>
JakeA: I think it should be 3 if you use default()

[01:46:51.0000] <annevk>
JakeA: otherwise the /fallback.html stuff sucks

[01:47:51.0000] <annevk>
JakeA: a good way to think about it is what URL you'd expect in the address bar

[01:48:24.0000] <JakeA>
annevk: This is for a CSS subresource, not a navigate. What do you think the base url would be using the code as it is (using fetch())

[01:48:39.0000] <annevk>
JakeA: I think it should be 1

[01:48:59.0000] <annevk>
JakeA: I realize this is for CSS, but I don't think we should apply different semantics to navigate necessarily

[01:49:16.0000] <annevk>
JakeA: the only thing that's special about navigate is that the invoking algorithm needs to have a say in redirect handling

[01:50:58.0000] <annevk>
TabAtkins: url("..." ...) sounds nice

[02:17:24.0000] <JakeA>
annevk: yeah, that makes sense. Just hate the magic of event.default(). What about request.followRedirects, which would be true for stuff coming through event.request?

[02:18:05.0000] <JakeA>
So fetch(event.request) would return an OpaqueResponse redirect if it hit one

[02:18:55.0000] <annevk>
JakeA: where is this proposal specified?

[02:19:16.0000] <JakeA>
annevk: In IRC just now :D

[02:20:03.0000] <annevk>
JakeA: what is an <img> element going to do if it gets handed an OpaqueResponse? It'll just fail

[02:21:29.0000] <JakeA>
annevk: If the OpaqueResponse is a redirect, doesn't the fetch spec deal with the rest of the redirects?

[02:21:56.0000] <JakeA>
annevk: (also, images will render OpaqueResponses fine, but they'll taint canvases)

[02:22:25.0000] <annevk>
JakeA: (not if the OpaqueResponse is a redirect)

[02:22:55.0000] <annevk>
JakeA: I think the idea was that only an explicit redirect from the service worker would be handled by Fetch

[02:23:05.0000] <annevk>
JakeA: anything else would just be passed back up the stack

[02:23:43.0000] <annevk>
Although I guess I can see arguments both ways... Hmm

[02:24:01.0000] <JakeA>
annevk: Is an OpaqueResponse redirect not an explicit redirect?

[02:24:10.0000] <JakeA>
I thought that was how event.default() would work

[02:24:33.0000] <JakeA>
if event.default() resolves to a redirect, it must be OpaqueResponse for security reasons

[02:28:09.0000] <annevk>
JakeA: an explicit redirect would be something like new RedirectResponse({status:301, location:...})

[02:28:35.0000] <JakeA>
annevk: But isn't exposing that a security no-no?

[02:28:52.0000] <annevk>
JakeA: no, only network-level redirects cannot be exposed

[02:29:18.0000] <annevk>
JakeA: sorry, we would also not expose that one to the API, we would indeed follow it

[02:29:39.0000] <annevk>
JakeA: but not because of security

[02:30:10.0000] <JakeA>
annevk: what does event.default() resolve to if it hits a redirect?

[02:31:32.0000] <JakeA>
I thought it would be a redirect response, which would be opaque for security reasons

[02:35:13.0000] <annevk>
JakeA: it depends on the request instance

[02:35:35.0000] <annevk>
JakeA: if the manual redirect flag is not set (most cases), it just follows them and hands back a "flattened" response

[02:37:10.0000] <JakeA>
annevk: But there's a difference between SW doing the flattening and the fetch spec doing the flattening

[02:37:21.0000] <annevk>
JakeA: Fetch does it

[02:37:43.0000] <JakeA>
annevk: If you do fetch(url) the response url will always be the original url, despite redirects, right?

[02:38:11.0000] <annevk>
JakeA: the only case where an SW might be able to have another crack at a redirect (and this depends on the context) is when the manual redirect flag is set (navigate) or when the SW returns a redirect it created itself

[02:38:25.0000] <JakeA>
agreed

[02:38:46.0000] <annevk>
JakeA: if you do fetch(url) the response's url will be the final url

[02:38:58.0000] <annevk>
JakeA: no different from XHR.responseURL

[02:39:26.0000] <annevk>
JakeA: however, it's not clear the layer above SW (Fetch) cares about that URL

[02:39:49.0000] <annevk>
JakeA: my assumption has been that it does not, because of the /fallback and other cases

[02:40:17.0000] <JakeA>
annevk: I thought we couldn't expose responseURL for security reasons

[02:40:46.0000] <annevk>
JakeA: it might not be exposed in all cases

[02:40:55.0000] <annevk>
JakeA: depends on the type of response

[02:41:06.0000] <annevk>
(but it's certainly known to the UA)

[02:41:14.0000] <JakeA>
yeah

[02:44:11.0000] <annevk>
XHR can always expose it because XHR only does CORS, no tainted stuff

[02:44:13.0000] <JakeA>
annevk: event.default() returns a redirect if it hits one, which gets handed back to the fetch spec, which either hands that to the top level (if manual redirect is set) or follows the redirects without further SW interaction & uses the final url as the base url, right?

[02:44:58.0000] <JakeA>
(by top level I mean the fetch spec caller, sorry)

[02:45:29.0000] <annevk>
event.default() invokes Fetch with the original request instance and an override to bypass the SW; whatever it gets out of that it hands back to the SW

[02:46:29.0000] <annevk>
so it's very much like fetch() except that it uses the original request instance

[02:48:03.0000] <annevk>
(which also means it modifies the original request instance and therefore response's url and such are different; there's some details to figure out there as obviously the Request object exposed in the API cannot change, that needs to be a snapshot)

[02:49:53.0000] <JakeA>
annevk: So, going back to the CSS example, how does the response from respondWith(event.default()) end up with a difference base url than respondWith(fetch(event.request))?

[02:50:00.0000] <annevk>
I wish we had gone through this more at the F2F, I tried to push for it but everyone else seemed to think it was somehow clear...

[02:50:37.0000] <JakeA>
annevk: Thanks for going through it now though. Happy to jump on VC if you think it'd be easier

[02:50:41.0000] <annevk>
JakeA: fetch() creates a new (you could think of it as nested) instance of the request

[02:51:53.0000] <JakeA>
annevk: I don't think it matters what fetch() does, as the base url is set in the fetch spec, once it gets a response from SW

[02:52:28.0000] <JakeA>
annevk: As far as I can tell, the fetch spec gets the response from SW, and sets its response url (for base purposes) to request.url

[02:53:52.0000] <JakeA>
annevk: That's how the example on https://github.com/slightlyoff/ServiceWorker/issues/285 becomes 1.

[02:54:07.0000] <annevk>
JakeA: Fetch gets a Request R1, opens SW, SW initaties a *new* Fetch with R2 using fetch() and gets back a response, hands that back to R1 (R1 never saw it's url field change so sets that on the response)

[02:54:29.0000] <annevk>
JakeA: default() however keeps using R1

[02:55:55.0000] <JakeA>
Ohhh ok *thinks*

[02:57:55.0000] <annevk>
/me is still trying to go through the IRC backlog

[02:58:24.0000] <JakeA>
Sorry, I realise I'm not helping

[03:02:36.0000] <JakeA>
annevk: I thought the fetch spec would open SW before step 7 of http://fetch.spec.whatwg.org/#concept-http-fetch, but the response would still hit step 10 that deals with redirects & 304

[03:03:23.0000] <annevk>
JakeA: heh, it's just very long today, that's all

[03:04:45.0000] <JakeA>
so if the SW respondWith a redirect (opaque or not), it'd go through step 10, and follow the redirect but ignoring the SW

[03:05:45.0000] <annevk>
JakeA: well, a) it would follow the redirect if the manual redirect flag was unset and b) it would go back into the SW as following a redirect invokes Fetch

[03:18:52.0000] <annevk>
"I really wish people would just read the spec that Ian wrote and what I wrote about this on es-discuss in the past instead of making random assumptions..."

[03:19:00.0000] <annevk>
https://github.com/domenic/promises-unwrapping/issues/108#issuecomment-43691121

[03:25:01.0000] <Ms2ger>
Let's move everything into ES

[03:25:21.0000] <Ms2ger>
There will certainly be no issues integrating them with the platform

[03:31:58.0000] <annevk>
Ms2ger: go do some homework :p

[03:32:21.0000] <Ms2ger>
Nah, I see what happens to bz's homework

[05:04:59.0000] <annevk>
JakeA: might want to check the logs regarding script loading

[05:05:07.0000] <annevk>
JakeA: seems <script needs> or some such is still floating around

[05:05:24.0000] <JakeA>
/me sobs

[05:13:05.0000] <annevk>
JakeA: if you don't like it you should talk to Hixie

[05:13:15.0000] <annevk>
JakeA: seems like he's investing time in it

[05:14:29.0000] <JakeA>
annevk: I'm not really against it, it was just a really painful thread last time around

[05:15:38.0000] <JakeA>
Hixie: Domenic: If we have <link rel=preload> which has a .loaded promise, you can do most of this delayed execution stuff yourself

[05:18:09.0000] <JakeA>
Hixie: Domenic: But for the simple case, I don't think we need anything more complex than <script depends=".css-selector">, where the CSS selector points to other script/img/link elements

[05:19:34.0000] <JakeA>
The dependencies can be calculated at document insertion time, which avoids circular dependencies. Also <script depends="script"> becomes a handy way to do sequential execution

[05:28:43.0000] <annevk>
JakeA: seems Hixie added ele.addDependency(promise) to the mix

[05:29:45.0000] <JakeA>
I think that's where having preload primitives is better. You can do whatever you want then

[06:26:48.0000] <jcgregorio>
annevk: I thought Object.observe didn't work for DOM?

[06:27:16.0000] <jcgregorio>
re navigator.language shipping thread

[06:27:18.0000] <annevk>
jcgregorio: it has hooks

[06:27:46.0000] <annevk>
jcgregorio: it doesn't work for everything, e.g. you wouldn't want it for ele.innerHTML, but for things where we already dispatch events it's fine

[06:30:48.0000] <jcgregorio>
ah ok, and for everything else there's MutationObserver?

[06:35:30.0000] <annevk>
jcgregorio: I guess it's more like MutationObserver is for trees, and O.o is for most other things

[06:47:58.0000] <caitp>
annevk (or others), is there a specific status code that should be expected when fetch/xhr send times out?

[06:48:51.0000] <caitp>
I'm not seeing one mentioned in fetch, but it's being asked about in a separate channel

[06:50:00.0000] <annevk>
caitp: 0

[06:50:08.0000] <caitp>
where is that actually specified?

[06:50:31.0000] <annevk>
caitp: last bit is http://xhr.spec.whatwg.org/#request-error-steps where it sets response to a network error (whose status is 0)

[06:52:06.0000] <annevk>
One thing that could be improved is that XMLHttpRequest currently does not check the timeout attribute value continuously, seems a bit buggy

[06:57:12.0000] <caitp>
I believe it's stated in the specification (and tested in the wpt) that setting the attribute means setting the timeout to a new value relative to the start of the request, if a request had already started

[06:57:30.0000] <caitp>
which should mean "dispatch timeout if that time has already elapsed"

[06:57:50.0000] <annevk>
caitp: that's the bug I just mentioned

[06:58:38.0000] <caitp>
I'm not sure what you mean then, why would it need to be checked continuously if the behaviour that would happen when checking it, happens when the value changes?

[06:58:40.0000] <annevk>
if 50ms is enough accuracy I could just piggyback on the callbacks from Fetch

[06:59:29.0000] <annevk>
caitp: you might change the value to enlarge the window, but yeah, could be done in multiple ways, patches welcome

[07:00:39.0000] <jgraham>
hober: I think people still at Opera like critic too :p

[07:02:01.0000] <jgraham>
(but actually it generally seems like people who use it a bit don't have too many complaints, which fits my hypothesis that it's basically a good tool, with a learning curve and a slightly aesthetically displeasing frontend)

[07:02:14.0000] <caitp>
i'm still not sure what you mean, it seems like the instructions are spelled out, they just don't seem to be normative / are expressed sort of like hints

[07:02:27.0000] <caitp>
so if there's a bug, it's more that it's not expressed as a MUST or even SHOULD

[07:06:52.0000] <annevk>
caitp: there's none of that, everything follows from "The send(data) method must run these steps:"

[07:09:51.0000] <caitp>
http://xhr.spec.whatwg.org/#dom-xmlhttprequest-timeout it's more the "note" section, it's very awkward to have something like this stated as "this implies..."

[07:11:04.0000] <caitp>
fetch doesn't really make any mention of the behaviour dictated by this note, and nor does anywhere else in xhr, as far as I can see

[07:12:42.0000] <annevk>
caitp: right, that's why I said the text in the send() section is somewhat buggy

[07:13:59.0000] <caitp>
okay, I see what you're getting at

[07:50:47.0000] <zcorpan>
annevk: i introduced a new flag to <img> that is not exposed to JS in https://github.com/ResponsiveImagesCG/picture-element/pull/179 to fix https://code.google.com/p/chromium/issues/detail?id=372971

[07:51:35.0000] <zcorpan>
annevk: but you can get an img with the flag set by doing innerHTML = '<img>' on an element in a document without a browsing context

[07:52:14.0000] <zcorpan>
not sure if this is relevant to the "implement a browser in JS" thing or whatever

[07:52:19.0000] <annevk>
zcorpan: I'm not sure what you're asking me, but "await a stable state" was recently factored out

[07:52:44.0000] <annevk>
zcorpan: ah I see

[07:53:09.0000] <annevk>
zcorpan: for that bit I recommend filing an issue here: https://github.com/dglazkov/html-as-custom-elements/issues

[07:53:33.0000] <zcorpan>
annevk: "await a stable state" is still defined, it's just defined in terms of microtasks

[07:53:33.0000] <annevk>
zcorpan: for removing "await a stable state" I suggest looking at how Hixie did that

[07:53:42.0000] <annevk>
oh

[07:54:10.0000] <annevk>
fair enough

[07:54:11.0000] <zcorpan>
so that should be fine i think. the img move happened after the stable state changes

[07:56:03.0000] <annevk>
Sometimes I wish the other XMLHttpRequest editors fixed some bugs

[07:58:17.0000] <zcorpan>
ok filed https://github.com/dglazkov/html-as-custom-elements/issues/15

[08:03:44.0000] <zcorpan>
https://www.igvita.com/2014/05/20/script-injected-async-scripts-considered-harmful/ - was there any progress on declarative dependencies thing to get ordered execution for <script src async>?

[08:14:56.0000] <annevk>
zcorpan: see discussion from today's logs before we woke up

[08:43:25.0000] <annevk>
smaug____: if XHR provided a way to disable 401 dialogs, what should we call the flag?

[08:44:54.0000] <annevk>
smaug____: disableUserAgentAidedAuthentication

[08:45:22.0000] <annevk>
disableAssistedAuthentication

[08:45:34.0000] <Hixie>
annevk: 'await a stable state' is still there, actually, what was factored out is 'provide a stable state'.

[08:45:45.0000] <Hixie>
'await a stable state' now just queues a microtask

[08:45:50.0000] <annevk>
Hixie: yeah zcorpan pointed that out, my bad

[08:45:58.0000] <Hixie>
ah right

[08:46:01.0000] <smaug____>
hmm

[08:46:56.0000] <smaug____>
the flag should have something about unauthorized

[08:47:12.0000] <annevk>
JakeA: this could be another difference between default() and fetch(); whether UA assisted authentication is enabled

[08:47:34.0000] <annevk>
smaug____: disable401Handling

[08:47:51.0000] <smaug____>
heh

[08:48:00.0000] <smaug____>
though, that is pretty clear

[08:48:01.0000] <annevk>
smaug____: Unauthorized is hard to spell

[08:48:13.0000] <annevk>
smaug____: and I don't think we want to mess with proxy authentication

[08:48:39.0000] <JakeA>
annevk: Makes sense

[08:48:58.0000] <annevk>
JakeA: for new APIs I'd really like to avoid popping up auth dialogs

[08:49:44.0000] <JakeA>
annevk: Should only be for navigations. Probably top-level at that

[08:49:51.0000] <annevk>
smaug____: can also have disable304Handling at some point

[08:50:11.0000] <annevk>
JakeA: currently pretty much everything does them

[08:50:20.0000] <annevk>
JakeA: might actually be compat problem to remove them

[08:50:22.0000] <smaug____>
I kind of like having the number there

[08:50:26.0000] <annevk>
JakeA: for things like <img>

[08:51:14.0000] <JakeA>
annevk: Yeah, actually hit that issue this morning. Interestingly, Chrome doesn't seem to support username:password@ urls on images

[08:51:28.0000] <JakeA>
iOS seems to

[08:51:33.0000] <JakeA>
Didn't test anything else

[08:52:01.0000] <JakeA>
Had to add an iframe to the page with the username:password@ url, *then* the images would load

[08:52:07.0000] <annevk>
JakeA: Fetch supports both variants, it's up to the API to define whether URL credentials take effect

[08:52:13.0000] <JakeA>
But the iframe made iOS have a phishing panic

[08:53:16.0000] <annevk>
smaug____: ta

[09:15:14.0000] <annevk>
Ms2ger: constraints seems correct, no?

[10:32:16.0000] <Ms2ger>
annevk, as the verb? Doesn't sound right to me, but I guess we should ask a native :)

[10:34:14.0000] <Ms2ger>
"The XMLHttpRequest standard intentionally constraints the use of HTTP here in line with contemporary implementations."

[10:34:21.0000] <Ms2ger>
Native speakers, please comment

[10:46:11.0000] <Domenic>
should be constrains

[10:46:20.0000] <Domenic>
a constraint is a noun; constrain is a verb

[10:47:19.0000] <SamB>
"in line with contemporary implementations" seems a bit odd ... somehow

[10:49:20.0000] <SamB>
(maybe some more specific explanation of the reasoning would be better?)

[11:54:29.0000] <IZh>
Some of the links in spec points to redirecting pages. Should it be corrected to point to "final" pages?

[11:56:34.0000] <IZh>
For example, there is a link to http://whatwg.org/html that redirects to http://www.whatwg.org/html that redirects to http://www.whatwg.org/specs/web-apps/current-work/multipage that redirects to http://www.whatwg.org/specs/web-apps/current-work/multipage/

[11:57:12.0000] <IZh>
Shouldn't we point the link against real page?

[11:57:26.0000] <IZh>
Point to.

[11:59:06.0000] <IZh>
IMHO 3 redirects is too much.

[12:50:41.0000] <IZh>
For beautiful url with ability to change real page in the future, I suppose, one redirect is enough.

[12:51:41.0000] <SamB>
IZh: you would think it could at least combine the first two ...

[12:52:30.0000] <SamB>
well, actually, combining all three redirects into one wouldn't seem all that much to ask ...

[12:54:28.0000] <IZh>
In the spec there are dozen of links that points to redirects of different depth. The 3 is the maximum, but there are lots of 2

[12:56:56.0000] <Hixie>
IZh: i use the link whatwg.org/html because that's the shortest link and so people might remember it.

[12:57:29.0000] <Hixie>
zcorpan: whatwg.org redirects everything to www.whatwg.org so that all cookies so that there's only one canonical domain

[12:57:37.0000] <SamB>
I thought there were technically some shorter ones (but which are irrelevant since not actually memorable)

[12:57:37.0000] <Hixie>
er, s/zcorpan/IZh/

[12:58:08.0000] <Hixie>
IZh: then .../html does the redirect to .../multipage, since that's what it's a shortcut for

[12:58:17.0000] <Hixie>
IZh: then apache does the redirect to add the /

[12:58:59.0000] <Hixie>
IZh: we can't add the / at the third step because otherwise if you went to .../html/ you'd end up at .../multipage//

[12:59:08.0000] <SamB>
hmm

[12:59:14.0000] <SamB>
no regexen?

[12:59:30.0000] <Hixie>
it's even better if you go to .../html#foo because then you get a javascript redirect after all the above...

[12:59:39.0000] <IZh>
Hixie: yes, I see. But why not shorten the path?

[12:59:44.0000] <Hixie>
which path?

[13:00:05.0000] <IZh>
Hixie: I mean, why so deep?

[13:00:11.0000] <SamB>
oh, you mean just actually have the spec at /html/ ?

[13:00:28.0000] <Hixie>
oh well there used to be multiple specs and there used to be multiple snapshots

[13:00:29.0000] <zcorpan>
Hixie: can't you write two rules, /html redirects to multipage/ and /html/ redirects to multipage/ ?

[13:00:37.0000] <Hixie>
zcorpan: maybe, dunno

[13:00:43.0000] <IZh>
Why not point html to multipage/ in one step?

[13:00:59.0000] <Hixie>
<Hixie> IZh: we can't add the / at the third step because otherwise if you went to .../html/ you'd end up at .../multipage//

[13:01:19.0000] <Hixie>
zcorpan: btw should i be moving the <img> bugs you filed to HTML - <img>?

[13:01:26.0000] <Hixie>
zcorpan: or are they for me later?

[13:01:27.0000] <zcorpan>
Hixie: sure

[13:01:29.0000] <Hixie>
k

[13:01:41.0000] <zcorpan>
Hixie: one <img> is for you

[13:02:05.0000] <zcorpan>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=25848

[13:02:05.0000] <Hixie>
i'm behind on bugs, been working on e-mail

[13:03:08.0000] <zcorpan>
but i think it's ok for you to wait a bit with that bug

[13:03:11.0000] <IZh>
Hixie: I think it's possible to make 2 redirects: both html and html/ to multipage/

[13:03:47.0000] <Hixie>
yeah that's what zcorpan suggested

[13:03:53.0000] <Hixie>
zcorpan: k

[13:05:30.0000] <zcorpan>
Hixie: if you remember rationale for some of the <img> bugs i filed i'd be happy if you could add a comment

[13:05:41.0000] <Hixie>
k

[13:07:28.0000] <zcorpan>
in other news, i hate moving 7 timezones. it fucks up my sleep

[13:08:28.0000] <IZh>
Hixie: Good news. Validator that I use did not found any serious errors in the spec. :-)

[13:08:57.0000] <IZh>
Hixie: Just some accessibility and some CSS issues.

[13:10:24.0000] <zcorpan>
what are the claimed acc issues?

[13:11:56.0000] <IZh>
zcorpan: One iframe lacks of "title" attribute.

[13:12:15.0000] <zcorpan>
...

[13:14:18.0000] <zcorpan>
gsnedders: have you checked out the Pixel one or whatever it's called?

[13:15:05.0000] <zcorpan>
oh, TabAtkins already suggested that

[13:25:01.0000] <IZh>
In the FAQ there are some broken links.

[13:25:29.0000] <IZh>
In "When will we be able to start using these new features?" there is a link to http://dev.opera.com/articles/html/

[13:28:16.0000] <IZh>
In "What are the various versions of the HTML spec?" there is a broken link to W3C Microdata: http://dev.w3.org/html5/md/

[13:29:17.0000] <IZh>
And at the same place the link to http://www.w3.org/html/wg/drafts/2dcontext/html5_canvas/

[13:30:08.0000] <Hixie>
feel free to edit that page

[13:30:13.0000] <Hixie>
let me know if you need a login to the wiki

[13:31:09.0000] <IZh>
First of all we need alive links there.

[13:35:02.0000] <IZh>
Hixie: There are two links for Microdata: http://www.w3.org/TR/microdata/ and http://www.w3.org/html/wg/drafts/microdata/master/ Which one you prefer?

[13:36:56.0000] <IZh>
Latest published or editors draft?

[13:37:37.0000] <Hixie>
IZh: i "prefer" http://whatwg.org/html#microdata

[13:37:46.0000] <SamB>
IZh: well it was an editor's draft before

[13:38:01.0000] <Hixie>
if we're talking about what the url to the w3c fork of it should be, then it should be the one that isn't in /TR/

[13:38:53.0000] <estellevw>
I just removed  "The disabled attribute is ignored if the value of the type attribute is hidden" from the display attribute on MDN pages. I see that on w3schools, but I didn't see that as "fact" in the spec. Am I wrong? Is disabled is not supported on input type hidden? It doesn't submit in my test, but it's odd to think that a myth somehow got started. Was that ever the case?

[13:39:43.0000] <Hixie>
estellevw: see the "bookkeeping details" in http://www.whatwg.org/specs/web-apps/current-work/#hidden-state-(type=hidden)

[13:39:43.0000] <estellevw>
was disabled on input type hidden ever ignored, or is it ignored in any browsers that anyone knows of?

[13:39:59.0000] <estellevw>
thanks

[13:40:09.0000] <Hixie>
oh hm

[13:40:13.0000] <Hixie>
looks like "disabled" always applies maybe?

[13:40:37.0000] <Hixie>
yeah, check http://www.whatwg.org/specs/web-apps/current-work/#attr-fe-disabled

[13:40:48.0000] <Hixie>
type=hidden has no relevance to disabled=""

[13:42:07.0000] <estellevw>
yeah, i had read both of those, so decided to remove that sentence from MDN page, but have since seen it mentioned on w3schools and stack overflow, so wanted to confirm

[13:42:39.0000] <estellevw>
thanks

[13:44:33.0000] <Hixie>
w3schools is so full of nonsense it's not worth even considering in any capacity regarding whether something is true or not

[13:49:05.0000] <wilhelm>
I recently discovered they're five guys, and have a turnover of more than 3M USD. Not too bad for a scam.

[13:49:42.0000] <Hixie>
i've been happy to see MDN starting to take over in my google results

[13:49:48.0000] <Hixie>
/me is a big fan of MDN

[13:50:27.0000] <estellevw>
yeah, that was why i got confused. MDN was wrong. Wasn't sure if W3Schools copied MDN or the other way around

[13:50:33.0000] <Hixie>
heh

[13:50:40.0000] <Hixie>
i'm sure w3schools didn't copy mdn

[13:50:48.0000] <Hixie>
they probably made it up

[13:51:13.0000] <wilhelm>
But MDN doesn't have certifications! How else can I document my skills? http://www.refsnesdata.no/certification/w3certified.asp?id=5204222

[13:51:26.0000] <estellevw>
I am currently updating the Wufoo form pages, and that will hopefully be very accurate. I am updating MDN as i find new stuff for the Wufoo page.

[13:51:30.0000] <estellevw>
wilhelm: haha

[13:51:57.0000] <tantek>
wow, I just don't even: http://www.w3schools.com/cert/default.asp

[13:53:03.0000] <estellevw>
no longer haha. now whaaaaa, or however you write a cry. So sad.

[13:53:08.0000] <wilhelm>
tantek: Yup, that's how the manager of a five-person company can pay himself 1M USD per year.

[13:53:35.0000] <tantek>
from that page: "Highly Recommended / W3Schools' tutorials are recommended reading in over 100 Universities and High schools all over the world." (lists 9 examples of universities)

[13:54:23.0000] <tantek>
Ok, so the next time someone asks me about university-based web dev education vs. self-taught web dev hackers, I am going to point them to this. What a disaster.

[13:55:49.0000] <caitp>
you laugh, but those kids will be making the snapchats and tinder

[13:56:00.0000] <caitp>
of tomorrow

[13:56:09.0000] <tantek>
and their citations seem to check out too (checked 3 out of 9), and they link to specific University pages which link to W3schools

[13:56:10.0000] <caitp>
and getting rich off it despite not providing anything of any real value

[13:56:37.0000] <tantek>
caitp - not as bad as finance industry with making up financial "instruments" which then make money out of nothing

[13:56:56.0000] <IZh>
Hixie: Please make me an account on Wiki.

[13:57:00.0000] <tantek>
so what this tells me is that W3C should issue certificates instead

[13:57:10.0000] <tantek>
as a funding model alternative to membership fees

[13:57:15.0000] <caitp>
lets turn the W3C into a for-profit school like devry

[13:57:20.0000] <caitp>
it will be brilliant

[13:57:28.0000] <caitp>
nothing could go wrong

[13:58:35.0000] <wilhelm>
Here's a selection of gullible people paying money for that scam: https://google.com/search?q=site%3Arefsnesdata.no

[14:00:28.0000] <caitp>
you could even get the w3c its own faculty at university of phoenix

[14:00:42.0000] <Hixie>
IZh: e-mail address?

[14:01:04.0000] <IZh>
Hixie: izh1979⊙gc

[14:01:31.0000] <Hixie>
don

[14:01:32.0000] <Hixie>
done

[14:02:46.0000] <SamB>
tantek: you want the W3C to be a CA?

[14:02:51.0000] <IZh>
Hixie: Thank you.

[14:07:16.0000] <IZh>
Grr... Even http://www.w3.org/TR/microdata/ contains broken link to latest editor's draft. So there is no known link to it.

[14:09:24.0000] <tantek>
lZh don't bother linking to any W3C microdata resources - W3C has abandoned microdata. The *only* reference is WHATWG microdata.

[14:09:33.0000] <tantek>
(boom)

[14:10:30.0000] <SamB>
I can't tell if that's even nice

[14:10:44.0000] <Hixie>
it's what i'd like them to do to all the specs

[14:10:49.0000] <Hixie>
(that they fork from us)

[14:11:02.0000] <SamB>
well, I mean, is it because they despair of the idea or is it just that they dispair of hijacking the idea

[14:11:08.0000] <SamB>
the latter is clearly good

[14:11:18.0000] <Hixie>
oh i'm sure they did it because it competes with RDFa

[14:11:35.0000] <Hixie>
and since anyone who cares about microdata is just gonna do it in the WHATWG, they no longer had anyone there advocating for it

[14:11:42.0000] <Hixie>
so the RDFa voices could get their fork shut down

[14:12:12.0000] <Hixie>
speaking of forks, i wonder how the w3c's fork of anne's URL spec that replaces the IETF URL spec is coming along

[14:20:41.0000] <m4nu>
/me wakes up to RDFa/Microdata snarkiness.

[14:21:15.0000] <m4nu>
huh, when did Microdata become a NOTE at W3C? Last I heard, it was barreling down the REC track?

[14:21:28.0000] <Hixie>
hey, for once, there wasn't actually any snarkiness there :-)

[14:21:32.0000] <m4nu>
:P

[14:22:01.0000] <Hixie>
i mean, i have barrels of it i could deploy, but i was holding back :-)

[14:22:11.0000] <m4nu>
/me appreciates Hixie's restraint.

[14:22:26.0000] <m4nu>
/me wonders if he should see if HTML5+RDFa has been NOTE'd as well.

[14:22:45.0000] <m4nu>
'cause I haven't been paying attention to what's been happening in the W3C HTML WG...

[14:22:55.0000] <Hixie>
heh

[14:23:10.0000] <Hixie>
text/html RDFa is happening in the HTMLWG?

[14:23:18.0000] <Hixie>
i thought that was an RDF world thing

[14:23:35.0000] <m4nu>
does seem kind of bad form to not point to WHATWG Microdata spec as "Latest Editor's Draft"

[14:23:55.0000] <SamB>
indeed

[14:23:55.0000] <Hixie>
that's the least of the troubles on that front

[14:24:15.0000] <Hixie>
q.v. http://lists.w3.org/Archives/Public/www-archive/2014Apr/0034.html

[14:26:35.0000] <m4nu>
/me remembers reading that missive... I remember agreeing w/ about 65% of it.

[14:27:38.0000] <Hixie>
presumably the consensus parts are in the 35%?

[14:29:21.0000] <m4nu>
maybe 20% of it - I'm not a card carrying consensus-is-the-only-way member. Other 15% had to do w/ things like "Tim has the final say." arguments (yes he does, but in practice, doesn't use it)

[14:29:56.0000] <Hixie>
well if he doesn't have the final say, that means the relevant wg's chair does

[14:30:09.0000] <Hixie>
the way the w3c is structured, there's always someone who has the final say.

[14:30:12.0000] <m4nu>
in any case, good email, I've been pointing people at it to try and explain why the WHATWG/W3C dynamic isn't a simple one.

[14:30:37.0000] <Hixie>
(and that person is rarely the person who truly has the final say, the implementor)

[14:31:03.0000] <m4nu>
yeah, but again - I don't think that's a terrible thing to have a tie-breaker... and I agree w/ you wrt. implementors have the final say.

[14:31:32.0000] <m4nu>
just think that there needs to be something there to balance the multi-billion dollar multinationals w/ the general public.

[14:31:43.0000] <m4nu>
(wrt. privacy rights, centralization, etc.)

[14:32:00.0000] <Hixie>
(there's also a less-well-written sequel, if you're pining for me hixie-ranting: http://lists.w3.org/Archives/Public/www-archive/2014Apr/0039.html )

[14:32:19.0000] <m4nu>
anyway, don't want to spam this channel w/ all of that stuff...

[14:32:32.0000] <Hixie>
it's ok, nobody else is talking right now :-D

[14:32:51.0000] <Hixie>
obviously i don't think it's bad for someone to be tie-breaker

[14:33:00.0000] <Hixie>
since that's how everything works in the whatwg too :-)

[14:33:15.0000] <Hixie>
my point is mainly that the w3c's claimed process -- consensus -- isn't the actual process

[14:33:33.0000] <Hixie>
the actual process is more subtle and complicated

[14:33:51.0000] <SamB>
m4nu: what would you prefer it be spammed with?

[14:34:51.0000] <m4nu>
cat pictures and discussion about how we're going to fix the Web login mess... and pervasive monitoring.

[14:35:44.0000] <Hixie>
🐱 ?

[14:35:54.0000] <m4nu>
\o/ !

[14:35:55.0000] <Hixie>
/me wonders if that showed up right for anyone at all

[14:36:06.0000] <m4nu>
did for me...

[14:36:08.0000] <Hixie>
nice

[14:36:11.0000] <Hixie>
what irc client?

[14:36:15.0000] <m4nu>
xchat

[14:36:19.0000] <Hixie>
wow

[14:36:20.0000] <Hixie>
impressive

[14:36:52.0000] <m4nu>
/me thinks it has more to do w/ how your font server is configured than anything else.

[14:37:04.0000] <Hixie>
ah, could be

[14:37:17.0000] <Hixie>
i'm on mac here

[14:37:29.0000] <Hixie>
it displayed as a question mark :-)

[14:37:49.0000] <jeffreyatw>
it did for me, on colloquy

[14:37:50.0000] <m4nu>
Hixie: re: claimed process of consensus - yes, I agree that there are good points to be made that W3C doesn't practice what they preach at times (WHATWG spec forking being an example of that)... and there is a lot of big corporate interest in W3C that makes dumb stuff happen sometimes, and perhaps we'd be better off if that was tamped down a bit.

[14:39:35.0000] <m4nu>
anyway - bottom line - it's good that both the WHATWG and W3C exist and do what they do, even though it's a pain in all of our collective asses for a non-trivial chunk of the year.

[14:39:38.0000] <m4nu>
/me afks.

[14:40:16.0000] <SamB>
m4nu: which chunk of the year is it non-painful for?

[14:41:32.0000] <Hixie>
vacation?

[14:42:03.0000] <Hixie>
there's lots of specs being developed at the w3c that are fine

[14:42:16.0000] <Hixie>
it's just the way they insist on forking our specs that i find asinine

[15:02:51.0000] <tantek>
Hixie: ACK: 🐱

[15:53:39.0000] <Hixie>
so about promises...

[15:53:41.0000] <Hixie>
is it possible to subclass promises so that they include more information?

[15:53:44.0000] <Hixie>
consider the thing we were talking about yesterday, where a script needs to be told to wait for an image, so the image's .loaded promise is given to the script so it can wait for the promise

[15:53:45.0000] <Hixie>
what if the image itself is also in "whenneeded" mode, and so is waiting until someone needs it before it loads?

[15:53:49.0000] <Hixie>
is there some way i can subclass the promise to provide a way to signal back to the promise vendor that the image is now needed?

[16:03:20.0000] <Hixie>
JakeA: why .ready for document and .loaded for img/link/etc ?

[16:04:47.0000] <Hixie>
oh, i see

[16:04:53.0000] <Hixie>
document would have .loaded too

[16:05:02.0000] <Hixie>
and .ready would be for just when it's parsed

[16:05:20.0000] <Hixie>
i suppose script could have a .ready too to mean .execute() would occur immediately if called


2014-05-22
[18:41:49.0000] <MikeSmith>
Hixie: 🐱 shows up fine for me in from my mac over ssh to irssi running within tmux, but not if I run within screen

[18:43:52.0000] <MikeSmith>
Hixie: and if you happen to be using mosh on osx, note that mosh won't display it correctly on osx due to osx using some outdated libc

[18:44:05.0000] <MikeSmith>
needs libc 2.8+

[19:02:14.0000] <Hixie>
ah, yeah, i'm in screen

[19:02:18.0000] <Hixie>
wonder what screen is doing to screw that up

[19:02:27.0000] <Hixie>
it doesn't display right for me in chrome either

[19:02:42.0000] <Hixie>
i guess chrome doesn't do the fallback to colour emoji fonts right

[19:03:51.0000] <SamB_>
what is this, a Type 3 font you're talking about?

[19:04:03.0000] <SamB_>
/me doesn't know any other fonts that can have colored glyphs

[19:25:09.0000] <MikeSmith>
SamB: I don't know what font osx is using but for the unicode emoji characters it does seem to use colored glyphs

[19:25:09.0000] <MikeSmith>
Hixie: yeah chrome doesn't display any unicode emoji properly yet

[19:25:09.0000] <MikeSmith>
Hixie: there's a chrome bug open for it

[19:25:25.0000] <MikeSmith>
chrome on osx

[19:25:51.0000] <MikeSmith>
Hixie: https://code.google.com/p/chromium/issues/detail?id=62435 fwiw

[19:27:19.0000] <zewt>
neat, nvidia's driver download webpage is totally broken if you won't let it run java

[19:27:27.0000] <zewt>
welcome to the awesome future

[19:32:59.0000] <MikeSmith>
SamB: apparently they're just PNGs https://bugzilla.mozilla.org/show_bug.cgi?id=715798#c2

[19:36:00.0000] <MikeSmith>
SamB: hmm maybe it changed though, some time during the last two years. Because when I zoom on them now I don't see pixelation

[19:38:28.0000] <MikeSmith>
SamB: scratch that. if you scale them up big enough you will see the pixelation

[19:49:45.0000] <Hixie>
few years from now we'll all be talking about the megapixel count of our emoji font characters...

[19:53:58.0000] <MikeSmith>
heh

[19:54:06.0000] <MikeSmith>
nice to have something to look forward to

[20:12:32.0000] <SamB>
MikeSmith: you'd think they'd have heard of SVG by now

[21:14:25.0000] <MikeSmith>
SamB_: ... then they'd have two problems

[21:14:51.0000] <SamB_>
oh?

[21:15:37.0000] <MikeSmith>
SamB_: just doing the mandatory trolling of SVG that's required any time somebody mentions it on this channel

[21:15:49.0000] <SamB_>
why's that required?

[21:17:29.0000] <MikeSmith>
SamB_: because SVG is crazy. It tries to add a *socket API* to the platform. I mean, what kind of crazy-ass spec tries to add a socket API!! nuts

[21:17:52.0000] <SamB_>
huh, didn't know about that

[21:18:01.0000] <SamB_>
which version of SVG tries that?

[21:18:13.0000] <MikeSmith>
the bad version

[21:18:22.0000] <MikeSmith>
wait, all versions of SVG are bad

[21:18:31.0000] <MikeSmith>
so I guess I have to qualify that

[21:19:06.0000] <MikeSmith>
I think it has "5th Edition" in the title

[21:19:23.0000] <MikeSmith>
wait, no that's a different spec, some other spec

[21:19:55.0000] <SamB_>
is that just XML trolling now?

[21:20:15.0000] <MikeSmith>
SVG trolling XML?

[21:20:18.0000] <MikeSmith>
could be

[21:23:58.0000] <SamB_>
hmm, I thought there were two MIME types for svg

[21:24:04.0000] <SamB_>
one image/ and one application/

[21:25:18.0000] <MikeSmith>
Hixie: btw recently I started trying out using mutt on my mobile. Over ssh of course. To mutt running on the mail server in a tmux/screen session. I just tried it on a lark and didn't expect to be very usable. But it turns out it is and I've pretty much completely quit using the Android mail client I had been using (K-9).

[21:25:50.0000] <MikeSmith>
Hixie: which is all a way of saying I bet it would work OK for Alpine too

[21:26:20.0000] <MikeSmith>
Hixie: the main trick I think is to use an android ssh client that has support for swipe typing

[21:26:51.0000] <zewt>
this is all the worst thing i've ever heard of in my life today

[21:27:21.0000] <MikeSmith>
Hixie: which the one I use does (irrssiconnectbot) but others (e.g., JuiceSSH) don't

[21:27:31.0000] <MikeSmith>
zewt: which part? you got a lot to choose from

[21:28:11.0000] <MikeSmith>
SamB_: if so I doubt there's any need for the application/ one

[21:29:02.0000] <SamB_>
how are you *supposed* to keep the scripts from running?

[21:30:13.0000] <MikeSmith>
you do that by not using SVG I guess

[21:30:42.0000] <SamB_>
I guess that's an <img> vs. <object> thing?

[21:37:51.0000] <zewt>
wow, chrome fullscreen is totally unusable now, pops up a "you have gone fullscreen" over the page if you come within half a light year of the top of the screen

[21:39:05.0000] <zewt>
aggravating when things are crippled for me because someone *else* might be stupid

[22:30:00.0000] <Hixie>
MikeSmith: in the past the problems i've found with trying to do pine on my phone are (a) the phone's screen is about 22 inches too small, (b) the phone's keyboard is about 12 inches too small, (c) the phone's keyboard is missing half the keys i need (or is an unusable custom keyboard), and (d) latency is terrible

[22:30:17.0000] <Hixie>
MikeSmith: so i don't bother with e-mail on my phone.

[22:34:38.0000] <MikeSmith>
Hixie: yeah trying to write mail on mobile is still a PITA. But I guess my main use case is just reading mail during the 1 hour or so commute on the train back and forth from my office.

[22:35:23.0000] <MikeSmith>
Hixie: which is often, I'm either standing, or I'm sitting shoulder-to-shoulder with people on each side, and can't really use my laptop

[22:36:17.0000] <MikeSmith>
Hixie: so I read a lot of bugmail then, and list mail, and just flag particular messages for later (to reply to later or read further later)

[22:36:47.0000] <MikeSmith>
Hixie: so it's more kind of just triaging mail from mobile. inbox gardening

[22:43:19.0000] <JakeA>
Hixie: yeah, you can imagine <video> having .ready but not .loaded. Not sure when ready would resolve for video though

[00:26:40.0000] <annevk>
So per https://code.google.com/p/chromium/issues/detail?id=43394#c80 they are taking the perf hit in order to be compliant for now and will fix the V8 side later.

[00:27:43.0000] <Ms2ger>
Again?

[00:44:09.0000] <MikeSmith>
groundhog day

[00:46:22.0000] <TabAtkins>
Hixie: Yeah, subclassing Promises should be possible.  Ping Domenic or Alex Russell about the details.

[00:46:59.0000] <TabAtkins>
JakeA: Maybe <video>.ready would resolve when the appropriate amount of preload data loads?

[01:00:58.0000] <annevk>
I wonder why https://code.google.com/p/pdfium/ hasn't been axed yet in favor of https://github.com/mozilla/pdf.js to reduce Blink's Core

[01:01:11.0000] <annevk>
Maybe because it's part of Chromium and therefore Blink doesn't have a say...

[01:07:16.0000] <Ms2ger>
Mobile performance

[01:07:17.0000] <JakeA>
TabAtkins: that's a possibility. Also it could resolve once the duration is known. Lots of possibilities

[01:07:24.0000] <JakeA>
probably want promises for each

[01:07:51.0000] <annevk>
https://github.com/slightlyoff/ServiceWorker/issues/266#issuecomment-43848275 *sigh*

[01:08:11.0000] <annevk>
Maybe I should just write a script that extracts the specification and publishes it somewhere

[01:09:18.0000] <JakeA>
annevk: On some projects I have a "build" directory in my master branch that's a submodule pointing at the gh-pages branch

[01:09:24.0000] <JakeA>
that works pretty well for deployments

[01:09:31.0000] <JakeA>
overkill for this though

[01:09:37.0000] <JakeA>
we should just be using gh-pages

[01:09:59.0000] <darobin>
wow, this is an actual discussion?

[01:10:54.0000] <MikeSmith>
github should just make stuff be web published from the master branch by default and dispense with the whole gh-pages PITA thing

[01:11:59.0000] <jgraham_>
darobin: It turns out they ran out of bikesheds to paint, so have now turned their attention to painting shoeboxes instead

[01:12:48.0000] <darobin>
jgraham_++

[01:12:59.0000] <darobin>
I think standards do something bad to people's brains

[01:15:14.0000] <JakeA>
:D

[01:15:34.0000] <JakeA>
MikeSmith: Or the ability to select a branch to publish

[01:15:57.0000] <MikeSmith>
darobin: my brain fine, work good

[01:16:13.0000] <MikeSmith>
JakeA: yeah

[01:16:15.0000] <darobin>
haha

[01:16:31.0000] <darobin>
last I asked GitHub they said no one else had expressed that request

[01:16:35.0000] <MikeSmith>
JakeA: or call the gh-pages branch the dance-monkey-dance branch

[01:16:41.0000] <darobin>
somehow, I can't believe that's actually true

[01:19:36.0000] <darobin>
feel free to hammer out some RTing for https://twitter.com/robinberjon/status/469392018331164672

[01:22:54.0000] <MikeSmith>
darobin: you need to create Github Haters account to retweet that from

[01:23:05.0000] <darobin>
lol

[01:23:20.0000] <MikeSmith>
darobin: similar to that GNOME Haters account your create a while back

[01:23:39.0000] <MikeSmith>
you're doing great stuff with that account, getting the word out

[01:23:45.0000] <darobin>
that was me? I thought it came from Mr Last Week

[01:24:13.0000] <MikeSmith>
"Y U NOT ADD MORE PREFERENCES" indeed

[01:25:32.0000] <MikeSmith>
"AT LEAST WE KNOW THAT GNOME WILL NOT SUPPORT DRM, AS THEY DO NOT ADD NEW FEATURES, ONLY REMOVE THEM" etc.

[01:25:54.0000] <darobin>
yeah, that one made me think it was hsivonen's secret angry alter ego

[01:27:15.0000] <JakeA>
annevk: About to change ignoreQuerystring to ignoreQuery in the cache filtering params. Would you rather ignoreSeach?

[01:27:29.0000] <JakeA>
actually, now I've typed it, ignoreSearch is really confusing

[01:29:47.0000] <annevk>
JakeA: but it does match the name better...

[01:30:25.0000] <annevk>
JakeA: why is it confusing?

[01:31:19.0000] <JakeA>
annevk: cache.matchAll(request, {ignoreSearch: true})

[01:31:29.0000] <annevk>
JakeA: ignoreURLSearch

[01:31:40.0000] <JakeA>
maybe it's ok

[01:31:47.0000] <JakeA>
worried that the context is kinda "searching"

[01:33:16.0000] <annevk>
JakeA: seems you typo'd prefiMatch

[01:33:25.0000] <JakeA>
annevk: let's go with ignoreSearch, consistency wins

[01:33:32.0000] <JakeA>
annevk: Yeah, spotted that, fixing now

[01:34:19.0000] <annevk>
JakeA: I think what's confusing is that some options apply to URLs and some to HTTP

[01:35:22.0000] <annevk>
JakeA: request has a URL which has a search; request has a method; response has headers which have Vary; not sure what prefixMatch is about

[01:35:54.0000] <annevk>
but maybe you just need to learn this

[01:36:06.0000] <annevk>
I can't really think of an API that separates those concerns better

[01:38:08.0000] <jgraham>
By "search" do we mean "query"?

[01:40:36.0000] <annevk>
jgraham: depends, by "query", do you mean "search"?

[01:40:41.0000] <JakeA>
annevk: cache.matchAll("/hello/", {prefixMatch: true}) would match caches entries with urls like "/hello/world/"

[01:40:54.0000] <JakeA>
It's sorta like appcache's FALLBACK

[01:41:16.0000] <jgraham>
annevk: I'm pretty sure no one calls it a "url search" despite the wacky terminology in the location API

[01:41:20.0000] <annevk>
JakeA: after parsing the URL argument I suppose?

[01:41:33.0000] <annevk>
jgraham: all URL APIs call it search

[01:41:44.0000] <JakeA>
jgraham: ignoreQuery/ignoreSearch means that the query string is ignored in matching

[01:42:13.0000] <jgraham>
annevk: And that's a bug in those APIs :)

[01:42:55.0000] <JakeA>
annevk: Yeah, it basically does this https://github.com/slightlyoff/ServiceWorker/blob/master/service_worker.ts#L537

[01:44:17.0000] <JakeA>
annevk: although I dunno what requestPath is, that should just be request

[01:44:42.0000] <JakeA>
actually, requestUrl

[01:45:29.0000] <annevk>
JakeA: shouldn't it be called pathPrefixMatch then?

[01:45:44.0000] <annevk>
JakeA: or pathnamePrefixMatch; seems like you don't care about query there...

[01:46:07.0000] <annevk>
e.g. /?x=s&y=z /?x=s

[01:47:16.0000] <JakeA>
hmm, yeah, I think the impl is wrong

[01:50:19.0000] <JakeA>
will change those pathnames to hrefs

[01:54:48.0000] <IZh>
What is the type of media.currentTime? Is it integer or float?

[02:02:16.0000] <kinetik>
IZh: double (http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#htmlmediaelement)

[02:02:48.0000] <IZh>
kinetik: Thanks.

[03:11:00.0000] <darobin>
what was the name of that proposal to have workers that could handle the layout of elements?

[03:11:34.0000] <Ms2ger>
"dumb"?

[03:11:47.0000] <caitp>
that's a bit rude mister twogy =)

[03:12:10.0000] <darobin>
hahaha

[03:19:12.0000] <jgraham>
I thought we were going with "optimistic"

[03:22:34.0000] <annevk>
darobin: something with box/layout

[03:23:20.0000] <darobin>
annevk: yeah, but that's not showing anything up. I wonder if I only heard it orally

[03:23:57.0000] <annevk>
darobin: from the Extensible Web Summit page there should be a link to an oksoclap with a discussion

[03:24:08.0000] <darobin>
mmmm, thanks annevk, looking

[03:30:07.0000] <darobin>
ah, found it in http://oksoclap.com/p/P3aS4GtR2L, it doesn't really have a name

[05:36:30.0000] <annevk>
JakeA: shouldn't the Cache API be described outside of service workers if it's going to be distinct? I guess grouping them is fine for now...

[05:36:47.0000] <JakeA>
annevk: yes, fetch() too

[05:37:00.0000] <annevk>
JakeA: yeah, I plan on starting work on fetch() real soon now

[05:37:07.0000] <JakeA>
\o/

[05:37:34.0000] <JakeA>
I need to spend some quality time with the fetch spec so I can figure out how default() works

[05:37:46.0000] <annevk>
I'm basically going through the bug lists for specs I maintain at the moment to make sure I can actually handle it all

[05:37:46.0000] <JakeA>
annevk: I'm worried we all have a slightly different idea on what default() does

[05:38:14.0000] <annevk>
JakeA: agreed (which is why I wanted to go through it in detail at the meeting)

[05:38:33.0000] <annevk>
JakeA: but we can have another meeting at some point, maybe in Europe this time

[05:38:50.0000] <annevk>
JakeA: in fact, how about Zürich

[05:38:51.0000] <JakeA>
agreed

[05:38:57.0000] <JakeA>
ohh, that could work

[05:39:11.0000] <JakeA>
I'm fine going out there, although it's a lot easier for me than the others

[05:39:30.0000] <JakeA>
annevk: having said that, I'm going to be in SF for Google I/O

[05:39:52.0000] <annevk>
no rush, Zürich works great for tobie too

[05:40:18.0000] <JakeA>
Sounds good. Never been to Zürich

[06:03:18.0000] <annevk>
MikeSmith: I filed another issue with UTS46 this time asking more explicitly for them to define a syntax for domain names

[06:03:35.0000] <annevk>
MikeSmith: hasn't entered the public record yet I think

[06:05:24.0000] <annevk>
MikeSmith: it will probably end up here: http://www.unicode.org/review/pri264/feedback.html

[06:22:10.0000] <MikeSmith>
annevk: excellente

[06:23:40.0000] <MikeSmith>
annevk: "I suggest carefully reviewing the diffs."?

[06:23:55.0000] <MikeSmith>
who's he suggesting should review the diffs?

[06:24:05.0000] <MikeSmith>
oh nm

[06:24:18.0000] <annevk>
MikeSmith: yeah I got confused too, but that's not a reply but a separate piece of feedback :)

[06:24:36.0000] <MikeSmith>
yeah, I thought at first that was a response to your report

[06:26:00.0000] <annevk>
MikeSmith: https://gist.github.com/annevk/5465e886cf7c45db8a1d is my feedback

[06:28:47.0000] <MikeSmith>
/me looks

[06:33:51.0000] <MikeSmith>
annevk: yeah for error messages that get emitted by checkers it would really help to have a declarative description to point to

[07:07:50.0000] <zewt>
annevk: i wasn't expecting this, but XHR in FF with blob urls seems to do exactly what we ended up with, grabbing the blob at open() (at least in a very simple test)

[07:08:29.0000] <zewt>
don't know if it works in all cases (hard to test fully without some hack to force GC)

[07:08:34.0000] <annevk>
zewt: except per sicking Gecko doesn't do parse/fetch distinction

[07:08:53.0000] <annevk>
zewt: though on the other hand that'd be weird if you passed in an HTTP URL...

[07:08:57.0000] <zewt>
http://zewt.org/~glenn/test-grabbing-blob-url-references.html this passes in firefox, fails in chrome

[07:09:21.0000] <annevk>
zewt: you should submit some stuff to the platform test thingie, that's great

[07:09:22.0000] <zewt>
though chrome fails weirdly, it runs onload (not onerror)

[07:09:40.0000] <annevk>
zewt: thanks for helping us out arriving at a somewhat sane solution there

[07:09:46.0000] <annevk>
/me still really dislikes blob URLs

[07:10:47.0000] <zewt>
hopefully if this blob URL thing gets traction we can then make the auto-revoke thing happen properly, and they'll be a lot saner, at least for users

[07:11:24.0000] <zewt>
hmm, actually if this stuff is implemented, then you could polyfill auto-revoke with just createAutoRevokeBlob = function(blob) { var url = URL.createObjectURL(url); setTimeout(function() { URL.revokeObjectURL(url); }, 0); return url; };

[07:25:01.0000] <Domenic>
annevk: wait, that is your feedback to them? Isn't the URL standard the most non-grammary thing around?

[07:25:31.0000] <annevk>
Domenic: I define the value space of schemes and things like that

[07:25:40.0000] <annevk>
Domenic: i.e. the syntax

[07:27:12.0000] <zewt>
annevk: i was sad when I did new URL("custom-scheme://host.com/path") and everything but the scheme ended up in pathname :(

[07:27:25.0000] <zewt>
(in Chrome, didn't check if that's what the spec says)

[07:27:31.0000] <annevk>
zewt: URLs are sad

[07:27:33.0000] <zewt>
means I still have to carry around my own URL parser...

[07:27:38.0000] <jgraham>
zewt: http://hoppipolla.co.uk/410/xhr_blob.html fwiw (your test adapted to testharness.js format but with full domain names which will need to be removed for a PR)

[07:28:12.0000] <zewt>
jgraham: cool

[07:29:18.0000] <zewt>
jgraham: 2-space indentation is unreadable, though

[07:30:14.0000] <jgraham>
Yeah, it's not ideal. Do you want to turn this into a real PR or should I?

[07:30:38.0000] <zewt>
i don't know where they go (and I have to head to work at the moment)

[07:31:08.0000] <jgraham>
OK, I can do it

[07:31:30.0000] <zewt>
does it assume the test is done if any assertion fails?

[07:31:35.0000] <jgraham>
Yes

[07:32:14.0000] <zewt>
so if there was an assertion in a progress event or something, it'd need to be careful (since it would think the test is done when something is still running)

[07:32:30.0000] <zewt>
cool, just understanding the lifecycle

[07:33:20.0000] <zewt>
afk

[07:35:08.0000] <annevk>
jgraham: yay

[07:43:35.0000] <annevk>
Hahaha, https://twitter.com/g16n/status/469104662092992512 accusing Hixie of reusing <br> rather than <l> from XHTML2 on the basis of NIH

[07:43:43.0000] <annevk>
People are silly

[07:49:33.0000] <jgraham>
zewt: https://github.com/w3c/web-platform-tests/pull/1004

[07:57:02.0000] <Ms2ger>
annevk, no, NHI

[07:57:33.0000] <annevk>
Ms2ger: oh, well then it makes perfect sense

[08:00:23.0000] <annevk>
Domenic: mathiasbynens: Hixie: https://gist.github.com/annevk/3db3fbda2b95e5ae9427

[08:05:04.0000] <Domenic>
well, at least emotion markup is now fully covered by patent commitments.

[08:07:20.0000] <annevk>
Wait what?

[08:08:03.0000] <annevk>
Domenic: ooh, "No patent disclosures have been made for any specifications of this group."

[08:08:19.0000] <annevk>
Domenic: I thought this was much more hilarious/sad

[08:09:26.0000] <annevk>
They managed to create a namespace even more ugly than the HTML namespace. That's talent.

[08:09:48.0000] <Domenic>
it's a Rec; isn't that ever spec's dream?

[08:11:07.0000] <annevk>
I'm not proud http://www.w3.org/TR/css3-namespace/

[08:12:39.0000] <annevk>
Oh, seems Elika moved me to Former Editors while editing the document in place

[08:12:51.0000] <annevk>
"edited in place" isn't quite what it used to mean I guess

[08:28:28.0000] <Domenic>
annevk: I don't understand the use case for https://www.w3.org/Bugs/Public/show_bug.cgi?id=22343

[08:29:35.0000] <Ms2ger>
annevk, I thought replacing WebIDL was more of a TC39 -> platform request?

[08:32:32.0000] <jgraham>
It's very unclear to me why the solution to "specification is undermaintained" is "start new specification from scratch"

[08:32:59.0000] <annevk>
Domenic: I'm not sure either, I think it's a hack around custom elements not being based upon subclassing

[09:00:23.0000] <annevk>
TabAtkins: https://gist.github.com/annevk/3db3fbda2b95e5ae9427

[10:09:24.0000] <arunranga>
annevk, do you think the Blob URL store should not be per unit of similar origin browsing contexts, to allow tainted cross-origin requests?

[10:15:02.0000] <arunranga>
annevk, can’t think of how else to solve this for multi-process cross origin uses.

[10:18:27.0000] <Domenic>
annevk: bigints

[10:18:43.0000] <annevk>
Domenic: specifically for crypto?

[10:19:19.0000] <annevk>
arunranga: I think I'm in the camp that wants blob URLs to be origin-restricted now

[10:19:29.0000] <annevk>
arunranga: limiting their harm seems good

[10:19:31.0000] <Domenic>
annevk: probably not

[10:19:55.0000] <annevk>
Domenic: if it's not for crypto doesn't seem that important

[10:20:06.0000] <arunranga>
annevk, that would make things straightforward, since then we have all the pieces solved.

[10:20:28.0000] <annevk>
arunranga: apart from data URLs, but I guess that's not your problem

[10:21:31.0000] <Domenic>
annevk: ok, how about: a better cohesive story about error typing and detection

[10:21:57.0000] <arunranga>
annevk, yeah, the data URL problem seems hard, since 2007’s demonstrated hack

[10:22:15.0000] <arunranga>
annevk, cool, I’ll have an update that solves some of the bugs you logged and ping you for review.

[10:22:36.0000] <annevk>
Domenic: adding

[10:27:43.0000] <annevk>
JakeA: I guess like you need to understand Fetch, I need to study those SW algorithms a bit more

[10:27:52.0000] <annevk>
JakeA: will get back to you tomorrow

[10:36:36.0000] <IZh>
Is there a guarantee that media.fastSeek will not jump after desired position?

[10:40:35.0000] <annevk>
Hmm, HTML imports reached beta

[10:43:39.0000] <JakeA>
annevk: those are the bits I know pretty well, so feel free to bug me

[10:43:52.0000] <JakeA>
(The SW thing, not the imports)

[11:16:48.0000] <Hixie>
annevk: if we're really gonna have to spec this event handling behaviour (which is really sad, i thought we'd eradicated that a few years ago), then i think the way to do it is for DOM to add a step before step 10 that invokes "the legacy event handler defined by the specification that defines the target, if any" on the target node

[11:20:33.0000] <annevk>
Hixie: many tears will be shed over that commit

[11:20:41.0000] <Hixie>
yeah no kidding

[11:20:56.0000] <Hixie>
i'm still skeptical it's actually required for compat

[11:21:04.0000] <Hixie>
maybe we can limit it to quirks mode or something, that's why i want to see urls

[11:21:44.0000] <annevk>
I think sicking might still be in our camp, but he obviously has no time to clean this up, maybe arv_ can find some free time

[11:22:39.0000] <Ms2ger>
Which?

[11:23:41.0000] <annevk>
Ms2ger: read https://www.w3.org/Bugs/Public/show_bug.cgi?id=12230 and weep

[11:24:28.0000] <Ms2ger>
:/

[11:25:23.0000] <sicking>
yeah, this is a pretty terrible setup

[11:25:52.0000] <sicking>
iirc there's quite a few events that cause actions to happen

[11:26:19.0000] <sicking>
i believe firing a "click" event (or maybe just some mouse events) on a <a> will also follow the link

[11:26:55.0000] <sicking>
I think Smaug was in favor of this behavior. I'm not sure if he still is

[11:27:00.0000] <sicking>
I really dislike it

[11:27:11.0000] <Hixie>
yeah it's pretty terrible and makes no sense, imho

[11:27:21.0000] <Hixie>
hoenstly i thought we'd eradicated it years ago

[11:27:33.0000] <Hixie>
otherwise i would have long specced it

[11:27:35.0000] <sicking>
oh hey, look at that, i've commented in the bug saying that :)

[11:28:22.0000] <sicking>
i think the way to go about it would be to get a group of implementers together and discuss

[11:28:39.0000] <sicking>
and then add telemetry

[11:28:47.0000] <sicking>
maybe telemetry would be the first step actually

[11:29:04.0000] <smaug____>
/me doesn't like the click behavior

[11:29:21.0000] <JonathanNeal>
Anyone here familiar with css matrix3d?

[11:29:38.0000] <Hixie>
i'd really like to know quite how widespread this behaviour is (in terms of what events on what targets can do something) and what pages depend on it

[11:30:21.0000] <Hixie>
i feel like i've just discovered ants in my bathroom and i'm not sure if it's a stray or if i have a nest in my walls

[11:30:54.0000] <sicking>
get Chrome and Gecko to add telemetry

[11:31:10.0000] <smaug____>
IIRC I broke quite a few web sites when synthetic click didn't cause link to be followed

[11:31:25.0000] <sicking>
sads

[11:32:39.0000] <sicking>
smaug____: did .click() still work when you made that change?

[11:33:33.0000] <smaug____>
IIRC there were to separate regressions

[11:33:45.0000] <Hixie>
i'm amazed that pages use dispatchEvent()

[11:33:54.0000] <smaug____>
s/to/two/

[11:34:12.0000] <smaug____>
I probably broke click, but dispatchEvent case was also needed to work

[11:34:33.0000] <smaug____>
and all the browsers do handle that case the same way

[11:34:49.0000] <sicking>
i still think it'd be interesting to get telemetry

[11:35:05.0000] <sicking>
things might have change since then. Either for the better or for the worse

[11:35:14.0000] <smaug____>
yup

[11:35:19.0000] <smaug____>
/me files a bug

[11:35:22.0000] <sicking>
hopefully heycam will finish the telemetry infrastructure he's working on at some point

[11:35:30.0000] <Ms2ger>
When is he getting back?

[11:35:49.0000] <sicking>
right now it's kind of a pain for us to gather data on how much a specific web feature is used as I understand it

[11:35:55.0000] <sicking>
(I don't understand why though)

[11:36:02.0000] <sicking>
Ms2ger: no idea

[11:36:21.0000] <Ms2ger>
1 June, apparently

[11:36:21.0000] <sicking>
Ms2ger: also, when will you finish the 'id'/'class' bug? :)

[11:36:26.0000] <Ms2ger>
Ah, that

[11:36:47.0000] <Ms2ger>
Last time I think one of the B2G desktop builds failed with GetClassNameW things

[11:37:00.0000] <Ms2ger>
I need to check if that still happens

[11:37:08.0000] <sicking>
didn't Ehsan fix that for you long long ago?

[11:37:21.0000] <ehsan>
I did

[11:37:22.0000] <Ms2ger>
No, that was desktop Windows

[11:37:35.0000] <ehsan>
Ms2ger: still hitting issues?

[11:37:44.0000] <Ms2ger>
Perhaps

[11:37:53.0000] <sicking>
Ms2ger: my concern is that the longer we wait, the less likely it is that we can do it

[11:37:55.0000] <Ms2ger>
I'll push to try and see if it magically fixed itself

[11:38:06.0000] <Ms2ger>
sicking, yeah, fair

[11:38:09.0000] <sicking>
iirc there were some review comments too

[11:38:17.0000] <Ms2ger>
Too many balls in the air :/

[11:38:20.0000] <sicking>
but i didn't look at what they were

[11:38:42.0000] <sicking>
Ms2ger: if there are still build issues, paste a build error in the bug

[11:38:47.0000] <Ms2ger>
Yep, will do

[11:39:01.0000] <ehsan>
Ms2ger: also ping me if you needed help

[11:39:19.0000] <zcorpan>
MikeSmith: i got a reply from github to check out [1] http://developer.github.com/v3/#pagination

[11:39:25.0000] <Ms2ger>
And now you distracted from fixing that bug for bz...

[11:40:02.0000] <zcorpan>
MikeSmith: so fetch the urls in Link: also

[11:40:40.0000] <zcorpan>
MikeSmith: this is about w3c-test:mirror script not picking me up as collaborator

[11:41:43.0000] <zcorpan>
or maybe &per_page=1000 works

[11:43:07.0000] <Ms2ger>
It's clamped to 100, AIUI

[11:43:19.0000] <Ms2ger>
And I thought denis fixed that

[11:49:45.0000] <Ms2ger>
sicking, ehsan, alright, rebasing...

[11:49:55.0000] <sicking>
Ms2ger: thanks!

[11:52:29.0000] <Hixie>
annevk: 500 from tracker

[12:05:26.0000] <ehsan>
Ms2ger: /me holds breath

[12:05:48.0000] <Ms2ger>
Don't, our builds aren't that fast ;)

[12:06:27.0000] <ehsan>
lol

[12:07:00.0000] <Ms2ger>
And I haven't built locally, so... ;)

[12:24:24.0000] <TabAtkins>
annevk: What was that gist about?

[12:56:36.0000] <odinho>
Can anyone quickly review some IndexedDB prev cursor? => https://critic.hoppipolla.co.uk/r/1621

[13:37:02.0000] <IZh>
Does html5 support 3D videos?

[13:37:22.0000] <annevk>
TabAtkins: see title of it

[13:37:23.0000] <Hixie>
html (not html5, we dropped the version number years ago) is agnostic to the exact video codec used

[13:39:03.0000] <IZh>
I mean, often there are no any marks in the video stream itself that it is 3D. Even hardware players needs a hint from human to figure what type of encoding is used -- top-bottom halves of the frame or left-right.

[13:40:39.0000] <IZh>
So the the player needs to be told in some way that this url points to 3D video, for example, with top-bottom frames encoding.

[13:41:39.0000] <IZh>
Because often a 3D video could be played just as ordinary 2D. There are no special file formats for it, as I know.

[13:43:09.0000] <IZh>
So the browser itself can't guess whether it is a 3D-file or not. Probably some parameter is needed.

[13:44:00.0000] <Hixie>
there's nothing like that in html currently

[13:45:39.0000] <odinho>
But there is a bug about showing more metadata waiting for vendor feedback. :]

[13:46:10.0000] <IZh>
And it's hard to stick this parameter to a particular codec because 3D video can be incoded with any codec.

[13:50:00.0000] <IZh>
Currently there are following encoding that I know: squize left and right frame horizontally (and expand while playing), the same but vertically. These are most used variants. Also it's possible to interleave left and right frames, use double sized frame (left-right or top-bottom) and use 2 separate video streams. All these things could be put to ordinary file. That's why some metadata needed.

[13:50:34.0000] <IZh>
Squize = squeeze

[13:51:15.0000] <Hixie>
Domenic: if a promise gets garbage collected, does it reject, or just do nothing forever?

[13:54:48.0000] <Hixie>
man, a lot of the code i'm seeing where people use promises to show how simple things are with promises are... not simple

[13:55:49.0000] <Hixie>
lots of reducing and chaining callbacks and code of the form  blabla(very-long-lambda-that-spans-many-lines, anotherargument)

[13:56:34.0000] <zewt>
lambdas have no place in any language with inline functions (javascript)

[13:56:49.0000] <Hixie>
how are those not the same thing

[13:57:20.0000] <zewt>
lambdas are just a dumb restricted form of inline functions, no point in having them if you have real inline functions

[13:57:53.0000] <Philip`>
Do you mean Python-style lambdas where there's a distinction between expressions and statements, and lambdas can only contain expressions?

[13:57:58.0000] <jgraham>
Isn't that just python's "lambda" rather than lambdas in general?

[13:58:00.0000] <Hixie>
ok well i just meant an inline function

[13:58:14.0000] <zewt>
most "promises" examples I see are very unobvious to me, which makes me nervous about them

[13:58:16.0000] <annevk>
smaug____: what's the bug ID?

[13:58:17.0000] <Philip`>
(Proper languages don't have that restriction)

[13:58:25.0000] <annevk>
smaug____: for the synthetic events thing you filed earlier

[13:58:28.0000] <jgraham>
Oh, it's Philip`

[13:58:41.0000] <Hixie>
(wikipedia seems to agree with my usage of the term, fwiw)

[13:58:47.0000] <Philip`>
jgraham: That's statistically unlikely

[13:59:27.0000] <zewt>
"lambda" in programming languages means "an inline function that's just a single expression", eg. function(args) { return %1; }

[13:59:48.0000] <zewt>
anyway

[13:59:49.0000] <jgraham>
Philip`: I think we need P(Philip`|data) rather than just p(Philip`)

[13:59:50.0000] <Hixie>
not according to wikipedia...

[13:59:54.0000] <zewt>
wikipedia is wrong, then

[14:00:10.0000] <smaug____>
annevk: https://bugzilla.mozilla.org/show_bug.cgi?id=1014762

[14:01:11.0000] <jgraham>
I'm pretty sure that "lambda" is just a fancy word for "anonymous function" that makes people feel like they are doing abstract mathematics when in fact they ae just writing yet another DOM wrapper library (or something)

[14:01:52.0000] <Hixie>
i'm not finding anything that supports limiting lambdas to just an expression, except in lambda calculus, where everything is just an expression anyway.

[14:02:09.0000] <Philip`>
zewt: So C++11 lambda expressions and Java lambda expressions are not lambdas, because you can put multiple statements in them?

[14:02:36.0000] <Hixie>
also i've now officially read the word "lambda" too many times in a row and it's lost its meaning and looks silly.

[14:03:04.0000] <zewt>
Philip`: "anonymous functions being called the wrong thing"

[14:03:15.0000] <zewt>
Hixie: it looks pretty silly to start with...

[14:03:32.0000] <annevk>
I guess I need to find some time to write a better web-apps-tracker :/

[14:03:53.0000] <annevk>
I wish someone would take over, but apparently nobody is annoyed enough

[14:05:02.0000] <Hixie>
so what's the state of the art with JS modules these days

[14:05:08.0000] <Hixie>
is there something that makes sense yet?

[14:05:13.0000] <Hixie>
is there something i can integrate with yet?

[14:06:01.0000] <annevk>
Hixie: I would wait until browsers start implementing

[14:06:16.0000] <annevk>
Hixie: the spec only recently "finished"

[14:06:23.0000] <zewt>
(grr: building in Unity takes a couple minutes, and when I tab over to IRC because I'm twiddling my thumbs waiting, Xcode steals focus 4-5 times during the build process)

[14:06:38.0000] <Hixie>
annevk: oh there's something that people think is finished? where? i couldn't find any recent links.

[14:07:12.0000] <zewt>
(then something I'm typing on IRC gets vomited into a source file, breaking the build)

[14:07:19.0000] <annevk>
Hixie: oh it seems ES6 still has some todos

[14:07:40.0000] <Hixie>
is one of those todos "tell hixie about it"

[14:07:49.0000] <annevk>
Hixie: there's also https://people.mozilla.org/~jorendorff/js-loaders/Loader.html

[14:07:51.0000] <annevk>
Hixie: not sure

[14:08:11.0000] <jorendorff>
what don't look at that

[14:08:28.0000] <zewt>
W:D

[14:08:52.0000] <jorendorff>
Hixie, annevk: well, for your purposes actually it's not *that* terrible

[14:09:11.0000] <Hixie>
i'm hoping it's not terrible at all :-)

[14:09:12.0000] <jorendorff>
but expect bugs and api changes

[14:09:29.0000] <Hixie>
i just want to know how to integrate it with my <script> preloading/dependency stuff, and <script type=module> and so forth.

[14:09:41.0000] <Hixie>
not to mention html imports

[14:10:12.0000] <Hixie>
cos i don't want to end up with two or three entirely separate dependency chain management systems on the web

[14:10:17.0000] <jorendorff>
uh huh

[14:10:25.0000] <Hixie>
which right now seems to be where we're headed

[14:10:32.0000] <jorendorff>
well, this Loader stuff is definitely async depenedency chain management

[14:14:01.0000] <jorendorff>
Hixie: do you want a primer or would you rather read that code

[14:14:06.0000] <annevk>
nn

[14:14:14.0000] <Hixie>
jorendorff: i'd rather read a spec

[14:14:19.0000] <Hixie>
if there is one

[14:15:03.0000] <jorendorff>
Hixie: it's in the ES6 spec but afaict totally unreadable

[14:15:07.0000] <jorendorff>
it's impossible to tell what's going on

[14:15:13.0000] <Hixie>
well that's encouraging

[14:15:48.0000] <Hixie>
if you have a moment, i can ask you some questions

[14:15:51.0000] <jorendorff>
I do

[14:15:54.0000] <Ms2ger>
jorendorff, you're repeating yourself ;)

[14:16:01.0000] <Hixie>
the first one would be, "what are the use cases that this thing is for?"

[14:16:11.0000] <Hixie>
like, what is the space that "Modules" are intended to address?

[14:18:33.0000] <Ms2ger>
Consensus

[14:18:43.0000] <jorendorff>
Hixie: so the champions are dave herman and sam tobin-hochstadt and you should ask those guys; the use case I care about is "like require.js but with better syntax"

[14:19:02.0000] <jorendorff>
it's for getting JS into a web page,

[14:19:13.0000] <jorendorff>
in such a way that you can separately configure where it's loading from / how it's loading

[14:19:27.0000] <jorendorff>
changing deployment without having to change your code

[14:19:33.0000] <Hixie>
how do you mean "where" and "how"?

[14:20:04.0000] <jorendorff>
related

[14:20:10.0000] <jorendorff>
what protocol, what file format

[14:20:18.0000] <zewt>
jorendorff: eg. "switch from loading jquery-1.2.3.js from the jquery website to our trusted bucket on S3"?

[14:20:19.0000] <Hixie>
file format?

[14:20:22.0000] <jorendorff>
yep

[14:20:26.0000] <Hixie>
like, javascript vs dart?

[14:20:45.0000] <jorendorff>
Hixie: i meant "hundreds of .js files vs. a single zip file"

[14:20:59.0000] <jorendorff>
but the module system also has a hook for different languages

[14:21:01.0000] <Hixie>
js modules supports sending files as zip files?

[14:21:19.0000] <zewt>
(hope not, that's the wrong layer for that)

[14:21:22.0000] <Hixie>
that seems like an odd place to fix that problem...

[14:21:24.0000] <jorendorff>
Hixie: not natively, but the part of the module system where we load code is literally just a fetch hook

[14:21:30.0000] <jorendorff>
which we call

[14:21:36.0000] <zewt>
(better)

[14:21:38.0000] <Hixie>
ok, hold on

[14:21:39.0000] <jorendorff>
and it returns a promise for the code

[14:21:51.0000] <Hixie>
let's try this from a different angle.

[14:22:00.0000] <Hixie>
what does modules provide?

[14:22:27.0000] <Hixie>
cos what you've described so far seems redundant with <script> and service workers. :-)

[14:22:41.0000] <jorendorff>
import/export syntax, an object model for Modules, and an API for loading them

[14:23:09.0000] <zewt>
(seems strange to add *syntax* for something like this)

[14:23:31.0000] <Hixie>
tell me more about this API

[14:23:35.0000] <TabAtkins>
The main use case to me is fixing the "there's no way for a script to include another script sanely" problem.

[14:23:44.0000] <zewt>
(it'd probably keep anyone from using it for years, since syntax is hard or impossible to polyfill)

[14:24:27.0000] <Hixie>
is there really not a spec i can look at for this

[14:24:36.0000] <TabAtkins>
You have to either bake all the script files you need into your html, or use a preprocessor to manually include them, or use s library like require.js

[14:25:45.0000] <jorendorff>
Hixie: ES6, search for Reflect.Loader

[14:25:46.0000] <TabAtkins>
annevk: I got the title, yes. Why did you name-mention me with it, though?

[14:26:12.0000] <Hixie>
"The initialize value of Reflect.Loader is the %Loader% intrinsic object."

[14:26:17.0000] <Hixie>
man you're right, this is worse than html

[14:26:31.0000] <Ms2ger>
They particularly like their weird characters

[14:26:32.0000] <zewt>
D:

[14:27:18.0000] <Hixie>
"The @@create method of a Reflect.Loader function object F performs the following steps: [...] 2. Let obj be the result of calling OrdinaryCreateFromConstructor(F, "%LoaderPrototype%", ([[LoaderRecord]]))."

[14:27:42.0000] <jorendorff>
it's all microcode

[14:27:43.0000] <Ms2ger>
Bingo!

[14:27:49.0000] <Ms2ger>
jorendorff, it's microperl

[14:27:53.0000] <jorendorff>
ReturnIfAbrupt everywhere

[14:28:02.0000] <jorendorff>
even in perl you could `die`

[14:28:07.0000] <Hixie>
well ok this didn't help. bummer.

[14:28:13.0000] <Hixie>
are there like, examples somewhere?

[14:28:22.0000] <zewt>
Hixie: i have to worry that these are the people making syntax changes to JS...

[14:28:33.0000] <Hixie>
zewt: i'm sure it makes sense to JS implementors

[14:28:42.0000] <Hixie>
zewt: i mean, the HTML spec often looks the same way when i'm first writing a section

[14:28:45.0000] <jorendorff>
zewt: That is just random snark

[14:29:04.0000] <Ms2ger>
Random snark is what #whatwg is known for :)

[14:29:05.0000] <zewt>
nope, it isn't

[14:29:12.0000] <Hixie>
i mean, i have concerns over were js is going, but this isn't why :-)

[14:29:25.0000] <zewt>
it's "if someone likes this as a syntax, keep their hands off of the JS syntax"

[14:29:53.0000] <Hixie>
nah, that's not fair

[14:30:00.0000] <jorendorff>
zewt: but the person deciding how the spec is written is the editor, and the people deciding how JS looks is the committee

[14:30:37.0000] <Hixie>
an architect might be terrible at building things with wood and nails, but still design beautiful houses

[14:30:57.0000] <Hixie>
i really don't have a clue what this spec is telling me though

[14:31:12.0000] <jorendorff>
Hixie: please talk to yehuda katz

[14:31:44.0000] <Ms2ger>
wycats, ^

[14:33:28.0000] <Hixie>
this module system is all done in JS itself, right

[14:33:38.0000] <jorendorff>
Hixie: there are two ways for JS code to ask for other JS code. syntax and API.  The syntax is import-declarations. The API is mostly just Reflect.Loader.{define,import}.

[14:33:48.0000] <jorendorff>
Hixie: we're going to self-host it, yeah

[14:33:53.0000] <Hixie>
so there's no way for a module to have declared dependencies before it's started executing?

[14:34:03.0000] <jorendorff>
Hixie: the syntax is declarative

[14:34:07.0000] <jorendorff>
and only declarative

[14:34:21.0000] <Hixie>
but you have to be parsing it before you know of the dependencies

[14:34:52.0000] <jorendorff>
Hixie: I don't understand, what sort of alternative do you have in mind?

[14:34:53.0000] <Hixie>
it doesn't have an equivalent of <script src=a.js></script> <script src=b.js needs=a.js>

[14:35:13.0000] <Hixie>
where even before you've contacted the server for b.js, you know you need to first fetch a.js

[14:36:31.0000] <jorendorff>
the JS equivalent would be something like import a from "a"; import b from "b";

[14:36:52.0000] <jorendorff>
not sure what the needs= thing is trying to say

[14:37:06.0000] <Hixie>
needs="" says "before you execute me, make sure you've executed that other thing"

[14:37:43.0000] <jorendorff>
imports do that

[14:38:31.0000] <Hixie>
but if b says "import a from 'a'", and you just have <script src=a.js></script> <script src=b.js></script>, you have no way to know that b needs a before b has been downloaded, right?

[14:39:06.0000] <jorendorff>
b doesn't start executing until after it has been parsed though

[14:39:12.0000] <JonathanNeal>
I’m about to make another post on specifiction about SVG files and would love any preliminary feedback before I post. https://gist.github.com/jonathantneal/1fc6a43f4fa8f448a368

[14:39:17.0000] <zewt>
jorendorff: but if it does it *within* the script itself, you have to download the script before you can start downloading its dependencies, which would kill page load performance

[14:39:19.0000] <Hixie>
jorendorff: sure

[14:39:39.0000] <jorendorff>
as code comes in off the network, you parse it and see what else it needs; maybe you've already got it, maybe it's already loading, maybe you've never heard of it until now

[14:39:55.0000] <zewt>
right, that means no pipelining, which means terrible performance

[14:39:58.0000] <Hixie>
jorendorff: right but if you're trying to not download code that you don't need, that doesn't work

[14:40:37.0000] <jorendorff>
I still don't understand what needs= is doing

[14:41:04.0000] <Hixie>
jorendorff: say that A is used by B and D, and B is used by C, and you don't want to download anything you don't need, and then suddenly you find you need C. You tell C to execute, and the browser immediately downloads A, B, and C, and executes them in that order once it's got them.

[14:41:38.0000] <Hixie>
jorendorff: and then later you find you need D, and A's already executed so it's left alone, but D needs to be downloaded and executed and so that happens.

[14:42:07.0000] <Hixie>
jorendorff: do modules have a way to say what will need to be executed when you find you need C, without previously having downloaded A, B, C, or D?

[14:42:19.0000] <Hixie>
s/executed/downloaded and executed/

[14:43:20.0000] <jorendorff>
Hixie: let me make sure i understand first -- <script src=b.js needs=a.js></script> means *don't* load b.js yet?

[14:43:56.0000] <Hixie>
jorendorff: well it doesn't mean anything precise yet. the exact syntax for the example i gave in the old proposal i had last year was more like <script src=b.js needs=a.js whenneeded>

[14:44:21.0000] <Hixie>
jorendorff: but i expect if a proposal comes out of this it will be different again

[14:44:27.0000] <jorendorff>
k

[14:44:39.0000] <Hixie>
jorendorff: the key is just having the dependency chain defined outside the script

[14:44:41.0000] <jorendorff>
huh... the people we spoke to -- and i'm not a web dev, so, who knows -- but the web devs we talked to wanted the opposite, they wanted to push the code they knew the client needed

[14:44:47.0000] <jorendorff>
eagerly

[14:45:00.0000] <Hixie>
oh i have people who've asked for every possible combination possible

[14:45:16.0000] <jorendorff>
so that later, when someone did .import("C"), there was the best chance of its already having been loaded

[14:45:21.0000] <Hixie>
i'm currently dealing with use cases labeled "L" through "Z"

[14:45:31.0000] <Hixie>
that's how many there are :-)

[14:45:33.0000] <zewt>
jorendorff: the "needs" mechanism allows that, the key difference is it lets you start downloading any or all of the dependencies without earlier deps needing to be fetched already

[14:45:35.0000] <jorendorff>
then there were the people who were like "HTTP2, therefore your argument is invalid"

[14:45:50.0000] <Hixie>
jorendorff: so the short answer is no?

[14:46:07.0000] <jorendorff>
Hixie: yeah, it's a no. the hooks are there so you could add it as a library, but no

[14:46:08.0000] <Hixie>
jorendorff: is there a way I can hook into the module system to provide this data from the needs="" attribute?

[14:46:18.0000] <jorendorff>
Hixie: yeah, lemme think

[14:46:58.0000] <zewt>
Hixie: yeah, i can see the value of being able to declare dependencies within scripts... depends on whether you care more about pipelining performance or encapsulation, I guess

[14:47:44.0000] <zewt>
most people probably care about both, but they seem like incompatible goals...

[14:47:45.0000] <jorendorff>
zewt: but if you know the dependency tree, it's trivial to just ask for everything you're going to need

[14:48:12.0000] <jorendorff>
also, if you have the dependencies in the code, you can extract them statically if you want to do stuff

[14:48:13.0000] <zewt>
jorendorff: where would you learn the dependency tree, if that lives inside the scripts themselves? that's exactly what "needs" is doing

[14:48:56.0000] <jorendorff>
zewt: needs isn't doing that for web developers, it's providing a way for them to express that information -- which they must figure out themselves somehow

[14:49:00.0000] <jorendorff>
right?

[14:49:11.0000] <zewt>
i guess you could use both: declare your real dependencies inside the script, then have your profiler/validator/whatever tell you "here are the dependencies you should add to your <script> to make this faster"

[14:49:23.0000] <jorendorff>
the dependencies themselves are always in the code...

[14:49:56.0000] <zewt>
jorendorff: in the previous @needs proposal, there were no dependencies in the code at all--@needs *was* the dependency declaration

[14:50:02.0000] <zewt>
(which again, means you lose encapsulation)

[14:50:19.0000] <jorendorff>
zewt: no i mean as a plain fact of life, dependencies are where one bit of code depends on another, and that's in the code

[14:50:50.0000] <zewt>
jorendorff: that's the underlying requirement, but the "dependencies" we're discussing are dependency declarations

[14:50:58.0000] <jsbell>
odinho: just saw your ping about idb prev cursor - looking now

[14:51:22.0000] <jorendorff>
Hixie: sorry, distracted. the loader pipeline is all exposed, it's a series of hooks that the Loader calls

[14:51:41.0000] <Hixie>
jorendorff: does the loader do any dependency management?

[14:52:06.0000] <jsbell>
odinho: Not that I have any magic status, but I can sanity check at least :)

[14:52:14.0000] <Hixie>
jorendorff: i'd like for there to be one piece of code in the web platform that knows to dispatch requests and so on based on dependencies, that supports HTML Imports, <script needs>, JS modules, and anything else we add later

[14:52:37.0000] <jorendorff>
Hixie: that sounds good, and Loader isn't it in the do-one-thing-do-it-well sense

[14:52:58.0000] <jorendorff>
Hixie: you can't tell a Loader what dependencies are in advance; but

[14:53:42.0000] <jorendorff>
Hixie: if you know what they are, your fetch() hook can say, ah, i see he is fetching C, I happen to know it'll need A and B, so let me just call this.import("A") and this.import("B")

[14:53:50.0000] <jorendorff>
which will get those started loading too

[14:54:21.0000] <odinho>
jsbell: Ahh, that's awesome Joshua :D

[14:54:35.0000] <zewt>
i imagine you'd want to be able to find out all of the dependencies in advance, even if some aren't being fetched yet?

[14:55:34.0000] <Hixie>
jorendorff: but there's no way i can also say "btw, if anything tells you to load A, can you tell me to load this image over here and that style sheet over there"?

[14:55:36.0000] <odinho>
jsbell: Was looking for a test to show Marc, but saw that it didn't exist. So thought I'd just quickly create one.

[14:55:47.0000] <jorendorff>
Hixie: no, nothing like that

[14:55:58.0000] <jorendorff>
just the hooks

[14:56:08.0000] <Hixie>
jorendorff: any chance we can move the logic out of JS so that JS hooks into a system that _does_ provide all that?

[14:56:25.0000] <JonathanNeal>
Well, if any of you have started using SVGs, I’ve prompted discussion to simplify the markup http://discourse.specifiction.org/t/simple-svg-markup/92 https://twitter.com/jon_neal/status/469597460793262080

[14:56:26.0000] <jsbell>
odinho: Yeah, I made a jsfiddle but then it wasn't loading in FF for some reason. Did you notice any failures in any browsers?

[14:56:29.0000] <jorendorff>
Hixie: personally I don't have the weight to give you an answer to that

[14:56:47.0000] <jorendorff>
Hixie: sounds lovely to me

[14:57:36.0000] <odinho>
jsbell: Only have Opera, Chrome and Firefox, -- but passes in all of those.

[14:57:38.0000] <jorendorff>
Hixie: the problem is the system was designed for loading these JS module things and so it tries not to expose stuff before it has executed and is ready. An image is easier in that it won't have dependencies

[14:57:47.0000] <jorendorff>
you can expose it before all the other junk is loaded, no problem

[14:58:07.0000] <Hixie>
jorendorff: well, an image might have dependencies. It could be an SVG file that loads scripts...

[14:58:30.0000] <odinho>
I'd check the others if I'd been at work with access to non-Linux machines :)

[14:58:34.0000] <Hixie>
or an HTML import that loads a style sheet that binds a web component that loads scripts that...

[14:58:39.0000] <zewt>
stylesheets with @imports

[14:58:48.0000] <jorendorff>
Hixie: yeah, that's totally right, let me think about it a sec

[14:58:55.0000] <jsbell>
odinho: I recall that continue() in reverse over an index is a bit "odd" but continue() and advance() should match even in that case... so I dunno what Marc was seeing.

[15:01:31.0000] <Hixie>
dglazkov: btw, the conversation here is relevant to your interests

[15:02:10.0000] <jorendorff>
Hixie: and is it considered pretty much OK to expose a DOM for an SVG document before its dependencies are done loading?

[15:02:23.0000] <Ms2ger>
Why not?

[15:02:26.0000] <jorendorff>
maybe some dependencies, but not others?

[15:02:30.0000] <jorendorff>
i'm askign

[15:02:35.0000] <Ms2ger>
You also expose the HTML DOM before dependencies load

[15:02:50.0000] <jorendorff>
...before the HTML is even done loading

[15:03:20.0000] <Ms2ger>
Yep

[15:03:35.0000] <jorendorff>
what i'm asking is kind of, is that a decision we're stuck with rather than a design principle to carry forward

[15:03:45.0000] <Hixie>
jorendorff: i imagine there are people who'd want it one way, and people who'd want it the other. i plan to support both.

[15:04:22.0000] <jsbell>
odinho: anyway, lgtm

[15:06:30.0000] <jorendorff>
Hixie: ok, so one thing modules do is, you import stuff by name rather than by URL, so   import $ from "jquery";    that "jquery" isn't a URL

[15:06:51.0000] <Hixie>
jorendorff: fyi, looks like dglazkov actually has a bug on doing this same conversation with the es6 folk, but for integrating web components and es module loading: https://www.w3.org/Bugs/Public/show_bug.cgi?id=25715

[15:07:00.0000] <Hixie>
jorendorff: how does it map names to urls?

[15:08:07.0000] <jorendorff>
depends on the loader. there's a loader.locate() hook that does the mapping.  annevk and David Herman were supposed to talk with you and figure out what the default locate() behavior should be in a browser

[15:09:09.0000] <Hixie>
ah

[15:09:26.0000] <Hixie>
(i haven't heard anything)

[15:09:44.0000] <jorendorff>
that was months ago

[15:13:07.0000] <Hixie>
jorendorff: btw the other question i have is about how modules are exposed in HTML -- is there anything different about script block that's a "module" and one that isn't? does it start with module { ... } or something?

[15:13:29.0000] <jorendorff>
no, modules are a toplevel concept, and you *can't* concatenate them

[15:13:35.0000] <jorendorff>
what i mean is, a module is a file

[15:13:37.0000] <jorendorff>
like python

[15:13:56.0000] <Hixie>
so it starts with a keyword, like in pascal say? "module foo; ..."?

[15:14:18.0000] <jorendorff>
the only syntactic difference from a script is that import and export are allowed

[15:14:28.0000] <Hixie>
ah

[15:14:37.0000] <Hixie>
how does the browser know to allow import and export then?

[15:14:44.0000] <Hixie>
or is just everything treated like a module

[15:14:57.0000] <jorendorff>
http://people.mozilla.org/~jorendorff/es6-draft.html#sec-modules this sort of thing at least is clear in the es spec

[15:15:25.0000] <jorendorff>
Hixie: has to be type=module or some similar clue

[15:15:31.0000] <Hixie>
aah

[15:15:32.0000] <Hixie>
ok

[15:15:41.0000] <Hixie>
haven't heard anything about that either

[15:16:03.0000] <Hixie>
(seems weird, why would it not just be inline?)

[15:16:22.0000] <jorendorff>
it seems weird to me too.

[15:17:04.0000] <jorendorff>
web developers concatenate js files, sometimes it's the best part of their day, i would have let them keep that

[15:17:14.0000] <jorendorff>
eh, what do i know

[15:19:04.0000] <Hixie>
seems very odd that you wouldn't be able to concatenate

[15:19:22.0000] <Hixie>
i mean, it'll just mean people concatenate them into an html import with multiple <script type=mod> or whatever

[15:21:03.0000] <jorendorff>
some will use Real Tools, and the provided hooks; some will use SPDY; some will use html imports; there was some noise for a while about urls that point to subresources within a bundle

[15:22:55.0000] <Hixie>
what's a script that's not a module called?

[15:22:56.0000] <Hixie>
program?

[15:23:50.0000] <jorendorff>
yes

[15:23:57.0000] <zewt>
jorendorff: more like, they'll keep doing it no matter what anyone tels them to do...

[15:24:06.0000] <zewt>
also, tells

[15:25:08.0000] <zewt>
(now, if we could get people to stop "minifying"^Wobfuscating scripts...)

[15:25:36.0000] <jorendorff>
oh, there's also the 80% of web developers who will just do nothing, and get no pipelining benefit whatsoever, just a lazy async graph walk

[15:25:45.0000] <jorendorff>
and be happy enough with it

[15:25:58.0000] <jorendorff>
no one concatenates everything

[15:26:35.0000] <zewt>
well that's a benefit of @needs on its own, the pipelining is built-in (from the developer's perspective)

[15:50:02.0000] <dglazkov>
Hixie: I think we need a brainmelt with dherman to come up with a coherent strategy for all these cool ideas

[15:50:34.0000] <dglazkov>
my experience from working with dherman is that he's very easy to work with

[16:33:20.0000] <Hixie>
annevk: catch me on irc some time soonish to talk about the "cleanup steps" bugs

[16:55:28.0000] <roc>
who decided that DOMTokenList.toggle should take a 'force' argument which makes it *not* toggle?

[16:57:16.0000] <zewt>
Hixie: fyi, the spec is significantly slower to load for me in chrome now; don't know if it's something that changed in chrome or something in the spec

[16:57:50.0000] <zewt>
now after the loading spinner stops, the page scrolls around over a transparent-grid-looking region when I try to scroll, or the tab freezes hard for a while

[16:58:10.0000] <Hixie>
zewt: i need to work on perf of loading on that page, but generally speaking, file a bug on chrome

[16:59:25.0000] <zewt>
roc: looks like it just turns it into a badly-named set(value)

[16:59:30.0000] <zewt>
which is useful, just confusing with that name


2014-05-23
[17:00:28.0000] <gsnedders>
/me wonders how to start parsing the parser spec…

[17:04:44.0000] <othermaciej>
roc: that is really weird

[17:05:43.0000] <othermaciej>
roc: file a bug / report by email / whatever? it seems like a wonky API design and it seems unlikely it would be needed for compat

[17:08:08.0000] <zewt>
it's useful, so you can say foo.toggle("x", bool) instead of if(bool) foo.add("x"); else foo.remove("x");

[17:08:37.0000] <Hixie>
should have been foo.set(x, bool)

[17:08:40.0000] <zewt>
yep

[17:09:10.0000] <zewt>
iirc i've added DOMTokenList.prototype.set that does exactly that in the past

[17:11:57.0000] <zewt>
can we have a national death to yoda conditionals day or something

[17:12:21.0000] <othermaciej>
zewt: I can see how it’s useful, but yeah, it should be a separate function instead of overloading toggle()

[17:13:15.0000] <zewt>
othermaciej: if it's possible to change it then i'd say yeah, but it's already out there

[17:13:50.0000] <zewt>
though i'd probably be inclined to still say DOMElementList.prototype.set = DOMElementList.prototype.toggle in my code, to make it clearer

[17:17:44.0000] <othermaciej>
looks like we have had it a while

[17:17:58.0000] <othermaciej>
still very silly for toggle() to have a not-toggle mode

[17:18:06.0000] <zewt>
we all agree on that :)

[17:21:09.0000] <roc>
I just don't know where to file the bug

[17:22:18.0000] <zewt>
i assume dom

[17:22:23.0000] <zewt>
(anne's dom)

[17:22:46.0000] <zewt>
but is there really any chance of being able to change this? (and is it worth the effort it would take to find out, and change something that is probably implemented everywhere?)

[17:27:35.0000] <roc>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=25869

[18:24:55.0000] <gsnedders>
"The algorithm for the outline also associates each node in the DOM tree with a particular section and potentially a heading."

[18:24:58.0000] <gsnedders>
Liar!

[18:25:01.0000] <gsnedders>
It only associates element nodes!

[19:06:22.0000] <MikeSmith>
gsnedders: if you're reading the outline algorithm right now, I wonder if you might check and see what outline the following should produce:

[19:06:28.0000] <MikeSmith>
<!DOCTYPE html><section><h1>section</h1></section><h1>top-level</h1>

[19:07:14.0000] <MikeSmith>
gsnedders: because your outliner currently gives:

[19:07:25.0000] <MikeSmith>
1. top-level

[19:07:36.0000] <MikeSmith>
  1. section

[19:08:52.0000] <MikeSmith>
gsnedders: but the outliner in the validator gives:

[19:09:12.0000] <MikeSmith>
1. [implied heading]

[19:09:22.0000] <MikeSmith>
  1. section

[19:09:25.0000] <gsnedders>
My outliner is massively out of date wrt the spec

[19:09:29.0000] <MikeSmith>
1. top-level

[19:10:13.0000] <MikeSmith>
gsnedders: well on that one point I think the spec may have always had it that way and your outliner implemented it wrong

[19:10:28.0000] <MikeSmith>
but not sure because h5o has it wrong also I think

[19:10:35.0000] <gsnedders>
h5o?

[19:11:10.0000] <MikeSmith>
gsnedders: https://code.google.com/p/h5o/

[19:12:48.0000] <MikeSmith>
gsnedders: I'm not positive but I recall vaguely recall that when I checked the spec before, I found that my outliner code conforms to the spec, and also recal that when I asked Hixie he said yeah I had it right

[19:25:06.0000] <MikeSmith>
annevk: about html5-tracker, I wonder if you'd have less of a hard time if you hooked it into the git html-mirror repo that foolip set up, rather than having it keep using svn

[19:25:44.0000] <MikeSmith>
annevk: and no I'm not volunteering

[20:03:01.0000] <gsnedders>
Hixie: from the POV of generating code from spec text, it'd be easier if the bogus comment state and the CDATA section state followed the model of everything else instead of magically consuming large chunks…

[20:37:32.0000] <Hixie>
gsnedders: yeah, i noticed a few things like that myself

[20:37:59.0000] <Hixie>
gsnedders: my tokeniser outputs entirely different tokens when it comes to text nodes than the spec claims that it should, too

[21:09:49.0000] <MikeSmith>
gsnedders: btw about the thing outline-algorithm thing I mentioned earlier, https://www.w3.org/Bugs/Public/show_bug.cgi?id=20068 is where I discussed it with Hixie last year and I see from that I ended up changing my outliner code to conform to the spec

[23:29:46.0000] <annevk>
TabAtkins: oh, I thought you might have some input as to what the platform needs from ES

[23:35:40.0000] <TabAtkins>
annevk: Ah, Kk. Didn't recognize it as a request for feedback.

[23:38:02.0000] <annevk>
TabAtkins: I'm trying to capture some needs from platform and then I hope to find someone to present them to TC39

[23:45:08.0000] <TabAtkins>
Yeah, cool. Need to add "some way to legitimately subclass Maps and Sets".

[23:53:44.0000] <annevk>
TabAtkins: can you dig up a pointer for additional rationale on that? might not entirely be self-evident

[23:57:36.0000] <TabAtkins>
Yeah, can do.

[00:05:06.0000] <annevk>
MikeSmith: yeah, foolip suggested the same and is not volunteering either

[00:15:05.0000] <annevk>
jorendorff: I don't recall I was tasked with talking to Hixie, I'm not even sure I know enough about modules to do so :-)

[00:15:28.0000] <annevk>
jorendorff: I've been encouraging dherman to file a bug or write an email, not sure why he hasn't done it

[00:16:01.0000] <annevk>
jorendorff: seems a bit weird to talk about <module> at conferences without it having ever been given as feedback on the spec

[00:30:51.0000] <annevk>
foolip: https://bugzilla.mozilla.org/show_bug.cgi?id=664544

[00:35:44.0000] <foolip>
annevk: thanks

[00:36:05.0000] <foolip>
annevk: can you post that blink-dev if you think it'd help?

[00:36:18.0000] <annevk>
foolip: sure, pretty sure I pushed for removal at Opera around that time

[00:36:18.0000] <foolip>
annevk: btw, you reported the bug that got it removed in core :)

[00:36:23.0000] <annevk>
heh

[02:46:39.0000] <jgraham>
annevk: So are you going to review  https://critic.hoppipolla.co.uk/r/1619 ?

[02:50:21.0000] <annevk>
jgraham: looks good, do you want to reference http://url.spec.whatwg.org/#concept-url-parser and http://xhr.spec.whatwg.org/#the-open%28%29-method maybe?

[02:52:12.0000] <annevk>
jgraham: done

[02:52:41.0000] <jgraham>
annevk: Thanks!

[02:53:21.0000] <annevk>
jgraham: basically asking me on IRC is the best way to get me to do one of these (provided they're not too big)

[02:53:59.0000] <jgraham>
annevk: Understood

[02:58:23.0000] <Ms2ger>
Aha

[02:58:26.0000] <Ms2ger>
/me pulls up the list

[02:59:22.0000] <jgraham>
annevk: Also, schoolboy error saying that with Ms2ger in the channel ;)

[03:00:20.0000] <annevk>
MikeSmith: foolip: your "use git" idea is interesting, but how does that work with the existing SVN IDs that we use?

[03:00:44.0000] <annevk>
MikeSmith: foolip: they are in the commit messages, but I don't think there's a way I can invoke git diff and make that work, is there?

[03:01:17.0000] <jgraham>
annevk: Context?

[03:02:03.0000] <annevk>
jgraham: I'm trying to figure out if I create a git clone https://github.com/whatwg/html-mirror/ if I can build web-apps-tracker on top

[03:02:42.0000] <MikeSmith>
annevk: no way that I know of, but I'm not a git expert

[03:02:56.0000] <MikeSmith>
/me looks through git-svn docs

[03:04:47.0000] <jgraham>
I'm pretty sure git-svn must maintain a mapping, but if that's using the github stuff I don't know if it's exposed

[03:05:01.0000] <MikeSmith>
right yeah

[03:05:19.0000] <jgraham>
(that is, if that mirror is based on github running git-svn rather than you running it)

[03:05:59.0000] <annevk>
I don't have git-svn on DreamHost

[03:14:25.0000] <MikeSmith>
annevk: well if you did have git-svn apparently you could get the svn revision number by giving the git has to "git svn find-rev"

[03:14:53.0000] <annevk>
MikeSmith: how about the other way around?

[03:15:19.0000] <annevk>
MikeSmith: what I want is, given two svn revisions, get a diff

[03:15:24.0000] <MikeSmith>
same thing but preface the arg with "r" I think

[03:16:02.0000] <annevk>
that's hanging the server :-)

[03:16:09.0000] <annevk>
this does not seem like a cheap command

[03:16:19.0000] <MikeSmith>
:(

[03:16:34.0000] <annevk>
I could cache the return values I suppose, but r8000 is still running...

[03:16:48.0000] <annevk>
/me fetches more tea

[03:17:17.0000] <annevk>
"Unable to determine upstream SVN information from HEAD history"

[03:17:20.0000] <annevk>
well that's great

[03:19:16.0000] <jgraham>
Uh, this must be doing a linear search of the commits or something

[03:19:28.0000] <jgraham>
Yeah, I get the same result

[03:19:51.0000] <darobin>
it's possibly faster to get the information from searching the git log...

[03:19:55.0000] <annevk>
even for a fairly recent commit it fails hard

[03:20:45.0000] <jgraham>
git log --grep="git-svn-id: http://svn.whatwg.org/webapps@8000"

[03:20:54.0000] <darobin>
annevk: git log --grep='http://svn.whatwg.org/webapps@8000'

[03:20:56.0000] <darobin>
duh

[03:21:13.0000] <darobin>
it's pretty instant

[03:21:50.0000] <darobin>
except it'll fail for numbers < 1000

[03:21:58.0000] <jgraham>
Add --format=format:%H

[03:22:02.0000] <darobin>
you have to append a space

[03:22:14.0000] <annevk>
yes

[03:22:58.0000] <annevk>
then parse the return value

[03:24:33.0000] <jgraham>
No, just add the --format I suggested

[03:25:39.0000] <annevk>
sorry jgraham, missed your suggestion

[03:26:16.0000] <annevk>
git log --grep="git-svn-id: http://svn.whatwg.org/webapps@{X} " --format=format:%H

[03:29:00.0000] <jgraham>
Yes

[03:29:59.0000] <annevk>
Anyone know enough Bash so we can turn this into a gitsvndiff script?

[03:30:26.0000] <annevk>
And then I can invoke that from Python and woohoo, tower of hacks

[03:31:51.0000] <jgraham>
Why not just write it in python?

[03:33:55.0000] <annevk>
jgraham: then I'd have to install GitPython or some such; I rather just have something that works with the default DreamHost setup

[03:38:04.0000] <MikeSmith>
I'm sure there are people around here who are better at shell scripting than me

[03:38:13.0000] <MikeSmith>
hint hint

[03:38:50.0000] <jgraham>
annevk: git_sha1 = subprocess.check_call(["git", "log", "--grep='git-svn-id: http://svn.whatwg.org/webapps%d '" % (svn_id,), "--format=format:%H"])

[03:38:52.0000] <MikeSmith>
if not I can write a shell script for it

[03:40:10.0000] <jgraham>
s/check_call/check_output/

[03:40:42.0000] <annevk>
jgraham: is it better to do that than have all the subprocesses in a single script?

[03:41:40.0000] <jgraham>
Oh and I missed an @

[03:42:09.0000] <jgraham>
annevk: the overhead of starting a subprocess isn't going to kill you here

[03:42:36.0000] <jgraham>
I think doing the simplest thing is best, and I'm sure the simplest thing doesn't involve bash

[03:43:22.0000] <MikeSmith>
yeah I agree strongly

[03:44:05.0000] <jgraham>
(oh and no need for the quotes in the grep argument ofc)

[03:44:16.0000] <jgraham>
subprocess.check_output(["git", "log", "--grep=git-svn-id: http://svn.whatwg.org/webapps@%s " % (8000,), "--format=format:%H"])

[03:44:20.0000] <jgraham>
actually runs

[03:57:37.0000] <annevk>
jgraham: had to use os.popen() as that command wasn't supported

[03:58:36.0000] <jgraham>
annevk: What version of python

[03:58:37.0000] <jgraham>
?

[03:58:47.0000] <jgraham>
Also, I assume you imported subprocess?

[03:59:08.0000] <annevk>
2.6.6

[03:59:10.0000] <annevk>
did

[03:59:16.0000] <jgraham>
(popen is the wrong choice pretty much always; if you don't have check_process, you should probably use .call())

[03:59:49.0000] <annevk>
well I guess I'm first going to make this work and then accept pull requests

[04:01:26.0000] <annevk>
already 1PM :(

[04:01:47.0000] <jgraham>
Python 2.6 is about 4 years out of date and 2.6.6 appears to not even be the latest 2.6 release :(

[04:06:54.0000] <annevk>
It's clearly a sad day

[04:09:41.0000] <odinho>
omfg, python 2.6. blast from the past.

[04:11:28.0000] <jgraham>
yeah it's so old annevk is actually programming with a beard and flares

[04:12:20.0000] <odinho>
Sounds like the annevk I know.

[04:33:22.0000] <foolip>
annevk: the ids are in the commit message, but it could be worth creating tags to each commit (or something like that) to make it quicker to find a commit by SVN number

[04:33:45.0000] <foolip>
annevk: is the current web-apps-tracker experiencing problems, other than the ever-growing diff cache?

[04:33:56.0000] <annevk>
foolip: it's slow and it's a perf problem for Hixie

[04:34:08.0000] <annevk>
If my git repo is in ./X/

[04:34:23.0000] <annevk>
How do I run git commands in ./?

[04:34:31.0000] <annevk>
--exec-path and such don't seem to work as I expect

[04:34:39.0000] <foolip>
annevk: GIT_DIR probably?

[04:34:43.0000] <foolip>
/me experiments

[04:34:54.0000] <jgraham>
annevk: If you are running from a script, you can just set cwd

[04:35:26.0000] <jgraham>
.call(["git", "whatever"], cwd="./") or something

[04:35:33.0000] <jgraham>
Er

[04:35:37.0000] <jgraham>
.call(["git", "whatever"], cwd="./X") or something

[04:35:57.0000] <annevk>
jgraham: if I want to use .call(), how do I get the output?

[04:37:10.0000] <foolip>
annevk: git --git-dir=./opus/.git --work-tree=./opus log also worked for me (opus is your X)

[04:38:06.0000] <jgraham>
Hmm, so the documentation recommends stdout_data, stderr_data = subprocess.Popen(["git", "foo"], cwd="./X", stdout=subprocess.PIPE).communicate()

[04:40:43.0000] <annevk>
foolip: cool

[05:00:12.0000] <foolip>
annevk: if you intent do try this out and don't want to generate the refs for svn revision numbers on your end, I could put them in the html-mirror repo itself

[05:00:15.0000] <foolip>
just let me know

[05:00:59.0000] <annevk>
foolip: I'll let this channel know whenever I get stuck

[05:01:11.0000] <annevk>
mostly just trying to get the tool to do the same thing at the moment

[05:28:29.0000] <jorendorff>
annevk: oh, ok, sorry for the mistake (re modules)

[05:31:44.0000] <annevk>
jorendorff: no worries, happy to help out if that's needed

[06:15:46.0000] <annevk>
foolip: I think I got something working that can replace the current setup, the only thing that's needed is some kind of hook that updates all the git stuff once the spec is updated

[06:33:29.0000] <foolip>
annevk: I have a thing that updates the git mirror automatically (Hixie added a ping URL to his publish script), would it suffice to have a web hook on the GitHub html-mirror repo?

[06:34:05.0000] <foolip>
I'm guessing you already have a hook that Hixie pings, but which be racy with my update script

[06:34:25.0000] <annevk>
foolip: yeah that might work

[06:34:45.0000] <annevk>
foolip: need to sort a few things still

[06:42:01.0000] <foolip>
annevk: you probably have access to https://github.com/whatwg/html-mirror/settings/hooks/new when you need it

[06:42:11.0000] <annevk>
foolip: good point

[06:46:07.0000] <jgraham>
foolip: Ever tried to take all the commits touching a set of directories /A /B /C in one git repo and add them to a second repo at a different path like /prefix/A' /prefix/B' /prefix/C'? I sort of have the feeling it is possible, perhaps using filter-branch, but I haven't actually tried it

[06:46:32.0000] <foolip>
jgraham: yes, I've done that

[06:46:55.0000] <foolip>
step 1 is to use git filter-branch --subdirectory-filter A/

[06:48:03.0000] <annevk>
foolip: so basically all I need is a script that does git --git-dir=html-mirror/.git pull

[06:48:53.0000] <foolip>
jgraham: step 2 depends on what kind of history you want in the final repo, but just fetching the filtered branch from the target repo and merging it with subtree something something might work

[06:49:05.0000] <foolip>
with extra complexity if you need to keep it in sync and not just do it once

[06:49:53.0000] <foolip>
annevk: what language would the hook be implemented in?

[06:51:25.0000] <foolip>
in any event, what I've done is to have a script which creates a batch job to do the real work, as opposed to doing it in web-facing script directly

[06:51:41.0000] <jgraham>
foolip: Yeah, I think the problem is that I don't want to do it just once, so I have to be certain that the commit ids don't change

[06:52:02.0000] <jgraham>
and, preferably, avoid doing the work N times.

[06:52:21.0000] <jgraham>
Well N**2 times

[06:52:28.0000] <foolip>
jgraham: and it's important to remove everything except the filtered directory, to save space?

[06:52:48.0000] <foolip>
otherwise you could just merge the original repository and remove the bits you don't want to see

[06:52:56.0000] <annevk>
foolip: shell

[06:53:11.0000] <annevk>
foolip: I just want to sync

[06:53:15.0000] <jgraham>
foolip: Interesting idea

[06:53:37.0000] <jgraham>
pull in the whole other repo and then add a commit to delete the unwanted parts?

[06:54:34.0000] <foolip>
jgraham: yeah, or do the whole move+delete dance as part of the merge commit, whichever gives you the prettiest history in your mind

[06:55:06.0000] <foolip>
annevk: well, maybe try the simple thing first and improve if needed :)

[06:56:19.0000] <annevk>
Man, my beta version is already so much faster than the current web-apps-tracker setup

[06:56:46.0000] <foolip>
that's not surprising :)

[06:59:39.0000] <foolip>
annevk: if I get hit by a bus and html-mirror stops updating, https://github.com/foolip/html-webhook is the thing that keeps it in sync

[07:01:10.0000] <annevk>
http://html5.org/tools/web-apps-tracker now runs on the new script, no auto-update yet

[07:01:33.0000] <annevk>
if you view a diff you can use &context to get more context

[07:10:43.0000] <MikeSmith>
nice

[07:11:47.0000] <MikeSmith>
/me tries ?from=1&to=8648

[07:27:53.0000] <annevk>
MikeSmith: killed that

[07:28:08.0000] <darobin>
heh

[07:31:23.0000] <MikeSmith>
annevk: smart man

[07:40:33.0000] <jgraham>
Is that different to just git diff [first sha1].. ?

[07:59:53.0000] <annevk>
jgraham: ooh, can I kill the second lookup? I didn't even try!

[08:05:30.0000] <jgraham>
annevk: Well in the case it is HEAD, yes

[08:05:46.0000] <annevk>
jgraham: it almost never is

[08:06:14.0000] <jgraham>
So I don't understand what's slow with MikeSmith's query. Is it formatting the diff?

[08:06:28.0000] <jgraham>
Because getting the diff from git seems to be more or less instant

[08:08:57.0000] <annevk>
jgraham: oh I killed the feature

[08:09:03.0000] <annevk>
jgraham: because it was rarely used

[08:09:34.0000] <zewt>
man, the spec is sort of unusable for me right now, freezes in chrome constantly

[08:09:52.0000] <jgraham>
annevk: Oh. I guess if I used this at all I would use that

[08:12:07.0000] <annevk>
Oh.

[08:19:10.0000] <foolip>
annevk: cool, it feels pretty fast now

[08:19:21.0000] <foolip>
too bad I can no longer use it to check if html-mirror is in sync with svn :)

[08:19:28.0000] <foolip>
gotta go, have a nice weekend!

[08:21:19.0000] <dglazkov>
good morning, Whatwg!

[08:22:58.0000] <annevk>
Hixie: no longer hammering your SVN setup

[08:28:17.0000] <annevk>
If people want to change things around, now you can https://github.com/whatwg/web-apps-tracker

[09:11:21.0000] <annevk>
Hixie: as for talking about cleanup, prolly next week somewhere, your Wednesday morning is usually convenient

[09:36:04.0000] <Ms2ger>
wat: http://lists.w3.org/Archives/Public/www-style/2014May/0303.html

[10:47:19.0000] <Hixie>
i don't understand why chrome is taking so long to apply the :hover effects on the spec now

[10:47:22.0000] <Hixie>
it didn't used to

[10:47:24.0000] <Hixie>
there's no transitions

[10:48:04.0000] <Hixie>
i mean i'm talking like 4 seconds

[10:48:39.0000] <dglazkov>
esprehn: ^^^

[10:50:18.0000] <SamB>
Hixie: downgrade!

[10:50:34.0000] <dglazkov>
Hixie: can you file a bug?

[10:53:35.0000] <Hixie>
sure

[10:55:49.0000] <dglazkov>
yay

[10:55:49.0000] <Hixie>
https://code.google.com/p/chromium/issues/detail?id=376847

[10:56:22.0000] <Hixie>
man that's really annoying

[10:56:24.0000] <Hixie>
wtf

[10:58:09.0000] <TabAtkins>
Ms2ger: WAT

[11:38:39.0000] <mathiasbynens>
TypeError: 'null' is not an object (evaluating 'configUI.appendChild')

[11:38:40.0000] <mathiasbynens>
  http://www.whatwg.org/specs/web-apps/current-work/updater.js:71 in initUpdater

[11:38:40.0000] <mathiasbynens>
  http://www.whatwg.org/specs/web-apps/current-work/updater.js:84

[11:38:45.0000] <mathiasbynens>
heads up Hixie ^

[11:53:49.0000] <mathiasbynens>
Hixie: http://whatwg.org/html/tokenization.html#table-charref-overrides includes “0x000D to 0x001F” but http://whatwg.org/html/parsing.html#preprocessing-the-input-stream only has “U+000E to U+001F”. Is U+000D missing from the latter by accident, or is this intentional?

[11:54:24.0000] <mathiasbynens>
this is the only difference between those two lists of invalid code points

[12:07:10.0000] <jsbell>
mathiasbynens: There's a whole paragraph on U+000D in parsing - that appears to answer the question ("there are never any CR characters in the input to the tokenization stage")

[12:07:38.0000] <mathiasbynens>
jsbell: ah, gotcha. thanks!

[12:30:20.0000] <Hixie>
mathiasbynens: yeah, known issue (the updater.js thing)

[12:30:50.0000] <Hixie>
mathiasbynens: it's intentional, you shouldn't ever got to an U+000D at that point in the second list

[12:45:23.0000] <IZh>
Hi. If you play several tracks with different length simultaneously, will it lasts until the end of longest track?

[12:45:48.0000] <SamB>
IZh: what do you mean?

[12:46:11.0000] <IZh>
I mean long video and short audio.

[12:46:22.0000] <SamB>
are they being played in a coordinated fashion, or independantly?

[12:46:41.0000] <IZh>
On the same media controller.

[12:47:38.0000] <SamB>
okay, so you've reason to expect there to be interaction ;-)

[12:49:16.0000] <IZh>
SamB: You are right. This will be better than playing silent video by default. :-)

[12:52:18.0000] <SamB>
IZh: http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#media-controller-duration would seem to indicate that it takes the union of the timelines of the individual resources

[12:53:50.0000] <SamB>
Hixie: hmm, I kind of miss the glow effect on the target element

[12:53:53.0000] <IZh>
SamB: The union? Not the maximum? Hmm... Is it possible to make a playlist with sequential playing?

[12:54:17.0000] <Hixie>
SamB: people wanted no yellow, so...

[12:54:23.0000] <SamB>
aww

[12:55:53.0000] <TabAtkins>
I found the yellow glow pretty ugly.  The arrow in the margin is much better. ^_^

[12:56:19.0000] <SamB>
I don't really care about the color, I guess I just liked the part where it highlighted the phrase in question

[12:57:54.0000] <SamB>
also the arrow doesn't look too accurate?

[12:57:56.0000] <Ms2ger>
Make it papayawhip

[12:58:31.0000] <SamB>
http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#media-controller-duration has the arrow pointing a line below where I'd expect

[12:58:54.0000] <SamB>
at least, that's how it looks to me

[12:59:20.0000] <Hixie>
i can move the arrow up a bit, hold on

[12:59:25.0000] <SamB>
(firefox 24 ESR, looks like no blocked script)

[13:00:22.0000] <TabAtkins>
SamB: It's just a bit of CSS, nothing to do with script.

[13:00:39.0000] <SamB>
ah, that's more like I'd expect

[13:00:47.0000] <Hixie>
fixed

[13:01:03.0000] <SamB>
of course it looks a bit clipped now since you can't tell the browser "only please scroll up to avoid clipping the arrow"

[13:01:14.0000] <SamB>
but that's life for you

[13:03:25.0000] <Hixie>
yeah not much i can do about that

[13:12:10.0000] <Hixie>
Domenic: (just reading some of the bugs liek https://www.w3.org/Bugs/Public/show_bug.cgi?id=20925 ...) oh man, please don't change webidl again

[13:12:43.0000] <Hixie>
Domenic: every time webidl changes (as opposed to fixing bugs or adding features) i end up with massive amounts of make-work that do nothing to improve the platform

[13:12:47.0000] <SamB>
Hixie: you could *make* a way ;-P

[13:13:05.0000] <Hixie>
SamB: that's more a CSS thing, bug zcorpan or TabAtkins :-P

[13:14:18.0000] <SamB>
hmm, isn't there a nasty thing that happens with pseudo-framed pages and anchors, too?

[13:14:26.0000] <TabAtkins>
What do you mean?

[13:14:46.0000] <SamB>
where there's a fixed box that covers the link target?

[13:18:03.0000] <TabAtkins>
SamB: Still not understanding.

[13:18:14.0000] <SamB>
hmm

[13:21:52.0000] <SamB>
TabAtkins: say http://web.archive.org/web/20140506093351/http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#user-interface

[13:24:00.0000] <TabAtkins>
SamB: So what's the problem?

[13:24:21.0000] <SamB>
TabAtkins: the target is under the thing at the top there

[13:24:28.0000] <TabAtkins>
Oh, yes, indeed.

[13:25:23.0000] <SamB>
I think I've seen such on sites that actually have such headers of their own, but couldn't remember any off the top of my head

[13:30:22.0000] <TabAtkins>
Yeah, I've seen that before.  It's often due to people wanting to do a variable-height header with scrollable thing underneath, which wasn't really possible before flexbox.

[13:38:27.0000] <Hixie>
is es-discuss⊙mo the way to contact the people behind the js module stuff?

[13:39:33.0000] <Ms2ger>
I believe so

[13:40:13.0000] <TabAtkins>
Yup.

[13:56:51.0000] <Ms2ger>
"If a browsing context P has a Document D with an element E that nests another browsing context C inside it, then C is said to be nested through D, and E is said to be the browsing context container of C."

[14:36:06.0000] <smaug____>
why it is so difficult to understand that sync XHR sucks really really badly

[14:39:27.0000] <TabAtkins>
smaug____: Because it's easier to use if you don't care about responsiveness at all.

[14:43:26.0000] <gsnedders>
/me wonders if we can use some NLP toolkit to find sentences in the spec with ambiguous parse-trees.

[14:46:14.0000] <SamB>
gsnedders: how would you know which ones were ambiguous in a problematic fashion?

[14:46:56.0000] <gsnedders>
SamB: Many NLP toolkits give you all possible parse-trees, so if a sentence permits > 1 parse-tree, it's ambiguous

[14:49:41.0000] <gsnedders>
But ambiguity isn't per-se a problem, because often the grammatically ambiguous cases are semantic nonsense.

[14:51:14.0000] <gsnedders>
like the typical example of "I shot an elephant wearing my pyjamas", which can be parsed such that the subject is wearing their pyjamas, or the elephant is wearing their pyjamas. Obviously the second is nonsense.

[14:54:26.0000] <Hixie>
the _second_ is the nonsense one?!

[14:54:56.0000] <gsnedders>
Hixie: when did you last see an elephant wearing pyjamas?

[14:55:08.0000] <Hixie>
i think it's a hell of a lot more likely that someone would shoot an elephant that was wearing their pyjamas, than it is that an elephant would surprise someone in pyjamas and that that person would just shoot them

[14:55:30.0000] <Hixie>
when did you last see someone in pyjamas and an elephant at the same time?

[14:55:48.0000] <gsnedders>
In the film that that quote comes from?

[14:56:37.0000] <Hixie>
oh well if we're including fiction, then i've almost certainly seen elephants wearing pyjamas

[14:56:42.0000] <TabAtkins>
How would the elephant even get my pajamas on?

[14:56:44.0000] <Hixie>
kid's books, cartoons...

[14:56:50.0000] <Hixie>
kids' books, even

[14:57:02.0000] <gsnedders>
TabAtkins: I think that's rather the point :P

[14:57:21.0000] <TabAtkins>
I know, I was directing the question at Hixie.

[14:58:14.0000] <gsnedders>
I need to be trying to do fewer things at once. This is impractical.

[14:58:28.0000] <gsnedders>
I should just leave my spec -> code converter till later.

[15:13:21.0000] <zewt>
a spec -> code converter is more commonly referred to as "a programmer"

[15:19:44.0000] <SamB>
zewt: he wants the spec to BE a program, clearly

[15:20:04.0000] <jgraham>
gsnedders is tyring to replace himself with a short shell script

[15:21:33.0000] <zewt>
surely perl

[15:37:23.0000] <jgraham>
zewt: He's just a masochist, he's not mad


2014-05-24
[17:12:25.0000] <gsnedders>
jgraham: Saying that, did I not have the Perl Bible on my desk in Lkpg for months? Though I blame Hixie for that.

[17:13:31.0000] <zewt>
i assume it was just hard to get access to a fork lift to get rid of it

[17:18:47.0000] <gsnedders>
Trying to understand old code to replace it, which I guess is probably the best way to be dealing with Perl.

[02:32:15.0000] <MikeSmith>
/me wonders what Monohm Inc. is

[11:31:20.0000] <zewt>
interesting case of using the fragment for both script data and anchors (it's actually all script, but they make it look like a familiar fragment anchor) http://referencesource.microsoft.com/#PresentationFramework/src/Framework/System/Windows/Controls/Panel.cs#171


2014-05-25
[20:58:24.0000] <MikeSmith>
zewt: wonder why they bother to use # for the PresentationFramework/src/Framework.. part

[20:58:46.0000] <MikeSmith>
zewt: that part doesn't look like a familiar fragment anchor at least

[20:59:42.0000] <MikeSmith>
zewt: and the second # has that problem of causing the URL to be invalid per the URL spec

[21:01:48.0000] <MikeSmith>
(also nice nostalgic use of frames there)

[21:20:00.0000] <zewt>
MikeSmith: they do it because that's client-side, not server-side

[21:20:09.0000] <zewt>
and the url spec is wrong, I think

[21:20:20.0000] <SamB>
bother that

[21:21:12.0000] <zewt>
(i don't even know what that means)

[21:23:10.0000] <SamB>
/me is just hopeful about higher-anchors happening at some point ...

[21:59:40.0000] <zewt>
hotmail represent

[16:41:21.0000] <zewt>
things that need to die: uuids as random tokens (just use a 128-bit random hex string, avoid a whole silly mess of formatting and bit twiddling)

[16:43:43.0000] <SamB>
(... won't that make our COM code slower to match those IDs? ;-P)

[16:45:41.0000] <zewt>
qq

[16:46:05.0000] <zewt>
just seeing them in URLs (stereotypically, microsoft URLs) and cringing

[16:46:44.0000] <zewt>
(they're also completely pointless to use as blob URLs and are just extra stuff to bloat specs, but since everyone's already using them for some reason... oh well)

[16:46:56.0000] <SamB>
/me is not sure if he's joking or not, but he's heard of optimizations related to consecutive GUIDs ...)

[16:47:08.0000] <zewt>
consecutive IDs aren't random tokens

[16:47:13.0000] <SamB>
I know

[16:47:36.0000] <SamB>
at least, clearly not 100% random

[16:48:18.0000] <zewt>
(though if you use a, say, 116-bit random token and use the rest as a counter, you probably still get enough randomness)

[16:48:55.0000] <zewt>
(v4 uuids are only 112 bits random to begin with)


2014-05-26
[17:10:36.0000] <zewt>
gah, and this same page is navigating on middle click, so when I try to open new tabs from search results it eats the search result window

[17:14:45.0000] <SamB>
EVILLL!

[17:15:07.0000] <zewt>
"sloppy"

[19:47:35.0000] <MikeSmith>
Hixie: fyi the w3c bugzilla now supports private tags. Which apparently are just like keyboards except that they're private, so nobody else can see them and no bugmail notification gets sent went you add them

[19:47:47.0000] <MikeSmith>
*keywords

[19:48:17.0000] <MikeSmith>
Hixie: however I can't find anything in the UI that exposes them

[19:48:49.0000] <MikeSmith>
Hixie: but doing ?quicksearch=tag:TAGNAME will show them

[19:55:02.0000] <karlcow>
yup, MikeSmith I use that on mozilla bugzilla to cater for some of my bugs list with categories

[19:55:30.0000] <karlcow>
the search can't be shared. as the tag is private it will have no effect for someone else

[19:56:43.0000] <MikeSmith>
karlcow: yeah that much I gleaned from the docs, but nowhere in the UI can a find a link to my tags

[19:57:32.0000] <MikeSmith>
karlcow: docs seem to indicate that the tags you create should show up in every page footer, where the saved searches show up

[19:57:38.0000] <MikeSmith>
karlcow: but I see nothing there

[19:58:08.0000] <karlcow>
the tags are not visible for me too on Mozilla, just the feature for adding the tag.

[19:58:29.0000] <MikeSmith>
karlcow: ah OK, that's good  :(

[19:58:57.0000] <MikeSmith>
karlcow: good that it's not just me but sad for you

[19:59:34.0000] <karlcow>
:)

[19:59:34.0000] <MikeSmith>
karlcow: I was worried that it might be a results of w3c bugzilla using custom page templates or something

[20:00:01.0000] <karlcow>
another thing which is practical in the mozilla bugzilla is the tag on specific comments

[20:00:09.0000] <karlcow>
which in this case is public and shared

[20:00:12.0000] <karlcow>
and visible

[20:03:50.0000] <karlcow>
we used it for making a wrapper selecting some specific comments

[20:03:56.0000] <karlcow>
The wrapper: http://webcompat.com/simplebug/index.html#mozilla/843126

[20:04:11.0000] <karlcow>
the bug https://bugzilla.mozilla.org/show_bug.cgi?id=843126

[20:04:32.0000] <karlcow>
the comment with the tag

[20:04:32.0000] <karlcow>
https://bugzilla.mozilla.org/show_bug.cgi?id=843126#c7

[20:05:29.0000] <karlcow>
ah interesting the tags are visible only if logged in :)

[20:07:02.0000] <karlcow>
http://www.la-grange.net/2014/05/26/tagged-bug

[20:08:57.0000] <MikeSmith>
karlcow: http://www.bugzilla.org/releases/4.4.4/release-notes.html#v44_feat_bug_tags ーNote that when you add a new tag, no saved search based on this tag is created anymore, as you can easily create it yourself if you really need it.

[20:09:30.0000] <MikeSmith>
karlcow: tag on specific comments?

[20:09:38.0000] <karlcow>
yup

[20:09:45.0000] <MikeSmith>
/me checks karlcow URLs

[20:10:03.0000] <MikeSmith>
oh wow

[20:10:39.0000] <MikeSmith>
dunno if we have that comment-tagging thing yet in our 4.4.2 instance at w3c, do we?

[20:11:22.0000] <MikeSmith>
that would be great for tagging all the noise comments in bugs so that they don't show up

[20:11:44.0000] <MikeSmith>
or conversely for tagging just all the useful comments

[20:12:29.0000] <MikeSmith>
hmm but only if it actually shows/hides

[20:13:27.0000] <MikeSmith>
karlcow: I don't see what actually happens when I click any of the "Comment Tags:" links at https://bugzilla.mozilla.org/show_bug.cgi?id=843126

[20:13:41.0000] <karlcow>
it seems not in W3C bugzilla. In Mozilla bugzilla, I have in the prefs a "Enable tags for bugs "

[20:14:39.0000] <MikeSmith>
ok

[20:14:39.0000] <karlcow>
nothing happens it just tag the comments. The way we used is to cherry-pick some comments for using in another apps.

[20:15:05.0000] <MikeSmith>
ah OK

[20:15:43.0000] <karlcow>
You could imagine for example, a spec with links to the issues and the described resolution of an issue is in a specific comment which is automatically extracted because it carries a specific tag.

[20:18:40.0000] <MikeSmith>
yeah

[20:19:04.0000] <MikeSmith>
there are many cases already where I could have used this

[20:19:50.0000] <MikeSmith>
karlcow: but the biggest case I can think of is for auto-generating a Disposition of Comments report for last call

[20:20:15.0000] <karlcow>
indeed

[20:21:08.0000] <MikeSmith>
karlcow: so I can tag a particular comment as the resolution for the bug, and maybe also some other comment as a statement from the bug report that they're satisfied with the resolution

[00:53:10.0000] <mathiasbynens>
annevk: reminder http://krijnhoetmer.nl/irc-logs/whatwg/20140505#l-608

[01:27:24.0000] <annevk>
MikeSmith: so if Glenn Adams keeps doing that, I think we should just have a WHATWG XMLHttpRequest component

[01:28:10.0000] <annevk>
mathiasbynens: the second link now works

[01:28:23.0000] <annevk>
mathiasbynens: again, note that these tests are not necessarily up to date

[01:35:43.0000] <mathiasbynens>
annevk: i know, i ended up writing my own scripts that generated e.g. https://github.com/mathiasbynens/windows-1252/blob/c234dee4d60da023542cad4d8684428e47692ae3/tests/tests.js#L47-L48

[01:36:00.0000] <mathiasbynens>
but still, nice – thanks!

[01:36:33.0000] <annevk>
mathiasbynens: that looks good, I guess you also want to have random order and such of the bytes

[01:37:05.0000] <annevk>
mathiasbynens: and boundary checks where it switches from outputting bytes / code points to reading from a table first

[01:37:36.0000] <annevk>
mathiasbynens: and then ideally submit them to the platform-tests initiative

[01:40:30.0000] <annevk>
http://tech.oimou.com/post/86713933184/xmlhttprequest-responseurl seems like there's a lot of people wanting to detect redirects in XMLHttpRequest

[01:40:54.0000] <annevk>
I guess I could try pointing them to http://fetch.spec.whatwg.org/#atomic-http-redirect-handling

[01:41:08.0000] <MikeSmith>
annevk: remind me what Glenn did?

[01:41:12.0000] <MikeSmith>
annevk: ... this time

[01:41:32.0000] <MikeSmith>
mathiasbynens link?

[01:41:33.0000] <Ms2ger>
MikeSmith, reopen bugs because they were only fixed in the whatwg spec

[01:41:38.0000] <annevk>
MikeSmith: https://www.w3.org/Bugs/Public/show_bug.cgi?id=25540#c3

[01:41:39.0000] <MikeSmith>
ah

[01:41:56.0000] <MikeSmith>
well that's just obnoxious

[01:42:13.0000] <Ms2ger>
You remember who you're talking about, right?

[01:43:08.0000] <MikeSmith>
wait.. the normal answer would be "me"

[01:43:32.0000] <MikeSmith>
anyway yeah I'm happy to create an XHR component if needed

[01:44:14.0000] <MikeSmith>
I'm also happy to remind Glenn that the W3C XHR editors are on record as claiming that they are just publishing a "snapshot" of the upstream XHR spec

[01:44:30.0000] <MikeSmith>
unless the tune has changed since the last time I was paying attention

[01:45:07.0000] <Ms2ger>
I suspect a new component would waste minimal time

[01:45:41.0000] <MikeSmith>
ok

[01:46:49.0000] <MikeSmith>
well if/when annevk wants it actually created, I'll make it. I seem to remember that last time somebody suggested we create one, annevk said he didn't want it created (yet)

[01:47:29.0000] <annevk>
MikeSmith: lets see how it plays out I guess

[01:47:39.0000] <MikeSmith>
k

[01:49:31.0000] <annevk>
Somewhat surprising that the only noise online about the addition of XMLHttpRequest.prototype.responseURL is coming from Japan

[01:49:38.0000] <mathiasbynens>
MikeSmith: you mean a link to the script that generated that test data? it’s not public (but i can make it public if you’d like)

[01:49:47.0000] <MikeSmith>
foolip: thanks for the webvtt idl review & merge. that'ill make plh happy

[01:50:03.0000] <mathiasbynens>
basically parses annevk’s index.txt files in the Encoding Standard, and then goes from there

[01:50:27.0000] <annevk>
mathiasbynens: why don't you use the JSON file?

[01:51:05.0000] <mathiasbynens>
annevk: the index files are normative, but the JSON file isn’t

[01:51:28.0000] <annevk>
darobin: you keep breaking threading

[01:51:32.0000] <MikeSmith>
mathiasbynens: nah it's OK. I was just a bit confused. Trying to read several things at the same time..

[01:51:55.0000] <annevk>
mathiasbynens: except you probably know I generate the index files from the JSON :-)

[01:52:13.0000] <annevk>
Maybe I should say the JSON file is normative? Hmm

[01:52:39.0000] <annevk>
http://utf-8.jp/ :-)

[01:52:44.0000] <foolip>
MikeSmith: np

[01:53:35.0000] <mathiasbynens>
annevk: well, it would’ve helped me a tiny bit :)

[01:56:19.0000] <zcorpan_>
mathiasbynens: you should have just trusted the json file despite not being normative :-P

[01:58:28.0000] <mathiasbynens>
zcorpan_: NEVER!

[01:58:33.0000] <darobin>
annevk: huh?

[01:59:04.0000] <annevk>
darobin: your replies in the "Re: Should minimal contentEditable default text input" thread keep creating a new thread in Gmail

[01:59:28.0000] <darobin>
annevk: well, I'm reyplying normally and I see them threaded here — Gmail bug?

[01:59:36.0000] <darobin>
(barring that, Thunderbird bug)

[02:00:26.0000] <zcorpan_>
mathiasbynens: :-)

[02:01:26.0000] <annevk>
darobin: one or the other I guess

[02:01:50.0000] <annevk>
mathiasbynens: not sure how to resolve that, I'm taught not to have multiple normative formats

[02:02:15.0000] <darobin>
annevk: just checked, the In-Reply-To header on my reply to you is correct, so GMail threading is trying to be overly smart

[02:02:17.0000] <annevk>
mathiasbynens: aah, I know, I'll say that the JSON one is non-normative but is also the source of the data, so if you can reverse engineer it, it's normative

[02:02:24.0000] <darobin>
Email sucks. Film at 11.

[02:02:37.0000] <annevk>
mathiasbynens: as in, I'll explain more clearly that the reason it's non-normative is because I don't want to define two formats

[02:02:48.0000] <annevk>
mathiasbynens: and the other format one due to historical precedence

[02:02:57.0000] <mathiasbynens>
Almost Normative™

[02:03:21.0000] <annevk>
Normative Enough For mathiasbynens

[02:03:32.0000] <mathiasbynens>
it’s fine really, both formats are easy to consume anyway

[02:03:57.0000] <zcorpan_>
rfc6919 might be relevant here

[02:04:17.0000] <mathiasbynens>
if this were TC39 we’d just call it Annex B

[02:32:04.0000] <foolip>
annevk: why did you keep the from parameter in http://html5.org/tools/web-apps-tracker?from=8647 instead of to?

[02:32:20.0000] <foolip>
seems like an odd choice if it's only possible to show a single revision diff anyway

[02:33:22.0000] <annevk>
foolip: hadn't really thought about it much

[02:33:39.0000] <annevk>
foolip: I think ideally I just make the short URLs work

[02:33:46.0000] <annevk>
foolip: and no longer redirect to the longer form

[02:56:30.0000] <foolip>
annevk: yeah, that would work too

[03:20:44.0000] <annevk>
foolip: done

[03:55:27.0000] <foolip>
annevk: the short URL link is a bit useless now :)

[03:55:44.0000] <foolip>
oh, and yay \o/

[03:58:01.0000] <annevk>
foolip: good point

[04:00:58.0000] <annevk>
I like how much this thing is simplified now

[04:10:50.0000] <foolip>
annevk: http://html5.org/r/8640 is a bit useless because it didn't touch source, did the old script show only revisions that did?

[04:13:17.0000] <annevk>
foolip: I made a change to at least output the change message there

[04:14:04.0000] <annevk>
foolip: however, for the main page it would probably be good to filter them somehow

[04:14:56.0000] <foolip>
annevk: git log -- source would be the command

[04:15:14.0000] <foolip>
maybe the "--" isn't necessary when you're doing it from a script

[04:15:30.0000] <annevk>
foolip: was just adding that

[04:15:44.0000] <annevk>
foolip: well the way I invoke git is kind of hacky

[04:15:49.0000] <annevk>
foolip: due to an old Python version

[04:15:52.0000] <foolip>
'Paths may need to be prefixed with "-- " to separate them from options or the revision range, when confusion arises.' is what the manpage says

[04:17:09.0000] <annevk>
foolip: https://github.com/whatwg/web-apps-tracker/commit/08e8fa780846f38cd29858e551ca0b7b8fb5b8dd

[04:29:27.0000] <annevk>
Oh, the person contributing patches for responseURL seems to be Japanese

[04:41:23.0000] <foolip>
annevk: cool, everything works now AFAICT. do you have the autoupdate set up?

[04:45:08.0000] <annevk>
foolip: yeah, via a push hook

[04:45:44.0000] <annevk>
I guess at some point I could look into having the splitter using the same source for the spec so I don't have two copies

[04:46:05.0000] <annevk>
Although Hixie seems to be building his own toolchain so maybe that'll just obsolete it

[04:48:40.0000] <annevk>
mathiasbynens: jtcranmer: maybe instead of domainToASCII and such we should have new Domain() or some such

[04:49:37.0000] <foolip>
annevk: to replace anolis, or just for splitting?

[04:50:05.0000] <annevk>
foolip: I think both

[04:50:29.0000] <annevk>
foolip: I want to switch to Bikeshed personally at some point (Tab's tool)

[04:50:29.0000] <foolip>
is that why recently when the spec loads it takes a second before the style is applied?

[04:50:51.0000] <foolip>
doing more with scripts?

[04:51:00.0000] <annevk>
foolip: I think that's Hixie experimenting with the style sheet, as far as I know the toolchain has not been changed

[04:51:06.0000] <foolip>
ok

[04:51:26.0000] <annevk>
foolip: no, I think the main idea was to have a faster version of what Anolis and the splitter are doing now

[04:52:37.0000] <annevk>
mathiasbynens: jtcranmer: it depends a bit as to what kind of things we're interested in exposing, TLDs, labels, effectiveTLDs, DNS queries?

[04:53:10.0000] <annevk>
I guess DNS might be bad for privacy, although maybe that's exposed through timing already

[04:56:23.0000] <mathiasbynens>
what do you mean by effective TLDs? would it just return the TLD for a given domain, or do something more clever based on https://www.publicsuffix.org/?

[04:57:50.0000] <mathiasbynens>
having those methods on URL (as it is now) seems more convenient in most cases i imagine

[04:58:42.0000] <annevk>
mathiasbynens: see https://www.w3.org/Bugs/Public/show_bug.cgi?id=25865 for effective TLD

[04:59:17.0000] <annevk>
mathiasbynens: yeah I guess I should try to avoid churn as well; we can always layer these statics on a lower-level primitive later

[05:54:11.0000] <annevk>
It'd be kinda cool if IDL had knowledge of window / document objects / script setting objects

[05:55:00.0000] <annevk>
Instead of something accepting a DOMString, you could have "ToURL" that'd do the ScalarValueString dance, but also parsing relative to the script settings object and just hand you the URL where you write the rest of the algorithm

[05:55:17.0000] <annevk>
And throw a TypeError if the URL parser returns failure

[06:09:52.0000] <annevk>
Domenic: ^^

[06:10:06.0000] <annevk>
Taking decisions away from specification authors seems like a good thing

[07:14:03.0000] <annevk>
Hixie: maybe give a different box than "Note" for domintro?

[07:31:19.0000] <annevk>
JakeA: why does https://slightlyoff.github.io/ServiceWorker/spec/service_worker/ now render without style sheet?

[07:44:59.0000] <annevk>
JakeA: progress events seems like another case that'd be different between default() and fetch()

[07:47:21.0000] <SamB>
annevk: don't you have devtools you could use to find out what's preventing the stylesheet from loading ;-P

[08:05:21.0000] <JakeA>
annevk: how so?

[08:05:48.0000] <annevk>
JakeA: no idea how XHR upload progress events should work otherwise

[08:06:36.0000] <JakeA>
Both fetch & default resolve after headers

[08:07:34.0000] <annevk>
JakeA: *upload*

[08:07:57.0000] <annevk>
JakeA: is the idea respondWith(event.default()) or just event.default() is the whole deal

[08:08:09.0000] <annevk>
JakeA: in the latter case, should it return anything?

[08:09:38.0000] <JakeA>
annevk: it's still passed to respondWith, so it can be used as a fallback to another thing

[08:10:03.0000] <annevk>
JakeA: so it's different from the default (not handling the event)

[08:10:08.0000] <annevk>
JakeA: bit confusing but okay

[08:10:31.0000] <JakeA>
annevk: see http://jakearchibald.com/2014/service-worker-first-draft/#recovering-from-failure

[08:10:58.0000] <JakeA>
annevk: I think event.default is a terrible API, that's why I keep trying to find ways not to have it :D

[08:11:45.0000] <annevk>
JakeA: https://github.com/slightlyoff/ServiceWorker/issues/242#issuecomment-44197133

[08:12:02.0000] <annevk>
JakeA: anyway, upload progress events would get lost without it

[08:12:35.0000] <JakeA>
annevk: if request.body is a stream, wouldn't upload progress be based on the reading of that stream?

[08:13:15.0000] <JakeA>
annevk: but yeah, if you consumed all of that stream in the SW, you'd get to 100% quickly

[08:13:23.0000] <annevk>
JakeA: no, upload progress events are about transmitted bytes

[08:13:26.0000] <JakeA>
But it would work fine with fetch()

[08:13:36.0000] <annevk>
JakeA: so e.g. if you have compression or some such that would matter

[08:14:03.0000] <annevk>
JakeA: so it's up to the network layer and not up to request.body

[08:14:14.0000] <JakeA>
annevk: hmm, need to look at the XHR spec more closely for that

[08:14:19.0000] <annevk>
JakeA: and it wouldn't work fine with fetch(), since you've lost context at that point

[08:15:13.0000] <annevk>
(well, I guess you haven't since you're reading that stream... however, we don't have streams, let alone streams that span realms)

[08:15:59.0000] <JakeA>
annevk: can you add a ticket for that? (Sorry, bank holiday here so I'm not at laptop)

[08:16:18.0000] <annevk>
JakeA: for which bit?

[08:16:42.0000] <JakeA>
annevk: handling progress events

[08:19:11.0000] <annevk>
JakeA: we could not have default() btw and just use a flag on the request object and keep track of magic request objects that way, but using a different method seems clearer

[08:19:16.0000] <annevk>
JakeA: https://github.com/slightlyoff/ServiceWorker/issues/289

[08:24:44.0000] <annevk>
How does one get notified on gist.github.com activity?

[08:25:10.0000] <JakeA>
annevk: there's a watch button on repos

[08:25:58.0000] <annevk>
JakeA: not on GitHubGist?

[08:36:12.0000] <JakeA>
annevk: ah sorry, not reading properly

[08:48:29.0000] <annevk>
SamB: any updates on https://github.com/whatwg/resources.whatwg.org/pull/1 ?

[09:11:04.0000] <SamB>
annevk: hmm, perhaps I should look at fixing the bugs in rsvg/inkscape ...

[09:11:55.0000] <SamB>
or at least forwarding them to the respective upstreams

[09:14:46.0000] <SamB>
<SamB> annevk: hmm, perhaps I should look at fixing the bugs in rsvg/inkscape ...

[09:14:47.0000] <SamB>
<SamB> or at least forwarding them to the respective upstreams

[09:14:56.0000] <annevk>
SamB: yeah saw that

[09:14:59.0000] <SamB>
wasn't sure

[09:48:20.0000] <annevk>
cool, logo licensing sorted

[10:43:04.0000] <Krinkle>
 #omgomg Did we just land a specification for Element#closest in DOM? Like jQuery#closest a bit

[15:53:04.0000] <Domenic>
Gist notifications were removed about 1.5 years ago and still haven't returned. Much rage.

[15:53:19.0000] <Domenic>
(Also, yay, I have internet again!)


2014-05-27
[17:16:01.0000] <TabAtkins>
+1 on the addition of .closest too, annevk.  Very, very useful for DOM traversal, if my authoring experience with jQuery is any indication.

[21:39:23.0000] <JonathanNeal>
TabAtkins: yea! closest!

[21:39:59.0000] <JonathanNeal>
annevk: dunno what you said to bring it up, but +1

[21:41:31.0000] <JonathanNeal>
TabAtkins, annevk, “do it for the delegates”

[22:10:11.0000] <JonathanNeal>
my oh my it looks like it’s gonna be a thing! https://github.com/whatwg/dom/commit/fd69cc7ed9251d12b1185b24e6f89d3f0481f39d wooohoo!!

[22:27:28.0000] <caitp>
maybe dave methvin and john resig should be writing these things

[23:28:23.0000] <annevk>
JonathanNeal: I added it

[00:21:51.0000] <zcorpan>
annevk: SamB: so should we do something about the xhr logo? ask ajax for permission?

[00:25:06.0000] <annevk>
zcorpan: I don't see why it's not fair use

[00:25:44.0000] <zcorpan>
annevk: it is, but that's a US thing i think

[00:40:14.0000] <annevk>
zcorpan: not sure then

[00:42:48.0000] <annevk>
zcorpan: kinda planning on merging XHR into Fetch at some point so it might become moot

[00:43:58.0000] <zcorpan>
ok

[00:54:52.0000] <annevk>
darobin: tobie: you guys were involved with Ringmark right? Care to comment on https://bugzilla.mozilla.org/show_bug.cgi?id=1016053 ?

[00:55:19.0000] <darobin>
I wasn't, it was a Facebook internal project

[00:55:38.0000] <darobin>
I wasn't even aware it was still alive

[00:56:10.0000] <tobie>
Arg.

[00:56:32.0000] <darobin>
Ringmark has some... issues

[00:57:46.0000] <tobie>
Lots of reasons why I don't want to comment on this.

[00:59:50.0000] <Ms2ger>
/me wonders if he cares enough to look up who claimed they fixed all their issues, promise

[01:01:01.0000] <darobin>
annevk: if there are no other known instances of this being used, I would recommend closing the bug

[01:01:34.0000] <darobin>
also, Kyle seems to indicate that there's some XPConnect magic going on — why that would happen on the Web I don't even

[01:09:15.0000] <tobie>
annevk: commented. imho test needs to be fixed to generate the storageevent properly.

[01:13:16.0000] <Ms2ger>
tobie, want to poke the right people? :)

[01:13:30.0000] <tobie>
Ms2ger: Rick is.

[01:13:45.0000] <tobie>
Ms2ger:

[01:13:55.0000] <tobie>
Rick is the right person.

[01:13:56.0000] <Ms2ger>
Do you know if he reads bugmail?

[01:14:25.0000] <tobie>
He probably does, but I'll ping him on twitter.

[01:15:02.0000] <Ms2ger>
Ta

[01:31:11.0000] <tobie>
Ms2ger: are storage events still on other windows only?

[01:31:32.0000] <Ms2ger>
Eh?

[01:32:37.0000] <tobie>
Yeah. Spec used to mandate firing storage events on window objects of other open tabs of the same origin.

[01:33:28.0000] <tobie>
Nicely conflating a sync storage system and a cross frame communication channel along the way.

[01:43:44.0000] <annevk>
tobie: the test could do new StorageEvent()

[01:44:22.0000] <tobie>
oh. Mind mentioning that in the comment? I'm out of battery.

[03:18:40.0000] <annevk>
JakeA: note that per https://www.w3.org/Bugs/Public/show_bug.cgi?id=24822 we should not advocate allowing localhost by default

[03:19:07.0000] <annevk>
JakeA: apparently people set up systems locally and do not expect the outside world to be able to read them even if they have CORS headers...

[03:22:43.0000] <JakeA>
annevk: hmm, that's really tough. I mean, what if you *want* that?

[03:23:17.0000] <annevk>
JakeA: use case?

[03:24:05.0000] <annevk>
JakeA: actually, localhost same-origin is prolly fine

[03:25:25.0000] <JakeA>
annevk: Say I'm developing locally, and I have a local version of some API running for testing purposes

[03:25:41.0000] <JakeA>
annevk: Would jakearchibald.dev be able to reach localhost:3000?

[03:26:21.0000] <JakeA>
(assume jakearchibald.dev maps to localhost)

[03:27:04.0000] <JakeA>
Would XHRing to localhost:3000 behave differently to jakearchibald.dev:3000?

[03:27:50.0000] <annevk>
JakeA: that's what people are proposing

[03:28:05.0000] <annevk>
JakeA: maybe leave a comment in that bug

[03:28:18.0000] <annevk>
JakeA: sicking wants to do this

[03:30:54.0000] <JakeA>
Done

[03:31:32.0000] <JakeA>
tbh, as long as it was flagged in devtools with a button to allow, it'd be ok

[03:31:42.0000] <JakeA>
But it seems weird to break CORS like this

[03:36:11.0000] <darobin>
JakeA: I think it's not just CORS that's the issue but accessing localhost in general

[03:36:25.0000] <annevk>
Oh yeah, this wouldn't just block CORS, this would block all the things

[03:36:27.0000] <darobin>
there are a few apps out there that expose a local server, and aren't necessarily well thought out

[03:36:57.0000] <darobin>
(e.g. support GET with side-effects)

[03:37:37.0000] <JakeA>
But with CORS, that's an explicit "allow access"

[03:38:19.0000] <JakeA>
I can understand wanting to block new Image().src='http://localhost/...'

[03:38:24.0000] <darobin>
JakeA: to answer your question, I would expect the block to apply to "localhost" and also explicit access to the loopback/local IPs, but not to other (unguessable) names that map to those IPs

[03:39:55.0000] <annevk>
Is loopback/local IPs defined?

[03:40:04.0000] <JakeA>
So if I had localtoast mapping to localhost it'd behave like the rest of the web? I guess that's an easy way around it for developers

[03:40:08.0000] <annevk>
Does the definition make sense with IPv6?

[03:40:16.0000] <JakeA>
(as long as localtoast doesn't become a pseudostandard)

[03:40:21.0000] <annevk>
If you know about any of that darobin it might make sense to add to the bug

[03:41:03.0000] <darobin>
JakeA: that's what I'd expect

[03:41:21.0000] <annevk>
JakeA: Mac OS X makes setting up localhost very easy but doesn't make the implications that clear

[03:41:35.0000] <darobin>
annevk: well, I don't know *much* but yes IPv6 has ::1

[03:41:38.0000] <annevk>
JakeA: I guess if there was a special dev mode, localdevhost, that could work

[03:41:54.0000] <darobin>
it's pretty easy for developers to run their own local names

[03:41:58.0000] <JakeA>
annevk: Does OS X localhost come with CORS as default?

[03:42:07.0000] <annevk>
JakeA: this is not about CORS

[03:42:19.0000] <annevk>
JakeA: this is about Fetch

[03:42:41.0000] <JakeA>
Ahh I see, by blocking the get you also block CORS. What about forcing preflight?

[03:45:15.0000] <darobin>
mmmm

[03:45:22.0000] <darobin>
I don't like the idea of forcing preflight

[03:45:39.0000] <darobin>
because it means that if you develop using CORS against localhost, you get a preflight which you won't get when you deploy

[03:45:50.0000] <darobin>
that risks causing confusion

[03:46:14.0000] <darobin>
if your preflight has side-effects you'll end up with really hard to debug behaviour

[03:46:15.0000] <JakeA>
more than XHR failing to localhost all together?

[03:46:26.0000] <darobin>
well yeah, if it fails it really just fails

[03:46:41.0000] <darobin>
you don't get weird side effects, just immediate failure

[03:46:52.0000] <JakeA>
But that's also confusing

[03:46:55.0000] <darobin>
and your console can report "ERROR: access to localhost blocked for XHR"

[03:47:49.0000] <darobin>
I guess maybe there could be a better way

[03:47:53.0000] <JakeA>
Fair enough, if there was an option in devtools to "allow", I guess its fine

[03:48:13.0000] <darobin>
*if* the origin calling fetch is from a name that maps to the loopback IP, then it's allowed to call to localhost

[03:48:20.0000] <darobin>
anything else is just blocked

[03:48:39.0000] <darobin>
so jakea.dev can call localhost, with all the usual CORS stuff

[03:48:57.0000] <darobin>
but jakea.com, which does not map to 127.0.0.1 or ::1, can't

[03:49:14.0000] <darobin>
I think that stops the attacks, but keeps devs happy and simple

[03:49:29.0000] <darobin>
annevk: WDYT? ^

[03:49:50.0000] <JakeA>
feels ok to me

[03:49:54.0000] <annevk>
darobin: yeah I guess something like that makes sense

[03:52:55.0000] <annevk>
JakeA: do you think you can get to that Fetch / SW integration question today?

[03:53:19.0000] <annevk>
JakeA: I'm gonna look into fetch() / Request / Response after lunch

[03:56:19.0000] <JakeA>
annevk: The progress events one? https://github.com/slightlyoff/ServiceWorker/issues/289

[04:01:57.0000] <annevk>
JakeA: https://github.com/slightlyoff/ServiceWorker/issues/242

[04:45:19.0000] <JakeA>
annevk: If I call event.respondWith(event.default()) for a subresource & it returns a redirect, it doesn't re-enter the SW right?

[04:46:09.0000] <annevk>
JakeA: the network layer cannot return a redirect normally

[04:46:26.0000] <annevk>
JakeA: only if explicitly instructed, and only the navigate algorithm does that at the moment per Hixie

[04:48:13.0000] <JakeA>
annevk: So when you "Return the result of performing a fetch using request", it'll have some avoid-sw flag set?

[04:48:30.0000] <JakeA>
(when handling 30x)

[04:49:24.0000] <annevk>
JakeA: yeah something like that

[04:49:38.0000] <annevk>
JakeA: ideally with source still pointing to the originating client, not the service worker

[04:49:47.0000] <annevk>
JakeA: so Referer and such are still nice

[04:56:10.0000] <JakeA>
annevk: If we had request.manualRedirect, which was get/set & respected by fetch(), doesn't that meet the use-cases of event.default()?

[04:58:21.0000] <JakeA>
.manualRedirect being true by default if its a navigate, but I could set it for subresources if I wanted. That means I'd return a redirect to fetch, which would follow it & any others (and wouldn't go through the SW because of this avoid-sw flag)

[04:59:43.0000] <JakeA>
If a fetch() resolves to a redirect, it'd have to be opaque because of potential tokens passed in the url

[05:23:59.0000] <annevk>
JakeA: what about Referer or CSP?

[05:24:25.0000] <annevk>
JakeA: what about the weird thing with fetch() suddenly having two modes

[05:24:57.0000] <annevk>
JakeA: manualRedirect is a feature, it's not a solution

[05:25:19.0000] <annevk>
JakeA: you can make fetch() do the same thing as default(), but what you've done at that point is that you've added a special mode to fetch()

[05:25:27.0000] <annevk>
JakeA: I said as much the other day

[05:27:59.0000] <JakeA>
annevk: If you make requests from SW, losing the Referer and CSP defaults doesn't seem bad

[05:28:29.0000] <JakeA>
annevk: Yeah, fetch gets a mode, is that weirder than event.default()?

[05:29:45.0000] <JakeA>
Having event.default() drop back into fetch and then back into SW again feels really weird, but I agree it's the only sane way to implement event.default()

[05:30:14.0000] <annevk>
JakeA: I would be fine actually with event.default() not going back into SW but rather do the same as "return null"

[05:30:32.0000] <annevk>
JakeA: but then you would not be able to store it in the cache

[05:30:45.0000] <JakeA>
annevk: Or more importantly IMO provide a fallback if it fails

[05:32:04.0000] <JakeA>
annevk: I guess event.default() would return the same promise if called twice, or just fail

[05:32:51.0000] <annevk>
JakeA: seems like that is up to you to define

[05:33:06.0000] <annevk>
JakeA: fetch() having a mode in SW context only seems weird to me

[05:33:53.0000] <JakeA>
annevk: event.default() means you're going to be handling SW responses in two places, for each of the calls into SW

[05:34:22.0000] <JakeA>
annevk: Eg, event.respondWith( event.default().then(function() { return fetch('/'); }) )

[05:34:31.0000] <annevk>
JakeA: as you can see from my explanation default() is pretty weird you ask SW for a response, but it actually gives you a callback and asks you to get a response, and then that callback gives you the actual response

[05:35:08.0000] <annevk>
JakeA: whereas fetch() is very simple just like XHR, it just does a fetch

[05:38:03.0000] <JakeA>
annevk: yeah, I've got no problem with fetch(). But event.default… ugh

[05:38:30.0000] <annevk>
JakeA: so your solution is to make fetch() ugly?

[05:39:19.0000] <annevk>
JakeA: overloading is generally a bad strategy

[05:41:00.0000] <JakeA>
annevk: Is it overloading? The fetch spec can manually handle redirects, why shouldn't fetch() be able to do the same (but opaque for security)?

[05:41:59.0000] <JakeA>
Fetch already does a lot of different stuff depending on the method, headers, origin

[05:43:22.0000] <annevk>
JakeA: again, this is not about redirects

[05:44:31.0000] <annevk>
JakeA: I don't even see how that works, you get back an OpaqueResponse, it's a redirect, what happens next? You bypass the SW for future requests? What if those fail?

[05:45:01.0000] <JakeA>
annevk: pretty sure event.default() came about to deal with base urls after redirects

[05:45:30.0000] <annevk>
JakeA: it came about because there was no way to do the same thing as return null

[05:45:45.0000] <annevk>
JakeA: redirects expose that pretty badly, but they're not the only thing

[05:47:07.0000] <JakeA>
annevk: you're right, for subresources if you get a successful redirect which results in a failure, you won't hear about it in the SW

[05:47:08.0000] <JakeA>
hmm

[05:49:45.0000] <JakeA>
annevk: If event.default is the answer, your suggestion of how to hook it into the fetch spec seems the most sensible way

[05:50:05.0000] <yoav>
SimonSapin/TabAtkins: Around?

[05:51:03.0000] <SimonSapin>
yoav: yes, but just ask :) http://www.nohello.com/

[05:51:12.0000] <annevk>
JakeA: again, we could overload fetch() to do this too, it would need exactly the same hooks

[05:51:39.0000] <annevk>
JakeA: the reasons are redirects, correct referrer, correct CSP, correct context, etc.

[05:51:49.0000] <yoav>
SimonSapin: I believe life has found a bug in the CSS syntax spec: https://code.google.com/p/chromium/issues/detail?id=377510

[05:52:19.0000] <annevk>
JakeA: i.e. a fetch() which is passed a Request object that has its UA-bit set

[05:52:58.0000] <annevk>
JakeA: that solution however seems much less elegant, I'd much rather truncate the UA-bit when such an object is passed to fetch() and have fetch() always do the same thing

[05:53:43.0000] <yoav>
SimonSapin: Basically, when we encounter something like "+-5", we check if "-5" is a number (which it is), and then continue to parse "+-5" as a number, which fails

[05:54:14.0000] <JakeA>
annevk: yeah, this is why I was interested in request.send()

[05:54:32.0000] <SimonSapin>
yoav: that sounds wrong, let me check

[05:54:48.0000] <JakeA>
annevk: although that gets complicated when it comes to those requests going in & out of caches

[05:55:15.0000] <yoav>
SimonSapin: it's fairly possible that I got the spec wrong. This is what happens in my impl (which I think is per spec)

[05:55:23.0000] <yoav>
s/got/read/

[05:56:30.0000] <annevk>
JakeA: the problems would seem to apply to default() too

[05:56:50.0000] <annevk>
JakeA: request.send() we could still do I suppose and do away with fetch()

[05:57:20.0000] <JakeA>
annevk: event.default().then(r => console.log(r.url)) - is exposing that a security leak given redirects?

[05:58:57.0000] <SimonSapin>
So. Consume a token starts with " Consume the next input code point", which becomes the "current input code point". When that’s '+', we check "If the input stream starts with a number" which works on three code points, "the current input code point and the next two input code points, in that order", so "+-5"

[05:59:06.0000] <SimonSapin>
… which returns false

[06:00:32.0000] <annevk>
JakeA: no, note that if it's opaque that would just return the empty string

[06:00:33.0000] <SimonSapin>
yoav: I believe the spec is correct in this case

[06:00:59.0000] <yoav>
SimonSapin: OK, so the first code point is the already consumed one?

[06:01:17.0000] <yoav>
If so, the spec's probably right, and I read it wrong

[06:01:35.0000] <SimonSapin>
"The algorithm described here can be called explicitly with three code points, or can be called with the input stream itself. In the latter case, the three code points in question are the current input code point and the next two input code points, in that order."

[06:01:55.0000] <SimonSapin>
current input code point  is defined as      The last code point to have been consumed.

[06:02:17.0000] <JakeA>
annevk: but it won't always be opaque. Say it goes to another server, then comes back with a token in the url. The response is non-opaque, but url is leaking data

[06:02:36.0000] <yoav>
SimonSapin: OK, thanks! I'll fix my bugs then :)

[06:02:50.0000] <SimonSapin>
I agree this is a bit convoluted, but I don’t know how to make it better without drowning in verbosity

[06:06:11.0000] <annevk>
JakeA: how would that be different from an XHR doing the same thing?

[06:06:26.0000] <annevk>
JakeA: btw, that's only non-opaque if it's CORS

[06:07:49.0000] <annevk>
JakeA: see fourth clause of step 6 of http://fetch.spec.whatwg.org/#concept-fetch

[06:08:14.0000] <JakeA>
annevk: Maybe I need to find out more about the redirect security issue. I thought the final request url was a problem because it may contain tokens added by another server

[06:08:48.0000] <annevk>
JakeA: yes it can

[06:09:12.0000] <annevk>
JakeA: I documented the issue here: http://fetch.spec.whatwg.org/#atomic-http-redirect-handling

[06:09:37.0000] <annevk>
JakeA: if you can explain to me how you would obtain that secret I'd be happy to hear it

[06:09:51.0000] <JakeA>
annevk: ah, so the request gets tained when it goes to the other server, but remains tained when it comes back to the local server?

[06:10:18.0000] <annevk>
JakeA: yes, once you're tainted there's no going back

[06:10:36.0000] <JakeA>
annevk: ahh ok, that's the bit that was breaking my understanding

[06:14:04.0000] <JakeA>
annevk: Sorry about that, I thought XHR would come back non-opaque

[06:14:23.0000] <annevk>
XHR would have bailed at that point

[06:14:34.0000] <JakeA>
yeah

[06:14:56.0000] <annevk>
<img> would be tainted

[06:15:16.0000] <JakeA>
& fetch() would return OpaqueResponse

[06:15:47.0000] <annevk>
So a cross-origin redirect to a same-origin URL that acts as a paint server cannot communicate using that

[06:16:10.0000] <annevk>
Yeah, fetch() without mode set to CORS is basically <img>

[06:16:21.0000] <annevk>
We need to decide what we want as default for mode

[06:16:27.0000] <annevk>
If it's CORS or tainted cross-origin

[06:18:06.0000] <jgraham>
!summon Philip`

[06:19:18.0000] <JakeA>
annevk: Judged by the request object I guess. I like the idea of setting "context" in the Request constructor to set defaults for headers, so probably CORS too

[06:19:43.0000] <jgraham>
Philip`: Any idea if http://w3c-test.org/2dcontext/fill-and-stroke-styles/2d.pattern.image.broken.html has a race between the image (failing to) load and the assert?

[06:19:49.0000] <jgraham>
Should there ben an event?

[06:19:55.0000] <JakeA>
XHR's behaviour is a good default though

[06:21:03.0000] <yoav>
SimonSapin: I think the source of my mixup is that impl function naming doesn't match the spec. I'll align the impl terminology with the spec's one

[06:22:16.0000] <SimonSapin>
yoav: you mean things like "current input code point"?

[06:22:31.0000] <SimonSapin>
I admit I haven’t tried to keep my impls that close to the spec

[06:25:58.0000] <annevk>
JakeA: I forgot the idea around context, you might want to file a bug on that

[06:26:46.0000] <JakeA>
annevk: https://github.com/slightlyoff/ServiceWorker/issues/279

[06:27:49.0000] <annevk>
jgraham: looks like it

[06:35:41.0000] <annevk>
JakeA: ah right, I guess at some point that should be a bug on Fetch

[06:35:57.0000] <annevk>
JakeA: not sure how you'd make CORS dependant on that, most contexts allow both

[06:36:14.0000] <JakeA>
annevk: Is that where the Request constructor will live?

[06:36:34.0000] <annevk>
JakeA: yeah

[06:36:40.0000] <JakeA>
cool, makes sense

[06:37:32.0000] <yoav>
SimonSapin: Yeah, that's the part that confused me (currentCP referred to the next non-consumed CP in my impl, which I'm now changing)

[06:45:38.0000] <annevk>
JakeA: any reason the service worker spec has no style sheet?

[06:46:00.0000] <annevk>
JakeA: is that because someone updated the bs backend system again?

[06:47:43.0000] <JakeA>
annevk: Are we talking about https://slightlyoff.github.io/ServiceWorker/spec/service_worker/? It has styles for me

[06:48:19.0000] <annevk>
JakeA: so maybe it's a mixed content link somewhere that chrome doesn't block?

[06:48:29.0000] <JakeA>
annevk: I get styles in Firefox too

[06:48:39.0000] <JakeA>
Even in the nightlies

[06:48:52.0000] <tobie>
Happens to me from time to time. Not sure what it is.

[06:49:04.0000] <annevk>
JakeA: I use 32.0a1 (2014-05-27)

[06:49:26.0000] <annevk>
Console says "Error: https://slightlyoff.github.io/ServiceWorker/spec/assets/web-spec-framework/bower_components/platform/platform.js is being assigned a //# sourceMappingURL, but already has one"

[06:49:32.0000] <JakeA>
I get styles in 32.0a1 (2014-05-21). Updating now

[06:49:36.0000] <annevk>
Sounds like dependency management gone wrong

[06:49:39.0000] <JakeA>
I get that error too, but still get styles

[06:49:43.0000] <annevk>
Oh

[06:50:13.0000] <annevk>
I don't understand why this spec has such a complex setup :/

[06:50:49.0000] <annevk>
There's a gazillion script files

[06:50:50.0000] <JakeA>
annevk: Hmm, yeah, no styles in 32.0a1 (2014-05-27)

[07:14:51.0000] <tobie>
annevk: yeah, it's difficult to deal with. Breaks when parsed with anything but a modern browser (e.g. jsdom doesn't support it very well)

[07:15:17.0000] <tobie>
Hard to get the ToC out as it's inside an iframe. Etc.

[07:18:01.0000] <jgraham>
annevk: Welcome to the web of the future

[07:21:11.0000] <annevk>
JakeA: is the current class distinction between response objects useful?

[07:21:24.0000] <tobie>
jgraham: yeah, sincerely hope Web components are more straightforward than the current polyfills. If not, we're in for a world of hurt.

[07:21:29.0000] <annevk>
JakeA: how about a single object with a property to inspect what kind you have?

[07:21:46.0000] <annevk>
JakeA: requiring typeof seems not really JavaScript-y

[07:24:14.0000] <JakeA>
annevk: I don't have a strong opinion

[07:24:48.0000] <annevk>
JakeA: so if new Request takes (url, init), should new Response take (body, init)?

[07:25:36.0000] <JakeA>
annevk: yes

[07:25:59.0000] <JakeA>
annevk: https://github.com/slightlyoff/ServiceWorker/issues/192#issuecomment-40737493

[07:26:35.0000] <annevk>
JakeA: k, sketching out API in Fetch now

[07:34:12.0000] <annevk>
JakeA: open issues in my API sketch are body and header representation

[07:37:39.0000] <zewt>
"can you elaborate" in this instance, guessing not

[07:43:25.0000] <annevk>
zewt: ?

[07:51:57.0000] <annevk>
JakeA: http://fetch.spec.whatwg.org/#fetch-api

[08:06:02.0000] <SamB>
/me isn't sure he likes the future

[08:06:15.0000] <SamB>
/me also wonders when he gets his jetpack or flying car

[08:23:06.0000] <JakeA>
annevk: looks good, I'll have a think how to provide default values to Request based on a context (maybe context is enough)

[08:23:57.0000] <annevk>
JakeA: that'd mean we'd have a distinct context and context-for-CSP, which may be okay, but it's yet another field

[08:24:24.0000] <annevk>
JakeA: should prolly discuss that with implementers

[08:24:40.0000] <JakeA>
annevk: the alternative is different request constructors. ImageRequest, FontRequest etc etc

[08:24:44.0000] <JakeA>
bleh

[08:25:16.0000] <annevk>
JakeA: no, the alternative is not having the feature

[08:25:27.0000] <annevk>
JakeA: syntax for the feature is a separate discussion ;-)

[08:25:38.0000] <annevk>
(though just a field seems fine, if we do it)

[08:37:26.0000] <dglazkov>
good morning, Whatwg!

[10:22:32.0000] <Philip`>
jgraham: The test should not run until window.onload, and I probably assumed onload would not be triggered until the image had either succeeded or failed to load

[10:23:12.0000] <Philip`>
Maybe in theory it's possible for the browser to realise the image cannot succeed, so it decides to send the load event, but doesn't actually mark the image as failed until some arbitrary later time

[10:23:16.0000] <Philip`>
though that would seem silly

[10:23:31.0000] <Philip`>
/me has no idea what the spec said when he wrote the test, and even less idea what it says now

[10:24:50.0000] <jgraham>
Philip`: Yeah, I realised that. It seems like browsers are wrong in not firing an error there, although they will if the PNG header is corrupted

[10:25:36.0000] <jgraham>
(I mean firing an error in the canvas operation; I *think* the cases are expected to differ on whether there is a load event for the image)

[10:25:50.0000] <jgraham>
Additionally it seems like there is some kind of network race in Gecko

[10:26:55.0000] <Philip`>
I vaguely remember that the whole thing with images loading/failing was a total mess in implementations and in the spec, so I didn't look at it too closely

[10:27:43.0000] <jgraham>
Maybe I should just file a bug on Gecko saying "this seems to race" and disable the test

[10:30:24.0000] <Philip`>
That sounds like shirking responsibility for the problem

[10:30:29.0000] <Philip`>
so I approve

[10:43:49.0000] <jgraham>
Sadly, my taking responsibility for every problematic test is a non-converging approach since we are adding new non-deterministic tests faster than I resolve the issues with existing ones.

[10:44:02.0000] <jgraham>
So it's a necessary solution :(

[10:45:37.0000] <SamB>
maybe there should be some kind of policy where the people who add the races need to handle it

[10:49:49.0000] <jgraham>
SamB: Sadly there are a bunch of reasons that doesn't work

[10:49:57.0000] <jgraham>
Like it isn't clear who added the race

[10:50:09.0000] <jgraham>
It isn't clear how important the race is

[10:50:24.0000] <SamB>
that second one looks harder

[10:50:35.0000] <jgraham>
It's difficult to reproduce the race on other hardware/configurations/whatever

[10:50:42.0000] <SamB>
hmm

[10:51:00.0000] <SamB>
and is it hard to reproduce that configuration to bisect the issue?

[10:51:01.0000] <jgraham>
In general intermittent tests are the bane of web browser testing

[10:51:17.0000] <SamB>
and I guess intermittence is hard to determine for sure itself

[10:51:22.0000] <SamB>
that's the crux, huh?

[10:53:57.0000] <jgraham>
Yeah, everything is hard when bugs are intermittent

[12:22:25.0000] <TabAtkins>
annevk: You around?  I think there's some miscommunication about the "status" thing in Font Loading.  Basically, I have no idea what you're talking about. ^_^

[12:23:24.0000] <TabAtkins>
The "status" is an exposed enumerated attribute on the FontFace object.  I don't understand what further needs to be done about when it gets set, since the algo that sets it is already async, unless maybe the entire async portion of the algo (and all the rest of my async algos) need to specify what task queue they run in?

[12:52:00.0000] <annevk>
TabAtkins: in step 4 you set status to "loading"; my question is if anyone can ever observe status being "loading"

[12:52:17.0000] <annevk>
TabAtkins: and how they are notified of that change that they can now observe such a thing

[12:52:43.0000] <TabAtkins>
Oh, now I see what you're saying!

[12:52:44.0000] <jarek>
will Web Components support SVG templates?

[12:52:57.0000] <jarek>
e.g. will it be possible to do: <link rel="import" href="/someFile.svg">

[12:53:01.0000] <TabAtkins>
Yeah, whether or not that's observable is a good question.

[12:53:08.0000] <annevk>
TabAtkins: if in an async algorithm you don't define when a state transition in the main thread happens, you risk obj.status != obj.status due to the asynchronous nature of things and that would be bad

[12:54:00.0000] <TabAtkins>
You can certainly observe "loading" at a well-defined time if you have a url-based font - it switches sync when you or the system calls .load().

[12:54:07.0000] <TabAtkins>
But in the binary data case, hm.

[12:54:30.0000] <TabAtkins>
Okay, so pretend that I want to make it observable.  How do I fix this?  Push the rest of the algo past that point into another task?

[12:54:50.0000] <TabAtkins>
Or queue a task to set it to "loading"?

[12:55:04.0000] <TabAtkins>
(and then queue another one to set it to "loaded" or "error"?)

[12:56:45.0000] <annevk>
TabAtkins: I don't get why for the parsing case you need to set it to "loading"

[12:57:00.0000] <annevk>
TabAtkins: it seems like you should just set it to "loaded" or "error" and that's sufficient

[12:57:06.0000] <TabAtkins>
It might not be necessary, sure.

[12:57:20.0000] <TabAtkins>
But it looks like your objection extends to the loaded/error case, too, right?

[12:57:36.0000] <annevk>
TabAtkins: no, those are observable due to the promise being resolved/rejected

[12:57:46.0000] <annevk>
TabAtkins: the "loaded" case has no corresponding task

[12:58:08.0000] <annevk>
TabAtkins: well actually, you're right I guess

[12:58:20.0000] <annevk>
Domenic: you might want to mention this in your guide

[12:58:46.0000] <annevk>
Domenic: if you set observable state in addition to rejecting/resolving a promise, that ideally happens in the same microtask

[12:59:48.0000] <TabAtkins>
Is it implicit that promise resolving always happens in some microtask?

[12:59:59.0000] <TabAtkins>
Rather than async sometime in the middle of your executing code?

[13:00:13.0000] <TabAtkins>
(Or maybe it doesn't matter, because *responding* to a promise always happens in the next microtask.)

[13:00:25.0000] <annevk>
TabAtkins: promise resolving can happen whenever, since it's only observable in a microtask

[13:00:46.0000] <annevk>
TabAtkins: however, if you resolve and change observable state at the same time, there's a potential problem that Domenic needs to solve

[14:15:54.0000] <Domenic>
annevk: I felt this was kind of covered in the guide

[14:16:02.0000] <Domenic>
Queued tasks take place after next microtask

[16:33:54.0000] <JonathanNeal>
What’s the status of Element.prototype.findAll / find? Is that still happening?

[16:35:17.0000] <Hixie>
anyone here a JS module expert who can answer me some questions? I'm trying to work out if I can walk the dependency tree using the ES6 module API

[16:35:38.0000] <zewt>
still dubious about adding an api entry point that's basically just an alias for something else

[16:38:32.0000] <Hixie>
/me starts a sentence "HTML Imports import other Imports" and then realises he's gonna have to start over

[16:45:47.0000] <astearns>
HTML imports importing other imports is an important feature


2014-05-28
[17:30:58.0000] <TabAtkins>
JonathanNeal: http://dom.spec.whatwg.org/#dom-parentnode-query Got renamed to query/queryAll, but otherwise still there in DOM and planning to stick around.

[17:31:04.0000] <TabAtkins>
zewt: What are you referring to?

[17:34:54.0000] <zewt>
find vs. querySelector

[17:35:42.0000] <TabAtkins>
Those arent' aliases.

[17:36:07.0000] <TabAtkins>
They are similar, but in the sense that querySelector was a mistake we have to support, and query() is the way we should have designed it in the first place.

[17:36:34.0000] <zewt>
the last time I saw it, it was "we want to add new features to querySelector, so let's make a new function with a shorter name while we're at it"

[17:37:04.0000] <zewt>
don't know anything wrong with querySelector that needs a new entry point

[17:37:14.0000] <TabAtkins>
It's "let's redo querySelector, but with the correct scoping behavior, and allow relative selectors while we're at it, since everyone expects that and it's an obvious feature".

[17:58:36.0000] <Hixie>
TabAtkins: i think you misread my last comment on the promises thing

[17:58:45.0000] <TabAtkins>
I miight have.

[18:17:47.0000] <TabAtkins>
annevk: I'm writing some basic advice for writing async algos in specs at http://wiki.csswg.org/spec/async-algos . I'd appreciate guidance on the right spec language to use for queueing tasks when you need to mutate some observable document state.

[18:20:48.0000] <TabAtkins>
Hixie: Looking over it again, I'm not sure how I misread your comment.  Mind elaborating?

[18:36:25.0000] <Hixie>
TabAtkins: maybe i misread yours? i was saying that it was not ok that argument-checking turns into a rejected promise.

[18:37:01.0000] <TabAtkins>
Oh jeez, I missed a "not".  Okay, then you're not inconsistent, you're just still wrong and lots of people disagree with you. ^_^

[18:37:23.0000] <Hixie>
lots of people agree, too, it looks like

[18:38:02.0000] <TabAtkins>
Several people who have been closely involved with the work on promises all agree.

[18:38:17.0000] <TabAtkins>
That is, people who have a strong working and theoretical background on useful coding patterns for this kind of thing.

[18:39:13.0000] <Hixie>
yeah. so. just so we're clear, i give argument from authority zero weight. :-)

[18:49:51.0000] <TabAtkins>
Obviously.  What I'm saying is that it looks like you're treating this like a personal preference API design issue, and it's not.  Those people have good experience in why async APIs are more usable in the wild/in the large when they're designed this way.

[18:53:23.0000] <TabAtkins>
And they've written down the reasons why, and it doesn't look like you've addressed their arguments.

[18:54:35.0000] <TabAtkins>
Heck, even I've written down arguments for the "always reject" pattern <http://www.xanthir.com/b4P_0>, and I didn't even realize it!  It wasn't until after Domenic schooled me that I realized my earlier explanations were completely in line with that pattern.

[18:55:31.0000] <TabAtkins>
Throwing+rejecting is akin to having to wrap both the source and the call site of a function in try/catch in Mauvascript, because some errors get thrown at the source location and some get thrown at the call site.

[18:57:20.0000] <Hixie>
TabAtkins: you realise i also have good experience in designing APIs, right

[18:57:39.0000] <TabAtkins>
I thought you just said argument from authority have zero weight!

[18:57:43.0000] <Hixie>
it doesn't

[18:58:06.0000] <Hixie>
but your saying "these people have experience" sounds like you're implying "and you don't"

[18:58:27.0000] <TabAtkins>
Don't read it like that, then, because that's not what I'm saying.

[18:58:43.0000] <TabAtkins>
It's "this people have experience, but you're treating them like they just have an opinion".

[18:59:11.0000] <Hixie>
i've made counter-arguments to every argument presented, as far as i can tell

[18:59:23.0000] <Hixie>
it's either opinion, or they're wrong. :-) i think it's probably opinion.

[18:59:46.0000] <TabAtkins>
Which continue to be of the form "I believe I can draw a firm line between contract violations and data errors", which is wrong.

[19:00:40.0000] <TabAtkins>
Alternately, "I believe that the arguments people have made about how difficult and annoying it is to handle both sync and async errors are spurious".

[19:01:19.0000] <Hixie>
the web api has drawn that firm line for years

[19:01:21.0000] <Hixie>
decades even

[19:01:29.0000] <Hixie>
exceptions on one side, 'error' events on the other

[19:02:03.0000] <TabAtkins>
Oh come now, error events are rare.

[19:02:15.0000] <Hixie>
yup

[19:02:18.0000] <Hixie>
exceptions too, actually

[19:02:28.0000] <TabAtkins>
And it's very easy to argue that the line they draw is arbitrary and bad, and they shouldn't be doing so.

[19:02:45.0000] <Hixie>
what would that argument look like?

[19:03:18.0000] <TabAtkins>
(Events also never composed in any meaningful manner, which is the exact scenario being held up as being difficult to handle when you're mixing sync and async errors.)

[19:03:36.0000] <TabAtkins>
(Unlike promises, where composition is commonplace and expected.)

[19:03:39.0000] <Hixie>
we're not mixing sync and async errors

[19:03:46.0000] <Hixie>
the sync errors never happen unless there's a bug

[19:03:53.0000] <Hixie>
they're a completely different beast than the async errors.

[19:04:08.0000] <TabAtkins>
Many async errors don't happen unless there's a bug, too.

[19:04:31.0000] <TabAtkins>
And regardless, having one error-handling path is usually much easier to handle correctly.

[19:04:51.0000] <TabAtkins>
This is the exact argument made by several people, and by the blog posts you've been referred to.

[19:05:13.0000] <TabAtkins>
You seem to be claiming that the difficulties those people outline and explain aren't real, or aren't actually difficult to handle.

[19:05:38.0000] <Hixie>
that argument is totally bogus. it implies that you're (a) going to do anything useful when "handling" an error that's caused by a bug, and (b) that even if you did, it could in any meaningful sense be the same thing as if you were handling a non-logic bug, like a network error.

[19:05:57.0000] <Hixie>
s/non-logic bug/non-bu error/

[19:05:59.0000] <Hixie>
non-bug

[19:06:05.0000] <TabAtkins>
So you don't understand the argument, then.

[19:06:14.0000] <TabAtkins>
I suggest looking into it further and trying harder to understand it.

[19:06:19.0000] <Hixie>
maybe. or maybe you don't understand why it's wrong. :-)

[19:07:37.0000] <Hixie>
why do i have the burden of trying to convince myself that you're right as opposed to you having the burden to convince yourself that i'm right?

[19:24:07.0000] <SamB>
TabAtkins: so what useful thing are you going to do in response to one of these bugs?

[19:27:46.0000] <SamB>
/me wonders if TabAtkins has ever seen an async API that he liked

[19:28:08.0000] <TabAtkins>
SamB: I already did - I adjusted the Font Loading APIs to accord with this.

[19:30:10.0000] <TabAtkins>
Hixie: Because only one of us is right, and it's me, so it would be counterproductive for new to convince myself that you're right. ^_^

[19:30:46.0000] <Hixie>
that seems like an unproductive attitude, if you're serious

[19:31:01.0000] <Hixie>
i find that convincing myself that other people are right is one of the best uses of my time

[19:32:34.0000] <SamB>
I meant outside JS stuff

[19:33:31.0000] <TabAtkins>
Hixie: Less cheekily, I was already on your side, and I was convinced otherwise by reasonable arguments from Domenic.

[19:33:44.0000] <TabAtkins>
SamB: I have no idea what you're talking about, in that case.

[19:34:02.0000] <Hixie>
TabAtkins: i've read those same arguments, and i don't see why they are compelling.

[19:34:06.0000] <SamB>
TabAtkins: you don't know what a non-JS API is?

[19:34:16.0000] <TabAtkins>
SamB: No, I have no clue what you're asking.

[19:34:31.0000] <TabAtkins>
I mean, come on, at least *try* for the reasonable explanation for my confusion. ^_^

[19:35:01.0000] <SamB>
I was trying to provoke you into revealing more details ;-P

[19:35:02.0000] <TabAtkins>
Oh! you were referring to bugs in my JS code, not bugs as in GitHub issues.

[19:35:19.0000] <SamB>
not necessarily your code

[19:35:26.0000] <TabAtkins>
Right, just JS code in general.

[19:35:41.0000] <TabAtkins>
I thought you were asking about what I was going to do in response to the github issue.

[19:35:52.0000] <TabAtkins>
Anyway, same thing you'd do with any try/catch.

[19:36:11.0000] <caitp>
is this still the promise thing?

[19:36:16.0000] <TabAtkins>
Yeah.

[19:36:22.0000] <TabAtkins>
/me is home and trying to play Civ now, though.

[19:36:39.0000] <SamB>
TabAtkins: what's that thing you'd do with any try/catch?

[19:36:53.0000] <TabAtkins>
Depends entirely on what the code is?

[19:36:58.0000] <SamB>
and how does it help when someone just screwed up their calls

[19:37:30.0000] <Hixie>
TabAtkins: specifically, it looks like https://github.com/domenic/promises-unwrapping/issues/24#issuecomment-23979547 canvinced you, but i disagree with the premise of that argument. There is a fundamental difference between the types of errors he's talking about. If you've got a promise for a network-obtained resource, it makes sense that you could deal with "the network is flaky" by e.g. trying again or using a cached resource. But there's no logical thing 

[19:38:03.0000] <Hixie>
...you could do in response to a SyntaxError, ReferenceError, TypeError, or InvalidStateError. They're just qualitatively different. You don't want all your rejection handlers to deal with this. That's what window.onerror is for.

[19:38:07.0000] <SamB>
but, like, what are you gonna do with the equivalent of "bad FD"

[19:39:52.0000] <caitp>
hixie, there is a problem with treating them differently --- those errors which in other languages might be caught at compiletime, can't really be caught at compiletime in js (unless it's a legitimate syntax error that breaks the parser) --- you can only run into them at runtime

[19:40:03.0000] <TabAtkins>
Hixie: Actually, you often do.  It's a common trope in Python, frex, to forgo argument checking and instead just try calling other APIs with whatever you've got, wrapping the call in a try/catch and doing something alternate regardless of what the error is.

[19:40:21.0000] <TabAtkins>
The same trope applies to JS just as much.

[19:40:26.0000] <caitp>
and then, if you are going to treat them differently at runtime by making "special" errors uncatchable, then

[19:40:37.0000] <caitp>
that pretty much throws away the ecma draft

[19:40:38.0000] <TabAtkins>
If *anything* happens to your network request, you might want to fail over to a cache.

[19:40:44.0000] <SamB>
TabAtkins: hmm, I think usually you only do that on specific exceptions

[19:40:50.0000] <TabAtkins>
You might also want to be more sophisticated, and do retries in some circumstances, etc.

[19:40:52.0000] <SamB>
otherwise you risk really confusing yourself when things go wrong

[19:41:01.0000] <TabAtkins>
But that's totally already possible.

[19:41:02.0000] <caitp>
or at least, adds things to it which don't currently exist

[19:41:02.0000] <SamB>
because you'll never see the exception

[19:41:49.0000] <Hixie>
TabAtkins: calling an api at random is absurd. if that's the kind of "experience" that is leading to this design, then i can just rest my case here.

[19:42:10.0000] <TabAtkins>
"at random" is a terrible characterization of what I just described.

[19:42:11.0000] <SamB>
TabAtkins: what if you never get a request made because you totally flubbed the parameters?

[19:42:24.0000] <TabAtkins>
SamB: Testing will reveal that, then.

[19:42:29.0000] <TabAtkins>
Or examining your error logs.

[19:42:43.0000] <SamB>
how do these logs happen if no exception is thrown?

[19:42:44.0000] <Hixie>
"hey i don't know if what i've got here is valid for this api, but i'll call it anyway" is not good practice.

[19:43:01.0000] <TabAtkins>
"Why do I keep making requests to "{keepalive:true}"? Oh, because I swapped the arg order in fetch(). Duh."

[19:43:02.0000] <caitp>
dude it's the web, it's the land of "not a good practice"

[19:43:12.0000] <SamB>
no need to make it super easy

[19:43:21.0000] <Hixie>
/me fires up some DA:O instead of trying to explain why we shouldn't be optimising APIs for bad practice

[19:43:45.0000] <SamB>
I'd rather exclaim that

[19:43:47.0000] <zewt>
i've never seen duck typing in JS, I think the only time I've called something expecting to catch a low-level exception is for feature detection

[19:44:04.0000] <zewt>
i rarely even use it in Python

[19:44:32.0000] <zewt>
that said, any good language should let you catch any runtime error

[19:44:41.0000] <caitp>
feature detection is a pretty good use case for a world where you have dozens of browsers with different capabilities and configurations

[19:44:43.0000] <SamB>
the main thing I see that at all resembles what TabAtkins said in Python is that pattern where you catch ImportError and fall back to some other way of doing whatever it is the thing you tried to import was for

[19:44:53.0000] <caitp>
and in different versions

[19:44:59.0000] <TabAtkins>
Hixie: Extremely common example: I've got a file handle, which may or may not exist.  Checking ahead of time whether it exists is futile, because it might disappear between now and th enext line of code.

[19:45:12.0000] <SamB>
caitp: you don't usually want to do feature detection asynchronously ...

[19:45:37.0000] <TabAtkins>
Hixie: Thus the Python idiom is to just call the function assuming the file is there, and handle "file never existed" and "file did exist, but just now disappeared" the same way, in the catch block, unless you have a good reason to differentiate them.

[19:45:40.0000] <caitp>
no, but i'm not really taking sides in that argument, what I'm saying is that catching things like that can be useful

[19:45:47.0000] <SamB>
TabAtkins: filehandles don't suddenly stop existing in sane environments

[19:45:50.0000] <caitp>
and if it's going to work synchronously, why not asynchronously

[19:45:55.0000] <TabAtkins>
SamB: The file underneath them does.

[19:46:00.0000] <caitp>
you know, for consistency

[19:46:05.0000] <SamB>
just saying

[19:46:17.0000] <TabAtkins>
What are you just saying? Files can get deleted.

[19:46:18.0000] <zewt>
TabAtkins: "a nonexistant FD" and "a valid FD pointing to a file that doesn't exist any more" are pretty different things

[19:46:20.0000] <caitp>
this is the web, it's the land of "not a sane environment" :p

[19:46:21.0000] <SamB>
you people have strange file handles here, is all

[19:46:36.0000] <TabAtkins>
zewt: In many cases they're identical for your purposes.

[19:46:46.0000] <SamB>
zewt: I don't think web file handles are much like FDs

[19:46:48.0000] <TabAtkins>
See: every use of a file handle in Bikeshed.

[19:46:54.0000] <SamB>
I Think they're more like struct stat

[19:46:57.0000] <zewt>
can we call your file handle a "filename" for this example?

[19:47:06.0000] <TabAtkins>
zewt: Yeah, whatever.

[19:47:24.0000] <TabAtkins>
Same diff for these purposes.

[19:47:35.0000] <zewt>
it seems like you're describing "open(filename) and catch IOError to see if it fails", which is fine

[19:47:43.0000] <SamB>
in unix a file doesn't go away just because it's deleted, if you already have a handle to it

[19:48:10.0000] <SamB>
I never really understood how it works on Windows for sure, since usually you aren't allowed to delete such files in the first place

[19:48:16.0000] <zewt>
but i'm not sure it's the same case as "open(filename) where filename might be None, and catch TypeError" (eg. duck typing)

[19:48:33.0000] <zewt>
SamB: ... that's why I established "filename", because that seemed irrelevant

[19:48:41.0000] <SamB>
yeah sorry

[19:49:05.0000] <SamB>
just, I can't help ranting about the stupid terminology ...

[19:50:19.0000] <TabAtkins>
zewt: Yes.

[19:50:36.0000] <zewt>
anyway, i don't know the particular case well enough to have an opinion, though I can see a distinction between synchronous and async here (can't think of any reason, off-hand anyway, why I'd want to receive a TypeError async; that just means the async task fell over)

[19:50:49.0000] <SamB>
(back to Python, I only just learned that file() was deprecated, and you're better off if you never switched from open())

[19:51:09.0000] <TabAtkins>
You should be using io.open anyway.

[19:51:18.0000] <TabAtkins>
Returns unicodes automatically, rather than strs.

[19:51:25.0000] <TabAtkins>
Or use Python3, I guess. ^_^

[19:51:35.0000] <SamB>
huh? a file isn't unicode!

[19:51:37.0000] <zewt>
i want to, but I don't see it happening on the horizon, heh

[19:51:52.0000] <TabAtkins>
SamB: It is if you're reading text!

[19:52:05.0000] <TabAtkins>
If your text isnt' in utf-8, what are you doing with your life.

[19:52:38.0000] <SamB>
I guess a lot of APIs insist on you picking an encoding (possibly raw binary) and sticking with it though

[19:52:45.0000] <zewt>
(at work, at least)

[19:52:50.0000] <SamB>
so in that case you'd have to pick at open() time

[19:53:13.0000] <SamB>
anyway, I found out when working on porting the libstdc++ pretty printers to 2+3

[19:53:45.0000] <zewt>
one stupid thing that also impedes my desire to use python 3: print not being a keyword

[19:53:57.0000] <SamB>
I know, right?

[19:54:01.0000] <zewt>
like, that's nice and all, but I have years of muscle memory for "print foo"

[19:54:18.0000] <SamB>
I just wish the REPL had an option to turn it back

[19:54:23.0000] <SamB>
I don't really care so much in code

[19:54:51.0000] <SamB>
maybe also for -c ...

[19:54:55.0000] <SamB>
or was that -e

[19:56:08.0000] <SamB>
(also when are they going to support proper SIGINT handling?)

[19:56:54.0000] <caitp>
file a bug on your favourite implementation with an issue tracker

[19:57:04.0000] <zewt>
if you want a real, serious gripe for Python (and there really are only a few), look at its HTTPS server certificate handling

[19:57:25.0000] <zewt>
(there isn't any)

[19:58:09.0000] <SamB>
caitp: I think exarkun already filed it

[19:58:37.0000] <caitp>
then you know what you have to do

[19:58:45.0000] <caitp>
get 600 of your closest friends to spam it with "+1"

[19:59:53.0000] <SamB>
google is silly

[20:00:03.0000] <KevinMarks2>
I've been reading the anti python 3 rants and they all seem very command line oriented

[20:00:08.0000] <SamB>
it wants to google for "exar kun python" or "exar kun twisted"

[20:00:50.0000] <KevinMarks2>
Whereas the python 3 changes seem more Internet oriented

[20:00:54.0000] <caitp>
autonomously?

[20:00:55.0000] <SamB>
even though the nick connected with those topics is almost invariably spelled "exarkun"

[20:01:19.0000] <zewt>
i think there are too many changes in 3 to categorize them

[20:01:19.0000] <SamB>
caitp: I typed exarkun and that's what came up in the suggestions

[20:01:37.0000] <SamB>
well, along with some star wars stuff

[20:01:46.0000] <SamB>
where the one with the space makes sense

[20:11:53.0000] <SamB>
hmm, guess I misremembered who filed <http://bugs.python.org/issue1054041> ...

[20:15:03.0000] <caitp>
looks like thats been open for basically since the dawn of time

[22:12:51.0000] <Hixie>
TabAtkins: if the contract is "pass me what might be a valid file handle or might not, and i'll act accordingly", then an async response might make sense in that scenario

[22:13:08.0000] <Hixie>
TabAtkins: if the contract is "pass me a guaranteed valid file handle", then an async response wouldn't make sense

[22:15:03.0000] <Hixie>
TabAtkins: but if the contract is "pass me what might be a valid file handle" and you pass it a banana, i wouldn't want an async response, because wtf is my async handler supposed to do with that?

[22:17:52.0000] <caitp>
for Hixie's point, if you can prevent the async operation from ever taking place if it should result in an error, then great, there might be a tiny performance benefit and a better guarantee of correctness. to TabAtkin's point, it means you end up with a lot messier, less reasonable code

[22:18:10.0000] <Hixie>
it doesn't make the code more messy

[22:18:20.0000] <Hixie>
nobody is going to be handling these exceptions one way or the other

[22:18:29.0000] <caitp>
sure they are

[22:18:31.0000] <Hixie>
in fact it's less messy if the exceptions are sync

[22:18:36.0000] <Hixie>
since there's no code there

[22:18:47.0000] <Hixie>
but if they're async you have to at least have an "else, do nothing" clause

[22:19:27.0000] <caitp>
you're writing a toolkit which people will use which makes some async call --- they want you to set some readonly parameter of an xhr object to some value which isn't supported in that browser yet (such as "json" for responseType in safari)

[22:20:00.0000] <caitp>
well, not "readOnly"

[22:20:10.0000] <caitp>
you know what I mean, limited set of allowed values :>

[22:20:30.0000] <caitp>
anyways, so the library won't want to break your code, because it works perfectly well on other browsers

[22:20:34.0000] <Hixie>
setting an attribute is a beautiful case of where bad values should be handled by throwing an exception

[22:20:38.0000] <caitp>
so they will add a bunch of gross error checking

[22:20:45.0000] <caitp>
and it gets messy and hurts performance

[22:20:54.0000] <Hixie>
because where the heck would the promise even be given

[22:21:16.0000] <caitp>
well, this isn't a DOM api example, but I think the same sort of thing applies

[22:21:27.0000] <caitp>
you're setting a value which browser X doesn't support, but browser Y does

[22:21:36.0000] <caitp>
it throws --- you have to handle this because you support browser Y

[22:21:40.0000] <Hixie>
in non-DOM APIs, I can already do what i want, and i don't care how other people write their code

[22:22:02.0000] <Hixie>
it's the DOM APIs I care about here

[22:23:00.0000] <caitp>
which is great and all, except that people can and do wrap DOM apis to get more consistent or easier ways to interact with them

[22:23:10.0000] <caitp>
and have been doing this for a pretty long time now

[22:23:23.0000] <Hixie>
lots of people wrap DOM APIs in lots of different ways, sure

[22:24:20.0000] <caitp>
all I'm sayin is, if you need try/catch blocks to get consistent behaviour across implementations, that sucks

[22:25:00.0000] <Hixie>
can you show me what you think it would look like the way i'm asking for and the way you're asking for?

[22:25:03.0000] <Hixie>
i'm not sure i understand

[22:33:38.0000] <caitp>
https://gist.github.com/caitp/c63788b2a308b4b2c56c

[22:33:56.0000] <caitp>
that's a pretty simple example --- oh, and it doesn't actually accomplish consistent behaviour across browsers

[22:34:08.0000] <caitp>
i mean, it does get api consistency

[22:34:24.0000] <caitp>
but for consistent behaviour across browsers you'd need a separate try/catch for each problematic property

[22:34:38.0000] <caitp>
and a fallback behaviour in the case of an error

[22:34:49.0000] <Hixie>
this is which case? the case as you want it or the case as i want it?

[22:34:57.0000] <Hixie>
i'm not sure I really understand this example.

[22:35:15.0000] <caitp>
i don't really have a strong opinion one way or the other on the promise thing

[22:35:22.0000] <Hixie>
oh ok

[22:35:39.0000] <caitp>
but I think in real applications, throwing synchronously for async operations can mean that you have to handle both synchronous and asynchronous errors

[22:35:41.0000] <caitp>
in many cases

[22:35:45.0000] <caitp>
and this is messy

[22:35:59.0000] <Hixie>
i don't understand why you ever have to handle the synchronous errors i'm talking about

[22:36:08.0000] <Hixie>
if the code is written right, you'll never get them

[22:36:27.0000] <caitp>
because safari doesn't support a feature that you want to use in your app which works perfectly well on FFos

[22:36:38.0000] <Hixie>
(i guess except if you're feature-testing, but in that specific case a sync exception is a hell of an easier way to deal with it than an async one)

[22:36:43.0000] <caitp>
or IE doesn't, or Opera doesn't, or... etc

[22:36:50.0000] <Hixie>
(sync exception from the browser, i mean)

[22:37:08.0000] <caitp>
sure, but then you still need to tiptoe around the synchronous errors

[22:37:30.0000] <Hixie>
there's no tip-toeing dude. you just wrap the call you're unsure about in a try/catch and use the alternative api if it throws.

[22:37:41.0000] <Hixie>
it's as blunt as it comes.

[22:37:45.0000] <caitp>
that's tiptoeing

[22:37:59.0000] <Hixie>
it's as subtle as an axe.

[22:38:24.0000] <caitp>
okay, let's put it another way, it's going an extra length to evade an error that realistically you shouldn't even have to care about

[22:38:37.0000] <caitp>
because you're writing tests to verify that your code works as you expect it to

[22:39:03.0000] <caitp>
you're paying some kid 200k/year to manage your selenium testing infrastructure

[22:39:20.0000] <Hixie>
what? no, i'm just talking about feature-testing here

[22:39:59.0000] <Hixie>
try { someHostObject.someAttribute = 'someValueThatMightNotBeSupported' } catch { someHostObject.someAttribute = 'theSadderAlternative' }

[22:40:02.0000] <Hixie>
that's it

[22:40:02.0000] <caitp>
yeah i think there are a couple points being made about this and they're getting mixed up a bit

[22:40:46.0000] <Hixie>
that would certainly explain why i am regularly feeling in this discussion (not just with you) that people are arguing against points i haven't made

[22:41:54.0000] <caitp>
so, I don't have a strong opinion on it, I could live with synchronous exceptions -- they do win for feature detection

[22:42:17.0000] <caitp>
but, I think they can still lead to the writing of very messy code, too

[22:42:53.0000] <Hixie>
(have you seen the kind of code that promises can lead to? they're hardly a panacea either.)

[22:43:12.0000] <Hixie>
except for feature testing, the code for what i'm proposing is exactly zero lines of code.

[22:43:23.0000] <Hixie>
and for feature testing, it's simpler with exceptions.

[22:43:28.0000] <caitp>
definitely--but I think if you mix and match handling errors in rejection handlers as well as synchronous catch blocks, that's kinda sucky

[22:43:37.0000] <Hixie>
there's no mixing and matching.

[22:43:47.0000] <Hixie>
you only handle exceptions in the rejection handlers.

[22:43:47.0000] <caitp>
ideally, asynchronous apis should __always__ be asynchronous

[22:44:01.0000] <Hixie>
yes, the _APIs_ should always be asynchronous. no objection there.

[22:44:12.0000] <Hixie>
i'm only talking about how the UA reacts when you do something outside of the API

[22:44:27.0000] <Hixie>
like typo the method call, get the wrong arguments, pass in an object that's of the wrong type or in the wrong state, etc.

[22:45:14.0000] <caitp>
don't you think for a dynamic language it's easier to deal with this stuff with tests that don't happen during the runtime of the actual application?

[22:45:42.0000] <Hixie>
can you elaborate on "this stuff"?

[22:45:51.0000] <caitp>
checking for things like syntax errors or type errors

[22:45:56.0000] <Hixie>
yes.

[22:46:01.0000] <Hixie>
that's my point.

[22:47:14.0000] <caitp>
but then you're also saying you want to have the same behaviour during runtime, and I'm less sure about that, because the audience of a live application doesn't get much benefit from hearing about how you mistyped something

[22:47:52.0000] <Hixie>
pretty sure the audience of a live application doesn't care if they hear about it via exceptions or rejected promises

[22:48:19.0000] <caitp>
they might care because it won't crash their app ;p

[22:48:29.0000] <Hixie>
but if they hear about it via exceptions, the code will just stop, whereas if they get a rejected promise, the code will continue, likely doing unexpected things (since the code isn't ready to accept this) and corrupting their data.

[22:49:36.0000] <caitp>
yeah but you just know people are just going to use sweetjs to wrap everything in try/catch blocks so that their precious puppy catalog app doesn't break

[22:49:53.0000] <Hixie>
we're already past the point where their app breaks

[22:49:57.0000] <Hixie>
we're just debating how it breaks

[22:50:28.0000] <Hixie>
notice that nothing that the "all promises all the time" team is proposing will stop ReferenceErrors (where you typo the method name) from being sync

[22:50:36.0000] <Hixie>
i'm just saying we should have a few more sync exceptions than they are

[22:52:15.0000] <caitp>
so, this takes us back to the feature-detection thing, because I agree that you shouldn't need to handle exceptions like that (although I know that people will go out of their way to solve the problem the "wrong way" with catch blocks)

[22:52:41.0000] <caitp>
and this is the case where browser A behaves correctly, and browser B doesn't, and browser C also doesn't, but behaves incorrectly in a different way

[22:53:10.0000] <caitp>
this would vary from api to api, but if things are going to throw when they really shouldn't, that really sucks

[22:54:34.0000] <caitp>
and yeah, rejection handlers don't really solve that

[22:54:41.0000] <caitp>
that's true

[00:22:20.0000] <krit>
zcorpan: Is there anything that is not addressed on DOMPoint, DOMRect, DOMQuad in http://dev.w3.org/fxtf/geometry/ ?

[00:26:14.0000] <zcorpan>
krit: don't think so

[00:28:05.0000] <Ms2ger>
On Ringmark: "we were instructed to take whatever steps were necessary to make Firefox and Opera look as good as possible in those tests so that some kind of partnership might blossom"

[00:31:13.0000] <krit>
zcorpan: ok, I will ask for a detailed review tomorrow and give a 2 weeks time frame. If there are no bigger concerns, we can move to LC.

[00:31:53.0000] <zcorpan>
krit: ok

[00:32:00.0000] <krit>
zcorpan: because we are at it, why does DOMQuad have no CTOR for DOMPoint? http://dev.w3.org/fxtf/geometry/#DOMQuad

[00:32:19.0000] <krit>
sorry, DOMPointReadOnly as argument I mean

[00:32:32.0000] <krit>
just has DOMPointInit

[00:34:01.0000] <zcorpan>
krit: you can pass in such objects and webidl rules convert them to DOMPointInit

[00:34:20.0000] <krit>
zcorpan: oh cool, didn't know that

[00:35:12.0000] <zcorpan>
i guess we could put in a few notes about webidl tricks the spec uses

[00:35:52.0000] <krit>
zcorpan: yes, some examples. Was about to add some today. Would be great if you could add some for DOMQuad or DOMRect where appropriate

[00:36:30.0000] <zcorpan>
krit: can you file bugs where you want me to add examples?

[00:36:42.0000] <krit>
zcorpan: hm, I try to :)

[00:36:52.0000] <zcorpan>
thx :-)

[00:44:48.0000] <krit>
zcorpan: added 3 bug reports. Think the spec would benefit of examples here. https://www.w3.org/Bugs/Public/buglist.cgi?component=Geometry&list_id=37973&product=FXTF&resolution=---  I can create the graphics for 25904 if you create the example.

[00:45:02.0000] <krit>
zcorpan: DOMMatrix needs some examples as well of course. Add them today.

[00:45:10.0000] <zcorpan>
krit: ok

[00:45:27.0000] <zcorpan>
krit: i can try to look at it next week i think

[00:46:45.0000] <krit>
zcorpan: maybe I can try to create some examples and give it to you for review

[00:48:30.0000] <zcorpan>
bbiab

[00:49:14.0000] <annevk>
Domenic: they do, but you don't really have to queue a task in this case; you want to change state on an object and resolve the promise, and only expose the object's changed state the moment the promise's callbacks are invoked in the microtask queued for that

[01:06:01.0000] <annevk>
Domenic: TabAtkins: hmm yeah I guess you have to queue a task, seems somewhat sad it cannot be done in that microtask that's already happening anyway

[01:17:27.0000] <foolip>
annevk: the path to icons is wrong now in e.g. http://html5.org/r/6551

[01:23:18.0000] <annevk>
foolip: fixed

[01:29:15.0000] <annevk>
After a little over three years https://github.com/whatwg/dom/commit/9c2833fe3833d709dd9d66c985131528ff1bd966 it seems we are finally getting to the point where the "Core" part of DOM Level 3 Events is finally made obsolete https://www.w3.org/Bugs/Public/show_bug.cgi?id=25485#c5

[01:38:06.0000] <MikeSmith>
hayato: two of the shadow-dom testing PRs at https://github.com/w3c/web-platform-tests/pulls/iseki-masaya have been awaiting review for a couple of months now

[01:40:24.0000] <hayato>
MikeSmith: Let me review those. Thanks for letting me know that.

[01:40:38.0000] <MikeSmith>
hayato: thanks much

[01:42:27.0000] <MikeSmith>
hayato: btw the submitter of those two PRs didn't respond at all to the previous review comment you made on the third one, so I'm not sure it's super likely he'll respond on these. So don't sink a huge amount of time into it.

[01:44:39.0000] <hayato>
MikeSmith: I got it. Ill see to it. Thank you for your help.

[01:54:07.0000] <foolip>
annevk: thanks!

[02:00:23.0000] <annevk>
jungkees: thanks for working on the hooks, will review in a bit

[02:01:07.0000] <jungkees>
annevk: thanks!

[02:01:36.0000] <annevk>
jungkees: btw, started working on this: http://fetch.spec.whatwg.org/#fetch-api

[02:03:04.0000] <jungkees>
annevk: I've seen that and will follow on it

[02:03:42.0000] <annevk>
jungkees: btw, please make it clear somehow that the Cache API will be generic and needs to work in a document environment as well eventually

[02:03:53.0000] <annevk>
jungkees: was not clear to the person working on it in Gecko

[02:05:21.0000] <jungkees>
annevk: JakeA has better idea I think. AFAIK, we intended to enable that in document context during the dicussion

[02:05:41.0000] <jungkees>
annevk: not for V1 I guess

[02:06:34.0000] <annevk>
jungkees: JakeA: yeah, but there should at least be a note to that effect

[02:07:02.0000] <JakeA>
annevk: same for fetch()?

[02:12:23.0000] <annevk>
JakeA: in Fetch I defined fetch() as being exposed as window.fetch()

[02:12:33.0000] <JakeA>
ahh cool

[02:12:37.0000] <annevk>
JakeA: we'll see what implementations say

[03:03:21.0000] <annevk>
TabAtkins: your guide looks good, might want to coordinate or link to Domenic's version here https://github.com/w3ctag/promises-guide

[04:05:35.0000] <jgraham>
zcorpan, foolip: Thanks for the help with the WebVTT issues

[04:05:48.0000] <foolip>
jgraham: np!

[04:13:45.0000] <krit>
zcorpan: added examples and notes http://dev.w3.org/fxtf/geometry/#DOMQuad

[04:14:23.0000] <zcorpan>
krit: ok cool. i don't have time to review today, though :-(

[06:24:51.0000] <zcorpan>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=25894 ... so .... people expecting their feedback to go to /dev/null might explain some of the junk bugs we get

[06:27:03.0000] <zcorpan>
Hixie: maybe s/Submit Review Comment/Submit Bugzilla Issue/ ?

[06:27:55.0000] <zcorpan>
or just "Report bug" maybe

[06:28:09.0000] <annevk>
If that guy had a million discussions about charset, he didn't learn much from it :/

[06:28:15.0000] <annevk>
Or gal, I guess

[07:24:20.0000] <caitp>
they seem upset

[07:29:01.0000] <annevk>
caitp: so is plural the preferred form? seems so weird

[07:29:51.0000] <caitp>
¯\_(ツ)_/

[07:52:52.0000] <TabAtkins>
annevk: Except for the part where I said "dunno lol, ask Anne", of course.

[07:54:12.0000] <annevk>
TabAtkins: yeah so it seems like you might have to queue a task, except that seems somewhat sad since a microtask would happen for the promise already (if there's listeners)

[07:54:32.0000] <annevk>
TabAtkins: maybe Hixie or Domenic has some thoughts on that

[07:54:34.0000] <TabAtkins>
Right, if you could align with the promise's microtask it would be nice.

[07:54:54.0000] <annevk>
Queuing a task would do that btw, it's just not as "quick"

[07:57:47.0000] <TabAtkins>
Because it's technically two tasks?

[08:01:32.0000] <annevk>
TabAtkins: because it happens later (e.g. if there's a bunch of other stuff queued)

[08:01:41.0000] <annevk>
TabAtkins: but that might be okay, the other stuff might be more important

[08:02:37.0000] <TabAtkins>
Eh, doesn't matter all that much.  It's async already, so the exact point in time when the info change becomes visible isn't that important, as long as it happens before promise resolution.

[08:02:58.0000] <TabAtkins>
So the language is just "queue a (micro?)task to XXX" in the middle of an algo step?

[08:10:11.0000] <annevk>
TabAtkins: queue a task to set status and resolve promise to y I suppose

[08:11:19.0000] <annevk>
TabAtkins: note that I still think changing status without having a way to get notified about that is bad, better to leave it unchanged in that case

[08:11:51.0000] <TabAtkins>
Hm, ok.  So just resolving promise normally (no task language) is fine when nothing else accompanies it, but for clarity you should resolve it in the same task that you're setting observable state in, if you're doing so.

[08:13:27.0000] <annevk>
TabAtkins: otherwise promise observers would get called before the state was changed

[08:14:01.0000] <TabAtkins>
Oh, because of the task/microtask distinction?

[08:14:30.0000] <annevk>
Yes, promise thing would happen end-of-current task, whatever that is, and state thing would at best happen next-task

[08:15:32.0000] <TabAtkins>
Okay.  And it's a no-no to explicitly invoke microtasks in async algos, because those are reserved for only a handful of things?

[08:17:47.0000] <annevk>
TabAtkins: it seems like these days you could queue a microtask

[08:18:18.0000] <annevk>
TabAtkins: I'd like to know what Hixie thinks about using that

[08:21:59.0000] <TabAtkins>
That would let me make the state change without delaying promise resolution until the next task

[08:22:41.0000] <TabAtkins>
Either way maintains the necessary ordering, but resolving the promise on a task is obviously slower.

[08:23:55.0000] <JonathanNeal>
Is there a polyfill for Element.prototype.queryAll?

[08:25:31.0000] <annevk>
TabAtkins: it's later, might not be slower overall

[08:28:47.0000] <TabAtkins>
annevk: Yeah, but chaining "later" multiple times is slower.

[08:28:58.0000] <TabAtkins>
JonathanNeal: jQuery

[08:29:33.0000] <JonathanNeal>
TabAtkins: one of those days, huh. :-)

[08:29:37.0000] <annevk>
TabAtkins: example?

[08:30:31.0000] <TabAtkins>
JonathanNeal: Being serious. Jq's .find is our .query all.

[08:31:33.0000] <TabAtkins>
annevk: If you're gonna kick off more async requests, you want those as soon as possible

[08:32:04.0000] <TabAtkins>
On the other hand, you might be kicking off async requests from event handlers too

[08:32:19.0000] <TabAtkins>
So I guess it doesn't actually matter.

[08:43:21.0000] <Hixie>
TabAtkins, annevk: i'm here, not sure i understand the discussion above though (missing some context?)

[08:43:34.0000] <TabAtkins>
Hixie: I have an algo with an async section...

[08:43:56.0000] <TabAtkins>
Hixie: In it, I need to make some author-visible state change (set a FontFace's status attribute to "loaded"), and then resolve a promise.

[08:44:11.0000] <TabAtkins>
Hixie: I think I need to queue a task to do the attribute setting, so it happens at a well-defined time.

[08:44:37.0000] <TabAtkins>
Hixie: And I should probably also resolve the promise in the task, so there's a well-defined ordering between attribute-set and promise-resolve.

[08:44:46.0000] <Hixie>
ideally you'd make it happen in the same microtask as the promise is resolved in

[08:44:46.0000] <TabAtkins>
Hixie: But should I do those operations in a task or a microtask?

[08:44:53.0000] <Hixie>
er

[08:44:59.0000] <Hixie>
as the promise callback is called in

[08:45:11.0000] <TabAtkins>
Yeah, kk.  (I was about to correct your terminology. ^_^)

[08:45:44.0000] <Hixie>
but failing that, this seems like the kind of thing i would use "await a stable state" for

[08:45:46.0000] <TabAtkins>
So it ideally happens in the same microtask as promise callbacks, before the callbacks are called.  I don't think we have prose hooks for that.

[08:46:08.0000] <TabAtkins>
Hm, interesting.

[08:46:17.0000] <Hixie>
that lets you build the algorithm pretty neatly, but in the background it's just built with microtasks

[08:46:42.0000] <Hixie>
basically it lets you designate a set of steps that execute as a microtask while the rest of the algorithm is async

[08:46:53.0000] <Hixie>
a bit like a synchronised section

[08:47:07.0000] <TabAtkins>
Example in a spec?

[08:47:26.0000] <Hixie>
one sec

[08:48:19.0000] <Hixie>
search for "Failed with elements: Queue a task to fire a simple"

[08:48:28.0000] <Hixie>
and look at steps 10-20 below that

[08:49:40.0000] <TabAtkins>
Urg, I gotta load single-page for that.  kk.

[08:49:54.0000] <Hixie>
one sec

[08:49:58.0000] <Hixie>
i can give you the multipage link

[08:50:13.0000] <TabAtkins>
Would be nice, since I'm tethering my internet right now.

[08:50:20.0000] <Hixie>
it's in http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#concept-media-load-algorithm

[08:50:44.0000] <Hixie>
but ignore the first occurance of stable-state in that algorithm and look for the one i mentioned earlier

[08:50:53.0000] <Hixie>
because the first one does a confusing fork in the middle of the stable state

[08:51:01.0000] <Hixie>
and that obscures the point i'm trying to make :-)

[08:52:00.0000] <TabAtkins>
Okay, cool.  I'll recommend using a nested list for that, rather than unicode characters, but this works.  ^_^

[08:52:46.0000] <Hixie>
well the unicode characters are non-normative

[08:52:59.0000] <Hixie>
they just make it more obvious where the synchronisation starts and ends

[08:53:22.0000] <Hixie>
(i recommend being typographically consistent for the readers' benefit)

[08:54:01.0000] <Hixie>
but sure, it could also be described as a set of steps in a sublist

[08:54:08.0000] <TabAtkins>
So I think I'd go "Asynchronously await a stable state, then execute the following steps synchronously: <nested-list>".

[08:54:40.0000] <TabAtkins>
Where <nested-list> is "1. Set font face's status attribute to "loading". 2. Accept the promise with font face.".

[08:59:15.0000] <Hixie>
make sure if this isn't the end of the algorithm that you also have the "3. Resume the rest of the algorithm asynchronously."

[09:00:09.0000] <TabAtkins>
Isn't that implied by the end of the list?

[09:00:14.0000] <Hixie>
someone filed a bug asked for me to spec focusin/focusout, so I filed a bug on a browser asking if we could maybe remove them instead, and the end result is that now I might have to also spec DOMFocusIn/DOMFocusOut. wtf.

[09:00:31.0000] <Hixie>
TabAtkins: as currently written, no

[09:00:38.0000] <Hixie>
TabAtkins: (because don't forget, in my case i don't have a nested list)

[09:00:47.0000] <TabAtkins>
I know that in your case you don't.

[09:01:16.0000] <TabAtkins>
I suppose being clear about things is fine.  Just trying to reduce boilerplate to a minimum.

[09:04:32.0000] <Hixie>
understood

[09:05:00.0000] <Hixie>
i think synchronous sections are confusing enough that being overtly explicit each time is probably reasonable

[09:09:32.0000] <annevk>
Hixie: focus :-(

[09:13:53.0000] <annevk>
Also, recent emails on UI events :-(

[09:14:08.0000] <annevk>
"We'll just augment that other spec"

[09:21:51.0000] <annevk>
Hixie: you still around? Should we talk about cleanup now?

[10:50:46.0000] <Hixie>
annevk: i've got some time this afternoon, but right now is poor

[11:22:30.0000] <estellevw>
Is Emotion Markup Language (http://www.w3.org/TR/2014/REC-emotionml-20140522/) something that might be brought into html?

[11:24:51.0000] <Hixie>
estellevw: what's the use case?

[11:25:01.0000] <Hixie>
estellevw: are any browsers interested in implementing it?

[11:25:26.0000] <estellevw>
i don't have one. I was basically wondering if it's something anyone cares about and if I should spend brain cells on it

[11:25:50.0000] <estellevw>
but if no one has even heard about it, the answer would be no

[11:25:54.0000] <estellevw>
at least at this time

[11:26:29.0000] <Hixie>
i've only heard of it in the context of jokes...

[11:29:43.0000] <estellevw>
ok, thanks. I thought it might be a joke, but too much effort seemed to have been put in it for it to be one, and the date wasn't April 1

[11:33:52.0000] <Hixie>
oh i'm sure it was not intended as a joke

[11:34:17.0000] <Hixie>
not clear what it's relationship to the web is though, even though it happened at the w3c

[12:28:50.0000] <annevk>
*-Star

[12:29:16.0000] <annevk>
Oh wrong, WS-*

[12:58:31.0000] <SamB>
emotionml sounds like a *very* strange idea

[12:59:08.0000] <caitp>
well you need a way to convey <sarcasm />

[13:08:54.0000] <japhet>
i looked for this in the spec, but maybe i missed it.....if a document is loaded via POST, then navigates to a fragment identifier, then a reloaded is triggered, should the resulting request be a GET or a POST?

[13:09:32.0000] <japhet>
the behavior is explicitly state to be GET for pushState and replaceState, but i didn't see anything for fragment identifiers

[13:30:08.0000] <TabAtkins>
japhet: You're not changing the resource, so I think it's still POST.

[13:30:20.0000] <TabAtkins>
annevk_:

[13:30:36.0000] <japhet>
TabAtkins: that was my best guess, but I figured I should ask before arbitrarily changing blink

[13:30:41.0000] <TabAtkins>
Updated Font Loading to use the right async language, using language culled from Hixie.  Review would be appreciated.

[13:30:58.0000] <TabAtkins>
japhet: Just guessing here, though. Dunno what the specs might say for it.

[13:31:09.0000] <TabAtkins>
annevk_: Updated Font Loading to use the right async language, using language culled from Hixie.  Review would be appreciated.

[13:33:14.0000] <annevk>
TabAtkins: tomorrow ok?

[13:33:22.0000] <TabAtkins>
Yeah, no rush.

[13:33:33.0000] <annevk>
cool

[13:35:57.0000] <annevk>
TabAtkins: oh, and just to be clear, tweet about standards is not aimed at you either :-)

[13:41:12.0000] <TabAtkins>
annevk: Hahaha, I knew that.

[13:52:52.0000] <sgalineau>
TabAkints: in bikeshed README, 'textual shortcuts for autolinks' link 404s for some reason

[13:53:01.0000] <sgalineau>
TabAtkins, even

[13:53:15.0000] <TabAtkins>
Weird, I'll check it out.

[13:53:56.0000] <sgalineau>
it is; the file is definitely there

[13:54:35.0000] <TabAtkins>
Man, that's been broken *forever*.

[13:54:38.0000] <TabAtkins>
Fixed now.

[13:54:44.0000] <TabAtkins>
Typo in the url.

[13:54:54.0000] <TabAtkins>
(Missing an "s" at the end of "definitions".)

[14:17:39.0000] <TabAtkins>
annevk: Any objections to me working on Bikeshedding DOM for you?

[14:18:35.0000] <annevk>
TabAtkins: no sounds great

[14:18:46.0000] <annevk>
TabAtkins: not sure about putting promise stuff in DOM though ;-)

[14:18:52.0000] <annevk>
TabAtkins: but that's also for tomorrow

[14:19:03.0000] <TabAtkins>
kk

[14:22:36.0000] <Domenic>
How did HTMLSpanElement come about? /cc Hixie

[14:23:14.0000] <Domenic>
annevk: I think if DOM defines #concept-throw, it can also define #concept-reject. Although I imagine you prefer to move both of those to WebIDL.

[14:24:05.0000] <annevk>
Domenic: I do

[14:24:59.0000] <TabAtkins>
Domenic: You mean like, the historical reasoning for adding the <span> element?  Or actually the interface?

[14:25:38.0000] <TabAtkins>
annevk: I'm fine with both of them being in WebIDL too; all I care is that they both exist *somewhere*, and if putting reject in DOM is the fastest way to get it written down somewhere I can refer to, that's better.

[14:47:31.0000] <Hixie>
MikeSmith: btw, i see 408s all the time with w3c bugzilla, but never anywhere else. so i do think it's something to do with w3c bugzilla.

[15:24:33.0000] <Domenic>
TabAtkins: the interface. Given that it adds nothing to HTMLElement, I feel there must be a story there.

[15:57:55.0000] <TabAtkins>
Yeah, identification. There's sine missteps, but *most* elements have unique interfaces.


2014-05-29
[17:06:48.0000] <MikeSmith>
Hixie: Yeah I'm noticing even-more-frequent 408s from bugzilla too, and not just in chrome. I'll raise an actual report for it with the systems team and ask that somebody spend some time trying to reproduce it and troubleshoot it.

[19:00:54.0000] <MikeSmith>
it is possible to programatically set the validatity state on a particular element?

[19:02:11.0000] <MikeSmith>
I'd like to make the browser show an invalidity indicator for a particular input area after some other client-side checking completes

[19:02:35.0000] <Hixie>
yeah, that's what setCustomValidity() is for

[19:02:49.0000] <MikeSmith>
ah sweet

[19:05:47.0000] <MikeSmith>
Hixie: do I then need to fire a synthetic "invalid" event at the element, to get the message to appear?

[19:06:02.0000] <Hixie>
the message appears when the form is submitted, usually

[19:06:11.0000] <MikeSmith>
ah OK

[19:06:23.0000] <Hixie>
there's a recent addition form.reportValidity() that can also be used

[19:06:28.0000] <Hixie>
but i don't know who implements that, if anyone

[19:06:29.0000] <MikeSmith>
so in this case I'm not actually submitting a form

[19:06:36.0000] <MikeSmith>
ok

[19:06:42.0000] <Hixie>
(and :invalid should begin matching immediately)

[19:08:18.0000] <MikeSmith>
I guess I may need to emulate whatever form.reportValidity() does

[19:08:57.0000] <Hixie>
why aren't you submitting the form?

[19:10:17.0000] <MikeSmith>
Hixie: because there's nothing to submit -- it's just executing client-side

[19:10:25.0000] <MikeSmith>
this is http://w3c-test.org/tools/runner/index.html

[19:10:30.0000] <Hixie>
i don't mean submit to http necessarily

[19:10:33.0000] <MikeSmith>
yeah sure

[19:10:44.0000] <Hixie>
is there a submit button?

[19:10:57.0000] <MikeSmith>
there's the Start button there

[19:11:28.0000] <Hixie>
then theres a submission step

[19:11:29.0000] <MikeSmith>
which causes it to iterate over a list of tests

[19:11:33.0000] <MikeSmith>
yeah

[19:11:46.0000] <Hixie>
just make it submit to javascript:submitted() or something

[19:11:53.0000] <Hixie>
as in action="javascript:submitted()"

[19:12:04.0000] <MikeSmith>
oh

[19:12:27.0000] <MikeSmith>
action or formaction?

[19:12:36.0000] <Hixie>
action if you put it on <form>

[19:12:47.0000] <Hixie>
formaction if you need to override an action="" from the <form> on the <button>

[19:12:48.0000] <MikeSmith>
yeah

[19:15:04.0000] <Hixie>
i have a proposal somewhere for some extension to method="" that's specifically for forms like this

[19:15:18.0000] <Hixie>
a bit like method=dialog but without even the automatic closure of the dialog

[19:15:26.0000] <Hixie>
i forget where i mentioned that though...

[19:15:31.0000] <Hixie>
i never filed a bug for it specifically

[19:19:09.0000] <Domenic>
Iirc programmatic submission does not trigger validity UI

[19:19:27.0000] <Domenic>
so reportValidity is awesome but I wish someone implemented it

[19:20:20.0000] <Domenic>
TabAtkins: Hixie: so generally the plan going forward is that each new element should have its own class, even if it has no unique properties over HTMLElement?

[19:26:13.0000] <MikeSmith>
hot dog javascript:submitted() works great

[19:26:16.0000] <MikeSmith>
thanks Hixie

[19:28:43.0000] <MikeSmith>
hmm maybe I should just call it "started" though

[19:31:01.0000] <MikeSmith>
someday I should actually get around to learning web programming

[19:39:41.0000] <MikeSmith>
alternatively, it seems like setCustomValidity() is already pretty well supported, and that's less trouble

[19:40:56.0000] <Hixie>
Domenic: there's no plan one way or the other there

[19:41:10.0000] <Hixie>
MikeSmith: setCustomValidity() is something you would use with submission

[19:42:07.0000] <MikeSmith>
Hixie: yeah if I just make my "Start" button type=submit that should work, right?

[19:42:12.0000] <Hixie>
yup

[19:43:05.0000] <MikeSmith>
yeah so I mean that way I don't have to write my own submit thing

[19:43:13.0000] <Hixie>
ah right

[19:44:04.0000] <MikeSmith>
which in this case means, less code to get reviewed, and so less for zcorpan to find problems with :-)

[19:46:17.0000] <MikeSmith>
I find that when things I code need to go to zcorpan for review, minimizing the review surface causes me less embarrassment and time

[19:47:27.0000] <Hixie>
that's pretty much a given for anyone :-)

[21:24:38.0000] <zewt>
i really have to wonder who designs the twitter input UI and goes home at the end of the day with a firm good-day-of-work nod

[21:25:07.0000] <zewt>
re: press down, go to next line. press down again, get a "David Goodman" dropdown because the cursor is on the word "good"

[21:59:59.0000] <SamB>
zewt: what is this "line" of which you speak

[22:00:58.0000] <zewt>
text input box

[22:02:49.0000] <SamB>
/me does not think of twitter input as *having* lines

[01:53:47.0000] <annevk>
Domenic: I think each element having its own class is a requirement if we start exposing constructors, otherwise adding new features to existing elements becomes problematic

[03:23:38.0000] <aleray>
hi, I have a webpage with several articles. Each article is translated in several languages. what is a sensible markup in this case?

[03:25:05.0000] <aleray>
example: http://dpaste.com/0HFDBMR/

[03:31:52.0000] <annevk>
aleray: use an <article> for each translation with lang=nl and such

[03:32:15.0000] <annevk>
aleray: or maybe <section> for each translation,

[03:32:28.0000] <annevk>
aleray: depends a bit on size and such I guess, not sure there's a hard and fast rule

[03:50:21.0000] <aleray>
annevk, you mean like this? http://dpaste.com/14HHXYD/

[04:14:42.0000] <annevk>
aleray: not sure I'd nest <article> like that, it's intended for comments

[04:40:49.0000] <annevk>
JakeA: you around?

[04:53:00.0000] <annevk>
What's a good name for Request and URL combined?

[04:53:23.0000] <annevk>
RequestInfo?

[05:33:20.0000] <tobie>
annevk: what do you mean by combined?

[05:33:50.0000] <annevk>
tobie: see http://fetch.spec.whatwg.org/#fetch-api

[05:36:12.0000] <tobie>
I was going to ask if you were looking for (Request or SVStr)

[05:38:33.0000] <annevk>
tobie: yeah, a name for that :-)

[05:43:47.0000] <tobie>
annevk: do you see it more as (Obj or primitive) or as RequestParam?

[05:44:29.0000] <annevk>
Above I used a single name as fetch() also takes it as argument

[05:44:54.0000] <annevk>
If I have repeat usage of an or'd item I try to make a name for it

[05:45:27.0000] <tobie>
Right. Which makes sense.

[05:45:46.0000] <tobie>
Unrelated, but doesn't the same pattern also make sense for URL?

[05:50:49.0000] <annevk>
tobie: what do you mean?

[05:52:14.0000] <tobie>
That new URL() accepts both a SV string and an URL.

[05:55:43.0000] <annevk>
tobie: oh, URL stringifies

[05:56:17.0000] <tobie>
annevk: Oh.

[05:56:35.0000] <tobie>
annevk: where (how?) is that behaviour described.

[05:56:53.0000] <JakeA>
annevk: sorry, recording a 15 min video took all morning. Catching up…

[05:56:57.0000] <annevk>
tobie: "stringifier attribute ScalarValueString href;"

[05:57:11.0000] <tobie>
duh

[05:58:48.0000] <tobie>
annevk: Would something like GenericRequest capture the intention (it's ugly, though)

[05:59:37.0000] <JakeA>
annevk: I've always called it just "request", one of the first step is 'upgrading' strings to responses, so haven't seen it as an issue

[06:02:33.0000] <annevk>
JakeA: the issue is that Request is a thing :-)

[06:02:47.0000] <annevk>
JakeA: in an hour or so from now I'd like to talk about body/headers if that works

[06:02:59.0000] <annevk>
tobie: yeah, not really better than Info

[06:03:00.0000] <JakeA>
annevk: Yeah, I'm free now

[06:03:14.0000] <annevk>
JakeA: yeah sorry, going out to get a snack

[06:03:37.0000] <JakeA>
annevk: no worries, got inbox to churn though

[06:28:23.0000] <tobie>
annevk: what's your plan for headers? More towards a dictionary or raw text with methods like for xhr?

[06:50:47.0000] <annevk>
ait back

[06:50:55.0000] <annevk>
tobie: I have no idea

[06:51:02.0000] <annevk>
tobie: I was hoping other people had ideas, JakeA?

[06:51:58.0000] <tobie>
worth looking at what JS libs are doing here imho.

[06:52:07.0000] <jgraham>
Hmm, you can have multiple headers with the same name

[06:52:16.0000] <jgraham>
So a dictionary doesn't quite work

[06:52:38.0000] <zewt>
order might matter in some cases too

[06:53:02.0000] <jgraham>
The standard python thing seems to be a "multidict" which stores a list, but makes access to one of the first or last value simple

[06:53:45.0000] <jgraham>
http://docs.webob.org/en/latest/reference.html#id3

[06:54:13.0000] <zewt>
xhr just flattens multiple values for a header, not sure if that's bad somehow

[06:54:14.0000] <tobie>
you can return an array in those cases (or in all cases)

[06:54:37.0000] <jgraham>
http://docs.webob.org/en/latest/#multidict

[06:54:45.0000] <zewt>
returning an array is annoying when you usually only have one value (and only sometimes returning an array is *really* annoying)

[06:54:56.0000] <jgraham>
So returning an array in some cases is confusing and returning an array in all cases is user-hostile

[06:55:09.0000] <JakeA>
agreed

[06:55:36.0000] <JakeA>
made a "query string to dict" method that always had arrays as keys. It was shite.

[06:55:51.0000] <zewt>
(a bigger problem with URL query APIs; I hate the ones that return arrays, making my life harder for some other 1% of users)

[06:56:16.0000] <jgraham>
The 1% that use radio buttons?

[06:56:33.0000] <jgraham>
Actually I guess that's wrong

[06:56:34.0000] <annevk>
jgraham: multiple headers with the same name is the same as multiple values for a single name

[06:56:49.0000] <annevk>
zewt: order only matters on the response and shouldn't in theory

[06:56:59.0000] <jgraham>
annevk: Yeah, so?

[06:57:04.0000] <jgraham>
You still have to support it

[06:57:15.0000] <annevk>
jgraham: no, you can just expose it as a single name with multiple values

[06:57:20.0000] <JakeA>
http://nodejs.org/api/http.html#http_message_headers node just uses a dict

[06:57:28.0000] <jgraham>
You mean comma seperated?

[06:57:40.0000] <jgraham>
I thought the whole point was to avoid the user having to parse things

[06:57:41.0000] <annevk>
jgraham: that's multiple values

[06:57:52.0000] <annevk>
jgraham: but it could be an array

[06:58:02.0000] <zewt>
jgraham: you don't have to support it if it's a new API

[06:58:27.0000] <jgraham>
annevk: 13:55 < jgraham> So returning an array in some cases is confusing and returning an array in all cases is user-hostile

[06:59:25.0000] <JakeA>
.get() .getAll()?

[06:59:27.0000] <JakeA>
:(

[06:59:39.0000] <jgraham>
Something like that

[06:59:51.0000] <jgraham>
I would be fine if [] did .get()

[07:00:25.0000] <zewt>
actually, it should probably just match URL, since it seems like an identical problem

[07:00:27.0000] <annevk>
what's actually wrong with having to parse the values?

[07:00:41.0000] <zewt>
(URL queries, that is)

[07:00:46.0000] <annevk>
splitting on "," if you expect multiple values seems not that bad

[07:01:02.0000] <jgraham>
It seems terrible

[07:01:26.0000] <jgraham>
You have to check every time to see if you have a "," in the value and if so split it

[07:01:27.0000] <zewt>
(splitting on "," then stripping spaces)

[07:01:43.0000] <jgraham>
Otherwise you get a bogus value

[07:02:22.0000] <annevk>
jgraham: euhm no? mostly the header name indicates it only has a single value

[07:02:28.0000] <JakeA>
headers[headerName], vs headers.all which is an array of arrays [[key, val], [key, val], [key, val]]

[07:02:33.0000] <zewt>
i don't know the use cases, but if a dumb server sends "Content-Type: text/plain" twice in a row because someone did something dumb in PHP, and my code assumes only one value, I'd rather get one arbitrary header value (even if they're different) than "text/plain, text/plain"

[07:02:40.0000] <JakeA>
You'd use .all if you care about the ordering

[07:02:47.0000] <JakeA>
& multiple values

[07:02:56.0000] <zewt>
JakeA: http://url.spec.whatwg.org/#urlsearchparams

[07:02:59.0000] <JakeA>
headers[headerName] is comma joined

[07:03:03.0000] <annevk>
zewt: at that point you'd have a security bug in your code

[07:03:15.0000] <zewt>
annevk: unconvincing

[07:04:11.0000] <jgraham>
annevk: Having a bug in your code because you expect one value and get more than one seems much more likely than having a bug when the API consistently returns data in the same format for a given call

[07:04:24.0000] <JakeA>
URLSearchParams works for me. As jgraham says, headers[val] should be the same as headers.get(val)

[07:04:58.0000] <tobie>
+1 for consistency with URLSearchParams

[07:05:26.0000] <tobie>
getAll returns an array?

[07:06:08.0000] <jgraham>
Yeah

[07:06:44.0000] <tobie>
and so get(foo) === getAll(foo)[0]

[07:06:54.0000] <annevk>
I wonder if we can make that generic

[07:07:00.0000] <JakeA>
I'm happy with that

[07:07:11.0000] <annevk>
But what do we want for the construction side?

[07:07:16.0000] <JakeA>
Fits nicely with cache.match & matchAll

[07:07:24.0000] <annevk>
new Request(url, { headers: XXX })

[07:07:24.0000] <zewt>
annevk: seems like the only thing query-specific right now is the stringifier

[07:07:34.0000] <jgraham>
Yeah, I don't really care if get returns [0] or [-1], so consistency with URLSearchParams seems ideal

[07:07:35.0000] <annevk>
zewt: and the parser

[07:07:54.0000] <JakeA>
annevk: obj. If you want to do fancy shit, you construct then headers.append

[07:07:59.0000] <annevk>
URLSearchParams could be a subclass perhaps

[07:08:12.0000] <annevk>
JakeA: I want Request to be immutable

[07:08:29.0000] <annevk>
JakeA: but it could be obj or WhateverWeCallTheHeaderThing

[07:08:33.0000] <jgraham>
annevk: .append to the URLSearchParams-like object I assume

[07:08:54.0000] <annevk>
Actually, URLSearchParams-like also sucks for keeping Request immutable

[07:08:57.0000] <JakeA>
hmm, I don't think it should be immutable

[07:08:57.0000] <tobie>
setter should prop accept a vanilla obj with arrays or strings

[07:09:06.0000] <zewt>
annevk: it'd just need an immutable base class

[07:09:22.0000] <annevk>
sounds like a lot of complexity for some headers

[07:09:45.0000] <JakeA>
annevk: it'd be great to be able to modify requests as they fly through the fetch event (add/remove headers)

[07:09:47.0000] <zewt>
sounds like a common pattern for data structures

[07:10:04.0000] <JakeA>
annevk: Without explicitly respondWithing

[07:10:10.0000] <annevk>
JakeA: Could you clarify the Cache API that it's intended to be available on the main thread in due course and is origin-bound security-wise? That is, the main thread has access to the same data?

[07:10:51.0000] <JakeA>
annevk: Clarify it in the spec?

[07:10:57.0000] <annevk>
JakeA: yes

[07:11:21.0000] <JakeA>
sure, will make a ticket now to remind me

[07:16:44.0000] <JakeA>
annevk: is this unpossible? https://gist.github.com/jakearchibald/9f556ce0eafc47ba3d6e

[07:19:04.0000] <annevk>
JakeA: at the moment, yes

[07:20:12.0000] <annevk>
JakeA: I had assumed we'd not want pages to manipulate the underlying requests so easily; also, it's not entirely clear to me how that would work if the hook for that is that SW returns null

[07:21:15.0000] <JakeA>
but isn't the request object modified, or is the serviceworker given a copy?

[07:22:41.0000] <tobie>
JakeA: if you want to keep immutability, what you want is an easy way to duplicate a request with a few modifications.

[07:23:02.0000] <jgraham>
Why do you want immutability?

[07:23:08.0000] <JakeA>
^- that

[07:23:50.0000] <Ms2ger>
FP

[07:24:46.0000] <jgraham>
Ms2ger: If you were hoping for first post here, you a a bit late

[07:25:03.0000] <Ms2ger>
Pah

[07:25:09.0000] <jgraham>
If you were hoping that javascript was a functional programming language, you're a bit deluded

[07:29:27.0000] <annevk>
JakeA: I was assuming we'd be passing copies around due to threading

[07:30:47.0000] <tobie>
seems sensible to design with immutability and later turn mutable if safe to do so, rather than the opposite.

[07:31:52.0000] <jgraham>
It seems more sensible to ask some implementors about whether immutability is a requirement rather than design an API with artificial limitations

[07:32:17.0000] <JakeA>
One use-case is resource priorities, being able to tag requests as they come through the fetch event without having to taking over handling the whole request

[07:32:30.0000] <annevk>
It's not a requirement of course. You can always make it work somehow.

[07:33:17.0000] <annevk>
But it's not as simple as you make it seem

[07:33:59.0000] <annevk>
Requests originating from the page are more powerful than we'd like fetch() to handle. But fetch() could still make a restricted copy of course.

[07:34:13.0000] <jgraham>
Right, but I'm not sure I understand where you think that an immutable object would help. Is there a case when you pass the object into another thread and it is still accessible in both threads? If so, how expensive is a copy?

[07:35:08.0000] <jgraham>
And could you solve it using a COW design? If so, how hard is that to implement?

[07:35:46.0000] <annevk>
COW?

[07:35:52.0000] <jgraham>
Copy On Write

[07:36:08.0000] <jgraham>
i.e. only make a copy if a mutation occurs

[07:41:25.0000] <annevk>
jgraham: the problem with mutable is that we have both UA-created Request objects and content-created Request objects

[07:41:39.0000] <annevk>
jgraham: the former are more involved

[07:41:49.0000] <JakeA>
Or, give SW a copy, then read bits from it if the SW doesn't call respondWith

[07:42:05.0000] <annevk>
jgraham: if we allow arbitrary manipulation, there's a whole lot more to reason about

[07:42:52.0000] <annevk>
JakeA: I guess I would have SW return the request rather than null if we go down that route

[07:43:32.0000] <jgraham>
annevk: Well the question is whether there are use cases for manipulating the various types of request

[07:44:09.0000] <JakeA>
annevk: That works

[07:44:12.0000] <jgraham>
If there aren't any for UA-generated Request objects, they could be immutable. But JakeA seems to have a better idea of the use cases here

[07:45:36.0000] <jgraham>
Certainly for user-generated Requests, being able to manipulate the request before passing it to fetch seems very useful

[07:46:21.0000] <JakeA>
jgraham: mostly around resource priorities, giving particular request a higher priority without having to handle the request entirely

[07:46:40.0000] <annevk>
jgraham: the only case so far was about a UA-generated Request object

[07:48:40.0000] <annevk>
JakeA: if we give access to such headers, set by the UA, what are the implications for privacy?

[07:49:03.0000] <annevk>
JakeA: I hadn't actually really thought about exposing Request objects in general for all requests the page makes

[07:49:23.0000] <JakeA>
annevk: I thought the sensitive headers (such as cookies) were applied after the call into SW

[07:49:25.0000] <annevk>
JakeA: maybe there's not much badness apart from cookies, which we'll make sure to hide

[07:50:30.0000] <JakeA>
(I've caught a crazy one https://www.facebook.com/occupyhtml5/posts/1475786125972047)

[07:50:54.0000] <annevk>
JakeA: currently cookies are set before, at the same time the Authorization header is built based on URL credentials

[07:51:06.0000] <annevk>
JakeA: it seems like SW would want access to same-origin login data

[07:51:23.0000] <JakeA>
annevk: but not http-only cookies

[07:51:30.0000] <annevk>
JakeA: see http://fetch.spec.whatwg.org/#concept-http-fetch

[07:51:45.0000] <annevk>
JakeA: cookies in general are not exposed so I guess they're not an issue

[07:52:06.0000] <JakeA>
annevk: https://github.com/slightlyoff/ServiceWorker/issues/234 there's also if-none-match and if-modified-since

[07:53:35.0000] <annevk>
JakeA: do you want to manipulate <body> too?

[07:53:43.0000] <annevk>
JakeA: given http://fetch.spec.whatwg.org/#request what fields should be mutable?

[08:00:51.0000] <JakeA>
annevk: anything that wouldn't cause a security issue. Looking now…

[08:08:21.0000] <JakeA>
annevk: headers, body, mode, omitCredentialsMode?

[08:08:42.0000] <annevk>
JakeA: so if you set headers it would be a security issue for tainted cross-origin requests

[08:09:46.0000] <annevk>
JakeA: and changing the mode as a side-effect of setting a header seems very sketchy

[08:10:02.0000] <annevk>
JakeA: we could throw if the mode is not CORS or same-origin maybe

[08:10:22.0000] <annevk>
JakeA: and then set a flag to not allow mode to be set after you did such a thing

[08:10:41.0000] <annevk>
JakeA: but suddenly you're looking at something that's very hard to explain and reason about

[08:11:40.0000] <JakeA>
annevk: we're already going to set the mode based one headers in the constructors, aren't we?

[08:12:26.0000] <JakeA>
annevk: we can't allow a GET to another origin with arbitrary headers without a preflight

[08:13:00.0000] <annevk>
JakeA: my idea was for the constructor to have mode default to CORS

[08:13:16.0000] <annevk>
JakeA: and throw if you have headers and mode is not CORS or same-origin

[08:14:14.0000] <JakeA>
annevk: I still want to enable (although it may come later) making an image-like request, that'd be non-cors to other origins

[08:14:26.0000] <JakeA>
annevk: maybe we throw when setting headers, depending on mode

[08:15:58.0000] <JakeA>
annevk: …that would be easy as part of the constructor, as mode would be set before headers

[08:16:36.0000] <annevk>
JakeA: you set them at the same time

[08:16:58.0000] <annevk>
new Request(..., { headers: ..., mode:"tainted cross-origin" })

[08:17:39.0000] <JakeA>
annevk: Yeah, but the algorithm would be "set mode", "set each header, but if a header clashes with the mode, throw"

[08:17:55.0000] <JakeA>
or vice versa, I guess

[08:18:07.0000] <annevk>
fair

[08:18:48.0000] <JakeA>
the same thing would work with mutating, you'd have to lock down mode before adding headers that require cors. But I agree that cors is a sensible default for the constructor

[08:19:24.0000] <annevk>
JakeA: when would you want to mutate mode?

[08:20:46.0000] <JakeA>
annevk: I can't think of a reason why not

[08:24:30.0000] <tobie>
what it UA-generated Request objects were frozen, but constructed ones not?

[08:25:52.0000] <JakeA>
tobie: what's the benefit?

[08:25:55.0000] <annevk>
"unexplained magic"

[08:26:04.0000] <annevk>
(but there'll be some of that anyway)

[08:26:28.0000] <annevk>
JakeA: should mutating mode throw if there's headers already set?

[08:26:47.0000] <annevk>
JakeA: how do we know headers are set by the author vs the UA?

[08:26:57.0000] <JakeA>
annevk: only if the headers are "illegal" given the new mode

[08:26:59.0000] <annevk>
JakeA: such a gigantic mess

[08:30:05.0000] <JakeA>
annevk: where do we need to know which headers were set by the author vs UA?

[08:30:41.0000] <tobie>
JakeA: makes it easier to reason about?

[08:30:43.0000] <annevk>
JakeA: event.request; which headers can I read, which can I set? can I change .mode?

[08:31:29.0000] <tobie>
use case for changing mode in that case?

[08:31:34.0000] <annevk>
JakeA: if a UA has added Last-Event-ID, that's fine, if you do it, it's not

[08:32:10.0000] <annevk>
JakeA: that is, UA adding Last-Event-ID for EventSource() does not cause a preflight to happen

[08:34:51.0000] <JakeA>
annevk: I see, so setting mode to cors & back would throw in that case

[08:34:54.0000] <JakeA>
fair

[08:35:32.0000] <annevk>
but how do we distinguish? do we keep the UA headers and author headers in a distinct map?

[08:36:12.0000] <JakeA>
annevk: Does this problem go away if we make mode read-only, but not headers?

[08:36:30.0000] <annevk>
JakeA: not really

[08:37:12.0000] <annevk>
JakeA: hmm, maybe as soon as you touch headers mode becomes cors-with-preflight and immutable

[08:38:01.0000] <JakeA>
annevk: I think if the request is not-cors, and you mess with one of the non-simple methods, it throws or steps up to CORS

[08:39:23.0000] <JakeA>
stepping up makes more sense I guess

[08:40:03.0000] <annevk>
Actually, setting mode to same-origin should be fine, it's mostly tainted cross-origin that's dangerous

[08:41:03.0000] <annevk>
JakeA: https://etherpad.mozilla.org/Request-object-design

[08:41:10.0000] <JakeA>
annevk: what's the attack (sorry, I'm running out of brain)

[08:42:11.0000] <JakeA>
annevk: do we need to filter headers or just set the restricted ones after the SW?

[08:42:21.0000] <annevk>
JakeA: you cannot currently send custom headers to random servers

[08:43:06.0000] <JakeA>
annevk: right, so setting those headers would change mode, trying to change mode back would throw. It might be weird in the eventsource case you mentioned though

[08:46:04.0000] <jwatt>
is there any work on a DOM for CSS gradients?

[08:46:54.0000] <jgraham>
TabAtkins: ^

[08:57:24.0000] <annevk>
JakeA: so the main problem with this is that you have now manipulated the request, but the request is still identifying itself as coming from the page

[09:13:18.0000] <annevk>
JakeA: it would be great if some security guys could look at that etherpad

[09:14:17.0000] <JakeA>
annevk: I'll deploy the mikewest

[09:14:40.0000] <annevk>
JakeA: I'll try to fix the draft a bit tomorrow

[09:22:55.0000] <JakeA>
annevk: when you say restricted header names, do you mean cookie, if-none-match etc? Or do they just get silently overwritten?

[09:23:28.0000] <annevk>
JakeA: http://fetch.spec.whatwg.org/#concept-forbidden-author-header-names

[09:23:39.0000] <annevk>
JakeA: if-none-match is typically fair game

[09:25:13.0000] <JakeA>
annevk: reading it may expose the response, especially the response is limited to a few values

[09:25:44.0000] <JakeA>
annevk: eg, "yes", "no". You could know the two etags that produces & know the response from the if-none-match header

[09:25:47.0000] <annevk>
so it's only fair game if mode != tainted

[09:26:38.0000] <JakeA>
annevk: yeah, that sounds right

[09:26:40.0000] <annevk>
JakeA: it's a bit unclear how we're layering headers, it might be that some of these need to move to the actual HTTP *network* fetch

[09:26:51.0000] <annevk>
JakeA: setting them by the UA that is

[09:27:10.0000] <annevk>
JakeA: although I guess if-none-match you want, since you can use it on your own cache too

[10:17:57.0000] <JonathanNeal>
If you’re available, would you ask IE about using external SVGs with <use>? https://twitter.com/hashtag/AskIE?src=hash http://css-tricks.com/svg-use-external-source/

[10:29:18.0000] <TabAtkins>
jwatt: No; we're planning on a real OM for CSS (not string-based) in the future, but we're waiting for JS Value Objects.

[10:44:42.0000] <TabAtkins>
Domenic: Yeah, I think that's the plan.  Existing places where multiple tags have the same interface (like HTMLHeadingElement) are inconvenient and weird.

[10:51:36.0000] <annevk>
JonathanNeal: <use> is pretty bad iirc

[10:51:41.0000] <annevk>
JonathanNeal: seems better to not have it

[10:54:26.0000] <JonathanNeal>
annevk: It’s a useful element with a bad markup pattern. It’s useful because you can create an SVG spritemap, and because you can style any instance of a sprite like folks do with icon fonts.

[10:55:00.0000] <TabAtkins>
annevk: <use> is much less bad now that we've nuked the instance tree.

[10:55:54.0000] <Hixie>
annevk: is the fetch api going to integrate with the Loader stuff at all?

[10:57:31.0000] <Hixie>
annevk: also, are there any code samples for this api? that's always a good way to sanity check an API

[10:58:34.0000] <annevk>
Hixie: I think JakeA has some examples, I should probably make some more

[10:59:35.0000] <annevk>
Hixie: afaict Loader is only for JS modules, I wish those guys talked to us sooner about the whole thing

[10:59:48.0000] <annevk>
Hixie: I didn't realize how generic that would be

[11:00:25.0000] <Hixie>
no the thread in es-discuss is very much indicating that the expectation is that all fetches are expected to go through it, as far as i can tell

[11:00:55.0000] <Hixie>
how about the dependency mechanism, is it intended that you be able to block a fetch on another or anything like that?

[11:11:32.0000] <jwatt>
is there a way for JS to get the "concrete object size"?

[11:12:07.0000] <jwatt>
TabAtkins: ok, thanks

[11:14:50.0000] <Hixie>
jorendorff: yt?

[11:15:03.0000] <jorendorff>
Hixie: here

[11:15:58.0000] <Hixie>
jorendorff: so i think i'm gonna try to write a strawman that shows how the ES6 module stuff could be integrated with all the other dependency stuff the web platform has coming down the pipe

[11:16:11.0000] <jorendorff>
great!

[11:16:13.0000] <Hixie>
jorendorff: but i'm having great difficulty understanding what ES6 actually says

[11:16:21.0000] <jorendorff>
understandable

[11:16:27.0000] <Hixie>
jorendorff: i spoke to arv and he suggested you as one of the best people to brief me on this

[11:16:31.0000] <Hixie>
jorendorff: is that something you could do?

[11:16:34.0000] <jorendorff>
happy to

[11:16:37.0000] <Hixie>
either in person or irc or e-mail or whatever

[11:16:42.0000] <Hixie>
(i'm in mtv if you want to do it in person)

[11:16:56.0000] <jorendorff>
yeah, i'm in Tennessee so can't do it in person immediately

[11:17:04.0000] <jorendorff>
irc's fine, email probably better

[11:17:15.0000] <jorendorff>
let me send you email to begin

[11:17:20.0000] <Hixie>
you are awesome

[11:17:22.0000] <Hixie>
thanks!

[11:17:23.0000] <jorendorff>
will do in the next 3 hours

[11:17:27.0000] <Hixie>
ian⊙hc

[11:17:31.0000] <jorendorff>
ok

[11:17:32.0000] <Hixie>
fantastic

[11:50:31.0000] <TabAtkins>
jwatt: There is no JS way to get the concrete object size, no.

[11:51:42.0000] <jwatt>
TabAtkins: I was asking because I was looking into whether content can make a live gradient editor for gradients with percentage value stops

[11:52:02.0000] <TabAtkins>
The information necessary for that is all accessible in the page.

[11:53:56.0000] <TabAtkins>
jwatt: Namely, the concrete object size of a gradient background will just be the background-size, which is either fixed or is the size of one of the layout boxes of the element.

[11:54:16.0000] <jwatt>
you need the gradient box (which is the concrete object size) to resolve how far along the gradient line px valued stop are

[11:54:47.0000] <jwatt>
the question is what is the gradient box for a given element

[11:55:26.0000] <TabAtkins>
Yes, which is calculable as I just described.

[11:55:57.0000] <jwatt>
how do you get the background-size?

[11:56:09.0000] <TabAtkins>
By asking for the background-size property?

[11:56:26.0000] <TabAtkins>
And if it's a keyword value, calculating the correct box from the element, based on width/padding/etc

[11:56:50.0000] <jwatt>
that could get pretty complicated

[11:57:10.0000] <TabAtkins>
Yeah, it's not trivial, but neither is it difficult.

[11:57:27.0000] <jwatt>
I'm not even sure if the background-size is the right thing

[11:57:36.0000] <TabAtkins>
I'm sure. ^^_

[11:58:00.0000] <jwatt>
so it's always sure it's the same as the concrete object size?

[11:58:15.0000] <TabAtkins>
For an image with no intrinsic dimensions, yes.

[11:58:26.0000] <jwatt>
an image?

[11:58:33.0000] <jwatt>
what about a div

[12:03:26.0000] <jwatt>
calculating the concrete object size of an element may just be a case of "calculate the correct box from the element, based on width/padding/etc"

[12:04:37.0000] <jwatt>
but in the general case that means basically implementing an entire CSS layout engine taking into account box-sizing, floats, absolute positioning, flex box, etc., etc.

[12:05:31.0000] <jwatt>
and obviously taking into account siblings, ancestors, etc., since they can all impact the concrete size of the object

[12:05:58.0000] <jwatt>
unless I'm missing something

[12:06:18.0000] <jwatt>
so I'd take issue with the statement "neither is it difficult" :)

[12:08:04.0000] <jwatt>
/me will be back later

[12:17:19.0000] <TabAtkins>
jwatt: You're using terms in ways that don't make sense.

[12:17:44.0000] <TabAtkins>
An image like a gradient has a concrete object size calculated for it.

[12:19:27.0000] <TabAtkins>
The inputs to the algo are always the intrinsic dimensions (none, for gradients) and the specified size (for background gradients, the background positioning area, which is calculable from 'background-size' and other properties as needed).

[13:35:21.0000] <SamB>
TabAtkins: so how do you calculate it in JS then?

[13:35:54.0000] <TabAtkins>
The way the spec says to, which uses only information accessible via JS.

[13:36:26.0000] <SamB>
(and how long until some other spec complicates it?)

[13:37:13.0000] <TabAtkins>
It might get more complicated in the future, yes.

[13:42:17.0000] <smaug____>
annevk: why does Request in Window context need to have isSynchronous ?

[13:44:04.0000] <smaug____>
annevk: in other words, I hope we hide the possibility for synchronousness in the main-thread

[14:30:25.0000] <jorendorff>
Hixie: i kind of suck at this

[14:30:31.0000] <jorendorff>
still working at it

[14:31:55.0000] <Hixie>
dude, i'm so thankful that you're doing it at all, you've no idea :-)


2014-05-30
[17:45:30.0000] <Domenic>
Couldn't take the D3E thread anymore, had to say something

[18:12:00.0000] <TabAtkins>
Domenic: You said what we were all thinking (but too jaded to say).

[18:57:09.0000] <Hixie>
Domenic: there's actually three kinds of features: those that are implemented, those that are not but should be, and those that are not but should not be.

[18:57:31.0000] <Hixie>
specs must include the former, should include the middle one, and must not include the last one.

[18:57:57.0000] <SamB>
Hixie: so, um, which category was MNG in before they removed it from mozilla?

[18:58:39.0000] <Hixie>
the former.

[18:58:51.0000] <Hixie>
(assuming we pretend that only mozilla existed)

[18:59:30.0000] <SamB>
ah, so "implemented" is a bit more complicated than a boolean ;-P

[18:59:35.0000] <Hixie>
nope

[18:59:43.0000] <Hixie>
showModalDialog() is in that state now

[18:59:48.0000] <Hixie>
browsers want to drop it

[19:00:04.0000] <Hixie>
but the specs have to have it

[19:00:25.0000] <Hixie>
because otherwise there's no definition for how other features should work in conjunction with it while it's implemented

[19:01:28.0000] <SamB>
hmm, so what category is MNG in *now* I wonder ... or, perhaps more importantly, JNG

[19:01:36.0000] <Hixie>
one of the last two

[19:01:46.0000] <SamB>
yes I know that ;-)

[19:01:48.0000] <Hixie>
deciding which of the last two something is in is a big part of teh job of a spec writer

[19:03:35.0000] <SamB>
Hmm, is GIF adequately specced?

[19:03:58.0000] <Hixie>
no

[19:04:04.0000] <SamB>
thought not

[19:04:08.0000] <Hixie>
http://wiki.whatwg.org/wiki/GIF

[19:06:21.0000] <SamB>
hmm, it seems unlikely to be terribly important to include fractint's extensions in spec, except perhaps in order to ensure that they are properly ignored ...

[19:06:53.0000] <SamB>
I mean, fractint already knows how to handle them, and nobody else is expected to extract the fractal generation parameters from its GIF files

[19:11:38.0000] <caitp>
you know what would be cool? a spec for nodes on a network to negotiate how to interpret, manipulate and render data from each other

[19:13:19.0000] <caitp>
and you could test it by teaching two computers to talk to each other using random bit patterns

[19:14:14.0000] <SamB>
hmm, it says here that there are notes about the extension block structure in loadfile.c ...

[19:35:10.0000] <SamB>
/me adds more info about fractint's extensions to the page despite how obvious it is that browser implementors don't need to do anything special with fractint; it suffices to simply stay away from its clearly-marked extension blocks ...

[01:05:31.0000] <annevk>
Headers can be simpler than URLSearchParams, there's no need to preserve ordering per HTTP

[01:05:59.0000] <annevk>
I don't think we need to support bogus servers in the API

[01:06:59.0000] <annevk>
jungkees: when I click any of the links in https://dvcs.w3.org/hg/xhr there's an error

[01:07:21.0000] <annevk>
jungkees: did you have a look at https://etherpad.mozilla.org/Request-object-design and the discussion we had on Request objects yesterday?

[01:07:43.0000] <jungkees>
no I didn't

[01:07:56.0000] <jungkees>
https://dvcs.w3.org/hg/xhr seems Ok to me?

[01:08:11.0000] <annevk>
jungkees: e.g. https://dvcs.w3.org/hg/xhr/rev/2654f2bc5a24 returns a 5xx

[01:08:26.0000] <annevk>
MikeSmith: ^^

[01:09:26.0000] <jungkees>
annevk: it's 200 for me

[01:11:24.0000] <annevk>
jungkees: oh weird, maybe a mirror issue

[01:11:41.0000] <jungkees>
annevk: I guess so

[01:11:58.0000] <jungkees>
annevk: https://github.com/slightlyoff/ServiceWorker/issues/242#issuecomment-44620935

[01:12:15.0000] <jungkees>
annevk: still need discussion about the hook

[01:15:11.0000] <annevk>
jungkees: yes, also, JakeA brought up yesterday that he wants to do this: https://gist.github.com/jakearchibald/9f556ce0eafc47ba3d6e

[01:15:41.0000] <annevk>
jungkees: that seems reasonable, so rather than returning null, I think you want to return the request associated with the Request object

[01:16:04.0000] <annevk>
jungkees: note, I don't care for the Request object, but it's underlying request is what I'd like to see back

[01:17:29.0000] <annevk>
jungkees: now, given this setup, the event.default() case is only marginally different. That should return the associated request, as well as a hook that lets me notify the SW when the promise it returns can be resolved

[01:18:43.0000] <jungkees>
annevk: alright, will revisit it from SW point of view too and get back

[01:19:27.0000] <annevk>
jungkees: as for waiting for Fetch to do something

[01:20:25.0000] <MikeSmith>
annevk: jungkees: I just now restarted the web/hg server on dvcs.w3.org  so there should be no more 500s for a while

[01:20:26.0000] <annevk>
jungkees: you could just say "Wait for Fetch to invoke the "handle default response" callback. Then wait for promise X. Then return the value it's resolved/rejected with.

[01:20:48.0000] <MikeSmith>
but I am seriously going to just drop a bomb on that whole server

[01:21:05.0000] <MikeSmith>
nobody should be hosting anything in dvcs.w3.org any more

[01:21:27.0000] <MikeSmith>
jungkees: I recommend moving the repo to github

[01:21:59.0000] <jungkees>
annevk: you mean from within default() method?

[01:22:14.0000] <jungkees>
MikeSmith: will talk with the co-editors

[01:22:31.0000] <jungkees>
MikeSmith: I also prefer to do so

[01:23:14.0000] <JakeA>
annevk: I'm heading on a cheap holiday to Turkey, I might be dataless, apologies for slow replies until Monday evening

[01:23:22.0000] <annevk>
jungkees: so handle "handle a fetch" dispatches events (synchronously from the perspective of that algorithm), listeners for those events can invoke default()

[01:23:40.0000] <annevk>
JakeA: no worries, I'll try to sketch up a HeaderMap and such in the meantime, enjoy

[01:24:29.0000] <jungkees>
JakeA: enjoy the trip

[01:24:34.0000] <annevk>
jungkees: probably just before those handlers are invoked you want to set a flag "fine to invoke default() flag" that the algorithm for default() uses

[01:25:27.0000] <annevk>
jungkees: and then invoking default() itself sets some variable that can be used to resolve/reject the promise it just returned

[01:25:50.0000] <annevk>
jungkees: then if default() is invoked again, it checks that variable and if its set, it simply rejects

[01:30:13.0000] <annevk>
jungkees: "handle a fetch" is a weirder asynchronous version of event-dispatch basically

[01:30:32.0000] <jungkees>
annevk: before "Wait for Fetch to invoke the "handle default response" callback from within the default algorithm, the "handle a fetch" which invoked the listerner for fectch event is already returned with _default_ you say, right?

[01:31:31.0000] <annevk>
jungkees: you'd return _default_ + callback, then that callback is what gives me the eventual response

[01:31:54.0000] <annevk>
jungkees: callback is essentially "handle a fetch" minus some of the steps

[01:32:31.0000] <annevk>
jungkees: the callback is me giving you the response, and you handing back the response that results from the promise dance that it generates

[01:32:36.0000] <jungkees>
annevk: in which part of the "handle a fetch" should respondWith() run on?

[01:33:08.0000] <annevk>
jungkees: respondWith should use the same "default can be invoked flag" (should prolly have a more generic name)

[01:33:30.0000] <annevk>
jungkees: respondWith also then sets a variable for its own promise

[01:33:52.0000] <annevk>
jungkees: typically "handle a fetch" will return the result of _that_ promise

[01:34:29.0000] <jungkees>
annevk: I see. so I might have to put together the algorithm again per the discussion

[01:34:30.0000] <annevk>
jungkees: in the case of default() "handle a fetch" will return a callback to resolve default() return the result of respondWith()'s promise as part of that

[01:34:45.0000] <annevk>
jungkees: yeah I don't quite understand how you guys imagined the current setup to work

[01:35:28.0000] <jungkees>
annevk: as I asked, default() re-enters as its own request doesn't make sense?

[01:35:49.0000] <annevk>
jungkees: I don't see how

[01:36:46.0000] <jungkees>
annevk: it's nothing but an independent fetch() call with a specially conditioned behavior. no?

[01:36:50.0000] <annevk>
jungkees: the flow is Fetch -> SW -> default() -> asks Fetch for a Response -> Fetch -> gives SW a response and wants one back

[01:37:53.0000] <annevk>
jungkees: hmm

[01:38:04.0000] <annevk>
jungkees: maybe that would work

[01:38:12.0000] <jungkees>
annvek: what e.default() is doing is just to get a response out of e.request

[01:38:34.0000] <jungkees>
annevk: and make this algorithm simpler

[01:39:20.0000] <annevk>
jungkees: okay, so rather than you returning to Fetch when someone invokes default(), you invoke fetch instead

[01:39:35.0000] <jungkees>
annevk: that's my call

[01:39:41.0000] <annevk>
jungkees: loosely based on how fetch() works, but

[01:39:55.0000] <annevk>
jungkees: "that's my idea" is what you mean I think; I think I agree that's a good idea

[01:40:01.0000] <annevk>
:-)

[01:40:19.0000] <jungkees>
annevk: :-)

[01:40:29.0000] <jungkees>
annevk: anyhow, can you think about it?

[01:41:50.0000] <jungkees>
annevk: If we already have enough information within the Request object to infer this is a default request from SW, it'll be perfect.

[01:42:01.0000] <annevk>
jungkees: yeah I think that works

[01:42:01.0000] <jungkees>
annevk: otherwise, we may need a flag

[01:42:10.0000] <jungkees>
annevk: great

[01:42:28.0000] <annevk>
jungkees: well yes, we might need a flag on the Request object

[01:42:37.0000] <annevk>
jungkees: or on request

[01:42:50.0000] <annevk>
jungkees: otherwise I'd just pass it back into the SW

[01:43:24.0000] <jungkees>
annevk: I prefer Fetch just returns the final response

[01:43:26.0000] <annevk>
jungkees: but yeah, the main idea is that the request remains unmodified and if you simply pass it through yourself that works fine

[01:43:44.0000] <annevk>
jungkees: yeah, Fetch would handle the redirects for sure

[01:43:56.0000] <jungkees>
annevk: great

[01:44:18.0000] <annevk>
jungkees: we just need a flag as .client will not be the service worker but the original document

[01:44:55.0000] <jungkees>
annevk: we have it in FetchEvent now

[01:45:26.0000] <annevk>
jungkees: maybe we should just use a flag in general, "service worker flag"

[01:45:48.0000] <annevk>
jungkees: hmm actually, that's icky

[01:46:36.0000] <annevk>
jungkees: I'll have to think about that a bit more I guess, but the general idea seems sound

[01:47:06.0000] <jungkees>
annvek: maybe I can leave the .context as-is in the original request instead of setting it to "serviceworker"?

[01:47:18.0000] <jungkees>
annevk: fetch(request) will set it to "serviceworker"

[01:47:32.0000] <annevk>
jungkees: yeah, we don't want to change anything from the request

[01:47:42.0000] <annevk>
jungkees: that's why we need some kind of flag for the .default() case

[01:48:11.0000] <jungkees>
annevk: exactly.

[01:58:01.0000] <annevk>
jungkees: added some comments to 242

[01:58:28.0000] <annevk>
jungkees: I'll make sure http://fetch.spec.whatwg.org/#fetch-api gets in shape so you can reference it

[01:58:39.0000] <annevk>
jungkees: any particular constraints I might not be aware of?

[01:59:26.0000] <jungkees>
annevk: Cool; nothing I can think of now

[01:59:36.0000] <jungkees>
annevk: let's keep talking

[03:02:15.0000] <IZh>
Hixie: Hi! In the section "Embedded content" -> "The map element" the example for image map contains four <area> elements with the same coordinates. ;-)

[03:21:47.0000] <annevk>
jungkees: tobie: JakeA: jgraham: zewt: put up a strawman: http://fetch.spec.whatwg.org/#headermap

[03:27:48.0000] <jgraham>
I'm not sure what the advantage of making order non-deterministic is. It means that you can't use any third party server API where order happens to matter.

[03:47:47.0000] <annevk>
jgraham: so you'd have an array and you'd flatten headers that have multiple values into multiple entries?

[03:49:05.0000] <jgraham>
annevk: I think yes, but I don't know what you mean "flatten". Isn't it just like your proposal but with an array rather than a set?

[03:49:28.0000] <annevk>
jgraham: no, because if you really want to represent what HTTP can do there's even more

[03:49:42.0000] <annevk>
Header: value1\nHeader: value2, value 3

[03:50:08.0000] <annevk>
Would that become Header: value1\nHeader: value2\nHeader: value 3?

[03:51:42.0000] <annevk>
biab

[03:54:57.0000] <jgraham>
I see. Well at least the server APIs I'm familiar with don't expose that difference so it seems less likely that servers will depend on it

[04:51:05.0000] <annevk>
jgraham: that doesn't really make it clear what the API should be though

[04:51:43.0000] <jgraham>
davve: Your svg sizing tests are rather slow in Gecko :( I think with <meta name=timeout value=long> they finish in the timeout on my computer, but it's rather close to rely on.

[04:52:54.0000] <jgraham>
annevk: Conceptually the data structure should be key: [list_of_values], with the API giving special precedence to the first value since in the common case there will be only one

[04:53:14.0000] <annevk>
jgraham: that's what I came up with

[04:54:16.0000] <annevk>
jgraham: I do agree it would be nice to define iteration order

[04:54:39.0000] <annevk>
jgraham: I suspect we should just use insertion order for that

[04:54:39.0000] <jgraham>
annevk: I was under the impression that the list of values in your API was supposed to be unordered

[04:55:02.0000] <jgraham>
Yeah

[04:55:14.0000] <annevk>
jgraham: at the browser level we need to deal with more brokenness

[04:55:25.0000] <annevk>
jgraham: we need to deal distinctly with the case I gave above

[04:58:43.0000] <jgraham>
OK

[07:14:32.0000] <annevk>
zewt: your examples in the toggle bug are a bit confusing

[07:27:21.0000] <annevk>
http://mxr.mozilla.org/mozilla-central/source/netwerk/protocol/http/nsHttpHeaderArray.h

[07:27:36.0000] <annevk>
http://mxr.mozilla.org/mozilla-central/source/netwerk/protocol/http/nsHttpHeaderArray.cpp

[07:27:38.0000] <annevk>
so sad

[07:35:03.0000] <annevk>
https://github.com/slightlyoff/ServiceWorker/issues/300

[10:22:18.0000] <annevk>
mathiasbynens: speakerdeck looks nice

[10:22:30.0000] <annevk>
mathiasbynens: I liked scumbag MySQL :-)

[10:28:18.0000] <TabAtkins>
MikeSmith: Please let plinss know before you blow up dvcs.w3.org. ^_^

[10:31:20.0000] <mathiasbynens>
annevk: :)

[11:18:53.0000] <annevk>
Domenic: I'd appreciate it if you could take a look at https://www.w3.org/Bugs/Public/show_bug.cgi?id=25923 and see if that code can be simpler or will be better down the road

[11:28:08.0000] <annevk>
So http://html5.org/r/8651 demonstrates the delay of publishing HTML... To the F5 button

[11:28:22.0000] <annevk>
Or Cmd+r these days

[11:28:25.0000] <annevk>
Oh, works now :-)

[11:28:57.0000] <Hixie>
hm?

[11:28:58.0000] <annevk>
Hixie: can you update your script to generate the new links at the bottom of Bugzilla bugs?

[11:29:14.0000] <Hixie>
what?

[11:29:19.0000] <annevk>
Hixie: html5.org/tools/web-apps-tracker is based on Git, happened the other week

[11:29:45.0000] <annevk>
Hixie: to fix the hammering on svn.whatwg.org ; I also made the short URLs no longer redirect

[11:30:07.0000] <Hixie>
the hammering wasn't such a big deal, but whatever you did does seem to have made it faster

[11:30:10.0000] <Hixie>
the tracker i mean

[11:30:12.0000] <Hixie>
not the svn repo

[11:32:35.0000] <annevk>
it wasn't a big deal?

[11:32:48.0000] <annevk>
you specially asked me about it a couple of weeks back

[11:33:03.0000] <annevk>
I felt bad so I put half a day into fixing it

[11:33:15.0000] <annevk>
but yeah, the speed improvements are nice too :-)

[11:40:42.0000] <Hixie>
oh wow sorry man, i didn't mean to make you feel bad :-)

[11:40:52.0000] <Hixie>
i just meant that it was likely the source of the slowness :-)

[11:41:13.0000] <Hixie>
i assumed that caching would have been somewhat trivial

[11:41:32.0000] <Hixie>
just, check if i've done this particular query before, and if so, read it from disk instead of from the network

[11:49:34.0000] <bga_>
http://developerblog.redhat.com/2014/05/20/communicating-large-objects-with-web-workers-in-javascript/

[11:49:54.0000] <bga_>
still not COW

[12:05:01.0000] <Domenic>
annevk: cc me so I get an email I can flag as to-do?

[12:46:58.0000] <hallvors>
heh, the #whatwg link on http://wiki.whatwg.org/wiki/IRC seems to have pointed to the wrong hostname since 2008? should be freenode.net, not .org :-]

[12:48:03.0000] <Ms2ger>
Ha

[12:48:51.0000] <hallvors>
nobody who's cool enough to have editing rights on that wiki clicks irc:// links, evidently :)

[12:49:22.0000] <hallvors>
/me clicked mostly to see what clients this computer would suggest

[12:50:38.0000] <annevk>
Domenic: done

[12:51:05.0000] <hallvors>
anyway - I have a spec interpretation question regarding window.opener - this may be moot, since there's a bug on changing the spec, but I'd like to <del>come across as a stupid newbie</del><ins>understand how things were supposed to work</ins>

[12:51:20.0000] <hallvors>
the IDL says attribute WindowProxy? opener;

[12:51:25.0000] <annevk>
hallvors: oh really, that's sad

[12:51:39.0000] <annevk>
hallvors: it was just changed to any opener

[12:51:44.0000] <annevk>
hallvors: fixed the wiki page

[12:51:47.0000] <hallvors>
so it seems "window.opener" can return only WindowProxy or null

[12:51:52.0000] <hallvors>
annevk: thanks

[12:52:24.0000] <Hixie>
spec was just fixed to match browsers

[12:52:27.0000] <annevk>
hallvors: http://html5.org/r/8652

[12:52:32.0000] <hallvors>
I know it's changing :) but I want to understand both versions, and I was confused :-/

[12:53:02.0000] <Hixie>
oh

[12:53:08.0000] <Hixie>
what's the confusion?

[12:53:13.0000] <hallvors>
so the prose says on setting, for non-null values "must call the [[DefineOwnProperty]] internal method of the Window object"

[12:53:21.0000] <Hixie>
right

[12:53:25.0000] <Hixie>
that is black magic

[12:53:32.0000] <Hixie>
means the IDL no longer gets involved

[12:53:35.0000] <hallvors>
so .. ah, magic.

[12:54:40.0000] <hallvors>
so it's not "shadowing" or "overwriting" but just "magic"?? :]

[12:55:08.0000] <hallvors>
because I assume this means on getting after it was set, you get the new value..

[12:55:36.0000] <hallvors>
Hixie: what happens if I do window.opener = 'foo'; delete window.opener; ?

[12:55:50.0000] <hallvors>
does it revert magically to IDL stuff?

[12:56:06.0000] <hallvors>
/me plans to write a test here

[12:57:06.0000] <Hixie>
hallvors: hell if i know

[12:57:21.0000] <Hixie>
hallvors: once you do window.opener = 'foo', everything after that is out of my purview :-)

[12:57:51.0000] <Hixie>
hallvors: this is mostly ES6/WebIDL questions

[12:58:21.0000] <annevk>
renewed hope in D3E

[12:58:45.0000] <annevk>
everyone is a little older and wiser again

[12:58:49.0000] <hallvors>
Hixie: another question, setting window.opener to null needs to survive navigation. Does the spec actually say that "disowning the opener" persist for any pages loaded into the window, or is it just implied?

[12:59:40.0000] <hallvors>
/me thinks finding the answer in one spec would be hard enough, and now there are three..

[13:20:58.0000] <Domenic>
Is mozilla.dev.platform the blink-dev counterpart?

[13:20:59.0000] <Domenic>
Or, I guess my real question is, are there other Mozilla lists I should pay attention to?

[13:27:31.0000] <caitp>
according to mdn, yes

[13:27:49.0000] <caitp>
at least as far as its/iti are concerned

[13:31:07.0000] <Hixie>
hallvors: the object that "disowns its owner" is the browsing context, not the page

[13:34:17.0000] <hallvors>
right. I see how it works now.

[13:55:22.0000] <annevk>
Domenic: that list is worth paying attention to

[13:55:51.0000] <annevk>
Domenic: maybe https://lists.mozilla.org/listinfo/dev-webapi

[13:59:20.0000] <caitp>
i like to imagine that there's some gnome somewhere who keeps a list of all the millions of mozilla mailing lists and keeps track of which ones are relevant for which purposes

[14:42:40.0000] <zewt>
hmm, wonder what this should do (if anything) http://zewt.org/~glenn/test-blob-base-url.html

[14:43:16.0000] <zewt>
was testing to make sure it didn't use the blob URL itself as a base, but it doesn't attempt any load at all (according to the network inspector)

[14:46:00.0000] <zewt>
absolute URLs do work, though, maybe it just doesn't have a base URL and gives up during url parsing


2014-05-31
[19:44:10.0000] <Rastus_Vernon>
Could by any change validator.nu happen to be down?

[19:44:30.0000] <Rastus_Vernon>
http://downforeveryoneorjustme.com/validator.nu

[19:52:58.0000] <MikeSmith>
Rastus_Vernon: it's been down a few times recently. there's a mirror at http://sideshowbarker.net:8888/

[19:53:50.0000] <MikeSmith>
Rastus_Vernon: http://validator.w3.org/nu/ runs the same backend

[19:55:30.0000] <Rastus_Vernon>
MikeSmith: I believe the Unicorn validator uses validator.nu as well for the validation of HTML5 documents.

[19:56:53.0000] <MikeSmith>
Rastus_Vernon: I guess Unicorn does but I don't use it so I wouldn't know.

[19:58:31.0000] <MikeSmith>
Rastus_Vernon: btw the UI at http://validator.w3.org/nu/ has features that aren't available elsewhere. It lets you filter out messages persistently and it also can show you an outline that conforms to the HTML(5) spec

[19:59:00.0000] <Rastus_Vernon>
MikeSmith: I believe validator.nu can give such outlines as well.

[19:59:07.0000] <MikeSmith>
Rastus_Vernon: also http://validator.w3.org/nu/ is pretty much always the most up to date these days. I push changes to it weekly

[19:59:35.0000] <MikeSmith>
Rastus_Vernon: validator.nu does not show outlines yet

[19:59:50.0000] <Rastus_Vernon>
MikeSmith: I’m sure it does.

[20:00:17.0000] <Rastus_Vernon>
In fact, let’s be honest, here: I couldn’t be more confident that validator.nu shows outlines because I’ve actually used them regularly.

[20:00:33.0000] <Rastus_Vernon>
However, it’s great to know that validator.w3.org/nu is more up to date. I’ll use it, in that case.

[20:01:15.0000] <MikeSmith>
well the only way that it would be showing outlines at this point is if I actually updated the UI source for it myself and checked it in

[20:01:28.0000] <MikeSmith>
which I guess I must have, and just forgotten

[20:01:38.0000] <MikeSmith>
http://sideshowbarker.net:8888/

[20:01:43.0000] <MikeSmith>
should be the same

[20:01:47.0000] <Rastus_Vernon>
Well, I know there’s a “Show Outline” checkbox.

[20:01:56.0000] <Rastus_Vernon>
And that shows a neat outline.

[20:01:57.0000] <MikeSmith>
yeah I see that it does have it

[20:02:05.0000] <Rastus_Vernon>
I find it very useful to verify that my table of contents is actually complete.

[20:02:11.0000] <MikeSmith>
so yeah added it seems

[20:02:20.0000] <MikeSmith>
/me pats himself on the back

[20:02:34.0000] <MikeSmith>
Rastus_Vernon: I'm glad you're using the outline thing

[20:02:43.0000] <Rastus_Vernon>
Well, it’s useful.

[20:02:59.0000] <MikeSmith>
Rastus_Vernon: I think you may be the first person who's ever told me they're using it

[20:03:25.0000] <MikeSmith>
Rastus_Vernon: yeah, helping you catch those kind of issues is what I had in mind when I added it

[20:03:28.0000] <Rastus_Vernon>
I use section elements, so I more or less need it.

[20:03:36.0000] <MikeSmith>
ok

[20:03:49.0000] <MikeSmith>
if you find any problems with it, please file bugs

[20:04:14.0000] <Rastus_Vernon>
MikeSmith: I use this CSS code to generate my table of contents: https://hastebin.com/ixegubafaf.css

[20:04:46.0000] <MikeSmith>
it's not 100% in conformance with the current spec, because Hixie made a change to the ouline algorithm a while back that I still need to implement. but that change was for a corner-case I think

[20:05:00.0000] <MikeSmith>
/me looks at Rastus_Vernon CSS

[20:05:15.0000] <Rastus_Vernon>
The actual HTML code is this: https://hastebin.com/tisacekeja.xml

[20:05:36.0000] <MikeSmith>
hmm hastebin has a bad cert

[20:05:44.0000] <Rastus_Vernon>
I use Prince XML because it’s the only user agent that supports the kind of stuff I’m doing.

[20:05:50.0000] <Rastus_Vernon>
Oh, sorry, remove the s in https

[20:06:06.0000] <MikeSmith>
ah you're using nav I see

[20:06:20.0000] <Rastus_Vernon>
All that CSS is valid according to the cgpm specification, but pretty much no browser supports it.

[20:06:43.0000] <Rastus_Vernon>
The advantage is that I just need to add ids like id="1.5" to header elements and I let the CSS get the name and page number by itself

[20:06:57.0000] <MikeSmith>
ok

[20:06:59.0000] <Rastus_Vernon>
It generales a very beautiful result too.

[20:07:09.0000] <Rastus_Vernon>
But I need to add some HTML manually, and thus I use the outline to make sure I left nothing out.

[20:07:46.0000] <MikeSmith>
cool

[20:08:05.0000] <Rastus_Vernon>
And since I frequently make tag mistakes without noticing, the validator tells me about them and I fix them. It is, for me, the equivalent of a spell checker, but for tag soup instead of spelling mistakes.

[20:08:44.0000] <MikeSmith>
yeah that's what it's intended for

[20:09:35.0000] <MikeSmith>
it's really more of a linter than a validator -- except that the linting rules or normatively defined in a specification

[20:09:59.0000] <MikeSmith>
it's meant to help you catch mistakes you wouldn't have caught otherwise

[20:10:20.0000] <MikeSmith>
rather than telling you you're right or wrong

[20:12:00.0000] <Rastus_Vernon>
It’d be really useful to have CSS selectors for selecting headers of a certain level, because it’s currently impossible to get it right with CSS.

[20:12:30.0000] <MikeSmith>
I guess you'd want to e-mail www-style about that

[20:12:54.0000] <Rastus_Vernon>
Of course. Although I’m sure selectors level 4 already has something for it (it has something for everything).

[20:26:52.0000] <MikeSmith>
Rastus_Vernon: yeah I don't keep up with selectors 4 much. I just take it on faith that it's in good hands

[20:28:25.0000] <MikeSmith>
/me finds http://drafts.csswg.org/selectors/

[20:30:02.0000] <MikeSmith>
TabAtkins: it'd be nice if CSS specs had link somewhere to version-control commit history, as whatwg specs have these days

[20:30:47.0000] <TabAtkins>
That should probably be possible to automate.

[20:30:52.0000] <MikeSmith>
yeah

[20:30:58.0000] <TabAtkins>
Mind filling an issue on Bikeshed?

[20:31:14.0000] <MikeSmith>
will do

[20:31:21.0000] <TabAtkins>
Thanks.

[20:35:25.0000] <zewt>
an amusing way to cause the whatwg server to combust: automatic git blame when viewing the spec

[02:22:58.0000] <IZh>
Hixie: Hi. Consider following paragraph from "Image maps" -> "Processing model": "If the shape attribute represents the rectangle state, and the second number in the list is numerically less than the fourth number in the list, then swap those two numbers around."

[02:25:46.0000] <IZh>
Hixie: Isn't the condition inverted? According to "The area element": " In the rectangle state, area elements must have a coords attribute with exactly four integers, the first of which must be less than the third, and the second of which must be less than the fourth."

[02:27:50.0000] <IZh>
Hixie: I suspect that "less than" should be changed to "greater than" in the comparison condition in "Processing model".

[02:46:14.0000] <IZh>
Hixie: And what you think about adding support for floating-point coordinates for shapes. These coords would be in the interval of 0.0 to 1.0, and this will work for any resolution of image and any zoom level.

[03:40:38.0000] <IZh>
Hixie: What's the purpose of allowing circles with zero radius that will be considered empty and eleminated at the

[03:40:59.0000] <IZh>
Hixie: later steps of parsing.

[08:27:55.0000] <mathiasbynens>
hsivonen: http://html5.validator.nu/ is down again

[09:48:32.0000] <MikeSmith>
dglazkov: I don't really understand your response at https://twitter.com/dglazkov/status/472764490748919808

[09:50:41.0000] <caitp>
it's just a value to check, totally non-normative, it's cool if different vendors check different things

[09:53:19.0000] <MikeSmith>
caitp: what different things? different attribute names other than "is"?

[09:55:48.0000] <caitp>
I'm not being serious, I really hope it doesn't come to that

[09:55:50.0000] <caitp>
that would be terrible

[10:11:35.0000] <MikeSmith>
caitp: terrible is just a synonym for "work in progress"

[10:12:09.0000] <caitp>
sure, but if people start shipping terrible, it becomes harder to make it less terrible =(

[13:33:04.0000] <erlehmann>
is there an implementation of the sortable table thing?

[13:47:29.0000] <IZh>
Mmm... Sortable grid view. That would be great.

