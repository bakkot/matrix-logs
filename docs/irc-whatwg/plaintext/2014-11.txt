2014-11-01
[17:54:12.0000] <terinjokes>
:( Safari doesn't have getElementById in the DocumentFragment prototype

[18:19:19.0000] <caitp>
:[

[02:49:50.0000] <annevk>
Did anyone ever end up filing bugs on browsers for http://example.com/%F0%9F%94%92 and similar spoofing?

[03:36:58.0000] <annevk>
It seems zcorpan filed a bug and it was a duplicate of https://bugzilla.mozilla.org/show_bug.cgi?id=808234

[09:43:54.0000] <annevk>
I filed https://github.com/github/github-services/issues/964 on github-services not dealing with URLs in commit messages properly, fwiw

[10:00:16.0000] <annevk>
Domenic: http://jxck.hatenablog.com/entry/whatwg-stream

[14:02:33.0000] <Domenic>
Hixie: I can't subscribe to whatwg@whatwg with my new email address because the instructions in it reference lists.whatwg.org and the alternate method of replying to whatwg-requests⊙lwo gives an "undeliverable"

[14:03:38.0000] <Domenic>
annevk: wow, diagrams and everything!!

[15:08:16.0000] <Ms2ger>
mounir, /quit nn

[15:10:58.0000] <annevk>
euhm, wtf rubys

[15:23:03.0000] <Domenic>
annevk: I think it's just a misunderstanding, albeit one that could spiral out of control... assume good faith and don't make things worse :)

[15:23:14.0000] <Domenic>
also dammit i keep emailing myself


2014-11-02
[17:16:20.0000] <Hixie>
Domenic: which instructions?

[17:34:27.0000] <Domenic>
Hixie: when you email the subscribe address

[17:35:06.0000] <Domenic>
Hixie: basically, try to subscribe to whatwg and you'll see it's pretty bad

[18:13:20.0000] <Hixie>
ah

[18:13:22.0000] <Hixie>
yeah

[18:13:24.0000] <Hixie>
dunno what to do about it

[18:14:42.0000] <Hixie>
Domenic: wait, why is it bad

[18:14:49.0000] <Hixie>
Domenic: can't you just reply to the e-mail and be done with it?

[18:16:15.0000] <Domenic>
Hixie: those instructions don't work either. They contradict themselves. The reply to address is different from the one in the body and they tell you to have only that string. Try it.

[18:16:48.0000] <Hixie>
ok, i sent an e-mail ta whatwg-subscribe⊙wo

[18:16:50.0000] <Hixie>
i got back an e-mail

[18:16:53.0000] <Hixie>
i replied to it

[18:17:00.0000] <Hixie>
now i'm subscribed

[18:17:03.0000] <Hixie>
i don't understand the problem

[18:17:12.0000] <Hixie>
i mean, other than the e-mail mentions the website, which doesn't work

[18:27:16.0000] <Domenic>
Hmm replying didn't work for me

[18:27:31.0000] <Domenic>
And the reply-to didn't match the instructions in the body of the email

[18:27:54.0000] <Domenic>
Are there three separate ways to confirm subscription, only one of which works?

[18:28:10.0000] <Domenic>
Instructions in body for emailing whatwg-request don't work

[18:28:18.0000] <Domenic>
Clicking on the link doesn't work

[18:28:24.0000] <Domenic>
But replying does?

[18:29:04.0000] <Hixie>
there are three, two of which should work

[18:29:18.0000] <Hixie>
i haven't tried whatwg-request

[18:31:36.0000] <Hixie>
(the url will work too, you just have to use a browser that doesn't have HSTS information blocking that host)

[18:32:19.0000] <Hixie>
i sent a help command to whatwg-request⊙wo and that worked too, fwiw

[18:53:00.0000] <estellevw>
Trying to full understand the "is" attribute, but having a hard time searching for such a popular term. Anyone have a link to a good explanation and the spec?

[18:53:23.0000] <estellevw>
s/full/fully

[18:54:33.0000] <estellevw>
just had to ask so that i could find it.  http://w3c.github.io/webcomponents/spec/custom/#instantiating-custom-elements

[18:54:38.0000] <estellevw>
never mind

[18:56:37.0000] <estellevw>
though if anyone has a good article, that's appreciated

[22:14:51.0000] <Domenic>
Hixie: hmm my bad, I typoed "request" :(

[22:17:54.0000] <Hixie>
heh

[01:50:19.0000] <jsx>
@counter-style is part of css3, right?

[02:09:31.0000] <Ms2ger>
It's part of CSS, yes

[02:19:02.0000] <jsx>
ok, Ms2ger, just wanted to make sure its correct if i tag it as CSS3 in MDN

[02:19:43.0000] <Ms2ger>
That's not particularly useful, but *shrug*

[02:21:03.0000] <jsx>
alright.. i thought that might help if someone is searching for CSS3 specific things

[02:22:13.0000] <annevk>
jsx: CSS3 is not a thing per the CSS WG

[02:22:49.0000] <jsx>
oh! ok

[02:23:02.0000] <annevk>
jsx: so if we pretend that CSS3 is a thing in MDN, we might want to overhaul that

[02:23:15.0000] <annevk>
jsx: and instead focus on modules

[02:23:19.0000] <jsx>
nope, i'm removing it rightaway

[02:23:38.0000] <jsx>
thanks for the info

[02:29:30.0000] <jsx>
annevk: is it a political thing like how the whatwg calls it html while the w3c calls it html5? or is this universal. (sorry, i'm very new to this)

[02:30:55.0000] <Ms2ger>
jsx, no, this is the CSSWG's call, actually

[02:31:05.0000] <annevk>
jsx: while CSS 2.1 was still being developed, CSS3 (at the time still a thing) was developed in the form of modules

[02:31:28.0000] <Ms2ger>
jsx, they have version numbers for individual modules, but "CSS3" as a general thing doesn't exist

[02:31:36.0000] <annevk>
jsx: however, some of those modules turned out to advance quicker than CSS3 as a whole

[02:31:53.0000] <annevk>
jsx: so versioning (leveling in CSSWG terms) became scoped to modules, rather than CSS

[02:32:23.0000] <jsx>
like "CSS Counter Styles Level 3" annevk?

[02:32:29.0000] <annevk>
jsx: exactly

[02:32:40.0000] <annevk>
jsx: http://www.xanthir.com/b4Ko0 has an explanation from TabAtkins

[02:32:46.0000] <Ms2ger>
TIL: Chrome still doesn't support setting event types to the empty string

[02:32:53.0000] <Ms2ger>
Speaking of which...

[02:32:56.0000] <Ms2ger>
annevk, r? https://github.com/w3c/web-platform-tests/pull/1342 :)

[02:33:34.0000] <jsx>
thanks annevk, Ms2ger

[02:33:41.0000] <Ms2ger>
Np

[02:33:59.0000] <annevk>
Ms2ger: I take it you ran these through a browser already?

[02:34:55.0000] <Ms2ger>
Er

[02:35:11.0000] <Ms2ger>
Looks like I broke one since the last time I did

[02:36:23.0000] <annevk>
Ms2ger: createEvent table does not match https://dom.spec.whatwg.org/#dom-document-createevent

[02:38:32.0000] <annevk>
Ms2ger: reviewed

[02:38:40.0000] <Ms2ger>
Thanks

[02:38:49.0000] <Ms2ger>
Looks like TouchEvent isn't supported in Fx?

[02:38:59.0000] <Ms2ger>
Oh, I guess it might be preffed off

[02:40:38.0000] <Ms2ger>
annevk, again? :)

[02:40:49.0000] <annevk>
Ms2ger: again?

[02:40:58.0000] <Ms2ger>
I added the missing ones

[02:41:34.0000] <annevk>
Ah, done

[02:41:41.0000] <Ms2ger>
Thanks

[02:41:43.0000] <annevk>
I thought I had said something stupid somewhere

[02:43:19.0000] <Ms2ger>
No no :)

[04:59:11.0000] <annevk>
Hixie: stylesheet on whatwg.org has "padding; 0;"

[04:59:54.0000] <annevk>
Hixie: same stylesheet (tabbed-pages) also has -moz-outline which is dropped in Firefox Nightly

[06:59:43.0000] <Ms2ger>
The descriptions of those old DOM tests are pure poetry

[06:59:51.0000] <Ms2ger>
An document type accessed, setNodeValue is called with a non-null argument, but getNodeValue

[06:59:52.0000] <Ms2ger>
should still return null.

[07:53:30.0000] <TabAtkins>
annevk: That blog post gets so much mileage.

[13:48:16.0000] <SimonSapin>
TabAtkins: the things about URLs like css4-backgrounds could be updated, I guess

[13:48:31.0000] <SimonSapin>
though it might still be relevant for some TR snapshots


2014-11-03
[16:18:04.0000] <terinjokes>
looks like the only safe way of querying the contents of a DocumentFragment is to insert it into the document

[16:23:33.0000] <terinjokes>
since /getElements?By(Id|TagName|Class)/ are over on Element, but the DocumentFragment interfact exposes only Node

[00:01:01.0000] <annevk>
terinjokes: DocumentFragment should expose querySelector()

[00:01:14.0000] <annevk>
terinjokes: and getElementById()

[00:01:38.0000] <annevk>
terinjokes: if a browser doesn't expose those, bug

[00:05:13.0000] <terinjokes>
annevk: Safari doesn't expose getElementById

[00:05:45.0000] <terinjokes>
the other browsers I'm developing against pre-date querySelector and querySelectorAll… so can't blame them for not having it implemented

[00:05:56.0000] <terinjokes>
sorry, Safari 8*

[00:07:03.0000] <annevk>
http://msopentech.com/blog/2014/03/19/http2-nearing-completion/ HTTP WG makes decisions through coin toss...

[00:14:55.0000] <Ms2ger>
annevk, maybe htmlwg should try that

[00:15:19.0000] <Ms2ger>
annevk, I'm not sure their track record for good decisions beats a coin toss

[00:16:34.0000] <annevk>
Ms2ger: if we don't count copying WHATWG work as decisions...

[00:16:47.0000] <Ms2ger>
I don't think we do

[01:21:33.0000] <annevk>
Domenic: how would we ever expose Fetch' terminate primitive?

[01:21:55.0000] <annevk>
Domenic: var res = await fetch(req); req.terminate()?

[03:49:55.0000] <smaug____>
how does one see when https://github.com/w3c/web-platform-tests/blob/master/workers/interfaces/DedicatedWorkerGlobalScope/postMessage/event-ports-dedicated.html was added originally to wpt?

[03:50:04.0000] <smaug____>
github UI isn't good with file moves

[03:50:07.0000] <smaug____>
apparently

[03:50:13.0000] <smaug____>
not with huge changes

[03:55:33.0000] <smaug____>
(that test seems to be invalid)

[04:16:14.0000] <annevk>
smaug____: it's prolly added by zcorpan

[04:18:10.0000] <smaug____>
zcorpan: why e.ports === null ?

[04:19:06.0000] <smaug____>
The spec seems to say "Let new ports be an empty array." ... "Let the ports attribute of the event be initialised to the new ports array."

[04:21:13.0000] <zcorpan>
smaug____: probably it matched the spec when the test was written. my interpretation of the current spec is that it should be empty array

[04:21:45.0000] <MikeSmith>
smaug____: https://github.com/w3c/web-platform-tests/commit/eb29e8c9fcc0e8a8e685581123bd1380de207d7d is maybe when it was first added

[04:23:06.0000] <smaug____>
zcorpan: http://www.w3.org/TR/webmessaging/#messageport requires empty array

[04:23:12.0000] <smaug____>
that is from 2012

[04:23:23.0000] <zcorpan>
MikeSmith: don't see that file in that commit. but i wrote the test in question

[04:23:53.0000] <zcorpan>
smaug____: i think the test predated Transferable thing

[04:23:56.0000] <smaug____>
ah

[04:24:30.0000] <zcorpan>
but it's also possible that i misread the spec of course

[04:25:53.0000] <zcorpan>
smaug____: do you want the spec changed or hte test changed?

[04:27:11.0000] <MikeSmith>
zcorpan: OK, but anyway seems like it is actually there and https://github.com/w3c/web-platform-tests/blob/eb29e8c9fcc0e8a8e685581123bd1380de207d7d/Workers/tests/approved/interfaces/DedicatedWorkerGlobalScope/postMessage/event-ports-dedicated.html is the original (unless I'm missing something)

[04:41:01.0000] <smaug____>
zcorpan: test

[04:41:29.0000] <smaug____>
or I don't care too much which on should be changed

[04:41:33.0000] <smaug____>
one

[04:48:29.0000] <annevk>
http://lists.w3.org/Archives/Public/public-w3process/2014Nov/0015.html chaals arguing to disable TLS to preserve battery... You cannot make this shit up

[04:51:00.0000] <MikeSmith>
wow

[06:05:13.0000] <zcorpan>
smaug____: do you have a github username?

[06:06:36.0000] <zcorpan>
smaug____: https://github.com/w3c/web-platform-tests/pull/1347

[06:47:40.0000] <Ms2ger>
zcorpan, good idea re: interfaces.html

[06:47:49.0000] <Ms2ger>
Didn't think it would work, but it does

[07:38:02.0000] <annevk>
http://dnscurve.org/ seems interesting

[08:51:37.0000] <rubys>
TabAtkins: let me know when I should try again.  Meanwhile, I'd also appreciate a pointer to how to produce biblio entries.

[08:52:38.0000] <TabAtkins>
rubys: https://github.com/tabatkins/bikeshed/blob/master/docs/definitions-autolinks.md#bibliography

[08:52:46.0000] <TabAtkins>
And what do you mean by "try again"?

[08:53:39.0000] <rubys>
TabAtkins: "Ugh, this sent my comment before it was done.  One sec while I finish up..."

[08:53:47.0000] <TabAtkins>
Oh, it's there now.

[08:53:55.0000] <rubys>
ok, cool

[08:55:34.0000] <TabAtkins>
rubys: Are you trying to maintain all the current "concept-foo-bar"-style urls, or are you planning to switch them all into real autolinks?

[08:56:49.0000] <rubys>
TabAtkins: I am willing to do whatever.  The question isn't what I'm willing to do, but what annevk is willing to accept.

[08:56:56.0000] <TabAtkins>
Haha, ok.

[08:57:09.0000] <annevk>
rubys: I'm a bit confused with the IDL issue

[08:57:45.0000] <annevk>
rubys: e.g. as I understand it https://w3c.github.io/webappsec/specs/content-security-policy/#securitypolicyviolationevent-interface is done with bikeshed and has links

[08:58:03.0000] <annevk>
rubys: does that mean Mike accepted the maintenance cost?

[08:58:05.0000] <TabAtkins>
annevk: All Bikeshed-generated.

[08:58:29.0000] <TabAtkins>
You can put your <dfn>s outside of the IDL block, if you want, and Bikeshed will link to them from the IDL (instead of trying to dfn them in the IDL).

[08:58:32.0000] <annevk>
Anolis requires a fair amount of markup to make IDL pretty... I don't really mind it

[08:59:01.0000] <TabAtkins>
annevk: Bikeshed requires *more* markup to make the IDL work correctly, if you're doing it by hand.

[08:59:14.0000] <TabAtkins>
You have to specify the types and the "for" values for everything.

[08:59:27.0000] <annevk>
TabAtkins: okay, so you are saying Mike is not doing it by hand

[08:59:28.0000] <rubys>
TabAtkins: that's what I was missing.  I should be able to work with that.

[08:59:59.0000] <rubys>
so... generate, see what dfns are produced, move them to where they belong, and... done.

[09:00:02.0000] <TabAtkins>
rubys: Ah, sorry, didn't realize there was a disconnect there.  Just make sure your external dfns are marked up right, with types and "for" values.

[09:00:21.0000] <annevk>
TabAtkins: how do you link [Constructor] accurately without markup?

[09:00:34.0000] <TabAtkins>
Just like <dfn method for=URL title="foo()">foo(int <var>arg</var>)</dfn>

[09:00:51.0000] <rubys>
sweet

[09:00:52.0000] <TabAtkins>
annevk: I think I do it badly right now.  It's on my list of fixes to make.

[09:01:23.0000] <annevk>
TabAtkins: okay, so the only thing that's not supported is that in interface URL, URL becomes the <dfn>?

[09:01:34.0000] <TabAtkins>
No, that works too.

[09:01:38.0000] <annevk>
oh

[09:01:52.0000] <annevk>
Okay so rubys maybe misunderstood something then?

[09:01:54.0000] <annevk>
/me is so confused

[09:01:57.0000] <TabAtkins>
There was a bug for a little bit in some related handling, but I fixed that this morning.

[09:02:25.0000] <TabAtkins>
Yeah, I think rubys didn't realize that Bikeshed'll respect you wanting to put your <dfn>s elsewhere.

[09:02:28.0000] <rubys>
annevk: I think that about summarizes it.  Everything works, I just didn't know how.  Perhaps there is a doc problem, or perhaps it is just me.

[09:02:45.0000] <TabAtkins>
Well, it should all be in the docs, but docs are hard to read, so wtv.

[09:03:49.0000] <annevk>
rubys: while you're here, please check with me next time if you think I say something weird

[09:04:37.0000] <rubys>
annevk: you say lots of things that are weird :-)

[09:04:53.0000] <annevk>
rubys: sure, but those two www-tag emails were quite upsetting

[09:05:52.0000] <rubys>
Sorry.  I will say that I'm still confused by your assertion that reverse engineering existing browses is incompatible with what the WHATWG does.

[09:06:20.0000] <annevk>
rubys: I haven't said that

[09:07:12.0000] <annevk>
rubys: I've said that you can't document reality since reality is that browsers disagree, whereas WHATWG writes documents that dictates them to agree

[09:08:03.0000] <rubys>
reality is more complicated than that.  There are cases where the browsers agree, and what you have speced is different than that.

[09:08:23.0000] <annevk>
rubys: for those cases it might make sense to change the specification

[09:09:12.0000] <rubys>
in which case, I will claim that your statement on this matter is confusing.

[09:10:13.0000] <rubys>
For those wanting to follow along, we are referring to: http://lists.w3.org/Archives/Public/public-whatwg-archive/2014Nov/0004.html

[09:10:14.0000] <annevk>
rubys: either I've made a mistake in analyzing the data when I wrote the specification, there's more data now, or the critique is inaccurate or from insufficient data

[09:10:17.0000] <rubys>
What I said:

[09:10:25.0000] <rubys>
> That may not be as we would wish it to be.  But it would be a disservice to > everyone to document how we would wish things to be rather than how they > actually are (and, by all indications, are likely to remain for the > foreseeable future).

[09:10:28.0000] <rubys>
What anne said:

[09:10:34.0000] <rubys>
 This contradicts with most WHATWG work. WHATWG standards describe how things should be, taking into account the realities of deployed content.

[09:11:14.0000] <rubys>
I'd like to continue trying to find the sweet spot between what you have spec'ed, what browsers are willing to accept, and how far I can push the IETF.

[09:11:34.0000] <Hixie>
may i suggest that instead of arguing over the metaissue of what you meant when arguing what the goals are, you instead just focus on the issues that matter, namely, the actual bugs?

[09:11:41.0000] <annevk>
I don't understand what's unclear. Your statements contains absolutes that are just untrue.

[09:12:05.0000] <rubys>
Hixie: good advice.

[09:12:43.0000] <rubys>
Hixie: first step on that road is here: http://intertwingly.net/projects/pegurl/urltest-results/

[09:12:57.0000] <annevk>
Yeah, I've been missing that. There's a lot of statements "from above", but no bug reports yet.

[09:13:25.0000] <Hixie>
rubys: file a bug with what you want changed, providing the evidence you think supports that change

[09:13:25.0000] <annevk>
Which is a weird state to be in given that rubys wants it to be non-political.

[09:14:00.0000] <rubys>
annevk: unfair.  I have submitted pull requests.  I'm trying to work first on items that you have identified (bikeshed and rewriting the parser part of the spec).  I think that's a fair amount of work.

[09:14:21.0000] <rubys>
Hixie: you might also find the following to be of interest: http://intertwingly.net/projects/pegurl/liveview.html

[09:14:55.0000] <Hixie>
since i'm not editor of the url spec and have interest in getting involved in the url spec... :-)

[09:15:47.0000] <rubys>
Hixie: I'm having difficultly parsing that.  Perhaps s/have/don't/?

[09:15:56.0000] <annevk>
rubys: I appreciate that work, quite a lot. But it's no basis for changing direction relative to RFC 3986, for instance.

[09:15:58.0000] <Hixie>
have no, rather, yeah

[09:16:10.0000] <rubys>
Hixie: ack

[09:17:09.0000] <rubys>
annevk: I'm going to keep doing the work.  I am also going to try to work with everybody.  That includes yourself, the TAG, the IETF, browser vendors, library implementors, etc.

[09:17:45.0000] <annevk>
rubys: Sure, I do the same thing

[09:18:14.0000] <rubys>
If you say something that is different than something Domenic says, my preference would be to get the two of you chatting.

[09:18:48.0000] <annevk>
I think Domenic and I are quite well aligned

[09:19:10.0000] <annevk>
Not sure what you're referring to

[09:19:13.0000] <rubys>
I've now done that twice.  The first time you agreed to accept pull requests.  The second time you found what I had done to be quite upsetting.

[09:21:44.0000] <annevk>
Yes, as I explained, your statement contained absolutes that are untrue. The URL Standard documents how we wish things to be given that there are browsers out there that do not conform to it. It cannot document how things are, given that browsers disagree. Perhaps there are cases where those two could be closer, but you've yet to file a bug for those.

[09:21:52.0000] <rubys>
Annevk: a more recent example where you confused me: you suggested "hiding the editor field through CSS".  When I pointed out how it could be done, you said " It seems wrong to me to have it there and use display:none to hide it."

[09:22:42.0000] <annevk>
rubys: your selective quoting does not help, I said "The other thing I don't like, but won't block on, is hiding the editor field through CSS."

[09:23:09.0000] <rubys>
that's fair, and I agree with it; but I will still say that I'm confused as to what your position is.

[09:23:14.0000] <annevk>
rubys: I knew from TabAtkins that hiding the editor field through CSS was the way to go, but I don't like it

[09:23:43.0000] <annevk>
rubys: and in that comment I indicated that I wouldn't block on converting the URL Standard to bikeshed because of that

[09:24:12.0000] <rubys>
From my experience with other open source efforts; I feel that removing editors entirely (and not just moving it to the bottom as you have done), is the right way to go.

[09:25:40.0000] <annevk>
Seems reasonable

[09:26:01.0000] <annevk>
rubys: might be worth pointing out here https://github.com/tabatkins/bikeshed/issues/255#issuecomment-61509373

[09:26:03.0000] <TabAtkins>
The reason I'm currently in favor of leaving the editors in (and hiding them through CSS if you dont' want to display them) is that there are existing biblio-scraper tools that know how to look for Editors formatted in the way I currently generate them, and build bibliography dbs from scraping a bunch of docs.

[09:26:21.0000] <rubys>
annevk: will do.

[09:26:23.0000] <annevk>
TabAtkins: rubys seems to argue that it would just say WHATWG

[09:26:33.0000] <rubys>
annevk: +1

[09:26:48.0000] <TabAtkins>
If you really want to indicate no editors, I have a bug open on me to allow you to indicate you're omitting Editor on purpose.

[09:27:16.0000] <TabAtkins>
Sure, that's easy to do too.  "Editor: WHATWG, http://whatwg.org, whatwg⊙wo"

[09:27:38.0000] <rubys>
TabAtkins: WFM

[09:27:48.0000] <annevk>
TabAtkins: rather no editors, with org being WHATWG

[09:28:14.0000] <Ms2ger>
Like we do with Unicode references

[09:28:46.0000] <rubys>
For context: the Apache Software Foundation has a strong position on there being no technical leads for ANY of its products.

[09:29:32.0000] <Ms2ger>
I'm not quite sure about going that far

[09:29:45.0000] <Hixie>
that's the exact opposite of how the WHATWG works :-)

[09:29:53.0000] <TabAtkins>
You can even put that Editor line into the defaults-whatwg.include file, so all whatwg specs get it automatically.

[09:30:11.0000] <Hixie>
every spec here has one person to blame

[09:30:12.0000] <Hixie>
by design

[09:30:16.0000] <Hixie>
so we know how to blame

[09:30:21.0000] <TabAtkins>
(Yeah, I'm actually quite unclear on where the editor-minimization is coming from, given that whatwg generally BDFLs...)

[09:30:40.0000] <Hixie>
the idea of moving the credit for editing from the header to the footer is just one of modesty

[09:30:50.0000] <Hixie>
since the credit should go to all the people sending feedback

[09:31:11.0000] <TabAtkins>
In this case, the problem is that the modesty interferes with the boilerplate generation in a very annoying way.

[09:31:14.0000] <Hixie>
the whatwg model is one of concentrating the responsibility and blame, and distributing the credit

[09:31:23.0000] <Hixie>
there shouldn't be any boilerplate :-)

[09:31:30.0000] <Hixie>
(e.g. the html spec doesn't have any)

[09:31:42.0000] <rubys>
My sense is that Dominic and Marcos are more open to sharing the responsibility.

[09:31:52.0000] <Hixie>
sharing responsibility is a bug

[09:32:06.0000] <Hixie>
it leads to sharing the blame

[09:32:14.0000] <Hixie>
it is imho one of the main causes of the w3c's specs being low quality

[09:32:18.0000] <rubys>
/me goes back to working on real bugs

[09:32:35.0000] <TabAtkins>
Hixie: You keep saying that, and you keep being wrong. ^_^  But that's because HTML is a special snowflake, and nobody is trying to be that consistent with its style.

[09:32:54.0000] <Hixie>
wait, what was it i said that was wrong?

[09:32:59.0000] <Ms2ger>
TabAtkins, ... style consistency?

[09:33:00.0000] <TabAtkins>
/me doubts that he could ever mod Bikeshed enough to satisfy HTML's use-cases.

[09:33:00.0000] <Hixie>
i said a lot of things just then :-P

[09:33:17.0000] <TabAtkins>
Hixie: The thing you were replying to me about - boilerplate.

[09:33:32.0000] <Hixie>
oh i didn't realise i'd ever said that html had no boilerplate before

[09:33:36.0000] <Hixie>
it's a relatively new fact

[09:33:38.0000] <TabAtkins>
You typed a bunch more between when I started typing and when I was done, sorry.

[09:33:41.0000] <Hixie>
as of ~august

[09:33:43.0000] <Ms2ger>
Speaking of boilerplate

[09:33:56.0000] <Ms2ger>
The multipage button has the old url

[09:34:08.0000] <TabAtkins>
When I was first working with Domenic to build the WHATWG boilerplate, you kept claiming there shoudlnt' be any, and everyone should build craft their header content by hand.

[09:34:09.0000] <Ms2ger>
Hixie, ^

[09:34:37.0000] <Hixie>
TabAtkins: ah, yeah, i definitely stand by that. if you have much boilerplate, you're probably doing it wrong, imho.

[09:34:43.0000] <Hixie>
Ms2ger: interesting

[09:35:00.0000] <Hixie>
Ms2ger: oh, yeah, that's intentional

[09:35:05.0000] <Hixie>
Ms2ger: it's still shorter than the new one

[09:35:07.0000] <TabAtkins>
There's a difference between "too much" and "more than you want to write by hand, and duplicate-with-minor-changes into new specs".

[09:35:15.0000] <Ms2ger>
That's true

[09:35:24.0000] <Hixie>
TabAtkins: *shrug*

[09:35:48.0000] <Hixie>
TabAtkins: the html spec really has virtually nothing that you'd duplicate into other specs

[09:35:56.0000] <Hixie>
TabAtkins: so i stand by what i said

[09:36:06.0000] <Hixie>
TabAtkins: i feel that boilerplate is stuff that turns readers away

[09:36:12.0000] <Ms2ger>
The HTML spec is a special snowflake :)

[09:36:17.0000] <Hixie>
if you don't want to write it, why would anyone want to read it

[09:36:30.0000] <Hixie>
all our specs should be special snowflakes

[09:36:32.0000] <Ms2ger>
I think the header for https://dom.spec.whatwg.org/ makes sense

[09:36:36.0000] <Hixie>
otherwise why are we writing them?

[09:36:51.0000] <Ms2ger>
And I don't see why other specs would need a different style

[09:37:47.0000] <Hixie>
anyway

[09:37:51.0000] <Hixie>
y'all do as you wish :-)

[09:38:05.0000] <Ms2ger>
And w'all will be consistent ;)

[09:38:26.0000] <annevk>
Hixie: it's hard to reconcile your statement for consistent look & feel with desire for inconsistent headers

[09:38:37.0000] <TabAtkins>
Hixie: I dont' want to write all the markup for my IDL blocks either, but people seem to get value from that.

[09:38:47.0000] <Hixie>
annevk: which statement for consistent look & feel?

[09:38:58.0000] <annevk>
Hixie: sharing stylesheet

[09:39:24.0000] <Hixie>
annevk: if there's a good reason for a spec to have a different look, then it shouldn't share the style sheet either

[09:41:44.0000] <rubys>
annevk: done.  https://github.com/tabatkins/bikeshed/issues/255#issuecomment-61516495

[09:45:27.0000] <annevk>
As for the discussion about BDFL... It has been useful for someone to make the decisions and be responsible for addressing issues. I agree that if there's no such feeling issues tend to go unaddressed or get weak responses from committees.

[09:46:58.0000] <annevk>
If we removed editor information even from the Acknowledgments I would still expect someone to be responsible, even if not written down somewhere.

[09:48:46.0000] <rubys>
Python works well with a BDFL. Apache projects work effectively WITHOUT a BDFL.  We can all cite efforts that don't work well.  Some with BDFLs, and many without.

[09:49:50.0000] <annevk>
rubys: http://www.apache.org/foundation/ suggests there's some oversight at least

[09:50:14.0000] <annevk>
rubys: with impressive VP titles even

[09:50:31.0000] <rubys>
Indeed.  There is oversight.  But VPs are not technical leads.  By design.

[09:50:53.0000] <rubys>
I've been on the Apache Board of Directors for many years.  If you have any questions, let me know.

[09:51:18.0000] <rubys>
I've been release lead (something we rotate), PMC chair, and many other positions too.

[09:51:39.0000] <annevk>
In a way editors are not technical leads either. That's the various browsers

[09:52:48.0000] <rubys>
annevk: at the risk of upsetting you again, I see little evidence of that in http://intertwingly.net/projects/pegurl/urltest-results/

[09:53:43.0000] <rubys>
ok, let me retract "little evidence".  That was overstating the problems I'm seeing.

[09:55:30.0000] <annevk>
rubys: it's obvious you are seeing something in those test results I'm missing out on

[09:56:34.0000] <rubys>
annevk: scroll to the bottom of http://lists.w3.org/Archives/Public/public-webapps/2014OctDec/0315.html for three examples

[09:57:45.0000] <annevk>
rubys: example 1) http://intertwingly.net/projects/pegurl/urltest-results/7357a04b5b all browsers seem to agree on serializing except for IE

[09:57:51.0000] <annevk>
rubys: why would you side with IE?

[09:58:04.0000] <rubys>
annevk: look at username and password

[09:58:09.0000] <annevk>
rubys: example 2) http://intertwingly.net/projects/pegurl/urltest-results/4b60e32190 we discussed that the results are different on Windows

[09:58:21.0000] <annevk>
rubys: I don't think all browsers implement username and password properties

[09:58:33.0000] <annevk>
rubys: that's a new feature

[09:58:50.0000] <rubys>
annevk: the spec doesn't differentiate between "running on windows" and "running elsewhere".

[09:59:07.0000] <annevk>
rubys: yes, and I explained why

[09:59:26.0000] <annevk>
rubys: if you feel we should go for platform-dependent parsing, okay...

[09:59:44.0000] <rubys>
no.  I think we should remove what one browser implemented on one platform.

[09:59:51.0000] <annevk>
http://intertwingly.net/projects/pegurl/urltest-results/61a4a14209 I already conceded we need to revisit IPv4 parsing

[10:00:00.0000] <rubys>
and look what presto did for: http://intertwingly.net/projects/pegurl/urltest-results/7357a04b5b

[10:00:07.0000] <annevk>
Presto is irrelevant

[10:00:15.0000] <rubys>
I think a strong case can be made for hiding passwords

[10:00:18.0000] <annevk>
They gave up their browser and its URL parser because it broke too many sites

[10:01:27.0000] <annevk>
rubys: hiding doesn't help if you can still get it through getAttribute() or some such

[10:02:11.0000] <rubys>
annevk: this is a topic that merits more discussion.  With more browser vendors participating.  I met with several last week.

[10:03:28.0000] <annevk>
rubys: I don't think URL's username/password options make much sense, but they're not really harmful either, and are used by XMLHttpRequest's HTTP authentication options

[10:04:00.0000] <annevk>
rubys: if anything we allow disabling them at the parser level

[10:04:06.0000] <annevk>
we should allow*

[10:04:23.0000] <rubys>
WFM

[10:06:54.0000] <annevk>
Anyway, I already said IP parsing needed looking into. File URLs can use another careful look if someone has the time.

[10:07:00.0000] <annevk>
I don't really see any controversy about that

[10:08:02.0000] <annevk>
And I don't see how browsers doing wildly different things for them contradicts about what I said that we'd need to make a decision on what they should do instead. Since just matching reality is obviously not going to work...

[10:10:31.0000] <rubys>
you seem stuck on that.  I said something along the lines of determining what they were willing to do, and you said that contradicts how the WHATWG works.  I suggest that we both move on from that discussion, and focus on working with everybody and finding the sweet spots.

[10:11:29.0000] <caitp>
that sounds like a good thing

[10:12:56.0000] <annevk>
rubys: determining what browsers are willing to do is not what you said, but seems like a good thing, yes

[10:13:37.0000] <rubys>
cool.  peace.  onwards!

[10:19:04.0000] <annevk>
Seems hz-gb-2312 is dead https://www.w3.org/Bugs/Public/show_bug.cgi?id=25339

[10:19:09.0000] <annevk>
Party time?

[10:19:15.0000] <wanderview>
JakeA: annevk: should it be possible to put a Response with type "error" in the cache?

[10:20:16.0000] <annevk>
wanderview: don't really see a reason why not, although it also seems rather pointless

[10:20:44.0000] <wanderview>
annevk: if fetch() returns an "error" response... it rejects its promise, right?

[10:20:57.0000] <annevk>
wanderview: yeah, TypeError

[10:21:23.0000] <JakeA>
wanderview: agree with annevk

[10:21:23.0000] <wanderview>
not NetworkError?

[10:21:29.0000] <annevk>
wanderview: no

[10:21:53.0000] <annevk>
wanderview: didn't want to create a dependency on DOM for the sake of Node.js

[10:22:53.0000] <annevk>
Removing hz-gb-2312 is exciting people

[10:23:12.0000] <caitp>
i'm excited

[10:23:15.0000] <wanderview>
JakeA: is it just me, or does addAll() not say what to do if one of the requests fails?

[10:27:56.0000] <wanderview>
JakeA: nm... this explains it for me:  https://github.com/slightlyoff/ServiceWorker/issues/541

[10:30:21.0000] <JakeA>
wanderview: oh, it should be reject with the first error (like Promise.all)

[10:34:42.0000] <wanderview>
JakeA: I think thats what it says... (promise verbage is new to me)

[10:37:05.0000] <wanderview>
JakeA: do you have an opinion on this? https://github.com/slightlyoff/ServiceWorker/issues/549

[10:40:18.0000] <annevk>
JakeA: I'm sorry but I forgot timeline updates, when can we expect updates to the spec & issues again?

[10:44:38.0000] <JakeA>
annevk: from me?

[10:44:51.0000] <annevk>
JakeA: yeah and others I guess that work on the spec

[10:47:24.0000] <JakeA>
annevk: I'm flying back today so normal service starts resuming (although I made some minor fixes to cache.match a couple of days ago). Looks like Jungkee had been pretty constantly active?

[10:48:45.0000] <JakeA>
Is there a particular issue you have in mind? I've still got request.client on my todo list, but wanted to do that when we're on same time zone

[10:49:14.0000] <annevk>
JakeA: 445

[10:49:22.0000] <annevk>
JakeA: also the path issue

[10:49:34.0000] <annevk>
JakeA: where everyone missed out on the security hole

[10:49:56.0000] <annevk>
JakeA: and other issues that impact implementations, such as ServiceWorkerClient design

[10:50:19.0000] <annevk>
JakeA: environment settings object stuff; creating and terminating workers

[10:50:33.0000] <annevk>
JakeA: message channel setup for service workers

[10:57:46.0000] <annevk>
http://www.bis.doc.gov/index.php/component/content/article/107-about-bis/newsroom/press-releases/press-release-2014/763-intel-subsidiary-agrees-to-750-000-penalty-for-unauthorized-encryption-exports :-(

[11:02:27.0000] <JakeA>
annevk: which path issue did everyone miss out on?

[11:03:35.0000] <JakeA>
(did some searching, couldn't find anything, but I'm on a throttled roaming connection so it's like wading through mud)

[11:05:05.0000] <annevk>
JakeA: https://github.com/slightlyoff/ServiceWorker/issues/468

[11:05:15.0000] <annevk>
JakeA: also explained in 445

[11:06:40.0000] <JakeA>
annevk: you mean the cache poisoning thing? I wouldn't say no one thought of that, I mention it a couple of comments before you did https://github.com/slightlyoff/ServiceWorker/issues/468#issuecomment-60352628 :P

[11:07:18.0000] <JakeA>
Will reply now

[11:07:34.0000] <annevk>
JakeA: oops, missed that

[11:08:28.0000] <annevk>
JakeA: seems like a bad thing to have this security theatre then

[11:11:04.0000] <JakeA>
annevk: we've protected existing badly structured sites. But if they remain badly structured and start relying on origin storage (even just IDB), they're opening themselves up to attacks from others on the origin

[11:12:32.0000] <JakeA>
But they have to open the door by wrongly assuming IDB/localstorage/cache is secure to them

[11:22:57.0000] <TabAtkins>
Some naming help needed. Bikeshed currently categorizes spec versions into two categories - "ED" and "TR" - and assumes the ED is more up-to-date. This is confusing when applied to specs outside the W3C. Suggestions on (non-derogatory) names for the categories?

[11:23:04.0000] <TabAtkins>
Maybe "latest" and "snapshot".

[11:24:23.0000] <Ms2ger>
current and stale

[11:24:34.0000] <Ms2ger>
Oh, I missed the parenthetical

[11:24:48.0000] <TabAtkins>
"current" and "snapshot" might work.

[11:33:51.0000] <JakeA>
TabAtkins: git would call them branch & tag

[11:34:40.0000] <JakeA>
Dunno if that's helpful. Tbh "current" and "snapshot" sounds better

[11:34:42.0000] <TabAtkins>
Yeah, but then you're invoking very specific git idioms (and "branch" isn't even quite right; maybe "master")

[11:36:03.0000] <JakeA>
TabAtkins: although w3 html is definitely a branch at this point

[11:36:14.0000] <TabAtkins>
That's even worse! ^_^

[11:36:29.0000] <Ms2ger>
No, a fork :)

[11:36:35.0000] <JakeA>
Hah

[11:37:07.0000] <TabAtkins>
Fork and branch are identical in the wider git data model.

[11:44:24.0000] <JakeA>
annevk: I've got next week to spend on issues. Maybe Wednesday afternoon too, but will be just off a 23hr flight so who knows. Thursday morning too. Will chat to you about priorities.

[11:47:47.0000] <rubys>
TabAtkins: Thanks for the (non-derogatory) parenthetical.  I prefer "latest" and "current".  Give me a few minutes to see if I can come up with something better than "snapshot".

[11:53:23.0000] <rubys>
TabAtkins: I think "stable" is better than "snapshot".  "dated" works too, if you don't mind being mildly subversive.

[11:54:36.0000] <Ms2ger>
Dated sounds good

[11:54:47.0000] <TabAtkins>
"current' and "dated" it is.

[11:54:48.0000] <Ms2ger>
And then Fig'd for current?

[11:55:14.0000] <TabAtkins>
"Fig'd"?

[11:55:24.0000] <Ms2ger>
Date <-> Fig

[11:55:34.0000] <TabAtkins>
BOOOOOOO

[11:55:39.0000] <Ms2ger>
:D

[12:08:34.0000] <rubys>
TabAtkins: consider adding "numbered" and "names" as synonyms for "dated".

[12:08:52.0000] <TabAtkins>
"names"?

[12:09:16.0000] <rubys>
named*

[12:09:40.0000] <TabAtkins>
None of those have the pun, though!

[12:10:50.0000] <rubys>
Up to you, just tossing ideas out there.

[12:39:52.0000] <annevk>
JakeA: ta

[13:46:40.0000] <jamesr_>
Ms2ger: you're terrible and you should feel bad

[13:47:02.0000] <Ms2ger>
:(

[13:47:11.0000] <Ms2ger>
jwalden would have approved

[13:47:21.0000] <jwalden>
\o/

[13:47:24.0000] <jwalden>
wait what

[13:47:30.0000] <jwalden>
/me consults logs

[13:49:59.0000] <jwalden>
mm, figs

[13:50:36.0000] <jwalden>
http://whereswalden.com/2010/01/29/humor/

[13:52:10.0000] <Ms2ger>
jwalden, surprisingly, that element still exists :)

[14:01:43.0000] <wanderview>
JakeA: should Cache objects returned from CacheStorage be strictly comparable in js?  a === b?

[14:03:11.0000] <wanderview>
nm, I think the spec is pretty clear that it should not

[14:03:26.0000] <wanderview>
"Let cache be a new Cache object."

[14:10:33.0000] <wanderview>
JakeA: err.. thats the case if we there is no entry

[14:10:41.0000] <wanderview>
I'll make an issue since you are probably travelling

[14:13:00.0000] <JakeA>
wanderview: sorry, I had enough connection to get push messages put not enough for IRCCloud to load. Nah, very little object equality in SW apis

[14:13:07.0000] <JakeA>
means we can avoid a lot of the expando issues

[14:13:33.0000] <JakeA>
I'm hitting the road soon for a lovely 24hr flight :(

[14:13:36.0000] <wanderview>
JakeA: I think the way the CacheStorage.open() is written currently can be interpreted as requiring object equality

[14:13:48.0000] <wanderview>
JakeA: seems that is how the blink tests are written currently

[14:13:56.0000] <wanderview>
JakeA: I'll write a github issue

[14:14:28.0000] <JakeA>
wanderview: ah, thank you. Yeah, I don't think we need === there

[14:14:59.0000] <wanderview>
JakeA: thank you!  have a safe flight!  hope you're flying first class :-)

[14:15:20.0000] <JakeA>
nooooope

[14:15:41.0000] <JakeA>
But hey I've got a shit ton of TV series and movies on my laptop so I'll be fine probably

[14:16:24.0000] <wanderview>
yea... I've watched more movies on the flights to Taiwan than I did the month or two before

[14:21:43.0000] <wanderview>
JakeA: https://github.com/slightlyoff/ServiceWorker/issues/551


2014-11-04
[16:22:58.0000] <MikeSmith>
TabAtkins: "current" and "dated" is great (I realize you already decidedーjust chiming in for moral support)

[18:02:48.0000] <jgraham>
Currant and Dated would have been a better pun

[18:15:46.0000] <MikeSmith>
jgraham: harhar

[18:17:30.0000] <MikeSmith>
I think that pun would be completely lost on most en-US-ers

[18:18:10.0000] <erlehmann>
USAsians?

[18:18:41.0000] <erlehmann>
currant is a dried fruit

[18:19:19.0000] <erlehmann>
date is also fruit!

[18:19:28.0000] <terinjokes>
isn't fig also a fruit?

[18:20:25.0000] <terinjokes>
wikipedia tells me no, it's not a fruit, and then preceeds to talk about the tree's "editable fruit" so…

[18:21:00.0000] <erlehmann>
fugggg

[18:21:11.0000] <roc>
is that a <fig contenteditable>?

[18:21:47.0000] <terinjokes>
:+1:

[18:22:22.0000] <MikeSmith>
erlehmann: Thanks I didn't require the explicit explanation myself but I appreciate the consideration

[18:23:05.0000] <erlehmann>
is currant a mene in here?

[18:23:32.0000] <erlehmann>
chinese date is fruit!

[18:23:36.0000] <erlehmann>
fruit is internet mene!

[18:24:36.0000] <terinjokes>
as the self-proclaimed jokester in here, can confirm

[18:24:59.0000] <MikeSmith>
terinjokes: your implication that Wikipedia might have some inconsistencies is shocking

[18:25:30.0000] <terinjokes>
remember, wikipedia is always correct. reality is just sometimes wrong.

[18:25:34.0000] <MikeSmith>
I cringe pretty much any time I read any Wikipedia article odd any length

[18:26:09.0000] <erlehmann>
mene is confirmed then

[18:26:10.0000] <MikeSmith>
*Of any length

[18:27:17.0000] <erlehmann>
odd

[18:27:17.0000] <erlehmann>
fug!

[18:27:28.0000] <erlehmann>
so what is it about currant mene?

[18:27:31.0000] <erlehmann>
how come?

[18:33:37.0000] <jgraham>
MikeSmith: I hope you aren't accusing Ms2ger of being American

[18:39:34.0000] <terinjokes>
anyone know if IE is aware of their evt.defaultPrevented bug and ever plans on fixing it?

[18:49:59.0000] <terinjokes>
(the property is set to `true` immediately after calling "preventDefault", but is reset back to `false` at some point later

[18:50:54.0000] <MikeSmith>
jgraham: if I ever suggested he were American-ish at all, it'd only be in a completely positive sense; e.g. having a strong suspicion of authority :-)

[18:56:22.0000] <jgraham>
MikeSmith: That fig-ures

[18:56:44.0000] <jgraham>
/me gets his coat

[18:56:47.0000] <MikeSmith>
haha

[18:58:36.0000] <erlehmann>
> murrican

[18:58:40.0000] <erlehmann>
> suspicion of authorithy

[18:58:44.0000] <erlehmann>
you best be joking

[19:02:06.0000] <MikeSmith>
erlehmann: I'm from Texas. when it comes to be suspicious of, e.g., the national government, we don't joke

[19:02:27.0000] <MikeSmith>
actually I take that back. we do joke

[19:04:06.0000] <erlehmann>
MikeSmith i thought that was just some kind of jurisdiction thing

[19:04:55.0000] <erlehmann>
“i am not against abortion, i am against federal funding for it” and similar

[19:05:08.0000] <erlehmann>
but all of this is off topic and i am sleepy

[19:05:13.0000] <erlehmann>
so i won't elaborate

[19:05:25.0000] <erlehmann>
back to HTML!

[19:05:43.0000] <erlehmann>
annevk were there notable replies to your HTTPS post?

[19:06:16.0000] <MikeSmith>
HTML is completed. I guess you didn't see the news.

[19:06:47.0000] <erlehmann>
oh, yeah. did someone send the W3C a cake?

[19:28:04.0000] <MikeSmith>
erlehmann: donuts

[19:28:19.0000] <MikeSmith>
Krispy Kreme

[19:33:36.0000] <terinjokes>
wat… i'll like some krispy kreme

[21:39:36.0000] <zewt>
cool, twitter tab in chrome taking 2gb

[21:41:06.0000] <MikeSmith>
zewt: yeah, you need to leave it open for a bit longer for it to reach 4GB

[21:41:44.0000] <zewt>
chrome tabs never get that big, so i assume they're all 32bit processes

[21:41:55.0000] <MikeSmith>
so I just now installed the remote IE thing on my Android phone and it actually works. kinda amazing

[21:42:06.0000] <MikeSmith>
zewt: yeah?

[21:42:20.0000] <MikeSmith>
wonder why they do it that way

[21:43:03.0000] <zewt>
i'd be happy to not be getting daily memory warnings from windows that almost always originate from either firefox or chrome, heh

[21:43:11.0000] <zewt>
apparently 16 gigs of memory isn't enough these days

[21:44:13.0000] <MikeSmith>
I seem to do fine with 8GB, even compiling Firefox Nightly and Chromium a few times a week

[21:44:26.0000] <zewt>
that suggests you're restarting your browsers a few times a week

[21:44:27.0000] <MikeSmith>
and this is on a 3-year-old macbook

[21:44:31.0000] <MikeSmith>
nope

[21:44:34.0000] <MikeSmith>
well yeah

[21:44:40.0000] <MikeSmith>
of course

[21:44:49.0000] <MikeSmith>
but not because of crashes

[21:44:55.0000] <MikeSmith>
just after I recompile

[21:45:08.0000] <MikeSmith>
so yeah maybe that makes a difference

[21:45:10.0000] <zewt>
well, restarting browsers has a way of rebooting leakiness

[21:45:14.0000] <MikeSmith>
sure

[21:46:08.0000] <MikeSmith>
maybe that suggests a best practice: Don't use off-the-shelf browsers; instead, compile them from the sources several times a week. :)

[21:46:20.0000] <zewt>
things i don't ever want to do: compile browsers

[21:47:04.0000] <zewt>
i guess the only possible solution is to find a motherboard that'll handle 64 gigs or something

[21:47:07.0000] <MikeSmith>
I guess I would notice the compile time/perf costs a lot more if I were actually doing browser development and need to compile often daily

[21:47:58.0000] <MikeSmith>
zewt: that probably wouldn't cost you much :p

[21:48:11.0000] <zewt>
probably still need server hardware for that much

[21:48:43.0000] <zewt>
mostly i just don't want to have to think about memory or micromanage browser memory usage, heh

[21:48:58.0000] <MikeSmith>
computers suck so much. we really have not right to be patting ourselves on the back

[21:49:12.0000] <zewt>
which i didn't have to until fairly recently, not sure what changed

[21:49:32.0000] <MikeSmith>
carelessness happened, apparently

[21:51:04.0000] <MikeSmith>
one would think that in the 21st century we'd be far along enough that browser projects would be running some kind of CI automation to check for memory leaks and identify possible causes

[21:51:51.0000] <MikeSmith>
either that or we could be building things with programming languages that don't cause so much memory leaks and/or that at least don't make them so hard to track donw

[22:05:40.0000] <zewt>
probably more to do with not capping the inherent sloppiness of the web

[22:47:56.0000] <zcorpan>
annevk: web compat was one consideration but not the only one, and i think the url parser was fine as far as web compat goes

[22:48:41.0000] <zcorpan>
annevk: i only recall idna2008 disallowing some characters that broke tinyarrows

[00:18:50.0000] <annevk>
zcorpan: it wasn't, at least not at the point I left

[00:19:26.0000] <annevk>
erlehmann: not really, some disagreement over whether EV is a scam on Twitter

[00:19:45.0000] <annevk>
erlehmann: made me find http://www.adambarth.com/papers/2007/jackson-simon-tan-barth.pdf

[00:39:01.0000] <erlehmann>
wach

[01:12:37.0000] <annevk>
http://www.unicode.org/reports/tr51/

[01:13:06.0000] <annevk>
"Unicode Version 8.0 is adding 5 symbol modifier characters that provide for a range of skin tones for human emoji."

[01:15:22.0000] <erlehmann>
those insensitive clods, i am drawing a monochrome font!

[01:16:46.0000] <erlehmann>
its worse enough that „black“ means „filled“ and „white“ means „not filled“ in unicode. we only have this problem because almost everyone decided to make emoji colorful. :(

[01:17:46.0000] <annevk>
erlehmann: just place U+FE0E after your emoji to get a text presentation

[01:18:14.0000] <annevk>
(in a theoretical system)

[01:18:19.0000] <erlehmann>
annevk i am drawing the symbols

[01:18:34.0000] <erlehmann>
example http://daten.dieweltistgarnichtso.net/pics/icons/unifont-symbols-emoji.png

[01:18:46.0000] <annevk>
good times

[01:19:25.0000] <erlehmann>
i have NO IDEA how to draw 5 different skin tones in a monochrome 16×16 pixel grid

[01:32:53.0000] <annevk>
erlehmann: they are doing this to spite you

[01:33:47.0000] <erlehmann>
well, i read the document and i better start doing stippled patches

[01:44:35.0000] <zcorpan>
erlehmann: nice trollface

[01:45:09.0000] <erlehmann>
zcorpan unfortunately, my COOL FACE was the only symbol the maintainer did not merge. it did not fit with the style of the other glyphs!

[01:45:34.0000] <erlehmann>
but i cannot think of a more stereotypical „grinning face with smiling eyes“!

[01:46:37.0000] <erlehmann>
i found it funny how people can recognize the pictograph for levitating business man

[01:57:27.0000] <zcorpan>
i'm a bit sad that this hasn't been accepted yet https://twitter.com/zcorpan/status/463577369265971200

[02:01:07.0000] <darobin>
an awesome idea

[02:02:14.0000] <Ms2ger>
Hey darobin, know what'd be an awesome idea too?

[02:02:29.0000] <darobin>
yes, I need a nap

[02:02:53.0000] <darobin>
plus, I've finished all the chocolate that jgraham brought me

[02:03:21.0000] <Ms2ger>
Or reviewing https://critic.hoppipolla.co.uk/r/2985 :)

[02:03:36.0000] <darobin>
/me looks

[02:03:37.0000] <darobin>
ooh nice

[02:04:02.0000] <darobin>
not this second but definitely keeping the tab open

[02:05:50.0000] <Ms2ger>
Thanks :)

[02:23:05.0000] <zcorpan>
erlehmann: my reading suggests you should probably use the fallback support level, i.e. not combine

[02:23:20.0000] <erlehmann>
yeah

[03:43:24.0000] <karlcow>
Pile of poo should have different colors.

[03:43:50.0000] <erlehmann>
karlcow you are of genious

[03:57:01.0000] <roc>
we have SVG fonts now. Use gradients.

[04:00:53.0000] <Ms2ger>
/me read "we hate SVG fonts now"

[04:28:10.0000] <espadrine_>
does the URL standard purposefully ignore IPv4 addresses as hosts?

[04:28:44.0000] <espadrine_>
context: I was wondering if the 127.1 shorthand was documented anywhere

[04:34:20.0000] <espadrine_>
by the way, should this work: http://[0:0:0:0:0:0:0:1]

[05:03:10.0000] <annevk>
espadrine_: it did, but that needs to be changed

[05:03:30.0000] <Domenic>
Nice, Intent to Implement for Element.prototype.closest

[05:04:03.0000] <annevk>
espadrine_: yes, that becomes http://[::1]/

[05:04:44.0000] <annevk>
Domenic: nice, bz looked into at some point for Firefox, not sure what happened

[05:04:52.0000] <annevk>
Domenic: perhaps we're afraid of event handlers biting

[05:05:00.0000] <Domenic>
apparently WebKit has it, so webcompat must not be a big issue

[05:06:11.0000] <annevk>
https://bugzilla.mozilla.org/show_bug.cgi?id=1055533

[05:06:16.0000] <annevk>
Already landed in Firefox :-)

[05:06:49.0000] <espadrine_>
annevk: good! (although for some reason I can't use IPv6 URLs currently, even for localhost)

[06:34:39.0000] <annevk>
Thanks for the reply hsivonen

[06:34:45.0000] <annevk>
will keep the bug open

[06:59:48.0000] <Domenic>
I'm really excited about the possibility of URL getting solid tests + reference implementation that conform line-by-line with the spec. Unsure if peg.js is the right road to that, but it seems like a big win for the spec in general.

[07:08:52.0000] <annevk>
I'm a bit dismayed by Sam only looking at tests and not the original spec

[07:09:20.0000] <annevk>
But yeah, hopefully enough iteration will get us someplace nice

[07:16:55.0000] <Domenic>
Yeah I mean ideally there would be a line-by-line reference implementation of the original spec too

[07:17:07.0000] <Domenic>
I think you had one at some point but maybe didn't keep it updated?

[07:17:29.0000] <annevk>
Domenic: https://github.com/Polymer/url

[07:18:05.0000] <Domenic>
not many algorithm changes since january

[07:18:23.0000] <annevk>
Domenic: yeah, not sure it's maintained :/

[07:18:33.0000] <annevk>
Domenic: it's easy enough to pick up again though

[07:18:54.0000] <annevk>
Domenic: I'm mostly waiting for browsers to pick up the pace again

[07:19:06.0000] <Domenic>
annevk: yeah fair

[07:19:20.0000] <annevk>
Someone is landing patches making Firefox match it a bit better

[07:19:29.0000] <annevk>
E.g. doing percent-decoding for host names

[07:19:49.0000] <annevk>
But it's hard since everything is a compat hazard

[07:21:45.0000] <Domenic>
i mean ideally aligning with some other browser would not be a compat hazard

[07:22:06.0000] <Domenic>
so if you avoid the cases where no browser aligns with the spec (and ideally fix the spec to align with at least one browser) then the patch should be acceptable

[07:22:51.0000] <annevk>
I don't think it's that simple. The specification aligns with one browser already as far as I know. However, for things like URL fragments there's a bunch of sniffing going on in JavaScript

[07:23:04.0000] <annevk>
Presumably for some path and query handling as well

[07:23:15.0000] <Domenic>
:(

[07:23:56.0000] <annevk>
And all that sniffing is happening because we haven't had interoperable parsing... It's a nice circle

[07:44:39.0000] <annevk>
hsivonen: do you think the Encoding Standard needs to change around gb18030?

[07:44:51.0000] <annevk>
hsivonen: I know Gecko still keeps a distinction

[08:19:20.0000] <SimonSapin>
espadrine_: https://www.w3.org/Bugs/Public/show_bug.cgi?id=26431

[08:20:23.0000] <espadrine_>
SimonSapin: thanks!

[08:32:58.0000] <caitp>
would you say that shift-click navigation has a pretty consistent behaviour across user agents?

[08:33:44.0000] <annevk>
navigation doesn't, so...

[08:34:45.0000] <caitp>
particularly the "navigate in a new frame" behaviour

[09:04:42.0000] <erlehmann>
caitp why the question about shift-click?

[09:04:55.0000] <erlehmann>
also i navigate using the keyboard (hands hurt if too much touchpad)

[09:05:09.0000] <erlehmann>
f → follow

[09:05:10.0000] <erlehmann>
d → follow in new buffer

[09:05:40.0000] <erlehmann>
some sites hijack text input and make it impossible to navigate away from them

[09:05:52.0000] <erlehmann>
but my keyboard does have dedicated back and forward keys (thinkpad)

[09:06:12.0000] <caitp>
if enough browsers want to open shift-clicked links in a new frame, then angularjs should not do any processing on such clicks --- i'm just trying to figure out how big of a problem it is to just abort processing of clicks if shift is pressed

[09:09:28.0000] <erlehmann>
caitp i can test

[09:09:59.0000] <erlehmann>
caitp how does angular react with keyboard navigation in general?

[09:10:58.0000] <erlehmann>
caitp chromium opens a new tab on strg+click and a new window on shift+click

[09:11:06.0000] <caitp>
https://github.com/angular/angular.js/blob/master/src/ng/location.js#L775-L817 like this --- if it thinks it needs to, it will rewrite the url and prevent default

[09:11:23.0000] <caitp>
but if you're trying to open a link in a new frame, you probably don't want that

[09:12:07.0000] <erlehmann>
conkeror does nothing on both shift+click and strg+click, but it is a keyboard-focussed non-mainstream browser

[09:12:51.0000] <erlehmann>
elinks follows links on strg+click, but not on shift+click

[09:13:30.0000] <erlehmann>
äh

[09:13:32.0000] <erlehmann>
i have a german keyboard

[09:13:40.0000] <erlehmann>
strg → ctrl

[09:13:48.0000] <erlehmann>
links2 follows on both, without opening new tabs or windows

[09:14:54.0000] <caitp>
supported browsers are basically relatively modern versions of the big 5, so there isn't too much of a worry about those

[09:15:27.0000] <erlehmann>
netsurf displays a download dialog on shift-click, interesting. ctrl-click makes a new window.

[09:16:05.0000] <erlehmann>
caitp i wish i had something that describes the tradeoff of compatibility and accessability on one side and developer time on the other side as well as the related “better fast than correct”

[09:16:11.0000] <erlehmann>
do you know one?

[09:16:42.0000] <caitp>
unfortunately I don't :(

[09:17:01.0000] <erlehmann>
iceweasel (unbranded firefox) opens a new window on shift-click and a new tab on ctrl-click.

[09:17:10.0000] <erlehmann>
exactly the opposite of chromium (unbranded chrome)

[09:17:39.0000] <erlehmann>
i would let alt and strg alone

[09:17:47.0000] <erlehmann>
they are already used by access keys after all

[09:17:49.0000] <caitp>
on mac, in chromium, I get menu with ctrl+click, new tab with meta+click, and new window with shift+click

[09:17:50.0000] <erlehmann>
and lots of people use the modifiers

[09:17:57.0000] <erlehmann>
yeah, it is platform specific

[09:18:03.0000] <erlehmann>
i think any modifier should stop click capture

[09:18:21.0000] <erlehmann>
or rather, this should not be measured in clicks

[09:18:24.0000] <erlehmann>
i cannot copy from google homepage the links anymore

[09:18:33.0000] <erlehmann>
because they apparently get rewritten on click or something

[09:18:39.0000] <caitp>
it's why it's really too bad we don't have more information from UI Events, I really liked my idea for event "roles" to indicate what the user agent thinks you're trying to do

[09:18:42.0000] <erlehmann>
so if i never „click“, i get google tracking garbage

[09:19:01.0000] <erlehmann>
i think less information would be the way to go here

[09:19:18.0000] <erlehmann>
write your scripts interface-agnostic

[09:19:36.0000] <erlehmann>
i write my css interface-agnostic as well

[09:19:37.0000] <erlehmann>
no click events and so on

[09:19:37.0000] <erlehmann>
progressive enhancement instead of graceful degradation

[09:19:46.0000] <erlehmann>
(stopping click procssing in corner cases is degradation)

[09:20:09.0000] <caitp>
I think something like `if (event.role !== "navigate") return;` is a lot more interface-agnostic than worrying about different combinations of special keys

[09:20:13.0000] <caitp>
or which button is clicked

[09:21:08.0000] <erlehmann>
yeah, but you are advocating adding complexity to handle problems

[09:21:12.0000] <erlehmann>
i am advocating removing complexity

[09:21:38.0000] <caitp>
I'm not sure anyone has figured out how to really make UI "simple"

[09:21:49.0000] <erlehmann>
i think different

[09:22:34.0000] <erlehmann>
for example, i follow the rule that every state has to have a url.

[09:23:01.0000] <erlehmann>
every state i could care about. no exceptions.

[09:23:02.0000] <erlehmann>
this means i purposefully ignore stuff that i would not cram into the url

[09:23:03.0000] <erlehmann>
no tracking

[09:23:26.0000] <erlehmann>
and no scroll position dependent events or whatever

[09:23:27.0000] <erlehmann>
it makes life vastly easier and the result easier to reason about

[09:23:50.0000] <erlehmann>
but of course many people i know ask „but how do i do infinite scrolling then“ or similar stuff

[09:24:11.0000] <erlehmann>
and i say “you don't. it breaks user expectations about finite documents and scrollbars.”

[09:24:38.0000] <erlehmann>
i think the key to successful UI is restricting common developers, not giving them more power.

[09:25:06.0000] <caitp>
yeah, so this is the "documents are not applications" line of thinking, and it makes sense, but I work on an application framework, not a document framework, and at some point someone decided that the web is a great platform for applications

[09:25:07.0000] <erlehmann>
see podcasts and feed readers. because the format is so limited, they had quite a competition.

[09:25:48.0000] <erlehmann>
caitp you can have applications. it is only that you need to manage state very carefully.

[09:25:53.0000] <erlehmann>
i think that if you manage to avoid hidden state, you manage to avoid LOTS of user frustration

[09:26:10.0000] <caitp>
it's not even a case of hidden state though, it literally is just a URL

[09:26:19.0000] <erlehmann>
on a related note, avoid state explosion.

[09:26:53.0000] <caitp>
it's just that for older browsers it's necessary to rewrite the URL, and then you've got this whole virtual URL ugly thing, and there's a need to avoid doing the wrong thing if you aren't supposed to actually navigate

[09:27:01.0000] <erlehmann>
the url for a long time (before „we break your back button with impunity“ crap) set user interactions

[09:27:09.0000] <erlehmann>
caitp i have written about that topic http://news.dieweltistgarnichtso.net/posts/hidden-state.xml

[09:27:20.0000] <caitp>
oh yes, I sympathize

[09:27:31.0000] <caitp>
history api helps a lot with this, although it's still broken in a lot of cases

[09:27:35.0000] <erlehmann>
i also recommend the writings of olia lialina

[09:30:25.0000] <erlehmann>
caitp almost all of the harder problems i see on the web, regardless if with wep apps or web pages or whatever, are about state and state transitions. users cannot always articulate it, but i think berners-lee really hit home with URLs.

[09:30:47.0000] <erlehmann>
if web apps are the applications, the url bar is the command line of the web

[09:30:50.0000] <erlehmann>
and if your web app carefully manages its state, that means you can go to every state with the command line

[09:31:00.0000] <erlehmann>
something that is impossible in most, if not all, other systems

[09:32:15.0000] <erlehmann>
whenever you break that expectation, you are in for a world of hurt. like a guy i know who had a special cookie-re-issuing function on hitting the back button after some action that should have been a POST (but was a GET with a cookie issued)

[09:32:34.0000] <caitp>
sure, but the URL isn't the only way of inputting commands into this system --- user interaction also is

[09:32:54.0000] <caitp>
so if you ahve a user interaction which sometimes wants to change the state, and sometimes wants to open a new browsing context with its own state, you have to know which one to do

[09:33:04.0000] <caitp>
that user action is a click

[09:34:10.0000] <erlehmann>
if you have a click system

[09:34:14.0000] <erlehmann>
or a touch

[09:34:17.0000] <erlehmann>
if you have a touch system

[09:34:31.0000] <erlehmann>
or a back button or a f or the enter button or whatever

[09:34:53.0000] <erlehmann>
a programmer that is sure xe will never get RSI is probably either arrogant or genetically superior

[09:36:22.0000] <erlehmann>
(i use keyboard browsing because of hands)

[09:36:47.0000] <caitp>
yeah, click isn't always available, this is true

[09:38:15.0000] <erlehmann>
the focus on click reminds me of pre-mobile days

[09:39:01.0000] <erlehmann>
where when one was saying “you should not rely on clicking as user interaction, do not use hover states etc.” people would respond “are you using a text browser? get with the times”

[09:39:51.0000] <erlehmann>
you were saying “big five” and i suspect you mean firefox, chrome, safari, ie and one other that i don't know. but don't forget that opera was a common browser once too!

[09:39:58.0000] <boogyman>
erlehmann: and you can say, not everyone in the world can see or hear.

[09:39:59.0000] <erlehmann>
so compatibility is really hampered by that stuff

[09:40:41.0000] <erlehmann>
boogyman yes, which is why i focus on progressive enhancement and not graceful degradation.

[09:40:42.0000] <boogyman>
also, there are many times where your users are not even people.

[09:41:16.0000] <erlehmann>
yes, which is why i focus on proper semantics and outlines.

[09:41:44.0000] <erlehmann>
and test everything with curl. if that is too complicated, my interface is shit.

[09:42:19.0000] <erlehmann>
a friend of mine made something that could literally not tested with curl, because his “REST API” made each call consist of two calls, the first to grab the session

[09:42:29.0000] <erlehmann>
needless to say, he was the only user of his API

[09:42:49.0000] <caitp>
that doesn't sound very restful

[09:44:01.0000] <boogyman>
In my opinion that's okay if the identifier for that session is part of the authentication/authorization mechanism.

[09:45:15.0000] <erlehmann>
i have never seen a use case where something involving sessions could not be done without sessions, except for hiding the state of the system from the user.

[09:45:21.0000] <erlehmann>
like tracking cookies.

[09:45:42.0000] <boogyman>
erlehmann: access control

[09:46:51.0000] <erlehmann>
boogyman RESTful access control does not need sessions. just send credentials on every request. in before “it is in secure” – yes, not using transport encryption is insecure.

[09:47:37.0000] <erlehmann>
i think stateless systems vs. stateful systems have the same problem as functional programming vs. imperative programming. one is vastly easier to grasp for many and works well enough for 80% of the use cases.

[09:47:59.0000] <boogyman>
but, there are many HTTP based API's that claim to adhere to RESTful principles, when really, they are just HTTP based.

[09:49:14.0000] <erlehmann>
indeed

[09:50:23.0000] <Domenic>
annevk: in the course of writing this email I've mostly convinced myself that overloading body to allow a function is the least-bad option.

[09:53:22.0000] <erlehmann>
what

[09:53:26.0000] <erlehmann>
Domenic explain

[09:56:48.0000] <annevk>
heh

[09:58:05.0000] <erlehmann>
boogyman richardson maturity model

[09:58:13.0000] <erlehmann>
boogyman read http://martinfowler.com/articles/richardsonMaturityModel.html

[09:59:18.0000] <boogyman>
erlehmann: ?

[09:59:50.0000] <erlehmann>
boogyman it is a good overview regarding levels of RESTfulness

[10:00:37.0000] <boogyman>
okay. I'll keep that in my mind when I'm referring others.

[10:05:20.0000] <erlehmann>
caitp maybe one could manage application state easier with checking querySelectorAll, :target and :focus

[10:05:25.0000] <erlehmann>
leverage the browser state machine!

[11:03:57.0000] <annevk>
From the stuff I work on, the Encoding Standard seems to approach stability the fastest, while I would have expected it to take a very long time...

[11:04:22.0000] <annevk>
Getting to the point of only a few outstanding issues

[11:05:41.0000] <Hixie>
am i right that all Function objects you create in JS (i.e. those that aren't weird things we provide in the web api) have a [[Construct]] ?

[11:06:17.0000] <TabAtkins>
Hixie: Yeah.

[11:06:26.0000] <Hixie>
k, thanks

[11:07:26.0000] <Hixie>
is it also always true that, assuming you haven't fiddled with it, if F.prototype == O, O.constructor == F?

[11:07:52.0000] <caitp>
no

[11:09:30.0000] <TabAtkins>
Multiple functions can share a prototype.

[11:12:57.0000] <Hixie>
so what does O.constructor return?

[11:14:19.0000] <caitp>
if B extends A, `new B`'s constructor is B, but if you walk up the prototype chain, you'll run into an object whose constructor is A

[11:14:38.0000] <Hixie>
by "constructor" you mean "value of the constructor property"?

[11:14:46.0000] <caitp>
yes

[11:19:30.0000] <Hixie>
class { constructor () { a() } foo() { b() } }  returns a Function that calls a() with a .prototype that has one member 'foo' that is a function that calls b(), and one member constructor that points to the Function that calls a()?

[11:20:22.0000] <Hixie>
so i can do the same with  var q = { foo: function foo() { b() } }; var f = function() { a() }; f.prototype = q; q.constructor = f; ?

[11:20:27.0000] <Hixie>
are those distinguishable in any way?

[11:23:30.0000] <caitp>
well, they would be slightly different, but they'd basically behave the same

[11:23:39.0000] <Hixie>
how would they be different?

[11:23:58.0000] <caitp>
q would be missing a constructor property, for one

[11:24:20.0000] <Hixie>
"q.constructor = f;" doesn't work?

[11:24:28.0000] <caitp>
oh, I must have missed that

[11:24:35.0000] <Hixie>
k

[11:24:48.0000] <caitp>
it does work, but is still slightly different, since assignment will set up the property descriptor differently

[11:25:03.0000] <caitp>
observable difference but you'd have to be pretty nitpicky to observe it

[11:27:53.0000] <Hixie>
i should use defineProperty instead of assignment?

[11:29:18.0000] <caitp>
it would be a data property which is not enumerable, is writable and configurable

[11:30:17.0000] <caitp>
actually, it looks like there are cases in the spec where it's not writable/configurable

[11:31:24.0000] <Hixie>
how about: var q = { foo: function foo() { b() } }; var f = function() { a() }; Object.setPrototypeOf(f, q); Object.defineProperty(q, 'constructor', { value: f, writable:true,enumerable:false,configurable:true });

[11:31:45.0000] <Hixie>
is that distinguishable?

[11:32:26.0000] <hsivonen>
annevk: no idea about the actual needs re gbk

[11:33:10.0000] <caitp>
setPrototypeOf will change __proto__ or the internal prototype, not `prototype`

[11:33:17.0000] <annevk>
hsivonen: okay, since Firefox has this split decoder / encoder setup and the spec doesn't and there's no open bug... I guess I should file a bug to at least track it

[11:33:26.0000] <annevk>
hsivonen: against the spec that is

[11:33:35.0000] <hsivonen>
annevk: makes sense

[11:35:04.0000] <Hixie>
caitp: oh right

[11:36:05.0000] <Hixie>
how about: var q = { foo: function foo() { b() } }; var f = function() { a() }; Object.defineProperty(f, 'property', { value: q, writable:false,enumerable:false,configurable:false }); Object.defineProperty(q, 'constructor', { value: f, writable:true,enumerable:false,configurable:true }); ?

[11:36:31.0000] <Hixie>
(and why on earth do those properties have different settings)

[11:39:39.0000] <annevk>
hsivonen: it seems we should still have a Firefox bug on making them use the same table so we can save memory

[11:39:48.0000] <annevk>
hsivonen: I can file that too if you agree

[11:41:50.0000] <Hixie>
can you tell in a constructor if you were called with "new" or not?

[11:43:17.0000] <caitp>
Hixie: sort of

[11:44:37.0000] <caitp>
the way people usually use is `function Constructor() { 'use strict'; if (!this) { /* function was just called normally */ }`

[11:45:01.0000] <caitp>
or `if (!(this instanceof Constructor)) return new Constructor(...)` --- but those methods are fallible

[11:46:51.0000] <Hixie>
huh, there really isn't a way, it looks like

[11:46:52.0000] <Hixie>
that's odd

[11:47:14.0000] <caitp>
each engine has their internal ways of figuring out, but none exposed publicly

[11:49:50.0000] <annevk>
hsivonen: https://bugzilla.mozilla.org/show_bug.cgi?id=711101 removing IBM encodings is fixed, no?

[11:52:13.0000] <TabAtkins>
Yeah, it's always possible to trick the "was I called with new?" tests by passing things in via .call().  There's no language-provided way to tell.

[11:52:28.0000] <TabAtkins>
I usually use caitp's second test.

[11:55:08.0000] <caitp>
https://esdiscuss.org/topic/new-instantiation-design-alternatives I think there were some ideas tossed around about providing a way to know here

[11:55:13.0000] <caitp>
but I can't remember, and it was a long thread

[11:57:32.0000] <Hixie>
if it can be faked, there's not much point checking at all, except for like an assert() or something

[12:00:33.0000] <TabAtkins>
Hixie: Main use-case for checking is to allow the function to be called with or without "new".

[12:00:49.0000] <Hixie>
why would you want that?

[12:00:55.0000] <caitp>
which is the case for some builtins

[12:00:59.0000] <TabAtkins>
...so you can call it without "new"?

[12:01:09.0000] <caitp>
new String() and String() do different things

[12:01:23.0000] <Hixie>
that seems like a very confusing API

[12:01:35.0000] <TabAtkins>
One's a constructor, one's a converter.

[12:01:49.0000] <caitp>
lots of bad decisions were made with JS, but most of them were made when I was less than 4 feet tall

[12:01:53.0000] <TabAtkins>
Also, sometimes to allow you to construct an object without "new".

[12:01:56.0000] <caitp>
so, it was bound to happen

[12:02:25.0000] <TabAtkins>
Like if you have a very simple object that's going to get constructed a lot, the extra noise of "new " can get distracting.

[12:03:56.0000] <TabAtkins>
For example, my bignum class at https://github.com/tabatkins/bignum would be much harder to use if you had to say "new Z(5).add(new Z(6))" all the time.

[12:04:12.0000] <TabAtkins>
It's bad enough that you have to do "Z(5).add(Z(6))", because we dont' have operator overloading yet.

[12:04:46.0000] <Hixie>
supporting both seems like a very confusing API to me, but i guess opinions may vary :-)

[12:05:45.0000] <TabAtkins>
Disallowing "new" for a constructor would be super-confusing as a consistency break.

[12:05:53.0000] <TabAtkins>
Not to mention feeling really perverse.

[12:06:46.0000] <annevk>
I thought new-style would require it to allow subclassing, but I guess that might be changed

[12:07:05.0000] <annevk>
Bignums should just be part of the language

[12:07:57.0000] <TabAtkins>
annevk: Well, yes, of course they should be.  That's not the point of my example. ^_^

[13:00:41.0000] <Hixie>
anyone know how custom elements work? i'm trying to figure out how/whether browsers are supposed to avoid huge bloat from every custom element having its own copy of style

[13:02:07.0000] <annevk>
Hixie: Domenic prolly does

[13:02:23.0000] <Hixie>
he's probably at blinkon

[13:03:20.0000] <annevk>
Hixie: bz maybe

[13:08:05.0000] <caitp>
what do you mean by "own copy of style"?

[13:10:53.0000] <Hixie>
i mean its own <style> element, which has to be individually parsed, turned into internal style objects, etc

[13:20:08.0000] <caitp>
well there's a concept of rare data for a lot of these constructs, so you would have to have a pretty complicated setup to really see it get bad, hopefully

[13:24:34.0000] <TabAtkins>
There's deduping involved.

[13:24:50.0000] <TabAtkins>
(I don't know details.)

[13:26:51.0000] <caitp>
in core/dom/shadow you have ShadowRootRareData which owns a StyleSheetList pointer which may or may not be allocated, raredata itself may or may not be allocated, an element's CSSStyleDeclaration may or may not be allocated, different CSS properties may or may not be allocated, etc etc etc.

[13:27:26.0000] <caitp>
trading complexity for memory cost

[13:29:05.0000] <caitp>
but i'll repeat tab, I don't know the details in these cases --- I think on average the cost is probably pretty minimal

[13:30:34.0000] <Hixie>
apparently the style element's textContent is hashed and looked up somehow so that the style work is all shared

[13:30:38.0000] <Hixie>
at least in chrome


2014-11-05
[18:09:39.0000] <pikaren>
Did W3C invent HTML5

[18:10:53.0000] <jgraham>
They received it by divine revelation. HTML5 is the one true word of God.

[18:21:32.0000] <caitp>
one would hope god would do a better job than that

[18:23:08.0000] <caitp>
an omniscient creator wouldn't care about breaking the web, but would make a whole new web, with pancakes

[18:23:39.0000] <caitp>
but we don't have an omniscient creator, just millions of fallible ones

[18:58:29.0000] <MikeSmith>
pikaren: no W3C did not invent HTML5

[18:59:52.0000] <MikeSmith>
pikaren: if you want a history of where it came from and when there's some places like https://platform.html5.org/history/ that are useful. All the dates there are links to the dated versions of the spec as it progressed

[19:02:22.0000] <MikeSmith>
pikaren: and there are other things like https://github.com/whatwg/web-history/blob/master/README.md#a-brief-history-of-the-modern-web-platform and http://www.w3.org/html/wg/wiki/History that go into the wider history around it all

[19:05:27.0000] <caitp>
there's also the brilliant dramatization of the effort on the history channel

[19:05:35.0000] <MikeSmith>
haha

[19:05:48.0000] <MikeSmith>
it's actually a reality show

[19:07:51.0000] <miketaylr>
which is people reading email

[19:07:52.0000] <miketaylr>
naked

[19:08:25.0000] <MikeSmith>
touché

[19:08:55.0000] <MikeSmith>
yeah, just can't understand why viewers don't find that terrifically appealing

[19:09:04.0000] <MikeSmith>
maybe we need to change the background music

[19:09:23.0000] <MikeSmith>
and add some mood lighting

[19:10:50.0000] <miketaylr>
:)~

[19:29:58.0000] <erlehmann>
hey gsnedders remember that 5 years ago you helped me transcribing an interview with moot?

[19:29:59.0000] <erlehmann>
http://news.dieweltistgarnichtso.net/interviews/moot-4chan.html

[19:30:05.0000] <erlehmann>
i still have not transcribed the second half of that interview

[19:30:44.0000] <erlehmann>
btw, what would be the markup for a dialogue?

[19:33:35.0000] <erlehmann>
for „interview moot“ my site ranks for higher than the AMA

[19:33:36.0000] <erlehmann>
funny

[19:35:38.0000] <caitp>
do people actually call him moot when they're talking to him

[19:36:19.0000] <erlehmann>
i did

[19:37:44.0000] <erlehmann>
caitp interface-wise, can you tell me what you dislike about http://news.dieweltistgarnichtso.net/ ? :)

[19:38:47.0000] <caitp>
is this back on the topic earlier about "urls control everything"

[19:39:35.0000] <erlehmann>
no

[19:39:43.0000] <erlehmann>
it is about what you expect from an interface

[19:39:52.0000] <erlehmann>
is this pleasant to read for someone who channels angular?

[19:40:49.0000] <caitp>
there are some things you could add, like a way to sort the table view, or a way to filter by search terms --- maybe a short synopsis of each item (slightly longer than just the date or the one-word description of what it is)

[19:41:01.0000] <caitp>
but I dunno, pretty straight forward minimalist thing, it works

[19:41:41.0000] <erlehmann>
that is exactly what i was looking for, thank you for the feedback

[19:41:45.0000] <erlehmann>
how did i sort table

[19:41:57.0000] <erlehmann>
polyfill is not ready yet

[19:42:34.0000] <erlehmann>
caitp the synopsis item comes up from time to time, i think it might be better to use more descriptive titles

[19:43:13.0000] <terinjokes>
i call him moot

[19:44:33.0000] <caitp>
a quick google search for "table sorting" finds http://tablesorter.com/, which claims to be a jquery plugin that you should donate money to

[19:45:18.0000] <erlehmann>
> jquery

[19:45:42.0000] <erlehmann>
everything that would not fit on a floppy disc is disqualified

[19:46:46.0000] <terinjokes>
i believe jQuery minifed and gzipped fits on a floopy

[19:48:13.0000] <caitp>
about 30kb, based on google's cdn

[19:49:22.0000] <caitp>
it probably wouldn't be too much trouble to write one from scratch that was a lot tinier, but you'd probably have to do gross things like listen for DOMContentLoaded or other badness

[19:50:10.0000] <terinjokes>
i just did this for my project

[19:50:47.0000] <terinjokes>
thus all the complaints in this channel over the last week

[19:52:45.0000] <erlehmann>
caitp 30kb is still 15 times the size of my biggest page with a table.

[19:52:46.0000] <erlehmann>
; curl -IsH 'Accept-Encoding: gzip,deflate' http://news.dieweltistgarnichtso.net/diary/index.html | grep '^Content-Length'

[19:52:46.0000] <erlehmann>
Content-Length: 2035

[19:53:34.0000] <erlehmann>
i am not willing to bear the performance implications of bloating my content that much

[19:55:09.0000] <caitp>
remember that content-length isn't the only thing going over the wire

[19:55:43.0000] <erlehmann>
yeah, but what else should there be to bloat?

[19:56:46.0000] <erlehmann>
hahaha

[19:56:55.0000] <erlehmann>
chromium finds only one fault

[19:56:56.0000] <erlehmann>
unused css rules

[19:57:14.0000] <caitp>
socket acknowledgement, tls negotiation, etc

[19:57:15.0000] <erlehmann>
no shit sherlock, i don't have every element on my page

[19:57:18.0000] <erlehmann>
also chromium will probably always say that :target and :hover and :active are unneeded

[19:57:26.0000] <erlehmann>
no TLS here, sorry

[19:57:37.0000] <caitp>
just throwing out examples :P

[23:08:17.0000] <karlcow>
annevk: is there a banana bug in bugzilla?

[23:29:58.0000] <zcorpan>
erlehmann: what, no tls? heresy!

[00:30:36.0000] <annevk>
karlcow: you mean re that WHATWG thread?

[00:30:38.0000] <annevk>
karlcow: yes

[00:30:53.0000] <karlcow>
yup

[01:22:17.0000] <Domenic>
Hixie: FWIW in my custom elements I don't do the silly per-element <style> thing. I just use a stylesheet with custom rules

[01:22:46.0000] <Domenic>
For scoping styles via shadow DOM though you do need to insert them in the shadow root I guess

[01:23:01.0000] <Domenic>
(Also I am in Europe on vacation \o/)

[01:25:28.0000] <The-Compiler>
Is there some accepted syntax I could use in a browser to say "load foo but without proxy" in an URL?

[01:26:04.0000] <Domenic>
Hixie: arrow functions don't have a [[Construct]].

[01:28:57.0000] <annevk>
The-Compiler: afaik, no

[01:32:34.0000] <The-Compiler>
also, why does "//whatwg.org" work as URL in browsers? Is that a valid URL with no scheme?

[01:35:37.0000] <annevk>
The-Compiler: work where?

[01:35:56.0000] <annevk>
The-Compiler: my address bar takes me to file:////whatwg.org ...

[01:36:13.0000] <The-Compiler>
annevk: I tried Chrome and Firefox

[01:36:49.0000] <annevk>
The-Compiler: if you're just trying the address bar, it's up to the browser really, as that's just a UI field

[01:37:41.0000] <annevk>
The-Compiler: if you're talking about <a>, we have a say in that, and it might work there depending on the base URL, as it's a scheme-relative URL

[01:37:56.0000] <The-Compiler>
annevk: ah - I was talking about the address bar, sorry

[01:38:49.0000] <The-Compiler>
I'm writing my own browser (based on QtWebKit), and would find such a "use no proxy" syntax useful, so I wondered if //URL would be a sane syntax for that :)

[01:39:08.0000] <annevk>
I see, it's not

[01:39:28.0000] <The-Compiler>
(got the idea when I watched a co-worker using that for a machine in the LAN, probably used to it by Windows/Samba)

[01:52:15.0000] <Domenic>
annevk: after sleeping on it I think I'll just send an email to the list saying "here is the version with overloading; seem OK?"

[01:54:20.0000] <annevk>
Domenic: yeah, but it sounds like you should be seeing a museum rather than your outbox

[01:55:05.0000] <Domenic>
annevk: heh. i'm at a science-programming thing for the first few days and this is downtime.

[01:55:49.0000] <annevk>
https://tools.ietf.org/html/draft-reschke-objsec Julian Reschke has been coopted by the GSMA?

[01:57:30.0000] <annevk>
The same crowd that ads unique tracking headers, advertisements, and other crap over insecure connections, would really like to continue doing that... As if they are unclear on the fact that this is part of why we move to HTTPS.

[02:01:32.0000] <erlehmann>
zcorpan what are you referring to?

[02:02:06.0000] <zcorpan>
erlehmann: http://krijnhoetmer.nl/irc-logs/whatwg/20141105#l-163

[02:06:18.0000] <erlehmann>
ok

[02:10:31.0000] <Domenic>
annevk: no twitter account for fetch?

[02:12:07.0000] <annevk>
Domenic: I was thinking of morphing xhrstandard at some point

[02:12:13.0000] <Domenic>
hmm

[03:50:03.0000] <annevk>
Domenic: maybe I'll add one... I added @notifyapi for now

[03:50:20.0000] <Domenic>
annevk: any rhyme or reason on -standard vs. -api?

[03:50:57.0000] <Domenic>
annevk: anyway if you add one before 15:00 UTC I'll update my scheduled tweet to say @fetchstandard instead of "Fetch Standard" :P

[03:51:19.0000] <annevk>
Domenic: it's mostly being constrained by existing Twitter usernames

[03:52:00.0000] <annevk>
Domenic: scheduled tweets? Are you into social marketing or something? :p

[03:52:16.0000] <Domenic>
I don't want to abandon my US audience :P

[04:00:17.0000] <annevk>
Domenic: added account

[04:05:19.0000] <annevk>
JavaScript, Books, Figures, and Quirks Mode lack accounts

[04:06:22.0000] <annevk>
And I guess some of the repositories do

[04:10:43.0000] <Domenic>
I like this http://static.manuel-strehl.de/StillImage/htmlnext_logo2.svg

[04:17:18.0000] <Domenic>
annevk: why can TextEncoder encode as UTF-16? Don't we only like UTF-8?

[04:44:37.0000] <annevk>
Domenic: I think there was some argument that utf-16 was needed

[04:44:53.0000] <annevk>
Domenic: and that at the time we were less concerned about utf-16 because we didn't know much

[04:48:16.0000] <espadrine_>
rubys: thanks a lot for this! http://intertwingly.net/projects/pegurl/liveview.html

[04:48:29.0000] <rubys>
yw

[04:49:23.0000] <espadrine_>
Does red indicate something that the browsers do wrong, assuming they intend to implement this?

[04:49:46.0000] <rubys>
If you assume that, then yes. :-)

[04:49:47.0000] <espadrine_>
I'm surprised by the canonicalization of href, could it break things?

[04:50:53.0000] <rubys>
some browsers already do canonicalize; given the diversity of implementations breakage may be limited

[04:51:08.0000] <The-Compiler>
rubys: oooooh! That's an useful tool! :)

[04:51:26.0000] <rubys>
an overview of test results: http://intertwingly.net/projects/pegurl/urltest-results/

[04:51:52.0000] <espadrine_>
ah, you're right

[05:13:56.0000] <gsnedders>
erlehmann: no :)

[05:25:39.0000] <lolmaus>
TabAtkins: hi! You around? Wanna ask you resolve my spec confusion.

[05:30:08.0000] <zcorpan>
mathiasbynens: https://mathiasbynens.be/notes/css-escapes idents can start with two dashes now

[05:58:05.0000] <mathiasbynens>
zcorpan: thanks. i see that 0xA0 is no longer allowed too – nice

[06:03:02.0000] <JakeA>
annevk: How have you speced Headers to be an iterator? Just the last sentence of https://fetch.spec.whatwg.org/#headers?

[06:03:12.0000] <JakeA>
I guess there's no IDL for it?

[06:03:22.0000] <annevk>
JakeA: iterable<ByteString, ByteString>

[06:03:40.0000] <JakeA>
omg how did I miss that

[06:03:42.0000] <annevk>
JakeA: plus that text, yes

[06:04:13.0000] <JakeA>
ta

[06:15:57.0000] <zcorpan>
annevk: what does IE do for \#\u03B2 ? it seems blink doesn't escape

[06:16:17.0000] <zcorpan>
rubys: ^

[06:17:01.0000] <rubys>
zcorpan: check for yourself: http://intertwingly.net/projects/pegurl/urltest-results/ ;-)

[06:17:17.0000] <rubys>
direct link: http://intertwingly.net/projects/pegurl/urltest-results/f0b7d5c4b4

[06:17:33.0000] <annevk>
zcorpan: I broke my IE setup

[06:17:37.0000] <annevk>
zcorpan: Safari escapes

[06:17:57.0000] <annevk>
zcorpan: I tried to set up remote.modern.ie, but it doesn't seem to work on Mac

[06:18:07.0000] <MikeSmith>
it does

[06:18:14.0000] <rubys>
annevk: I highly recommend https://www.modern.ie/en-us/virtualization-tools#downloads

[06:18:31.0000] <rubys>
I run modern.ie on a mac

[06:19:09.0000] <MikeSmith>
rubys: I think he's asking about the remote thing that was just released within the last couple days

[06:19:37.0000] <MikeSmith>
which doesn't require you to run virtualbox or install 10GB VM images and such

[06:19:40.0000] <annevk>
Oh, I got access now, but there's too many users

[06:19:47.0000] <MikeSmith>
ah yeah

[06:19:54.0000] <rubys>
oh.  I wasn't aware that there was a remote thing.  I much prefer installing things locally myself.

[06:19:57.0000] <MikeSmith>
they seem to be having a problem handling the load

[06:20:10.0000] <MikeSmith>
rubys: this remote thing is pretty cool

[06:20:14.0000] <annevk>
Yeah I would install modern.ie but I need to upgrade VMWare and I've no idea who to contact about a new license at Mozilla

[06:20:21.0000] <MikeSmith>
rubys: I think you'll be impressed

[06:20:37.0000] <annevk>
I should probably stop being lazy and figure it out

[06:21:06.0000] <rubys>
I run VirtualBox.  It is free.

[06:21:33.0000] <annevk>
I used to have that, but something was off

[06:21:53.0000] <annevk>
Guess I could try it again

[06:22:17.0000] <MikeSmith>
I have remote.modern.ie running in my Android phone as well. It's pretty cool to  be able to, e.g., check the result for a test case in IE from and Android phone

[06:23:02.0000] <zcorpan>
rubys: thx. seems like we could go either way on escaping the fragment or not

[06:23:20.0000] <rubys>
hm.  modern.ie doesn't have a remote app for ubuntu.  I am NOT impressed.

[06:24:14.0000] <zcorpan>
.hash has clear majority among browsers to not escape

[06:24:59.0000] <MikeSmith>
rubys: yeah nothing for linux so far. Seems odd that they have it working on android but not on linux

[06:25:16.0000] <rubys>
zcorpan: s/not escape/escape less/ perhaps?

[06:25:45.0000] <rubys>
I'd think that there are still some characters that would need to be escaped.  %20, for example.

[06:25:47.0000] <MikeSmith>
but at the same time I can admire them for not blocking the release to the rest of us just it get it working for y'all that choose to torture yourselves by running desktop linux

[06:26:16.0000] <zcorpan>
rubys: yeah i mean this particular character. don't have the entire picture

[06:26:35.0000] <rubys>
/me enjoys seeing those that run Mac have troubles running open source software after nearly every upgrade

[06:26:45.0000] <MikeSmith>
heh

[06:26:59.0000] <rubys>
/me only has pity for those that run Windows.

[06:27:15.0000] <MikeSmith>
fair enough :-)

[06:29:03.0000] <annevk>
zcorpan: yeah, the URL fragment stuff is annoying inconsistent

[06:29:52.0000] <rubys>
should the consensus turn out to be different than what the spec currently says, it would not be a big change.

[06:30:40.0000] <rubys>
meanwhile, the expected test results and the spec disagree. :-/

[06:31:56.0000] <mathiasbynens>
zcorpan: updated https://mathiasbynens.be/notes/css-escapes and https://mothereff.in/css-escapes to refer to the latest draft spec where applicable

[06:32:02.0000] <mathiasbynens>
thanks for the heads up

[06:32:08.0000] <zcorpan>
mathiasbynens++

[06:32:37.0000] <annevk>
rubys: I think for now we should patch the test to match the spec

[06:32:46.0000] <rubys>
wfm

[06:32:58.0000] <rubys>
meanwhile, I have a patches file in my branch

[06:33:29.0000] <annevk>
I'm happy to review a PR to web-platform-tests

[06:33:37.0000] <rubys>
https://github.com/rubys/url/blob/peg.js/reference-implementation/test/patchtestdata.txt

[06:33:58.0000] <rubys>
I'll look at making a PR in a bit.

[06:42:57.0000] <zcorpan>
annevk: rubys: http://software.hixie.ch/utilities/js/live-dom-viewer/saved/3289

[06:44:38.0000] <rubys>
zcorpan: very interesting.

[06:45:09.0000] <zcorpan>
hmm. checking safari suggests there's a bug in the script

[06:45:57.0000] <annevk>
zcorpan: file a bug maybe

[06:46:26.0000] <rubys>
I'm surprised that Chrome doesn't escape U+0025 (percent sign)

[06:46:42.0000] <zcorpan>
http://software.hixie.ch/utilities/js/live-dom-viewer/saved/3290

[06:46:46.0000] <zcorpan>
annevk: ok

[06:47:32.0000] <rubys>
firefox either.  weird.

[06:49:38.0000] <zcorpan>
annevk: your file bug link broke the bug filer script

[06:49:56.0000] <zcorpan>
i guess i can fix the script

[06:50:57.0000] <annevk>
zcorpan: if you look at script.src it should be resolved

[06:51:40.0000] <zcorpan>
annevk: var link = document.querySelector('a[href^="https://www.w3.org/Bugs/Public/enter_bug.cgi?"]');

[06:52:12.0000] <annevk>
oh that link

[06:52:35.0000] <annevk>
CSS not being able to look at resolved URLs anno 2014 is a bit of joke too

[06:52:40.0000] <Ms2ger>
I fixed that somewhere

[06:52:52.0000] <annevk>
yeah for one out of 10 specs

[06:53:08.0000] <annevk>
zcorpan: I can fix the link in URL and such

[06:53:34.0000] <Ms2ger>
Damned boilerplate :)

[06:53:35.0000] <zcorpan>
annevk: i'm changing file-bug.js to be more flexible

[06:53:50.0000] <annevk>
ok

[07:04:14.0000] <zcorpan>
annevk: rubys: https://www.w3.org/Bugs/Public/show_bug.cgi?id=27252

[07:05:30.0000] <zcorpan>
maybe testing 0..0xffff for each part of a url should be in web-platform-tests

[07:06:59.0000] <rubys>
/me notes that the tests in the range of d800 through dfff are suspect as these represent half of surrogate pairs

[07:22:19.0000] <karanlyons>
Does XHR support accessing the response attribute before the request is complete like you can with responseText, and if not are there plans to include this support?

[07:23:54.0000] <karanlyons>
I know there are moz prefixes for responseType = chunked-[blob|text|arraybuffer], which gives access to response inside of progress events.

[07:23:56.0000] <caitp>
you should be able to get headers as soon as headers are available, I think

[07:24:04.0000] <caitp>
oh

[07:24:06.0000] <caitp>
response attribute

[07:24:07.0000] <caitp>
derp

[07:24:09.0000] <karanlyons>
Yep.

[07:24:34.0000] <karanlyons>
Headers I'm not sure about, but I'll just fire off a separate HEAD request if needed.

[07:25:50.0000] <Domenic>
karanlyons: the current plan is to make that available via the new fetch API by exposing its body stream

[07:27:09.0000] <karanlyons>
Is that API implemented in any fashion currently?

[07:28:55.0000] <Domenic>
nope, in progress though

[07:29:27.0000] <karanlyons>
So currently my only option would be many requests with Ranges headers, I think.

[07:30:45.0000] <karanlyons>
Or pretending it's text.

[07:31:44.0000] <Domenic>
yeah, that's what people generally do, which is why we're fixing it :)

[07:32:31.0000] <karanlyons>
Is the fetch API meant to replace XHR, and if not will XHR get the same support? (Apologies for all the questions.)

[07:34:01.0000] <Ms2ger>
XHR will stay around

[07:34:22.0000] <Domenic>
But Fetch will be better in most every way; in developers minds it should be a replacement

[07:35:02.0000] <karanlyons>
But just in case there are discovered shortcomings in the Fetch API, it may be wise to add that same support to XHR.

[07:35:28.0000] <Ms2ger>
Domenic, we'll see if that ends up being true :)

[07:35:52.0000] <Domenic>
karanlyons: well, good luck convincing browser vendors to do twice the work :)

[07:36:09.0000] <karanlyons>
Domenic: Yeah :(

[07:40:23.0000] <caitp>
isn't it hard when you just have tons of APIs that are just complete crap, and you can't fix them?

[07:40:46.0000] <karanlyons>
I'm trying to fix buffering in HTML5MediaElement, so tell me about it.

[07:58:23.0000] <annevk_>
karanlyons: why would it be wise to add them to XMLHttpRequest?

[07:58:49.0000] <annevk>
karanlyons: please don't hold back on questions btw, we're all here to learn (and have fun)

[07:58:55.0000] <karanlyons>
annevk: Just in case there's some shortcoming of the Fetch API that XHR would be able to address.

[07:59:29.0000] <karanlyons>
Like right now I'm swimming in issues due to non-overlapping shortcomings of HTMLMediaElement and MSE.

[07:59:53.0000] <annevk>
We'll try to avoid that, but if you find anything do say so

[08:00:48.0000] <annevk>
XMLHttpRequest's responseURL was backported, in a way; I wasn't really planning on doing anything beyond that, but it's not a principled thing

[08:01:30.0000] <karanlyons>
Ideally backporting won't be needed, but it's one of those things where you can never be too sure.

[08:05:52.0000] <annevk>
I'm not envying you, pioneering this stuff is prolly painful as hell

[08:07:32.0000] <karanlyons>
Yeah, right now I'm trying to turn a streamed file from XHR as 'text\/plain; charset=x-user-defined' back into a proper arraybuffer, and I'm fighting back tears.

[08:15:24.0000] <annevk>
karanlyons: with XMLHttpRequest you should be able to use arraybuffer at least

[08:15:33.0000] <karanlyons>
Can't stream an arraybuffer.

[08:15:39.0000] <karanlyons>
Well, can't with XHR.

[08:15:51.0000] <karanlyons>
The only type I can access mid download is text.

[08:16:14.0000] <karanlyons>
(I could use Ranges headers, but I'd like to do it without opening many small requests to the server)

[08:16:20.0000] <annevk>
karanlyons: oh man, that people rely on that...

[08:16:35.0000] <karanlyons>
There's no other option, sadly.

[08:16:39.0000] <annevk>
karanlyons: many small requests with HTTP/2 seems better, not sure if you can rely on that

[08:16:55.0000] <karanlyons>
annevk: Nor can I even rely on the server accepting range requests.

[08:24:45.0000] <karanlyons>
Holy crap, I think this works.

[08:40:17.0000] <karanlyons>
annevk: How often does XHR fire a progress event? Is it up to the browser?

[08:41:18.0000] <gsnedders>
karanlyons: "about every 50ms or for every byte received, whichever is least frequent"

[08:41:32.0000] <karanlyons>
Awesome.

[08:42:36.0000] <gsnedders>
karanlyons: historically it's been all over the place

[08:42:45.0000] <karanlyons>
Oh. Not so awesome.

[08:42:55.0000] <karanlyons>
So I may be better off with an interval.

[08:43:14.0000] <karanlyons>
Not so nice for the user, though.

[08:49:07.0000] <MikeSmith>
TabAtkins: dunno if I'm supposed to ask for permission to add somebody to https://github.com/orgs/w3c/teams/csswg-reviewers but I wanted to give you a heads-up at least that I just added a guy from Igalia there because he's in the midsts of submitting some issues and wants to label them but can't without having perms

[09:02:37.0000] <rego>
MikeSmith: TabAtkins: just in case, I'm the one working on that, Tab already knows us from the www-style mailing list :-)

[09:13:26.0000] <annevk>
So I'm running IE11 now in Virtualbox and the TLS UI in the address bar...

[09:13:46.0000] <annevk>
How can this be so bad?

[09:23:31.0000] <Domenic>
annevk: your complains being? seems ... okay-ish... the favicon seems likely to be exploitable

[09:24:03.0000] <Domenic>
except ... they put it on top of a document icon?

[09:24:16.0000] <annevk>
Domenic: the favicon is exploitable, the lock icon is far away from the domain

[09:24:48.0000] <annevk>
Domenic: insecure pages look as secure as secure pages if you don't look carefully

[09:24:50.0000] <Domenic>
i think a lock favicon would show up on top of a "document" icon so slightly less exploitable

[09:24:51.0000] <MikeSmith>
rego: ah yeah I should have figured TabAtkins and you already were in contact. Anyway, no worries

[09:25:21.0000] <annevk>
Domenic: what is a document icon?

[09:25:25.0000] <rego>
yeah no problem, I didn't know the procedure, so I was just asking here and there :)

[09:25:25.0000] <karanlyons>
I don't see this document icon

[09:25:34.0000] <Domenic>
annevk: looks like a piece of paper

[09:25:34.0000] <annevk>
Domenic: both w3.org and annevankesteren.nl look identical, despite the former not using TLS

[09:25:37.0000] <karanlyons>
Just looking at a screenshot, but that lock is gray and easy to miss.

[09:26:18.0000] <karanlyons>
Safari's lock is gray too, but it's at least right next to the domain.

[09:27:13.0000] <Domenic>
Firefox's lock is gray

[09:27:28.0000] <Domenic>
but they distinguish insecure sites by giving them a "globe"

[09:27:46.0000] <karanlyons>
The big difference is IE11's lock looks to be sandwiched between reload icons, etc., so it can be easily overlooked.

[09:29:20.0000] <MikeSmith>
annevk: on that note I'm really surprised the Firefox Mobile devs have not fixing that seriously problem that allows but the URL and lock icon to be spoofed in the address bar. the last time I looked at that bug, they were still saying that didn't think it was a real problem.  https://bugzilla.mozilla.org/show_bug.cgi?id=605206

[09:29:33.0000] <MikeSmith>
https://gist.github.com/sideshowbarker/8284404#file-phish-png

[09:30:19.0000] <MikeSmith>
source of which is http://people.w3.org/mike/phish/

[09:30:26.0000] <annevk>
MikeSmith: the response you got there is still baffling today

[09:30:26.0000] <karanlyons>
Oof.

[09:31:47.0000] <MikeSmith>
even more baffling that although dveditz is Cc'ed there, he hasn't chimed in on it

[10:12:27.0000] <annevk>
So I remember why I had VMWare now

[10:12:43.0000] <annevk>
The integration between host and guest is lacking in Virtualbox, at least by default

[10:12:56.0000] <annevk>
Even after enabling bidirectional copy and paste it isn't really working

[10:13:29.0000] <karanlyons>
annevk: What's your host OS?

[10:13:35.0000] <annevk>
Mac

[10:13:37.0000] <karanlyons>
Parallels on OS X is pretty good.

[10:13:52.0000] <karanlyons>
I still end up dual booting for most things, but for quick checks it works.

[10:14:00.0000] <annevk>
VMWare was too until it broke apart

[10:14:20.0000] <annevk>
I wouldn't really consider dual boot

[10:14:27.0000] <annevk>
I just need to check things in IE

[10:14:36.0000] <annevk>
And perhaps other browsers, on Windows

[10:14:54.0000] <karanlyons>
What's kinda neat about Parallels is that it uses my Bootcamp partition as the image.

[10:55:58.0000] <Hixie>
annevk: if someone wanted to invent a URL scheme that was hierarchical but didn't use IP addresses or domain names, what would you do?

[10:57:00.0000] <karanlyons>
> as a delimiter?

[10:57:21.0000] <annevk>
Hixie: I would try to figure out what comes out of fixing https://www.w3.org/Bugs/Public/show_bug.cgi?id=27233 I suppose

[10:58:14.0000] <Hixie>
annevk: like, suppose i had a url scheme to select tracks in my train layout.  track://countryname/stationname/stationsection/tracknumber

[10:58:31.0000] <Hixie>
annevk: i'm in the context of track 2, i want to say "go see track 3, whatever station this is", so i want to say ../3

[10:58:52.0000] <Hixie>
or i want to say "go to the freight section of this station, track 1", so i say "../freight/1"

[10:58:56.0000] <annevk>
Hixie: if you didn't want countryname to be a host, I suspect track:///countryname/...

[10:59:08.0000] <Hixie>
right now this is non-conforming because a country name is not a host

[10:59:11.0000] <Hixie>
ah, interesting

[10:59:27.0000] <annevk>
Hixie: because I think we could make the parsing rules for these new URLs strict enough that three slashes meant the host was omitted

[10:59:52.0000] <annevk>
Hixie: we can't do that for http / ws, there it just means you made a typo

[11:00:08.0000] <Hixie>
interesting

[11:00:48.0000] <Hixie>
how about if you want to have a host-like concept, separate from the path, but where it's not a domain/ip?

[11:01:06.0000] <Hixie>
e.g. suppose you want train://engineid/...

[11:01:29.0000] <Hixie>
e.g. because you want to use the urls to create a security boundary like we do with web origins

[11:01:38.0000] <Hixie>
where the scheme and host is used, but not the path

[11:02:16.0000] <TabAtkins>
The meaning of a "domain" is up to the scheme to decide, no?

[11:02:23.0000] <Hixie>
not per the url spec

[11:03:05.0000] <annevk>
Hixie: I suspect you'd have to stay within the parsing space of domain names, but perhaps treat them as something else

[11:03:43.0000] <annevk>
Hixie: I'm not sure I'd want to throw away normal host parsing rules even for unknown schemes, seems like too big of a footgun, but who knows

[11:04:46.0000] <Hixie>
should i file a bug on saying that schemes can use a non-host/ip value for the host component?

[11:05:30.0000] <JakeA>
TabAtkins: so, I was playing around with svg+viewBox+foreignObject as a way of making html that scales the way svg/img does. Chrome's a bit broken there. Is it worth fixing or is there a saner way to do what I'm trying to do on the horizon?

[11:05:52.0000] <JakeA>
Like viewBox on an element (which maybe could be a path towards responsive elements)

[11:05:55.0000] <TabAtkins>
Dunno what's wrong, so I dunno what needs fixing.

[11:06:10.0000] <Hixie>
annevk: (this isn't academic, fwiw. chrome-extension:// and android.resource:// both do this today.)

[11:07:22.0000] <JakeA>
TabAtkins: We balls up the scaling of gpu-layered content. But still, it seems a pretty round-about way of achieving what I'm trying to achieve (html with a viewbox), so thought there might be something in the works that doesn't involve SVG

[11:08:04.0000] <TabAtkins>
viewBox is just a way of applying an internal transform to the content. You can do it yourself.

[11:10:02.0000] <TabAtkins>
to reproduce <svg width=100 height=100 viewBox="-10 -10 220 220">, just do...

[11:10:04.0000] <TabAtkins>
(gimme a sec)

[11:10:51.0000] <TabAtkins>
<div width=100 height=100><div width=220 height=200 transform="scale(.5) translate(-10px, -10px)"></div></div>

[11:10:52.0000] <JakeA>
You'd have to add a resize listener + mutation observers, and I still don't know if that captures all the times you'd need to recalculate the transform

[11:10:53.0000] <TabAtkins>
(I think)

[11:12:15.0000] <Hixie>
annevk: what's the state with https://www.w3.org/Bugs/Public/show_bug.cgi?id=23250 ?

[11:12:47.0000] <JakeA>
TabAtkins: it's easy if the container is fixed, but not if it's dynamic, eg https://jsbin.com/nafawe/quiet

[11:13:47.0000] <TabAtkins>
Oh, sure.

[11:14:06.0000] <TabAtkins>
Yeah, don't think there's any way to do a dynamic one in HTML without manual handling of resizes.

[11:14:42.0000] <JakeA>
That'd be a lot easier with some kind of layout observer

[11:14:51.0000] <Hixie>
why do mutation observers have a .observe() method instead of just being configured in the constructor?

[11:17:03.0000] <annevk>
Hixie: you could comment on the aforementioned bug

[11:17:46.0000] <Hixie>
annevk: i was just suggesting a semantic change, not a parsing change (assuming we're talking about urls still)

[11:17:51.0000] <annevk>
Hixie: no input from implementers for that bug

[11:18:01.0000] <Hixie>
what input are you looking for?

[11:18:13.0000] <annevk>
Hixie: that they're interested in doing it

[11:18:29.0000] <Hixie>
ah

[11:18:52.0000] <annevk>
Hixie: new bug for semantic change I guess

[11:19:03.0000] <Hixie>
comment 5 is smaug____ saying it would be cheap in gecko

[11:19:04.0000] <Hixie>
fwiw

[11:19:19.0000] <Hixie>
and comment 1 is him saying it would be useful

[11:20:03.0000] <annevk>
But IE and Chrome dislike it

[11:21:27.0000] <Hixie>
IE and Chrome folk gave reasons they disliked it, but those reasons appear to be false

[11:21:45.0000] <Hixie>
(i don't mean they're lying, i mean they're wrong about what is possible)

[11:23:15.0000] <smaug____>
if web components actually ends up being a thing, and it uses MutationObserver, I assume there will need to be a way to observe ancestor chain changes

[11:23:30.0000] <smaug____>
since that is what implementations need to do now in C++ in certain cases

[11:24:04.0000] <smaug____>
s/it uses/components using web components use/

[11:24:44.0000] <smaug____>
Custom element does have http://w3c.github.io/webcomponents/spec/custom/#types-of-callbacks

[11:25:05.0000] <zcorpan>
smaug____: examples of things that observe ancestor chain changes?

[11:25:09.0000] <Hixie>
yeah, seems weird that custom elements don't use mutation observers

[11:25:48.0000] <annevk>
custom elements wants something that's near synchronous

[11:25:52.0000] <smaug____>
Hixie: well, mutation observer callbacks run at the end of microtask. I think custom element callbacks run earlier

[11:26:26.0000] <annevk>
but it's less problematic than mutation events I think

[11:26:28.0000] <smaug____>
zcorpan: well, being in document or not is the most common

[11:26:35.0000] <smaug____>
zcorpan: iframe as an example

[11:26:36.0000] <Hixie>
smaug____: mutation observers run whenever you want if you call takeRecords()

[11:26:43.0000] <smaug____>
sure

[11:26:47.0000] <zcorpan>
smaug____: ah right

[11:27:21.0000] <zcorpan>
smaug____: also changing documents

[11:27:22.0000] <smaug____>
Hixie: but if you don't control the code which is removing element from document

[11:27:52.0000] <smaug____>
zcorpan: changing document is unbind from a document + bind to a document

[11:28:50.0000] <Hixie>
smaug____: yeah, true

[11:28:58.0000] <Hixie>
smaug____: then again, custom elements don't have a way to react to child list changes

[11:29:14.0000] <zcorpan>
smaug____: in spec terms i think it's "adoption steps are run" i think

[11:30:08.0000] <smaug____>
zcorpan: in Gecko ShadowRoot implementation itself uses Gecko's internal MutationObserver to observe changes under the host so that it can distribute new elements to right place

[11:30:20.0000] <smaug____>
(Gecko's internal MutationObserver is sync)

[11:31:06.0000] <smaug____>
that just as an example where it is not only about document, but about other changes too

[11:35:38.0000] <rubys>
TabAtkins: is it possible to have boxes within railroad diagrams to hyperlink to other sections of the document?

[11:35:41.0000] <rubys>
Example: http://intertwingly.net/projects/pegurl/url.html#user-info

[11:36:01.0000] <rubys>
user and password inside the railroad diagram don't hyperlink, user and password in the prose below do.

[11:36:03.0000] <TabAtkins>
rubys: Been a request for a while.  File an issue on me, I'll figure it out.

[11:36:18.0000] <rubys>
sweet.

[11:46:03.0000] <rubys>
https://github.com/tabatkins/bikeshed/issues/270

[11:46:18.0000] <TabAtkins>
yup, thanks.

[11:46:19.0000] <rubys>
https://github.com/rubys/url/issues/2

[11:59:35.0000] <karanlyons>
TabAtkins: Bikeshed is a great name.

[12:01:21.0000] <TabAtkins>
I think so too. ^_^

[12:05:58.0000] <karanlyons>
For development purposes is there an easy way to grab a local file and stash it into an arraybuffer?

[12:06:21.0000] <karanlyons>
Err, wrong channel, sorry.

[14:32:53.0000] <karanlyons>
It'd be kinda nice if DataViews had a slice similar to ArrayBuffers.


2014-11-06
[16:17:30.0000] <TabAtkins>
Can someone point me at a spec using ReSpec? Wanna verify something before I copy it.

[17:05:24.0000] <MikeSmith>
TabAtkins: https://dvcs.w3.org/hg/webdriver/raw-file/default/webdriver-spec.html is one

[17:05:55.0000] <TabAtkins>
Cool, thanks.

[17:11:03.0000] <MikeSmith>
TabAtkins: that's using an outdated version. Dunno if it matters for what you need, but I think https://dvcs.w3.org/hg/html-media/raw-file/default/media-source/media-source-respec.html is using something newer

[00:44:04.0000] <zcorpan>
Ms2ger: r? https://critic.hoppipolla.co.uk/r/3063 https://critic.hoppipolla.co.uk/r/3076 https://critic.hoppipolla.co.uk/r/3077

[00:45:20.0000] <Ms2ger>
zcorpan, did I see that event.ports pr before, or was that another one?

[00:46:35.0000] <zcorpan>
Ms2ger: dunno? haven't seen any other pr touching that file

[01:08:34.0000] <annevk>
http://www.dreamhoststatus.com/2014/11/04/upgrading-187-shared-web-hosting-servers-to-ubuntu-12-04-precise-november-8th-8pm-2am-pst/ Hopefully WHATWG is on one of those

[01:35:31.0000] <zcorpan>
Ms2ger: thank you

[01:35:40.0000] <Ms2ger>
Np

[01:35:57.0000] <Ms2ger>
And thank you :)

[05:49:40.0000] <annevk>
While trying to create a new mapping table I run into this rather obscure bug https://bugzilla.mozilla.org/show_bug.cgi?id=1094804

[05:56:14.0000] <frivoal>
*.whatwg.org is in my firefox's force TLS list. Not sure how it got there, but if this is something that is pushed remotely, this is a problem as lists.whathwg.org is not served over https

[05:56:43.0000] <Ms2ger>
Indeed

[05:56:59.0000] <Ms2ger>
The archives are available at lists.w3.org

[05:59:06.0000] <frivoal>
Yep, found them. But I was signing up for the mailing list, and trying to confirm by visiting the link (rather than replying to the mail), and that can only be done on lists.whatwg.org (afaik)

[06:00:04.0000] <Ms2ger>
I've heard that you can email somewhere

[06:00:29.0000] <Ms2ger>
It sucks, but it's apparently impossible to make dreamhost serve that over https

[06:01:48.0000] <frivoal>
found how I got the header (maybe that's obvious, but it wasn't to me). go to http://whatwg.org, get a 301 to https://whatwg.org which has the following http header

[06:01:49.0000] <frivoal>
Strict-Transport-Security:max-age=31556900; includesubdomains; preload

[06:02:19.0000] <frivoal>
if we can't actually serve all domains on https, maybe this header shouldn't be served

[06:02:34.0000] <Ms2ger>
Already been considered and rejected, sorry :)

[06:02:38.0000] <frivoal>
:)

[06:03:49.0000] <frivoal>
oh well, I am signed up now, so I'm fine, but this is pretty noob hostile

[06:04:07.0000] <Ms2ger>
I don't disagree

[06:06:48.0000] <frivoal>
Even if dreamhost can't serve mailman over https, it would be good to get them to serve something there.

[06:06:50.0000] <annevk>
frivoal: it's either that header or https://hstspreload.appspot.com/

[06:08:17.0000] <frivoal>
probably not https://hstspreload.appspot.com/, since accessing the site on my wife's firefox (which hadn't visited http://whatwg.org) worked fine.

[06:09:37.0000] <annevk>
But yeah, we need to solve this somehow :-(

[06:10:00.0000] <frivoal>
alternatively, is it possible to customise the message that is sent to ask people to confirm their registration? Just removing the link from there would have saved me the confusion, as there are instructions on how to confirm by email.

[06:10:20.0000] <annevk>
Yeah I think that might be possible. Hixie would have to configure it

[06:11:07.0000] <frivoal>
the welcome email also has a list lists.whatwg.org, but it is an uninteresting one, so that might not matter

[06:11:45.0000] <frivoal>
s/list/link/

[06:12:45.0000] <frivoal>
I'll mail Hixie

[06:18:50.0000] <annevk>
ta

[06:20:59.0000] <frivoal>
"ta"?

[06:21:51.0000] <annevk>
http://www.urbandictionary.com/define.php?term=ta

[06:22:35.0000] <frivoal>
TIL

[06:22:37.0000] <frivoal>
mail sent

[06:45:08.0000] <pikaren>
why doesnt whatwg merge with w3c

[07:06:50.0000] <boogyman>
pikaren: politics

[07:11:54.0000] <Domenic>
pikaren: because then we couldn't work according to https://wiki.whatwg.org/wiki/FAQ#The_WHATWG_Process

[07:24:08.0000] <annevk>
If you just want to get a set of bytes in JavaScript, is there no simpler way than creating an ArrayBuffer, creating a view upon that, and then setting the bytes?

[07:26:14.0000] <Domenic>
what does "get a set of bytes" mean? is [123, 111, 159] a set of bytes>?

[07:30:12.0000] <Domenic>
annevk: maybe what you're looking for is Uint8Array.from([123, 111, 159]).buffer ?

[07:30:34.0000] <annevk>
Domenic: yeah, I wonder if that's implemented

[07:30:44.0000] <Domenic>
doesn't seem to be

[07:30:54.0000] <Domenic>
Uint8Array.of(123, 111, 159).buffer

[07:39:16.0000] <annevk>
Domenic: neither

[07:39:27.0000] <annevk>
TypeError: undefined is not a function in Chrome and TypeError: Uint8Array.of is not a function in Firefox

[07:39:31.0000] <Domenic>
Polyfillable, I guess

[07:40:15.0000] <annevk>
Sure, but for playing with TextDecoder this is annoying

[07:40:35.0000] <Domenic>
Yeah, text decoder is not the most user-friendly API sadly

[07:45:12.0000] <annevk>
It's quite easy, no?

[07:45:19.0000] <annevk>
It's the bytes bit that's fucked

[07:46:45.0000] <annevk>
That is to say, if we can make it more friendly I would like to make that happen

[07:47:14.0000] <Domenic>
I guess you're right

[07:47:18.0000] <Domenic>
Some statics might be nice though

[07:48:01.0000] <Domenic>
TextDecoder.decode(bytes/*, "utf-8"*/)

[07:48:22.0000] <Domenic>
I wonder if you could support any iterable

[07:48:56.0000] <annevk>
Ah yeah, for the non-streaming case that'd be nice

[07:49:38.0000] <annevk>
For the real streaming case we prolly want streams

[07:49:41.0000] <Domenic>
yeah

[07:49:45.0000] <Domenic>
I should prototype that out

[07:50:01.0000] <annevk>
We should probably upgrade the API when streams have landed

[07:50:09.0000] <Domenic>
Agreed

[07:50:10.0000] <annevk>
Add streams plus convenience as v2

[07:50:40.0000] <Domenic>
I should prolyfill them based on the streams polyfill

[07:50:52.0000] <JonathanNeal>
Yea!

[07:51:09.0000] <Domenic>
should be really easy actually

[07:52:40.0000] <annevk>
https://wiki.whatwg.org/index.php?title=Web_Encodings&oldid=3949 5+ years now, but getting close

[07:52:59.0000] <annevk>
(though only getting close in Firefox and Chrome)

[07:53:45.0000] <Domenic>
Wow not even under consideration for IE

[07:53:50.0000] <JonathanNeal>
Event Streams or some other kind?

[07:54:03.0000] <Domenic>
JonathanNeal: http://streams.spec.whatwg.org/

[07:54:36.0000] <Domenic>
(https, rather ... I copied and pasted too fast I guess)

[07:56:34.0000] <Domenic>
go upvote https://wpdev.uservoice.com/forums/257854-internet-explorer-platform/suggestions/6558040-support-the-encoding-api

[07:58:01.0000] <Domenic>
https://twitter.com/domenic/status/530388605920116736

[07:59:18.0000] <Domenic>
annevk: which parts of the API are web-specific? EncodingError DOMException; anything else?

[08:01:05.0000] <Domenic>
At the next TC39 the Microsoft guy wants to talk about Streams as part of the JS standard library. My position is that JS engines should just start implementing more specs than ECMA-262 and ECMA-402. I plan to point to Streams, Encoding, maybe even URL and Fetch.

[08:01:34.0000] <annevk>
Domenic: URL and Fetch are generic (up to a point)

[08:01:55.0000] <annevk>
Domenic: and yeah, EncodingError :/

[08:02:59.0000] <Domenic>
I imagine that could be changed especially if it was the price of getting IE on board.

[08:03:31.0000] <Domenic>
(No idea if that's actually how it'll go down, but it's a possible future.)

[08:03:38.0000] <annevk>
I'm open to changing it. I don't know if jsbell and whoever implemented it in Gecko want the churn

[08:03:48.0000] <Domenic>
right yeah, would want to be worth the trouble

[08:04:38.0000] <annevk>
Search and replace operations through the code base are somewhat costly

[08:04:58.0000] <annevk>
But yes, if it helps Node.js and Microsoft that would be good

[08:05:43.0000] <annevk>
Domenic: you should probably again point out that if TC39 wants to treat DOM as a library, they should provide the tools for writing said library (IDL)

[08:06:51.0000] <annevk>
Domenic: if TC39 helped out with IDL there'd probably be less differences in design approaches

[08:07:05.0000] <annevk>
Domenic: if JavaScript's own library was written in IDL... well

[08:07:15.0000] <Domenic>
it's just a big task with unclear gain compared to just paying attention on public-script-coord...

[08:08:24.0000] <annevk>
I have the feeling that there's quite a few things in IDL TC39 disapproves

[08:08:41.0000] <annevk>
But have not been marked as such and continue to be getting usage

[08:44:30.0000] <gsnedders>
I don't think you can deal with some of the weird legacy stuff in the JS standard library easily

[08:44:42.0000] <gsnedders>
Though I think proxies make arrays now implementable in pure JS?

[09:33:18.0000] <caitp>
a person named NotBobTheBuilder wants links to not be navigable (ie `href` attribute removed) if they contain the attribute `disabled`

[09:33:34.0000] <caitp>
"web browsers follow the spec and IMO the spec gets this wrong"

[09:33:54.0000] <Hixie>
there's a bug about that

[09:33:56.0000] <caitp>
basically "disabled shouldn't just be a form control thing, it should behave more like aria-disabled"

[09:34:01.0000] <caitp>
can I link them to it?

[09:34:13.0000] <Hixie>
browser vendors didn't seem against it, but also weren't particularly enthusiastic

[09:36:28.0000] <Hixie>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=26622 is where it was discussed, looks like it's not a dedicated bug

[09:41:14.0000] <caitp>
it would be pretty cool, fwiw, if all of the various `aria` attributes had some behaviour merged into the regular html stuff

[09:43:38.0000] <annevk>
disabled used to be a global attribute in IE

[09:44:15.0000] <annevk>
There's bound to be some emails or bugs written by me about that, circa 2005-?

[09:45:53.0000] <caitp>
if it came between breaking a lot of websites, but making other sites, and all future sites basically accessible by default, or not breaking websites, but not getting accessibility by default, what would you go for

[09:48:37.0000] <boogyman>
imo "status quo" is already broken, so as a web-author, I would prefer accessibility by default.

[10:01:12.0000] <annevk>
Domenic: most implementers at Gecko keep pointing out web components seems mostly abandoned spec-wise and is broken in implementations once you look at the details

[10:01:23.0000] <annevk>
Domenic: is Google still putting actual effort into fixing it?

[10:02:01.0000] <proberts_>
$('html *').each(function(){$(this).css('animation','spaceboots '+(1+Math.random(1))+'s infinite')})

[10:02:05.0000] <caitp>
they probably gave some talks about it at blinkon, so they probably haven't given up on it

[10:02:14.0000] <caitp>
implementation-wise at least

[10:04:42.0000] <caitp>
according to the state of blink slides, shadow dom and html imports shipped, so I guess that's an indication that they haven't given up on custom elements entirely

[10:05:03.0000] <smaug____>
sure, shippen, but behaving against the current specs

[10:05:07.0000] <smaug____>
shipped

[10:06:03.0000] <tantek>
shipped, behaving against current specs, unprefixed / unpreffed and in production, not just beta/alpha/dev builds?

[10:07:19.0000] <caitp>
element.createShadowRoot seems to be available in m38, I don't think I have any experimental stuff flipped on for my stable browser

[10:07:36.0000] <caitp>
i'm sure the css behaviour is probably broken

[10:08:53.0000] <caitp>
all i'm saying is, if it's shipped, they probably haven't given up on it just yet

[10:08:56.0000] <tantek>
caitp - presumably they have samples for the DOM and CSS stuff that demonstrates it working?

[10:09:24.0000] <tantek>
caitp - Chrome ships and kills things. E.g. Google's "Web Intents".

[10:09:34.0000] <caitp>
yes, I keep up with it

[10:13:18.0000] <annevk>
They haven't really been actively improving things though

[10:15:27.0000] <caitp>
sure, it's not clear anyone really knows how to make it better, but I think there's a lot of pressure not to kill it off now as so many groups want it

[10:18:41.0000] <hober>
"not clear anyone really knows how to make it better" doesn't match up with all of the issues raised by other vendors then ignored or WONTFIXed...

[10:19:44.0000] <caitp>
maybe they really thought those weren't very good ideas!

[10:20:30.0000] <caitp>
or something, I dunno, I am talking for other people right now and I can't read their minds

[10:21:40.0000] <hober>
heh. i'm just saying it's hard to keep spec momentum on a thing you're manifestly unwilling to change based on the feedback you've actually gotten. why would other folks continue giving you feedback?

[10:22:07.0000] <tantek>
hober, also odd to reject feedback, and then ship something that differs from the spec, without updating the spec

[10:22:29.0000] <annevk>
hober: actually, we've given a ton of feedback that has simply gone unaddressed

[10:22:47.0000] <annevk>
hober: is Apple planning on putting resources on it or hoping it dies?

[10:23:26.0000] <annevk>
Web components feels a bit like abandonware, ship prematurely, then don't bother polishing

[10:23:59.0000] <annevk>
Allocate resources to focus on some other thing

[10:24:30.0000] <tantek>
annevk - are there no google sites/apps that depend on or take advantage of Chrome's web components implementation? e.g. gmail?

[10:24:43.0000] <hober>
annevk: i think you already know the answer to questions of the form "is apple planning..."

[10:24:48.0000] <caitp>
they don't depend on them

[10:25:23.0000] <annevk>
hober: I wonder if I should try to convince Mozilla leadership (if there even is such a thing) that we pull out too

[10:25:42.0000] <caitp>
why not just fork the spec?

[10:25:48.0000] <caitp>
make a bigger, better one

[10:25:51.0000] <tantek>
hober: "Ask me is Apple planning one more time, I dare you, I double dare you …."

[10:25:55.0000] <caitp>
with pancakes

[10:25:59.0000] <caitp>
and css

[10:26:02.0000] <smaug____>
someone else could become the editor, sure

[10:26:14.0000] <smaug____>
but I'd probably make rather major changes

[10:26:23.0000] <smaug____>
and it is really work initiated by Google

[10:26:53.0000] <smaug____>
I'd expect Google to have enough resources to finalize and maintain it

[10:27:53.0000] <smaug____>
annevk: that is actually a good guestion

[10:28:47.0000] <smaug____>
we should at least think about whether it is really worth spending resources for this half-baked thing

[10:29:06.0000] <annevk>
smaug____: especially since what it seems most of us wanted aligns rather well with what Apple wants

[10:29:16.0000] <smaug____>
yeah

[10:31:47.0000] <smaug____>
should ask Gaia folks how they use shadow dom, and whether it is actually useful

[10:32:00.0000] <caitp>
my experience with googlers is that they have a bit of a hard time focusing on one thing, other duties always seem to creep in, which could be related to inattention to bugs

[10:32:09.0000] <caitp>
there are exceptions, but it seems common

[10:33:26.0000] <smaug____>
"hard time focusing on one thing" sounds so familiar ;) /me kicks himself for not doing what he was supposed to do

[10:35:36.0000] <jamesr_>
smaug____, annevk: i'm not following web components personally but i can forward your concerns to those who are (i don't think they can pop into IRC right this second)

[10:36:20.0000] <jamesr_>
it's definitely being used

[10:36:59.0000] <annevk>
jamesr_: we have reached out to some of the editors and in particular dglazkov afaik

[10:39:27.0000] <annevk>
jamesr_: https://www.w3.org/Bugs/Public/showdependencytree.cgi?id=14972&hide_resolved=1 is the basic problem

[10:39:30.0000] <smaug____>
if someone from Apple or Mozilla would become the active editor of the web components stuff, the specs might change quite a bit. I wonder if Google would be then willing to make the changes

[10:39:46.0000] <annevk>
jamesr_: (minus "make examples" bugs)

[10:40:18.0000] <annevk>
jamesr_: and Google not actually implementing the spec

[10:40:24.0000] <annevk>
jamesr_: as I understand it

[10:40:31.0000] <caitp>
if 2 out of 4 popular browsers come up with an incompatible implementation of components, google would probably have to change them

[10:41:55.0000] <Ms2ger>
smaug____, well, is Google willing to implement the spec now? :)

[10:42:05.0000] <smaug____>
heh

[10:42:31.0000] <gsnedders>
Ms2ger: does it help with moible perf?

[10:42:41.0000] <smaug____>
Ms2ger: it is implementing some imaginary variant of it

[10:42:47.0000] <smaug____>
gsnedders: web components?

[10:42:58.0000] <smaug____>
I can't think of anything which would improve performance

[10:43:07.0000] <Ms2ger>
gsnedders, we need a "tropes in web standards" catalogue :)

[10:43:14.0000] <caitp>
it improves peoples ability to read html

[10:43:26.0000] <smaug____>
but I can think of cases where it slows down performance a bit

[10:43:34.0000] <gsnedders>
smaug____: I think you're missing the joke :)

[10:44:20.0000] <smaug____>
I think not. I just happened to answer as if I did :)

[10:44:34.0000] <annevk>
Pretty sure it's about ethics in ...

[10:44:55.0000] <caitp>
womp

[10:45:13.0000] <gsnedders>
smaug____: actually, should it not be possible to do some sort of memoization for web components? make repeated patterns quicker? or something

[10:45:16.0000] <gsnedders>
/me doesn't really know about layout

[10:47:16.0000] <smaug____>
I don't see how web components(well, shadow dom)  could make anything faster comparing to some other random DOM subtrees

[10:48:12.0000] <caitp>
sometimes you buy a fast computer with GPUs dedicated to crunching big numbers, to improve performance

[10:48:27.0000] <caitp>
and sometimes you buy a standing desk because sitting on your ass all day is terrible for your back

[10:48:31.0000] <caitp>
developer ergonomics

[10:48:32.0000] <Ms2ger>
/me whacks annevk 

[10:48:43.0000] <gsnedders>
smaug____: the fact you have a single subtree that you can use as a cache key more easily, I'd guess

[10:49:04.0000] <caitp>
the standing desk won't crunch numbers faster, but you'll feel less miserable while you do it

[10:49:27.0000] <gsnedders>
Ms2ger: BUT INTEGRITY!

[10:50:02.0000] <annevk>
I hate iso-2022-jp

[10:50:20.0000] <terinjokes>
but don't use ikea desk with extendable legs, because then you'll just be annoyed that your desk sways (and you eventually lower it back down anyways)

[10:50:23.0000] <annevk>
Also, browsers are terrible

[10:50:26.0000] <annevk>
Film at 11

[10:51:39.0000] <jarek>
are there any benchmarks that would take web components performance into account?

[10:57:55.0000] <tantek>
annevk: also, sockpuppets and the online media editors who seem unable to recognize them when they arrive in droves.

[11:00:53.0000] <gsnedders>
jarek: probably not

[11:02:14.0000] <caitp>
it would be easy to make one

[11:02:28.0000] <caitp>
just wrap that cool 3d rubiks cube css demo in a custom element, and voila

[11:04:04.0000] <jarek>
it would be interesting to see how rewriting jQuery spaghetti code into proper set of web components impacts performance

[11:20:02.0000] <caitp>
not having to wait for DOMContentReady before performing all your wacky DOM manipulation would probably be a win for at least one performance metric

[11:20:08.0000] <caitp>
ready? loaded?

[11:22:48.0000] <jarek>
DOMContentLoaded

[11:23:09.0000] <jarek>
that's an awful DOM event name btw

[11:24:04.0000] <jarek>
are there any plans to rename it to "domcontentload" for the sake of consistency?

[11:24:13.0000] <caitp>
well it's not WM_COMMAND at least

[11:24:53.0000] <jarek>
s/rename/symlink

[11:48:30.0000] <esprehn>
annevk: lots of work is still going into our web components implementation, is there some bugs you're aware of that aren't being addressed?

[11:55:42.0000] <tantek>
esprehn - seems to be a consensus here that the biggest bug is that Chrome's implementation is divergent from the spec, and the spec isn't being updated accordingly.

[11:56:15.0000] <esprehn>
I'll talk to the person working on the spec

[11:56:29.0000] <esprehn>
We should have been better about how the monkey patching was done

[11:56:55.0000] <jarek>
for me the biggest headache with Web Components is how relative URLs are handled

[12:00:53.0000] <esprehn>
hmm?

[12:01:00.0000] <esprehn>
jarek: can you give an example?

[12:03:22.0000] <smaug____>
esprehn: from an implementors point of view the current situation is hard. Implementing what the specs say leads to very different behavior what blink has. And one never knows if blink implements what the spec is supposed to say, or if blink behavior is just a bug.

[12:07:23.0000] <jarek>
esprehn: http://lists.w3.org/Archives/Public/public-webapps/2014OctDec/0013.html

[12:20:30.0000] <rubys>
TabAtkins: I just updated bikeshed.  It no longer accepts ED.  Unfortunately, it doesn't accept 'current' or 'dated' either.

[12:20:32.0000] <rubys>
  File "/home/rubys/git/bikeshed/bikeshed/ReferenceManager.py", line 273, in getRef

[12:20:33.0000] <rubys>
    refs = [ref for ref in refs if ref['status'] == "ED" or (ref['status'] == "TR" and self.specs[ref['spec']].get('ED') is None)]

[12:20:33.0000] <rubys>
KeyError: u'encoding-1'

[12:31:40.0000] <rubys>
Heading out.  Left this as a comment: https://github.com/rubys/url/compare/anolis2bikeshed?expand=1#commitcomment-8468411

[12:55:19.0000] <esprehn>
smaug____: please file bugs, run our tests, and contribute your own

[12:55:27.0000] <esprehn>
hayato_: ^

[12:56:12.0000] <smaug____>
esprehn: bugs filed

[12:56:20.0000] <smaug____>
some at least

[12:56:26.0000] <esprehn>
jarek: yes, loading images with css from inside a component is difficult when loaded in

[12:56:33.0000] <esprehn>
err, packaged in rather

[13:37:51.0000] <annevk>
esprehn: there's a whole lot of open bugs against the spec

[13:38:39.0000] <annevk>
esprehn: some issues I filed with regards to members exposed on ShadowRoot still hasn't been addressed, same with an issue with regards to blocking events based on their type name

[13:39:25.0000] <annevk>
esprehn: more recent bugs also go without feedback, seems like there's not active maintenance, especially with some stuff prolly lingering now for a year or so

[13:41:07.0000] <Hixie>
maybe the spec needs a new editor

[13:42:28.0000] <annevk>
There's also the fact that neither Apple nor Mozilla are particularly thrilled with the current design

[13:43:05.0000] <annevk>
Hixie: heh, how many editors have you seen deliver solid work recently?

[13:43:22.0000] <esprehn>
annevk: can you link me to which bugs you think need addressing?

[13:43:30.0000] <esprehn>
I don't see recent bugs from you

[13:43:33.0000] <annevk>
Hixie: that's the kind of line I'd expect in one of these 60 people in a room group meetings :p

[13:43:57.0000] <annevk>
esprehn: my bugs are ancient, recent bugs were by bz and others

[13:44:10.0000] <Hixie>
annevk: the lack of good editors in general is indeed quite sad

[13:45:17.0000] <annevk>
esprehn: https://www.w3.org/Bugs/Public/show_bug.cgi?id=16904 was filed in May 2012

[13:46:36.0000] <annevk>
esprehn: https://www.w3.org/Bugs/Public/show_bug.cgi?id=23620 from October 2013

[13:47:45.0000] <esprehn>
I don't believe we can remove the getElementById method, but we should probably remove the others

[13:48:13.0000] <annevk>
esprehn: a bug of mine was duped against https://www.w3.org/Bugs/Public/show_bug.cgi?id=20247 which is from December 2012 and pretty fundamental with respect to event dispatching

[13:48:24.0000] <annevk>
esprehn: getElementById is fine, that's on DocumentFragment these days

[13:48:43.0000] <rniwa>
annevk: I stopped giving feedback because our feedback was basically ignored

[13:48:49.0000] <annevk>
rniwa: same

[13:48:55.0000] <annevk>
rniwa: that's why my bugs are so old

[13:50:43.0000] <rniwa>
annevk: I think maciej’s encapsulation model has been “accepted” informally on the mailing list numerous times in the last four or five years yet I don’t see any indication of it appearing anywhere in the spec.

[13:52:50.0000] <rniwa>
annevk: it would be nice if specs WebApps WG actually reflected the consensus of the WG instead of one participant in the WG...

[13:52:59.0000] <rniwa>
specs WebApps WG produce*

[13:54:41.0000] <annevk>
https://github.com/webcomponents/webcomponents.github.io/tree/site/src/documents/specs

[13:54:52.0000] <annevk>
Is that really where the specifications are hosted these days?

[13:54:58.0000] <annevk>
Anyway, seems like they're not really updated

[13:56:36.0000] <annevk>
Oh no, it's https://github.com/w3c/webcomponents/

[13:57:13.0000] <annevk>
https://github.com/w3c/webcomponents/commits/gh-pages

[13:57:33.0000] <annevk>
So yeah, couple of fixes every so often

[14:02:57.0000] <rniwa>
annevk: I think the real issue is that any feedback editors don’t like is not incorporated into the spec. even if multiple non-Google browser vendors liked it :(

[14:03:36.0000] <esprehn>
annevk: thanks for the pointers, I'll share them with hayato_ and see where he is in addressing the bug backlog

[14:03:46.0000] <rniwa>
annevk: surely, they can create a spec that’s consistent with Blink’s behavior but if they’re not accepting any feedback, they might as well as not do it in WebApps WG…

[14:04:20.0000] <annevk>
rniwa: "don't attribute to malice..."

[14:04:33.0000] <annevk>
rniwa: (not that it means we have to be okay with it)

[14:05:23.0000] <rniwa>
annevk: I’m not saying that they have a bad intention but it’s an observable fact that they haven’t taken any significant feedback from other browser vendors recently.

[14:05:32.0000] <annevk>
rniwa: the editors are new, editing core platform features is hard and requires months of hard work

[14:05:44.0000] <annevk>
rniwa: it seems likely they were not prepared for the task and are also assigned to other things

[14:06:32.0000] <rniwa>
annevk: perhaps.

[14:06:34.0000] <annevk>
rniwa: I don't know how to best address it since the amount of good editors we have is rather limited

[14:06:35.0000] <esprehn>
rniwa: we've be very interested in hearing your feedback as you implement the spec

[14:07:00.0000] <annevk>
rniwa: and they all have plenty to do already

[14:07:21.0000] <rniwa>
esprehn: I don’t think we’re interested in implementing anything unless there is an indication that the spec will change in accordiance with our feedback.

[14:07:35.0000] <esprehn>
rniwa: that sounds like a hostage situation :)

[14:07:39.0000] <rniwa>
there’s no point in having to support something incompatible

[14:08:30.0000] <jarek>
rniwa: wasn't Shadow DOM work already started in WebKit branch?

[14:08:37.0000] <rniwa>
jarek: no

[14:08:46.0000] <annevk>
esprehn: I think it is true to some extent that feedback on the WebApps list has been ignored

[14:09:04.0000] <jarek>
rniwa: ohh... I recall someone mentioning it on the mailing list

[14:09:13.0000] <rniwa>
jarek: I did mention it

[14:09:22.0000] <esprehn>
annevk: a large amount of feedback has been incorporated

[14:09:45.0000] <rniwa>
jarek: but I didn’t really start implementing anything since our feedback has largely been ignored.

[14:09:47.0000] <annevk>
esprehn: some level of engagement, but then failing to make a compelling case and leaving arguments unaddressed

[14:10:05.0000] <annevk>
esprehn: that's not really my impression

[14:10:20.0000] <annevk>
esprehn: I feel that most of the substantive stuff I complained about has been ignored

[14:12:42.0000] <esprehn>
annevk: I apologize we didn't get your feedback addressed

[14:12:53.0000] <hober>
esprehn: that *does* sound like a hostage situation, though probably not in the way you intended...

[14:13:20.0000] <esprehn>
hober: perhaps a stand off is better

[14:14:34.0000] <esprehn>
annevk: please feel free to bring up your concerns again, I'll point the people in your direction

[14:15:02.0000] <Ms2ger>
That no longer sounds like a hostage situation

[14:15:08.0000] <Ms2ger>
That sounds like the HTMLWG

[14:18:21.0000] <jarek>
is it still possible that Web Components will end up with native support only in one (well two if you count Opera) browsers?

[14:18:33.0000] <jarek>
this is what happened with Pointer Events recently

[14:20:25.0000] <jarek>
Chrome has too big market share and other vendors can't afford to not support apps/sites optimised for it

[14:20:50.0000] <cbiesinger_>
hm? do browsers implement pointer events, beyond ie?

[14:21:05.0000] <jarek>
cbiesinger_: Mozilla did start work on it

[14:21:22.0000] <cbiesinger_>
jarek: why? :-)

[14:22:28.0000] <jarek>
cbiesinger_: the spec is almost finished

[14:22:54.0000] <esprehn>
what's apple's position on the spec?

[14:22:55.0000] <cbiesinger_>
jarek: it's more that I don't get the impression that blink/webkit are interested

[14:23:08.0000] <cbiesinger_>
but I could be wrong!

[14:23:41.0000] <Ms2ger>
Ohai

[14:24:35.0000] <jarek>
cbiesinger_: they are not interested and they expressed it clearly on mailing list and on Chrome bug tracker

[14:24:59.0000] <cbiesinger_>
jarek: ok, so mozilla thinks this is useful nonetheless?

[14:25:11.0000] <jarek>
cbiesinger_: Google is planning to extend touch events spec: https://docs.google.com/a/chromium.org/document/d/1x-yE4CmTZlZQXea4_FPjgly5TOvF28UBNs9gZ5aGUhg

[14:25:28.0000] <cbiesinger_>
jarek: yeah

[14:25:55.0000] <caitp>
https://groups.google.com/a/chromium.org/forum/#!searchin/blink-dev/pointer-events/blink-dev/K1qk6qZWgIc/4PxUvSibPTsJ this doesn't sound like an outright rejection of pointer events (or did i miss something?)

[14:26:17.0000] <jarek>
cbiesinger_: no idea what Mozilla thinks about it

[14:26:46.0000] <roc>
esprehn: this isn't the first time we've reached out to Google people try to get more traction on Web Components standards issues.

[14:26:47.0000] <smaug____>
cbiesinger_: Gecko has implementation

[14:26:57.0000] <smaug____>
cbiesinger_: not enabled by default

[14:27:17.0000] <smaug____>
the initial backend is for Metro

[14:27:37.0000] <esprehn>
roc: thanks for the feedback

[14:27:44.0000] <roc>
esprehn: I raised basically the same issues with Hixie a few weeks ago

[14:27:51.0000] <smaug____>
cbiesinger_: and yes, pointer events would be way nicer than touch+mouse+touch extensions which google is now driving

[14:28:21.0000] <roc>
esprehn: and that wasn't the first time either

[14:28:30.0000] <esprehn>
roc: I'll make sure dglazkov is aware

[14:28:54.0000] <smaug____>
cbiesinger_: pointer events were supposed to go to blink, but for some reason blink folks decided to go with a model no one else then follow (extensions to touch events)

[14:29:03.0000] <jarek>
esprehn: Apple invented pointer events, so they will probably opt for extending that spec rather then introducing a completely new input model

[14:29:15.0000] <jarek>
s/pointer events/touch events

[14:29:19.0000] <esprehn>
I'm aware of the history

[14:29:47.0000] <smaug____>
web devs prefer pointer events model

[14:30:11.0000] <smaug____>
IIRC several script library impls will have pointer events

[14:30:17.0000] <jarek>
yeah, but as always browser developers know better :P

[14:30:20.0000] <smaug____>
and just polyfill implementations which don't support them

[14:30:23.0000] <othermaciej>
I think the reasons Google stated for why pointer events are problematic for perf are correct

[14:30:26.0000] <caitp>
doesn't polymer use a pretty competent pointer events polyfill?

[14:30:29.0000] <caitp>
or jquery or something

[14:30:55.0000] <smaug____>
polymer == google, so pointer events were dropped, IIRC

[14:31:06.0000] <caitp>
I know who is backing polymer :p

[14:31:16.0000] <caitp>
but I remember hearing them pushing it at a conference a while ago

[14:31:19.0000] <jarek>
caitp: that component was deprecated few months ago

[14:31:26.0000] <caitp>
ah

[14:33:39.0000] <smaug____>
we should go back and start all over with XBL2 :)

[14:35:20.0000] <esprehn>
caitp: they stopped using it

[14:35:28.0000] <caitp>
wow apparently you can hide that annoying menu in google groups, TIL. anyways, I see intent to implement + ship threads with 3 lgtms for parts of pointer events, and no "lets not do this" in the other thread, so I must be missing where this rejection happened in blink

[14:37:32.0000] <caitp>
https://code.google.com/p/chromium/issues/detail?id=162757#c64 oh I see.

[14:37:44.0000] <caitp>
that's pretty painful considering the implementation status from other vendors lol

[14:38:45.0000] <cbiesinger_>
smaug____: ^

[14:39:03.0000] <smaug____>
cbiesinger_: ?

[14:39:18.0000] <smaug____>
I did answer to rick about the reasoning

[14:39:28.0000] <cbiesinger_>
smaug____: re "for some reason blink folks decided to go with a model no one else then follow"

[14:39:31.0000] <cbiesinger_>
that is the some reason

[14:40:12.0000] <cbiesinger_>
anyway, just surprised that firefox implements something that only them and ie support

[14:40:31.0000] <smaug____>
"especially without support from Safari" is a bit silly. blink implements all sorts of stuff not in Webkit

[14:40:35.0000] <smaug____>
like web components

[14:41:14.0000] <rniwa>
isn’t the whole reason Mozilla has implemented pointer events was because Blink was gonna do it?

[14:41:16.0000] <smaug____>
2) is not quite true

[14:42:04.0000] <caitp>
mozilla has implemented quite a lot of things that nobody else has

[14:42:09.0000] <smaug____>
rniwa: let's say so that if blink folks hadn't said for 2 years that they are going to implement pointer events, gecko probably wouldn't have implementation

[14:42:23.0000] <caitp>
and by "quite a lot" i mean the handful of examples in my head

[14:43:07.0000] <smaug____>
caitp: how is that relevant here

[14:43:17.0000] <caitp>
it was just in response to what rniwa had said

[14:43:25.0000] <caitp>
I don't think they would wait for blink to do it

[14:43:33.0000] <caitp>
s/they/you guys

[14:43:40.0000] <smaug____>
and 3) is something which could be solved too

[14:44:20.0000] <smaug____>
caitp: well, blink folks explicitly said they will implement pointer events

[14:44:31.0000] <cbiesinger_>
safari is interested in web components, unlike pointer events

[14:46:12.0000] <smaug____>
I haven't seen too many positive signals

[14:46:34.0000] <smaug____>
mostly concerns about broken encapsulation and information hiding

[14:46:41.0000] <cbiesinger_>
I guess https://lists.webkit.org/pipermail/webkit-dev/2014-February/026251.html is kind of old

[14:46:44.0000] <smaug____>
which are almost non-existent in web components

[14:46:54.0000] <caitp>
so why did gecko implement microdata? was that dave's idea or something?

[14:47:02.0000] <caitp>
according to wikipedia, presto is the only other

[14:48:40.0000] <roc>
wasn't that dzbarsky's intern project or something?

[14:48:59.0000] <smaug____>
/me wonders if rniwa got anywhere with the shadow dom implementation, given the state of the spec

[14:50:00.0000] <rniwa>
smaug____: I said web components but not shadow DOM LOL

[14:50:25.0000] <cbiesinger_>
rniwa: maciej said shadow dom :) https://lists.webkit.org/pipermail/webkit-dev/2014-February/026258.html

[14:51:06.0000] <smaug____>
caitp: well, microdata is in the spec

[14:51:10.0000] <rniwa>
cbiesinger_: well, in that case, I can safely say that I haven’t implemented any

[14:52:00.0000] <rniwa>
cbiesinger_: like I mentioned ealirer, there’s no point for me to start implementing stuff when our feedback is completely ignored.

[14:52:38.0000] <rniwa>
cbiesinger_: then we’re left with an option of either implementing what spec says, which doesn’t match Blink’s implementation, or match Blink’s implementation, or implement something we think is the right API and propose those spec changes

[14:52:53.0000] <rniwa>
and none of those options are attractive to us.

[14:53:05.0000] <caitp>
lots of things are in the spec :p

[14:53:16.0000] <caitp>
or in one spec or the other

[14:55:36.0000] <rniwa>
smaug____: I find it amusing that you guys have been mis-quoted repeatedly that Mozilla is implementing web components LOL

[14:56:16.0000] <smaug____>
I'd say we're experimenting whether it makes sense to implement it all

[14:56:39.0000] <jarek>
rniwa: is this really the only reason? Web Components are critical for Web Platform to take over the app store ecosystems

[14:56:51.0000] <caitp>
in january I saw that a lot of mozilla's web components metabug had landed

[14:57:01.0000] <caitp>
did you revert all that gunk? :p

[14:57:02.0000] <jarek>
rniwa: and this obviously against Apple's interests

[14:57:03.0000] <hober>
jarek: i think it would be fair to say that the web needs a component model, sure

[14:57:07.0000] <smaug____>
caitp: nope

[14:57:18.0000] <smaug____>
caitp: and we have put lots of resources to this

[14:57:37.0000] <rniwa>
jarek: have you read all the specs. for web components?

[14:57:37.0000] <caitp>
indeed

[14:57:46.0000] <smaug____>
but perhaps we should have put the resources elsewhere? (just a personal comment )

[14:58:11.0000] <hober>
jarek: but that capital-W, capital-C Web Components might not be a very good take on defining that component model

[14:58:22.0000] <caitp>
is it that web components are not a useful primitive for web developers

[14:58:31.0000] <caitp>
or is it that the feedback is ignored

[14:58:41.0000] <caitp>
the former is probably fixable

[14:58:46.0000] <caitp>
er

[14:58:48.0000] <caitp>
not former, latter

[14:58:50.0000] <jarek>
rniwa: nope, only the fragments that I was interested in

[14:59:41.0000] <rniwa>
jarek, caitp: in my experience, a lot of web developers are excied when they hear the word “web components” because there’s a lot of hype about it

[14:59:49.0000] <caitp>
whether the former is fixable, I don't know --- I know that we want to be able to use web components in angular, and ember wants them too, and probably the next 30 stupid javascript frameworks will want them to be around

[15:00:00.0000] <jarek>
caitp: as a frontend web developer I can say that Web Components allowed me to greatly simplify the architecture of my app

[15:00:06.0000] <rniwa>
but they tell me it’s not exactly what they want when I explain to them the feature set we currently have.

[15:00:13.0000] <smaug____>
jarek: was "Web Components are critical for Web Platform to take over the app store ecosystems" a copy-paste from somewhere ?

[15:00:42.0000] <caitp>
honestly I don't think it's even that --- it's like this

[15:00:44.0000] <rniwa>
jarek: by “Web components”, which features are you talking about?

[15:00:50.0000] <caitp>
if you open up gmail and inspect the DOM

[15:00:55.0000] <caitp>
the source code is terrifying

[15:00:57.0000] <jarek>
smaug____: no, what makes you think so? I know it's a popular opinion

[15:01:03.0000] <smaug____>
it is?

[15:01:11.0000] <smaug____>
I don't understand the reasoning

[15:01:16.0000] <caitp>
if you get people to nicely wrap and encapsulate things, so much better :>

[15:01:22.0000] <jarek>
smaug____: it was not like I were saying "OMG Apple is trying to take over the world"

[15:02:01.0000] <jarek>
smaug____: Apple makes money by selling iPhone, and people buy iPhone because of iPhone apps (and hardware)

[15:02:13.0000] <smaug____>
I might understand some of it if Web Components provided some sort of encapsulation and information hiding so that people could use components from various sources reliably

[15:02:25.0000] <jarek>
smaug____: fewer iPhone-specific apps means fewer reasons for customers to buy them

[15:02:34.0000] <rniwa>
jarek: you do remember that the original iPhone only had web apps and developers kept asking for native API, right?

[15:02:48.0000] <smaug____>
how are Web Components critical to anything?

[15:03:13.0000] <rniwa>
jarek: but “fewer iPhone-specific apps” isn’t anything to do with web components :(

[15:03:22.0000] <rniwa>
jarek: you can literally write web apps that are not iPhone specific today.

[15:03:40.0000] <jarek>
rniwa: that was a minimum viable product

[15:03:50.0000] <rniwa>
I agree providing some component API in the Web is useful

[15:04:02.0000] <smaug____>
useful is different than cricital

[15:04:04.0000] <rniwa>
jarek: but I don’t think the Web components as currently spec’ed is the best way to do it

[15:04:06.0000] <smaug____>
critical

[15:04:14.0000] <rniwa>
/me nods

[15:04:52.0000] <jarek>
rniwa: and I find it hard to believe that this is motivated purely by technical reasons :P

[15:05:20.0000] <caitp>
it's like i said earlier

[15:05:26.0000] <caitp>
it's developer ergonomics

[15:05:32.0000] <rniwa>
caitp: right.

[15:05:37.0000] <othermaciej>
Apple wants web apps to work great and be easy to write on all our platforms.

[15:05:40.0000] <caitp>
at least, in theory it is

[15:05:50.0000] <rniwa>
caitp: but I don’t think shadow DOM provides the best developer ergonomics

[15:05:56.0000] <othermaciej>
Especially so the WebKit team, and we are the ones who decide the details of our web standards strategy.

[15:06:26.0000] <rniwa>
caitp: it adds a shit ton of complexity to how DOM works and yet doesn’t provide “true” encapsulation.

[15:06:29.0000] <othermaciej>
caitp: All my developer ergonomics related feedback on Web Components was 100% ignored

[15:06:40.0000] <caitp>
yeah

[15:06:45.0000] <othermaciej>
caitp: with reason of, basically, “too late, we’re shipping"

[15:06:50.0000] <caitp>
i'm not excusing that, i think a better job could have been done there

[15:06:50.0000] <rniwa>
what it provides is a weak encapsulation you can pierce through with special CSS syntax.

[15:06:52.0000] <smaug____>
/me believes XBL2 -like approach would have led to easier-to-write components than the current Web Components setup

[15:07:04.0000] <othermaciej>
caitp: after multiple years of “oh, we’ll get to that later, there’s plenty of time"

[15:07:13.0000] <caitp>
yeah

[15:07:22.0000] <rniwa>
smaug____: XBL2 is definitely simpler than web components as it stands today.

[15:07:27.0000] <othermaciej>
you don’t need a conspiracy theory to explain why that might make us not feel so great about it

[15:07:45.0000] <othermaciej>
I like that Web Components decomposes the XBL-style model into independent parts

[15:07:53.0000] <caitp>
but the good news is, if only one vendor uses it, even a massively popular vendor, it's probably not going to take over the web

[15:07:54.0000] <rniwa>
smaug____: it’s amazing we started from “XBL2 is too damn complicated. let’s create something simpler” and ended up with “well, we need something more complicated than XBL2!"

[15:07:59.0000] <othermaciej>
I think the biggest flaws are missing parts, bad defaults, and not doing enough to make it work well together

[15:08:05.0000] <caitp>
so tehre's probably still time to unwreck it

[15:08:38.0000] <rniwa>
caitp: yeah, after some massive renames LOL

[15:08:46.0000] <othermaciej>
there’s this weird attitude that clean integration points mean a failure of decomposition

[15:09:34.0000] <othermaciej>
and to some extent, that direct usability is not important because Web cCmponents should ever be used via a JavaScript framework on top of it

[15:10:46.0000] <caitp>
we'll find a way, we want to keep getting paid :p

[15:11:15.0000] <caitp>
nah I am kidding --- the idea is that you add useful application tools on top of the useful component tools

[15:11:21.0000] <caitp>
which is desirable, I think

[15:14:51.0000] <roc>
personally I think we're stuck with the Google approach, so my best hope is get the spec and Blink aligned.

[15:15:07.0000] <jarek>
I find raw Web Components API to be easy enough to be used without frameworks

[15:15:58.0000] <hober>
roc: i don't think we're stuck with it.

[15:16:22.0000] <roc>
hober: you think an alternative approach can be specced and implemented and win in the market against Chrome's?

[15:16:41.0000] <caitp>
in the apple/mozilla/microsoft market? probably

[15:16:42.0000] <smaug____>
we could change at least those odd defaults web components has

[15:16:48.0000] <roc>
and furthermore, all that energy and disruption would actually be worth it?

[15:16:52.0000] <smaug____>
to have proper information hiding and encapsulation

[15:17:10.0000] <jarek>
smaug____: what do you mean specifically?

[15:17:26.0000] <jarek>
smaug____: is this something facing the API users?

[15:17:44.0000] <roc>
having to opt into encapsulation isn't great but it's not a deal-breaker.

[15:18:06.0000] <smaug____>
jarek: anyone can poke into anyone's shadow dom

[15:18:14.0000] <smaug____>
and make changes, and that way break components

[15:18:27.0000] <smaug____>
and if that CSS thing is added, that may happen almost accidentally

[15:18:42.0000] <caitp>
you mean the shadow piercing selectors?

[15:18:44.0000] <jarek>
roc: only if he does it intentionally, you can't mess up another component accidentally

[15:18:46.0000] <caitp>
or a different css thing

[15:19:03.0000] <jarek>
s/roc/smaug___

[15:19:11.0000] <smaug____>
roc: it might be worth so that we, API designers, learn from this mess

[15:19:45.0000] <jarek>
smaug____: what CSS thing? CSS is fully encapsulated by default (i.e. if you use <style> tag inside shadow DOM)

[15:20:11.0000] <smaug____>
caitp: is that what it is called

[15:20:24.0000] <smaug____>
the selector for accessing shadow dom

[15:20:35.0000] <caitp>
that's what I call it, it seems like a good name

[15:21:35.0000] <jarek>
smaug____: it could be handy in some rare cases

[15:21:36.0000] <smaug____>
there is also Event.path (though in the current spec it is not clear what it actually returns )

[15:21:45.0000] <jarek>
smaug____: like when you want to force default font

[15:23:01.0000] <smaug____>
while programming , say C++, want to poke into the implementations of some class? public: isn't the default

[15:23:44.0000] <caitp>
web developers don't speak C++, they speak javascript and CSS

[15:23:50.0000] <caitp>
and in those cases, there's no such thing as non-public

[15:23:59.0000] <caitp>
they'll be fine

[15:24:22.0000] <smaug____>
well what is then the point with web components?

[15:24:37.0000] <caitp>
so, I kinda agree on the CSS thing

[15:24:43.0000] <roc>
smaug____: I really think that having to write a tiny amount of boilerplate to get encapsulation is much less important than just about every other issue here

[15:25:35.0000] <smaug____>
to get encapsulation? there is no real encapsulation

[15:26:22.0000] <smaug____>
roc: but sure, I agree the main issue is to get implementation to follow the spec, which means we need to have a spec which can be followed

[15:26:37.0000] <smaug____>
s/implementation to follow/implementations to follow/

[15:26:39.0000] <roc>
sure, we're talking about some future extension which actually provides encapsulation.

[15:27:04.0000] <jarek>
smaug____: I disagree that 100% encapsulation is always good, there are situations were breaking rules makes perfect sense

[15:27:38.0000] <smaug____>
jarek: sure, and you opt-in to have weaker encapsulation

[15:28:10.0000] <smaug____>
/me is not sure shadow dom model bends easily to have better encapsulation

[15:28:49.0000] <smaug____>
maybe it does. Haven't seen any proposals what the API would look like.

[15:30:55.0000] <roc>
*that* is an important question.

[15:31:51.0000] <caitp>
are you familiar with parkinson's law of triviality?

[15:33:57.0000] <astearns>
caitp: I think we should find a better name for that

[15:34:40.0000] <caitp>
lets argue about the naming aesthetics then

[15:35:37.0000] <rniwa>
smaug____: I don’t think we necessarily need 100% encapsulation

[15:36:10.0000] <rniwa>
smaug____: but not enabing shadow piercing and not exposing shadow root goes a long way towards making components more version-change relilient

[15:36:43.0000] <rniwa>
smaug____: as thigns stand, it’s so easily for developers to shoot themselves in foot by accessing shadow DOM and pierce through shadow boundaries.

[15:36:46.0000] <caitp>
that's true, but it would also be really hard for people who want to build frameworks on top of them

[15:36:52.0000] <smaug____>
I could agree with that. (implementations, if they want to use shadow dom for form elements and such, will need to have 100% encapsulation)

[15:36:55.0000] <caitp>
we need a shadow root :(

[15:36:55.0000] <rniwa>
the worst part is that component’s author doesn’t have a control over it :(

[15:37:21.0000] <rniwa>
so if you build some component, and let other developers use it

[15:37:39.0000] <rniwa>
then you have no idea if anyone has been piercing through shadow boundries or not.

[15:38:11.0000] <rniwa>
so from component’s author’s perspective, the current design of web components doesn’t solve one of the biggest problem with Web today

[15:38:54.0000] <roc>
seems like it would be easy enough to have an opt-in encapsulation attribute that blocks the shadow-piercing combinator and access to the shadow root

[15:38:56.0000] <rniwa>
as I understand it, non-Apple/Google/Mozilla browser vendor has a serious concern about this as well.

[15:39:26.0000] <rniwa>
roc: right, that’s what othermaciej suggested ages ago, and we’ve been waiting for it be added to the spec.

[15:39:35.0000] <rniwa>
roc: and we’ve been arguing that it should be the default.

[15:39:39.0000] <roc>
I recall a pretty long discussion about this in www-style

[15:40:00.0000] <caitp>
well i mean what are you going to do, give each shadow tree its own JS sandbox, its own style sandbox, and its own event tree?

[15:40:00.0000] <rniwa>
roc: instead, none of that gets spec’ed and chrome shipped with the default we publicly objected to

[15:40:01.0000] <roc>
I recall everyone agreeing that encapsulation control was important

[15:40:09.0000] <caitp>
that would be expensive

[15:40:11.0000] <rniwa>
roc: right.

[15:40:13.0000] <roc>
there was disagreement over the default

[15:40:38.0000] <rniwa>
caitp: WebKit does that already to implement input, textarea, etc…

[15:40:41.0000] <roc>
I happen to agree with you about what the default should be, but I don't think the default is important.

[15:40:48.0000] <rniwa>
caitp: although we don’t have a separate VM since the code is written in C++

[15:40:55.0000] <caitp>
yes

[15:40:56.0000] <rniwa>
caitp: but we can certainly make the creation of VM much cheaper

[15:41:28.0000] <rniwa>
roc: default may not be the show stopper but if there’s not even an option to turn on real encapsulation

[15:41:42.0000] <caitp>
even if you do, if you ever want to have communication between those sandboxes, it gets nasty

[15:41:45.0000] <rniwa>
roc: I don’t see a point in implementing shadow DOM

[15:41:51.0000] <roc>
there's nothing to stop Apple and Mozilla supporting an encapsulation attribute even if Google doesn't care

[15:41:57.0000] <rniwa>
caitp: indeed.

[15:42:09.0000] <rniwa>
caitp: that’s precisely why we’d like to sort out details in that world

[15:42:25.0000] <rniwa>
caitp: and make sure shadow DOM, custom elements, etc… designs are coherent against such an encapsulation model

[15:42:38.0000] <rniwa>
caitp: it’s hard to add an encapsulation model on top of a non-encapuslated model.

[15:42:51.0000] <roc>
that's not necessarily true

[15:42:54.0000] <roc>
it happens all the time

[15:43:02.0000] <rniwa>
roc: examples?

[15:43:05.0000] <caitp>
it's hard to ship an encapsulation module which works but is super slow

[15:43:10.0000] <caitp>
s/module/model

[15:43:22.0000] <roc>
C++ extends C

[15:43:29.0000] <smaug____>
roc: getting XBL1 stuff properly encapsulated in Gecko has taken years

[15:43:32.0000] <rniwa>
roc: oh sure

[15:43:33.0000] <smaug____>
well, a decade

[15:43:54.0000] <rniwa>
roc: but we’ve had a lot of internal discussions about how we can use shadow DOM & custom elements to do real encapsulation

[15:44:03.0000] <smaug____>
(not that we use XBL1 much for web exposed stuff)

[15:44:04.0000] <rniwa>
roc: and that required a lot of fundamental design changes

[15:44:12.0000] <roc>
rniwa: by all means share those results

[15:44:18.0000] <rniwa>
roc: we already have!

[15:44:22.0000] <roc>
ok

[15:44:31.0000] <roc>
I don't really folllow Web Apps so it was probably there

[15:45:29.0000] <rniwa>
roc: http://lists.w3.org/Archives/Public/public-webapps/2013OctDec/0418.html

[15:45:38.0000] <rniwa>
roc: there’s a long discussion following that email

[15:46:22.0000] <rniwa>
roc, smaug____: all of that feedback was basically ignored/rejected after a long debate in the favor of us spec’ing the non-encapsulated model first, which loudly objected to

[15:46:27.0000] <rniwa>
we* loudly

[15:46:58.0000] <rniwa>
I’m more than happy to work with Mozilla and any other vendor to work out details on how to do real encapsulation with shadow DOM

[15:47:15.0000] <rniwa>
In fact, I’d love if you guys are interested in having such a conversation

[15:48:13.0000] <rniwa>
but I’ve gotten to a point where I don’t see much value in giving furhter feedback on WebApps given the second we say anything, they basically tell me to go implement and come back.

[15:54:13.0000] <roc>
rniwa: it looks like you tried to address maciej's "type 3" inverse encapsulation?

[15:56:57.0000] <roc>
I think that's much less important than type 2 encapsulation.

[15:56:57.0000] <rniwa>
roc: yeah, sort of.

[15:57:17.0000] <roc>
and much harder

[15:57:18.0000] <rniwa>
roc: I’m not certain. type 2 encapsulation is useful for some things

[15:59:14.0000] <roc>
I think in practice, component-users depending on the details of component implementations is a much bigger problem than components depending on the details of their users.

[15:59:40.0000] <roc>
especially in terms of DOM structure

[15:59:55.0000] <rniwa>
roc: well, type 2 doesn’t solve that problem


2014-11-07
[16:00:12.0000] <roc>
doesn't it?

[16:00:19.0000] <rniwa>
roc: because it doesn’t prevent component users intruding into its implementaion

[16:00:19.0000] <roc>
"2) no API is provided which lets code outside the component poke at the shadow DOM. Only internals that the component chooses to expose are exposed."

[16:00:30.0000] <rniwa>
roc: oh sorry, I misunderstood.

[16:01:24.0000] <TabAtkins>
rubys: I can't comment on that thread anymore; don't know what's up.

[16:01:34.0000] <TabAtkins>
rubys: Anyway, linking issues are fixed. Thanks for pointing them out.

[16:02:05.0000] <TabAtkins>
rubys: The constructor and stringifier not linking is a known issue. Hopefully it's okay to leave them unlinked for now.  I'll work on that next week with some other WebIDL fixes I've been putting off.

[16:03:11.0000] <rniwa>
roc: right, we want to support 2 & 4.

[16:03:34.0000] <rniwa>
roc: because for things like “like button” we need at least 3 if not 4.

[16:03:52.0000] <rniwa>
roc: and for regular reusable components, we want 2.

[16:04:11.0000] <roc>
seems to me that an opt-in attribute that blocks the shadow-piercing CSS combinator, and blocks the use of the shadowRoot getter on Element, would go a long way towards type 2 encapsulation.

[16:04:22.0000] <rniwa>
roc: indeed.

[16:04:35.0000] <othermaciej>
roc: that would probably be sufficient for type 2

[16:04:45.0000] <othermaciej>
roc: I think for type 4, you need that plus script isolation

[16:04:59.0000] <TabAtkins>
+ a way to name internal pieces that *can* be styled. You really need that for it to be useful.

[16:05:08.0000] <othermaciej>
roc: part of the right reason I care about type 2 is that I think it’s a good building block for type 4

[16:05:24.0000] <TabAtkins>
/me is gone for the day and can't follow up; is busy being on vacation.

[16:05:29.0000] <othermaciej>
TabAtkins: yes, controlled styling access is obviously useful (arguably useful even if you also have unconstrained internals styling access)

[16:05:32.0000] <rniwa>
othermaciej, roc: yeah, scripts fiddling with prototype probably belongs to 4

[16:05:42.0000] <roc>
I need to think about it more, but currently I'm not enthusiastic about providing 4 in Web Components.

[16:06:05.0000] <rniwa>
roc: because it’s a different way of writing iframe?

[16:06:06.0000] <roc>
I hope that the Like-button example can be satisfied with a Web Component hosting a cross-origin IFRAME.

[16:06:24.0000] <roc>
rniwa: because I suspect it would add a ton of complexity to the platform.

[16:06:31.0000] <rniwa>
roc: the problem is that like button may need to show a pop over to type in comments

[16:06:49.0000] <rniwa>
roc: i think script isolation already exists in the form of browser extensions

[16:07:18.0000] <roc>
I don't think so

[16:07:18.0000] <rniwa>
roc: but I have no doubt it introduces some complexity to the platform.

[16:07:36.0000] <rniwa>
roc: !? Firefox extensions run in the browser’s main world/isolate?

[16:07:43.0000] <roc>
e.g. our XBL <video controls> and <marquee> are not trusted.

[16:08:12.0000] <rniwa>
roc: interesting. but how about browser extensions injected scripts?

[16:08:32.0000] <smaugB2g>
not trusted, but have non-web view of things

[16:08:47.0000] <roc>
rniwa: some do, some don't. We do support isolated script worlds. But multiple isolated script worlds living in the same page ... we don't really support that.

[16:08:59.0000] <rniwa>
roc: oh I see.

[16:09:04.0000] <rniwa>
roc: okay, so there could be some challege there.

[16:09:22.0000] <rniwa>
roc: I think combining iframe + dialog element may work

[16:09:25.0000] <smaugB2g>
yes we do, via wrappers

[16:09:41.0000] <rniwa>
roc: we just need to sort out use cases and figure out what’s needed for those social media buttons

[16:09:57.0000] <rniwa>
roc: as well as DISQUS and other cross-origin widgets

[16:10:32.0000] <rniwa>
social button case is particularly interesting because the button itself is super tiny and yet the comment form needs to be much larger than the button

[16:10:49.0000] <smaugB2g>
/me suggests asking bholley about Gecko's wrappers

[16:11:31.0000] <roc>
smaugB2g: we support isolated script worlds manipulating objects from other pages. But you can't, for example, add a DOM node with a different principal to the rest of the page. Without that, I'm not comfortable claiming we have isolated worlds inthe same page.

[16:12:15.0000] <rniwa>
roc: oh I see.

[16:12:24.0000] <rniwa>
roc: but I don’t think we need to support something that complicate

[16:12:32.0000] <rniwa>
roc: we can solve that in DOM API instead

[16:12:46.0000] <rniwa>
roc: e.g. we can treat shadow root like iframe’s document element

[16:12:52.0000] <roc>
rniwa: I just don't want to spec and expose an entirely new kind of isolation in the Web.

[16:13:12.0000] <rniwa>
roc: I used to think like that.

[16:13:25.0000] <rniwa>
roc: but I think we want the same components model work both same-origin and cross-origin

[16:13:36.0000] <rniwa>
roc: and we might be able to use iframe’s machinary

[16:13:40.0000] <rniwa>
roc: instead of inventing its own

[16:14:02.0000] <rniwa>
roc: ideally, we’ll be just re-using some code we have for iframe already in terms of implementation

[16:14:09.0000] <roc>
if we can do that by actually using an iframe, that's so much better.

[16:14:13.0000] <rniwa>
roc: i agree we defintely don’t want to introduce a new security model, etc...

[16:14:19.0000] <rniwa>
roc: indeed.

[16:14:35.0000] <rniwa>
roc: at some point, I had an iframe to suguar-coat iframe and provide some nice components API instead

[16:14:40.0000] <rniwa>
roc: so something like that might work

[16:14:53.0000] <rniwa>
roc: but this is precisely why we should talk about these stuff :)

[16:14:58.0000] <rniwa>
roc: and would love to have it spec'ed

[16:15:21.0000] <rniwa>
roc: perhaps we can have an in-person meeting some time?  it’s hard to talk about this without a white board.

[16:15:41.0000] <roc>
sure

[16:15:50.0000] <roc>
this is a great time to visit New Zealand

[16:16:08.0000] <roc>
:-)

[16:16:25.0000] <rniwa>
roc: oh, you’re in New Zealand?

[16:16:32.0000] <roc>
yeah

[16:16:41.0000] <rniwa>
roc: coming to the bay area anytime?

[16:16:58.0000] <roc>
no doubt, but not for a few months at least

[16:16:59.0000] <rniwa>
roc: or WebApps F2F in the spring (presumably in paris)?

[16:17:18.0000] <roc>
probably not

[16:17:31.0000] <rniwa>
roc: Okay. Please let me know when you do because I don’t think I’m in a hurry to talk about it at the moment.

[16:17:38.0000] <roc>
this isn't really my bailiwick

[16:17:44.0000] <rniwa>
roc: so the next few months will probably work for me.

[16:17:48.0000] <rniwa>
roc: okay.

[16:18:25.0000] <rniwa>
roc: I think wil chen & sicking are both SF? so it might make sense to meet there.

[16:18:31.0000] <roc>
yeah

[16:19:05.0000] <roc>
personally, given the market realities, I think it's a mistake to try to block Web Components on cross-origin stuff. I think we should get the simple type 2 encapsulation added, opt-in, and move forward.

[16:19:28.0000] <smaugB2g>
you want bholley for any encapsulation discussions

[16:20:08.0000] <smaugB2g>
for the technical part at least

[16:27:00.0000] <rniwa>
roc: I agree although I want to make sure we have a rough sketch on how to approach type 4 as well

[16:27:24.0000] <rniwa>
roc: so that our design for type 2 encapsulation isn’t entirely inconsistent with what we’re going to add later on

[16:29:09.0000] <rniwa>
roc: may I have your email?

[16:29:20.0000] <rniwa>
smaugB2g: who is bholley?

[16:29:42.0000] <rniwa>
roc: mine is nick at apple.com

[16:29:57.0000] <rniwa>
(as in <my IRC nick> at apple.com)

[16:30:29.0000] <roc>
robert⊙oo

[16:31:23.0000] <roc>
rniwa: have you got a thorough list of use-cases?

[16:31:40.0000] <rniwa>
roc: yeah, we have a list of use cases

[16:31:42.0000] <smaugB2g>
   rniwa: search for bholley+mozilla

[16:31:57.0000] <roc>
rniwa: can you point me at them?

[16:32:56.0000] <rniwa>
roc: we have an internal list

[16:33:09.0000] <rniwa>
roc: it’s kind of messy at the moment with all the notes mangled up

[16:33:15.0000] <rniwa>
roc: so let me clean that up and send it to you

[16:33:37.0000] <smaugB2g>
rniwa: naturally you'll want also bz' comments

[16:34:00.0000] <rniwa>
smaugB2g: most definitely.

[16:34:11.0000] <rniwa>
smaugB2g: is bz in MV or SF?

[16:34:27.0000] <smaugB2g>
east coast

[16:34:43.0000] <rniwa>
oh I see.

[16:35:00.0000] <rniwa>
perhaps I need to stop by when I go to WebApps F2F in Paris in spring

[16:36:56.0000] <roc>
rniwa: if you could send it to a mailing list, webapps probably, and let me know, that'd be great

[16:37:07.0000] <rniwa>
roc: okay, I can do that.

[16:37:46.0000] <roc>
ta

[17:19:44.0000] <jwalden>
anyone who works on HTML validators: why exactly would a validator emit a "Text run is not in Unicode Normalization Form C." warning?  it seemed like the point of composed/non-composed was to permit exactly that flexibility, so I don't see why warning is reasonable for this, on first pale

[17:20:11.0000] <MikeSmith>
hi jwalden

[17:20:25.0000] <MikeSmith>
I work on the validator code

[17:20:33.0000] <MikeSmith>
I think we have an open bug about this

[17:20:49.0000] <jwalden>
I will grant that my use case is a rather esoteric one, to be sure :-)

[17:21:18.0000] <MikeSmith>
what's your use case?

[17:21:34.0000] <jwalden>
I'm doing a blog post about the JS Intl API, and some of my examples include deliberately non-composed text, to demonstrate collation examples work regardless of composition or not

[17:21:53.0000] <jwalden>
var decoratedBrowsers = ["A\u0362maya", "CH\u035Br&ocirc;me", "Firef&Oacute;x", "sAf&agrave;ri", "o\u0323pERA", "I\u0352E"];

[17:21:56.0000] <jwalden>
:-)

[17:21:57.0000] <MikeSmith>
ah

[17:21:58.0000] <MikeSmith>
yup

[17:22:18.0000] <MikeSmith>
so yeah that is a bit esoteric, but still

[17:22:28.0000] <MikeSmith>
anyays, that message is a warning, not an error, right?

[17:22:38.0000] <jwalden>
MikeSmith: yeah, just a warning

[17:23:01.0000] <jwalden>
MikeSmith: just seemed a little strange to be anything, because of composition being optional being a feature and all

[17:23:07.0000] <MikeSmith>
yeah

[17:23:16.0000] <MikeSmith>
maybe we should just drop it at this point

[17:23:27.0000] <MikeSmith>
jwalden: we'd need to get some attention from hsivonen

[17:23:36.0000] <jwalden>
MikeSmith: or at least have it not as part of the default warnings, perhaps

[17:24:02.0000] <jwalden>
it's not an unreasonable thing to want to know about, potentially

[17:24:57.0000] <MikeSmith>
jwalden: fwiw for now, if you go to http://validator.w3.org/nu/ and check your doc and then push the "Message filtering" button, you can uncheck that message and you will never see it again (it persists the filtering)

[17:25:59.0000] <jwalden>
MikeSmith: interesting; that's a next-gen unstable validator or so?

[17:26:58.0000] <MikeSmith>
Hixie and I have been talking about appending a "Do you think this message is not helpful. If so, please post a comment  to _this bug_." (or something) thing to particular error messages, to collect feedback from authors/devs

[17:27:45.0000] <MikeSmith>
jwalden: that is an alternative UI. hsivonen and I should maybe merge that and the html5.validator.nu UI at some point.

[17:28:11.0000] <jwalden>
seems reasonable

[17:28:30.0000] <MikeSmith>
jgraham: but that UI is for the same backend instance that the main (legacy) http://validator.w3.org/ validator uses for checking HTML5 docs

[17:29:35.0000] <MikeSmith>
it will probably become the UI for http://validator.w3.org/ itself eventually (after retiring the old perl+SGML w3c validator to http://validator.w3.org/old or some such)

[17:29:50.0000] <jwalden>
mm, Perl, SGML

[17:29:51.0000] <MikeSmith>
s/jgraham/jwalden

[17:29:54.0000] <MikeSmith>
heh

[17:30:05.0000] <MikeSmith>
yup and DTDs too

[17:30:17.0000] <jwalden>
tasty

[17:31:03.0000] <MikeSmith>
:)

[17:31:24.0000] <MikeSmith>
anyway I'll bug hsivonen about the Unicode normalization thing

[17:37:32.0000] <MikeSmith>
jwalden: we don't yet have any way to opt-in to stricter warnings. I'm pretty sure we wouldn't want to add one, since the trend over the years has been been make the user-facing behavior of validator.nu simpler, with fewer knobs to turn

[17:37:54.0000] <jwalden>
fair enough

[17:38:08.0000] <jwalden>
I guess it depends what you want to lint for, really

[17:38:14.0000] <MikeSmith>
true

[17:38:28.0000] <MikeSmith>
that's why I added the message-filtering thing

[17:38:41.0000] <MikeSmith>
that gives the user the choice about what to see and not see

[17:39:49.0000] <MikeSmith>
and philosophically, this tool really is more like a linter than it is like the old w3c validator. It's just that the linting rules are formally defined in a spec (the HTML spec)

[17:40:25.0000] <MikeSmith>
it's really mostly meant just to help people catch unintended mistakes -- not to give a pass/fail certification or something

[17:41:21.0000] <MikeSmith>
and that's also the philosophy that I think Hixie has moslty always taken when adding document (authoring) conformance requirements to the HTML spec

[17:56:24.0000] <MikeSmith>
jwalden: fyi I just raised a new bug for this http://bugzilla.validator.nu/show_bug.cgi?id=1009 Feel free to comment there if you have more to say

[17:56:35.0000] <jwalden>
wilco

[17:58:13.0000] <MikeSmith>
thanks for taking time to ask about it

[17:59:57.0000] <MikeSmith>
it's always nice to know that people actually working on Web platform stuff actually do use the validator sometimes

[18:10:05.0000] <MikeSmith>
hsivonen: I know you may not care about this so much but if/when you have a few minutes, it would be great if you could go into https://github.com/settings/emails and add your @iki.fi address and also add the hsivonen@c6dcca6c-c432-0410-a79e-3fbb6554aff1 and hsivonen@e7398766-c432-0410-9565-638d39ca0058 and hsivonen@cc716562-c432-0410-be78-79d2286756cb and hsivonen@5bfc576b-c432-0410-be1c-015b6bc4b1a2 pseudo-addresses (and probably a few others)

[18:11:48.0000] <MikeSmith>
hsivonen: otherwise, when somebody view https://github.com/validator/validator/graphs/contributors it looks like you've only made 64 commits to the validator sources, which obviously is pretty misleading

[18:12:30.0000] <MikeSmith>
hsivonen: do to the degree it matters we have a somewhat more accurate record available from the github Web UI it would be nice

[18:47:15.0000] <tantek>
rniwa - isn't that the point of the Extensible Web Summits?

[18:47:39.0000] <tantek>
re: in-person meeting on Web Components

[18:49:16.0000] <rniwa>
tantek: I don’t think Extensible Web Summits are necessarily for Web components

[18:49:24.0000] <rniwa>
tantek: they talk about a lot of other new Web technologies

[18:49:57.0000] <tantek>
it would seem the Extensible Web Summits would attract the same people you would want in the room to discuss Web Componenets

[18:50:30.0000] <rniwa>
tantek: I guess so at least for Web developers

[18:51:08.0000] <tantek>
rniwa - I see that as a feature - if you're "fixing" web components, you likely need web developer perspective in the room to be sure you're "fixing" them the right (read: practical/relevant for webdevs) way.

[18:51:47.0000] <tantek>
too many times I feel I've seen browser-dev-only minutia discussions go off into the weeds and end up with weird edge case conclusions that are nothing but super confusing for webdevs.

[18:52:13.0000] <tantek>
having webdevs in the room is an excellent reality check for that kind of thing - certainly has been in the CSSWG.

[18:52:14.0000] <caitp>
> every mailing list thread ever

[18:52:20.0000] <tantek>
(not always effective, but often)

[18:52:50.0000] <tantek>
caitp - hah, yeah. the "useful" mailing list threads anyway that aren't just support forum q&a.

[18:54:37.0000] <rniwa>
tantek: oh sure

[18:54:49.0000] <rniwa>
tantek: but I think I’ve done that part already.

[18:55:04.0000] <rniwa>
tantek: what I really need is coming up with some strawman proposal I can tell developer

[18:55:20.0000] <tantek>
rniwa - then you have all the answers? I was under the impression that you needed to collaborate with others to "fix" web components.

[18:55:53.0000] <tantek>
the point is to have the webdevs in the room when you come up with the strawman proposals in-person at a f2f meeting

[18:55:57.0000] <rniwa>
tantek: oh, what I need to do is talking with other browser vendors to come up with a solution that everyone can agree to

[18:56:13.0000] <tantek>
right, *that* is what I'm talking about needing webdevs in the room for

[18:56:36.0000] <tantek>
otherwise, "everyone can agree to" ==  aformentioned "go off into the weeds and end up with weird edge case conclusions that are nothing but super confusing for webdevs"

[18:56:58.0000] <rniwa>
tantek: well, I don’t think we necesarily need web devs with us all the time

[18:57:08.0000] <rniwa>
tantek: we just need to get feedback early and often

[18:57:14.0000] <tantek>
nor should we treat "check with webdevs" as a waterfall step

[18:57:16.0000] <rniwa>
tantek: but most importantly, we need to understand their use cases

[18:57:25.0000] <tantek>
yes, agreed on that

[18:57:29.0000] <caitp>
terrible decisions get made when users aren't around and paying attention

[18:57:37.0000] <tantek>
^^^ this

[18:57:39.0000] <rniwa>
caitp: right

[18:58:03.0000] <rniwa>
but at the same time, a terrible design will be chosen if we had asked users to come up with a design

[18:58:13.0000] <rniwa>
so we need to balance the two.

[18:58:38.0000] <rniwa>
although to be fair, web devs are developers so they aren’t like ordinary notive users

[18:58:43.0000] <rniwa>
end* users

[18:58:48.0000] <rniwa>
we have to deal with in other feature development

[19:00:04.0000] <caitp>
technical constraints can't win over user appeal, it's not worth it

[19:00:31.0000] <rniwa>
caitp: well, if something is a technical constraint, we can’t just remove it.

[19:00:42.0000] <rniwa>
caitp: that’s why it’s a “constraight"

[19:01:39.0000] <rniwa>
what we need to do is to understand use cases web developers care about

[19:01:53.0000] <rniwa>
and address those pain points by coming up with a solution that works around technical constraints we have

[19:01:55.0000] <rniwa>
that’s our job

[19:02:20.0000] <caitp>
it's my job too, and I've found that we usually do a pretty awful job at it

[19:02:32.0000] <caitp>
we build systems where we're actually unable to make things work better

[19:03:15.0000] <rniwa>
caitp: examples?

[19:03:18.0000] <caitp>
maybe that's a case of not getting enough user input to begin with, but I think it's mostly that we're pulling things out of our asses to accomodate internal applications without thinking about the bigger picture

[19:04:18.0000] <caitp>
you end up with a lot of internal "we need this otherwise corner case X, so build all these walls nobody wants"

[19:04:33.0000] <caitp>
and then the system becomes unmalleable very quickly

[19:05:05.0000] <caitp>
and at that point it becomes very depressing to maintain it, whether "it" is a spec or implementation

[19:05:44.0000] <caitp>
so for real, get user stories, make sure user use cases are covered, and make sure the use cases that you want to cover, are covered __well__

[19:07:07.0000] <tantek>
and FFS, please *document* the user stories and use cases somewhere openly like on a wiki

[19:10:14.0000] <caitp>
sorry, examples --- i'm mainly talking about in framework land, but there are a lot of similarities to the web at large in terms of our complete inability to change things lest we break people :(

[19:56:30.0000] <rniwa>
caitp, tantek: I agree documenting use cases well and continously evaluating desing against them is critical.

[20:01:24.0000] <MikeSmith>
amen to what tantek said about "having webdevs in the room is an excellent reality check for that kind of thing"

[20:01:35.0000] <MikeSmith>
and "too many times I feel I've seen browser-dev-only minutia discussions go off into the weeds and end up with weird edge case conclusions that are nothing but super confusing for webdevs"

[20:20:01.0000] <rniwa>
MikeSmith: indeed.

[21:37:00.0000] <JonathanNeal>
Is there a spec for devicePixelRatio?

[21:37:21.0000] <JonathanNeal>
And by devicePixelRatio I mean the one like window.devicePixelRatio

[21:38:31.0000] <JonathanNeal>
Whoops, maybe it’s http://dev.w3.org/csswg/cssom-view/#dom-window-devicepixelratio

[01:13:12.0000] <MikeSmith>
hsivonen: did you see my earlier ping about the github stuff?

[01:22:10.0000] <annevk>
MikeSmith: please keep the NFC warning

[01:22:58.0000] <annevk>
MikeSmith: I appreciate someone finding an exception to the rule, but in practice that stuff can end up being very confusing if your code is infected by it

[01:36:20.0000] <MikeSmith>
annevk: OK

[01:37:10.0000] <MikeSmith>
I guess then we should add a link in the warning message to some place where authors can find more info on how to fix it

[01:37:52.0000] <MikeSmith>
also maybe we should consider actually adding it as a document conformance requirement to the HTML spec

[01:43:28.0000] <annevk>
MikeSmith: could point to http://www.unicode.org/reports/tr15/ I guess

[01:54:21.0000] <MikeSmith>
annevk: I meant something more user-friendly. Because there are python libraries and such that fuck this stuff up (e.g., like lxml or something causes through the spec-splitter or anolis code when generating the formatted HTML spec) and it's then not obvious to an author how to fix that

[01:55:34.0000] <MikeSmith>
annevk: example: http://validator.w3.org/nu/?doc=http%3A%2F%2Fwww.w3.org%2FTR%2Fhtml%2Fsingle-page.html

[01:57:12.0000] <MikeSmith>
those problems are in the giant character-references table in the spec, and caused by some python thing in the spec-generation toolchain doing the wrong thing

[02:09:10.0000] <MikeSmith>
for &langle; and &rangle;

[02:22:22.0000] <annevk>
Domenic: what's up with the TAG not responding to the security questionnaire proposal?

[02:23:34.0000] <annevk>
MikeSmith: ah okay, now you mention this... explaining this to someone that has not taken a deep dive seems hard

[02:25:11.0000] <MikeSmith>
annevk: Yeah

[02:25:44.0000] <annevk>
MikeSmith: I sometimes forget I've been doing this for a decade

[02:26:26.0000] <MikeSmith>
You're getting old, man

[02:26:37.0000] <annevk>
MikeSmith: now Unicode and encoding discussions feel totally natural, but before e.g. 2008 that was not really the case

[02:27:15.0000] <MikeSmith>
Yeah this stuff is totally arcane to most web devs

[02:27:20.0000] <annevk>
MikeSmith: I noticed some thinning hair

[02:28:18.0000] <annevk>
MikeSmith: and finally it almost can be, since encodings are such a thing from the past

[02:28:44.0000] <MikeSmith>
Yeah, we're moving to a lot better place

[02:29:07.0000] <annevk>
Although, iso-2022-jp... I feel like I should really turn some of these quick tests into proper test case, but it's just such a hassle to do that correctly

[02:29:48.0000] <annevk>
E.g. testharness with its absolute URLs requires a local server running... Although I suppose I could develop them online someplace

[02:30:21.0000] <MikeSmith>
iso-2022-jp is just an ongoing world of hurt

[02:30:49.0000] <annevk>
I'm getting there: https://www.w3.org/Bugs/Public/show_bug.cgi?id=27256

[02:31:11.0000] <MikeSmith>
annevk: maybeyou could do it with wptserve

[02:31:43.0000] <annevk>
Although the new design is a tad more complicated. Two state tracking variables. One byte tracking variable. And a flag. (Most likely, not done yet.)

[02:32:05.0000] <annevk>
MikeSmith: sounds like something I should look into

[02:32:16.0000] <MikeSmith>
Ohthat's a very recent big

[02:32:22.0000] <MikeSmith>
bug

[02:32:54.0000] <MikeSmith>
annevk: talk to jgraham

[02:33:52.0000] <annevk>
MikeSmith: yeah, though it's based on three older bugs

[02:34:09.0000] <wilhelm_>
wptserve is your friend.

[02:56:25.0000] <Ms2ger>
annevk, you can just run `python serve.py` in wpt root, with a little bit of one-time setup

[03:01:10.0000] <annevk>
Ms2ger: sounds pretty awesome

[03:11:27.0000] <Ms2ger>
annevk, we (and by that I mean jgraham) have tried to make it as painless as possible :)

[03:32:46.0000] <annevk>
http://lists.w3.org/Archives/Public/public-webappsec/2014Nov/0097.html (feel free to reuse for other groups that get this wrong)

[04:23:42.0000] <annevk>
Ms2ger: thanks for that, this looks great

[04:23:49.0000] <annevk>
Ms2ger: wish I had known this earlier

[04:24:05.0000] <Ms2ger>
Np :)

[04:24:12.0000] <annevk>
/me goes to setup a test for iso-2022-jp to make spec writing easier

[04:50:35.0000] <hsivonen>
MikeSmith: I already have my @iki.fi address set on github

[04:50:49.0000] <hsivonen>
MikeSmith: where do the pseudo-addresses come from?

[04:52:03.0000] <MikeSmith>
hsivonen: from the old cvs-svn-hg commit messages

[04:52:45.0000] <hsivonen>
MikeSmith: how do I find the full list I need to add including "(and probably a few others)"?

[04:54:12.0000] <MikeSmith>
hsivonen: by doing git log | grep hsivonen | uniq

[04:54:22.0000] <MikeSmith>
or some such

[04:55:19.0000] <hsivonen>
MikeSmith: I added the four pseudoaddresses, but they can't receive email, so they are unverified

[04:55:22.0000] <hsivonen>
is that enough?

[04:56:46.0000] <annevk>
decode([0x1b, 0x24, 0x40, 0x50, 0x50], "佩", "Multibyte ESC, character") <3

[04:57:12.0000] <annevk>
I feel so stupid now for not having set this up earlier

[04:58:00.0000] <annevk>
Bah, Safari doesn't support TextDecoder yet

[04:58:44.0000] <MikeSmith>
hsivonen: yeah that's expected; same case as me for my older commits

[04:59:11.0000] <hsivonen>
MikeSmith: OK, I've added them all

[04:59:15.0000] <hsivonen>
MikeSmith: thanks

[04:59:28.0000] <hsivonen>
MikeSmith: how often does github recrunch the numbers?

[05:00:14.0000] <MikeSmith>
hsivonen: thanks much. I don't think those ever change, so that should cover it forever

[05:00:35.0000] <MikeSmith>
Oh rhe data

[05:01:07.0000] <MikeSmith>
yeah I dunno how often. maybe only once a day or so

[05:01:27.0000] <hsivonen>
MikeSmith: ok.

[05:30:18.0000] <annevk>
What are you doing?

[06:02:49.0000] <mukilan>
Hi! In the fetch spec it says "Let HTTPRequest be a copy of request, except that HTTPRequest's body is a tee of request's body. ". What does "tee" mean?

[06:06:37.0000] <annevk>
mukilan: pain

[06:07:06.0000] <annevk>
/me was hoping for https://streams.spec.whatwg.org/ to define it, but it seems that's missing

[06:07:16.0000] <mukilan>
annevk: haha

[06:07:28.0000] <annevk>
mukilan: http://en.wikipedia.org/wiki/Tee_%28command%29

[06:07:52.0000] <annevk>
mukilan: there's a comment in the source that stream-related terminology needs to be grounded at some point

[06:08:03.0000] <annevk>
mukilan: doesn't help you much of course :-(

[06:09:56.0000] <mukilan>
annevk: could you please put in layman's terms? why split the source stream? where does the other copy go?

[06:10:17.0000] <annevk>
mukilan: so one copy goes over the wire

[06:10:33.0000] <annevk>
mukilan: the other one remains part of request, in case we need it again

[06:11:04.0000] <annevk>
mukilan: (we need it again if we hit a redirect or authentication)

[06:12:37.0000] <mukilan>
annevk: and the reason we use "tee" rather than just copy is because the body is like a pipe rather than a block of bytes?

[06:12:54.0000] <annevk>
mukilan: yeah, you can't copy a stream

[06:13:10.0000] <annevk>
mukilan: whereas everything else from a request can be copied

[06:13:27.0000] <mukilan>
annevk: ah! now it makes sense. thank you very much :)

[06:14:07.0000] <annevk>
happy to help, hopefully in due Domenic will have defined tee

[06:17:16.0000] <annevk>
due course, even

[06:21:48.0000] <Ms2ger>
Hi mukilan :)

[06:22:09.0000] <mukilan>
Ms2ger: Hi!!

[08:17:22.0000] <TabAtkins>
tantek: Interestingly, it's precisely "having webdevs in the room" that led to the current "minimal encapsulation" WC design. (One particular group of advanced authors, but still, authors doing actual Dev with it.) Every time we tried to have stronger encapsulation, it made their job much harder and they howled over it. So our minimum viable product ended up

[08:17:22.0000] <TabAtkins>
being "encapsulated unless you choose to pierce it in purpose".

[08:19:02.0000] <annevk>
TabAtkins: e.path is piercing?

[08:23:45.0000] <TabAtkins>
No, we clean event paths when the events cross boundaries, unless that's somehow changed in the last few months.

[08:27:26.0000] <annevk>
I think that changed way earlier

[08:27:37.0000] <smaug____>
google folks, any chance to get http://updates.html5rocks.com/2012/07/Drag-and-drop-a-folder-onto-Chrome-now-available updated to not use webkit prefixes

[08:28:06.0000] <smaug____>
oh, hmm

[08:28:20.0000] <smaug____>
it is using google only file system stuff too, I guess

[08:33:27.0000] <smaug____>
but that is still wrong

[08:33:39.0000] <smaug____>
the File system API has been abandoned

[08:33:59.0000] <smaug____>
TabAtkins: you might know who maintains html5rocks.com

[08:42:41.0000] <annevk>
jgraham: there's no encoding requirement around web-platform tests, right?

[08:45:11.0000] <gsnedders>
annevk: everything should be utf-8 except when there's good reason, IMO

[08:46:00.0000] <annevk>
I don't think you have to tell me that... I want to know if something might break

[08:46:20.0000] <annevk>
I don't really see another way to test e.g. iso-2022-jp's encoder

[08:46:26.0000] <gsnedders>
Nothing should break.

[08:46:44.0000] <gsnedders>
I'm not sure how well tested that is, though :)

[08:47:11.0000] <annevk>
Well it's happening

[08:48:56.0000] <mukilan>
annevk: In the HTTP fetch spec, section 4.3 step 11, it says "If HTTPRequest's body is non-null, run these substeps:" this does not apply to GET and HEAD methods right ?

[08:50:05.0000] <annevk>
mukilan: I don't think we allow the combination of those methods and a body, right

[08:52:31.0000] <mukilan>
annevk: yes, but is it assumed that the check is performed in HTTP spec? i'm asking because of this test /XMLHttpRequest/send-entity-body-get-head-async.htm

[08:53:52.0000] <annevk>
mukilan: I think XHR has such a check itself

[08:54:15.0000] <annevk>
mukilan: https://xhr.spec.whatwg.org/#dom-xmlhttprequest-send "If the request method is GET or HEAD, set body to null."

[08:54:47.0000] <mukilan>
annevk: ha! i missed that. sorry for the trouble :)

[09:03:35.0000] <TabAtkins>
smaug____: I'll try to remember to bug them on Monday. On vacation now.  (I'm bad at vacation.)

[09:05:01.0000] <smaug____>
vacation, what is that ;)

[09:05:07.0000] <smaug____>
TabAtkins: thanks

[09:08:49.0000] <annevk>
Hmm

[09:09:06.0000] <annevk>
\u005C\u203E\uFF90 -> \%1B(J~%1B$B%_%1B(B

[09:09:53.0000] <annevk>
Note how the %1B is sensible, but %_ is not, yet both Firefox and Chrome do the exact same thing

[09:28:05.0000] <annevk>
Note also how https://url.spec.whatwg.org/#query-state endorses this madness by not escaping %

[09:28:50.0000] <annevk>
Not sure what to think of this...

[09:43:13.0000] <Ms2ger>
annevk, is a 404 a "network error"?

[09:43:20.0000] <annevk>
Ms2ger: no

[09:43:52.0000] <annevk>
Ms2ger: network error has status 0

[09:44:31.0000] <Ms2ger>
Hrm

[09:45:55.0000] <Ms2ger>
I can't figure out what's expected from importScripts("NonExistentFile.js")

[09:47:13.0000] <annevk>
Ms2ger: are we talking HTTP 404?

[09:47:31.0000] <Ms2ger>
Yes

[09:47:56.0000] <annevk>
Ms2ger: Hixie doesn't really define it

[09:48:05.0000] <Ms2ger>
Lovely

[09:48:11.0000] <caitp>
Domenic: is chai-as-promised expected to work with promise APIs that don't try to look like ES6 Promises?

[09:48:12.0000] <annevk>
Ms2ger: but if we assume <script> processing model, it should just parse and execute

[09:48:26.0000] <caitp>
(someone filed a bug on us, and I'm not seeing how it would possibly work)

[09:48:33.0000] <Ms2ger>
I've got tests from MS that expect a NetworkError

[09:48:51.0000] <Hixie>
Ms2ger: does HTTP define that as a successful load or a failed load?

[09:49:12.0000] <annevk>
Hixie: it's not defined in terms of HTTP though

[09:49:35.0000] <Hixie>
annevk: Ms2ger's case was http

[09:50:01.0000] <Hixie>
annevk: the HTML spec just says "If the fetching attempt failed"

[09:50:17.0000] <Hixie>
so it depends on the protocol's definition of success

[09:50:22.0000] <annevk>
Yeah, given <script> and <img> and such I'm inclined to say that this should just work

[09:50:31.0000] <annevk>
That seems very sketchy

[09:51:39.0000] <annevk>
We should define things in terms of network errors vs non network errors (what <script> and <img> do) or in terms of status codes

[09:51:45.0000] <Ms2ger>
Also not quite obvious

[09:52:00.0000] <Hixie>
file a bug saying what you want it to say (ideally matching implementations)

[09:52:50.0000] <annevk>
Ms2ger: ^

[09:52:56.0000] <Ms2ger>
Filing

[09:53:41.0000] <Ms2ger>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=27276

[09:58:03.0000] <annevk>
I guess I'll finish this iso-2022-jp rewrite this weekend

[09:58:10.0000] <annevk>
And submit some tests for it

[10:02:32.0000] <smaug____>
https://wiki.whatwg.org/wiki/DragAndDropEntries might use a comment that the File System API is obsolete

[10:02:57.0000] <smaug____>
/me wonders if he has account for that wiki

[12:38:47.0000] <wanderview>
jsbell: can you reopen this issue?  https://code.google.com/p/chromium/issues/detail?id=429832

[12:38:57.0000] <wanderview>
jsbell: based on this spec issue: https://github.com/slightlyoff/ServiceWorker/issues/551

[12:41:58.0000] <jsbell>
wanderview: done

[12:42:14.0000] <wanderview>
jsbell: thanks!  sorry for my initial confusion in that bug

[12:46:21.0000] <jsbell>
wanderview: re: response bodies... yeah, I was pondering that too. they're more subtle since e.g. text() on a response consumes the body even if it's empty. We don't implement optional bodies on Responses yet either via script ctor

[12:49:30.0000] <wanderview>
jsbell: aren't Request and Response identical in how they handle empty bodies per the spec?  the default is "Let stream be an empty byte stream." ... which I guess could be consumed,  but it would be nice to avoid that

[12:53:05.0000] <jsbell>
hrm, right.

[12:53:08.0000] <wanderview>
jsbell: I think the fetch spec needs to be clarified:  https://github.com/slightlyoff/ServiceWorker/issues/550#issuecomment-62209952

[12:53:28.0000] <jsbell>
+1

[12:53:55.0000] <jsbell>
Also, bleah, we apparently support new Response(null) but not new Response()

[12:54:53.0000] <annevk>
jsbell: I hope new Response(null) is equal to new Response("null")

[12:55:46.0000] <jsbell>
annevk: you may be disappointed. :) crbug.com/412027

[12:55:48.0000] <annevk>
Hmm, guess I have to review that issue at some point

[12:56:58.0000] <jsbell>
(agreed it *should* turn into "null", though)

[12:58:03.0000] <jsbell>
On a tangent, union support in Blink's IDL compiler is almost usable. Yaaaay! *kermit flail*

[12:58:54.0000] <annevk>
It's really hard to balance getting work done and answering difficult emails

[12:59:34.0000] <annevk>
On the upside I'm almost done with iso-2022-jp (again), and on the downside there's a bunch of emails that need looking into plus I don't know what else

[13:01:34.0000] <wanderview>
jsbell: unrelated question... is there IDB 2.0 spec going on? possibly including the KeyRange.inList() thing I proposed a year or so ago?

[13:02:03.0000] <jsbell>
wanderview: SW has been eating my time. I've got a team member exploring API changes to improve perf, including the inList thing actually

[13:02:34.0000] <wanderview>
jsbell: cool... I haven't looked at recently (because SW!), but I didn't want to miss the boat again

[13:02:35.0000] <jsbell>
wanderview: we need batched fetches of some sort too; the overhead of an event per result is too damn high

[13:03:01.0000] <jsbell>
wanderview; not missing anything. I'll make noise when there's any attempt at concrete progress

[13:03:08.0000] <wanderview>
jsbell: awesome, thanks!

[13:03:29.0000] <jsbell>
wanderview: I've been noodling on IDB+Promises again too.... https://gist.github.com/inexorabletash/8c122c84a65de65c35b3

[13:04:17.0000] <jsbell>
not sure that holds together or not yet, or that it's an improvement

[13:05:09.0000] <wanderview>
seems reasonable

[13:08:11.0000] <wanderview>
/me takes a break to watch http://us.battle.net/overwatch/en/


2014-11-08
[17:44:08.0000] <JonathanNeal>
I’m trying to test an update to my Promises polyfill, and I’d like to run it through Promises/A+ Compliance Test Suite. Has anyone done this using browserify? There aren’t specific instructions, and I’m a bit of a novice.

[17:52:38.0000] <caitp->
do the aplus tests run in a browser?

[17:54:42.0000] <JonathanNeal>
Supposedly, with browserify https://github.com/promises-aplus/promises-tests > This also works in the browser, if you have your Mocha tests running there, as long as you use browserify.

[17:56:22.0000] <JonathanNeal>
But I might just take the tests at, say, https://github.com/promises-aplus/promises-tests/blob/master/lib/tests/2.1.2.js and port them to straight up mocha if I can’t figure it out. Kind of a lame solution, but I’m eager to see if I’ve done things right.

[18:18:43.0000] <caitp->
i dunno, haven't run them in the browser

[18:18:46.0000] <caitp->
we should probably do that

[18:32:14.0000] <JonathanNeal>
thanks for the credit/blame

[18:33:44.0000] <JonathanNeal>
caitp-: are you on the angular team?

[18:34:50.0000] <caitp->
yeah

[18:36:33.0000] <JonathanNeal>
oh sweet, i saw the angular 1.3 v 2.0 video and it looked good, simplified, which are usually === anyway

[18:38:14.0000] <caitp->
thats definitely what i want us to do with it, simplify the crazy

[19:17:45.0000] <JonathanNeal>
I just confused my synthetic console in IE8 for Chrome’s. Yay and boo.

[20:07:48.0000] <JonathanNeal>
caitp-: i’m porting the tests to mocha, is that the testing suite you use?

[22:23:14.0000] <yoav>
TabAtkins: Around by any chance?

[00:19:57.0000] <annevk>
wanderview: could have answered that question yesterday I guess, oh well

[01:53:49.0000] <annevk>
tobie: closely watching GitHub or are you a bot?

[03:01:50.0000] <annevk>
gsnedders: jgraham: I created a new encoding directory

[03:02:13.0000] <annevk>
gsnedders: jgraham: however, I now want to write a couple simple gbk / gb18030 tests, is it okay if I do that in a separate branch?

[03:02:27.0000] <annevk>
gsnedders: jgraham: that I guess would also introduce this new directory

[03:02:42.0000] <annevk>
gsnedders: jgraham: or should I branch from the previous branch?

[03:03:04.0000] <annevk>
gsnedders: jgraham: or... just add it to the previous branch and make the PR ever larger?

[03:06:45.0000] <annevk>
For now I'll continue to create files in this iso-2022-jp branch as that's easiest

[04:43:07.0000] <Domenic>
JonathanNeal: the tests are already written in Mocha; not sure what you mean

[04:46:03.0000] <annevk>
zcorpan: were you suggesting we should align with Chromium/WebKit on encoder error handling?

[04:46:33.0000] <annevk>
zcorpan: kind of leaning in that direction too now

[04:46:45.0000] <annevk>
zcorpan: since Firefox emits UTF-8 bytes

[04:48:20.0000] <annevk>
jgraham: how do I get my /etc/hosts file shared with the VM?

[04:50:00.0000] <Domenic>
caitp: it should work with any thenables that follow Promises/A+. Last I checked Angular 1.3 was fixed so that it didn't depend on the digest cycle and so chai as promised should work with it

[05:22:54.0000] <Ms2ger>
annevk, tobie's a bot

[05:26:31.0000] <Ms2ger>
annevk, and I think a separate branch would be easier; if you're working on the existing branch, you can do git checkout -b gbk; git rebase -i origin/master and drop the iso-jp commit

[05:28:00.0000] <tobie>
annevk, Ms2ger: bot is indeed usurping my identity on web-platform-tests.

[05:29:41.0000] <tobie>
*a bot

[06:13:02.0000] <MikeSmith>
annevk: those tobie added foo labels messages are from a bot (that tobie set up)

[06:14:33.0000] <MikeSmith>
oh

[06:15:09.0000] <MikeSmith>
/me only now sees that Ms2ger and tobie both said the same thing earlier. I guess I should read the scrollback first..

[06:21:20.0000] <annevk>
Ms2ger: completely separate or on top of iso-2022-jp?

[06:21:36.0000] <annevk>
Ms2ger: I guess completely separate can work, I'll let you know when I'm ready

[06:28:24.0000] <Ms2ger>
annevk, yeah, completely separate makes the most sense, I think

[07:05:35.0000] <annevk>
zcorpan: never mind, it seems we already decided that Gecko needed to align with Chromium and WebKit

[07:30:12.0000] <MikeSmith>
annevk: I can review those iso-2022-jp tests if Ms2ger or Simon don't get to it first

[07:30:27.0000] <MikeSmith>
but probably not before Monday my time

[09:19:50.0000] <annevk>
MikeSmith: not in a rush, thanks

[09:41:24.0000] <Ms2ger>
MikeSmith, if you have anything of those encodings paged in, I'll be happy to stand down :)

[11:58:49.0000] <annevk>
Messed up rebranching :-(

[14:53:50.0000] <JonathanNeal>
Domenic: Oh, I see, that explains why it was so easy. I’ve only needed to tweak things here and there to test them in the browser.

[14:57:58.0000] <Domenic>
JonathanNeal: https://github.com/domenic/aplus-tests-against-the-browser/tree/gh-pages might be interesting

[14:58:22.0000] <Domenic>
JonathanNeal: the gh-pages branch isn't working now for some reason, not sure why

[14:59:47.0000] <JonathanNeal>
Maybe it’s easier to show you what I mean. I’m really not trying to change much https://gist.github.com/jonathantneal/aecbb62eacb4fecd1123

[15:02:06.0000] <Domenic>
JonathanNeal: the adapter pattern was meant to avoid having to modify the test code

[15:02:51.0000] <Domenic>
JonathanNeal: https://github.com/domenic/aplus-tests-against-the-browser/blob/gh-pages/index.html#L15-L26

[15:31:32.0000] <jgraham>
annevk: I assume you set the hosts file in the VM

[15:43:53.0000] <JonathanNeal>
Domenic: that makes sense. Know why the gh-pages branch might not be working?

[15:57:39.0000] <Domenic>
JonathanNeal: probably something about how I messed with my blog URLs...


2014-11-09
[21:23:15.0000] <JonathanNeal>
When the MDN docs call it the executor, do they mean resolver? https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise

[21:24:22.0000] <JonathanNeal>
I otherwise see it referred to as `[[Resolve]](promise, x)`

[23:49:05.0000] <annevk>
jgraham: http://testthewebforward.org/docs/running_tests.html wptrunner is a broken link

[23:52:53.0000] <annevk>
jgraham: I've been looking for a while now including https://github.com/w3c/web-platform-tests/blob/master/serve.py and I cannot find how to configure localhost

[23:54:13.0000] <annevk>
found it

[00:02:26.0000] <annevk>
no permission

[00:02:29.0000] <annevk>
oh well, found a workaround

[00:13:47.0000] <annevk>
Turns out IE does very weird things in this area

[01:47:57.0000] <annevk>
Domenic: http://lists.w3.org/Archives/Public/www-international/2014OctDec/0091.html

[02:09:46.0000] <Domenic>
annevk: nice

[03:54:22.0000] <MikeSmith>
Ms2ger: I've done nothing on that encodings PR so far, so feel free :-)

[03:55:26.0000] <MikeSmith>
/me spent the day outside on a date

[03:57:43.0000] <MikeSmith>
Ms2ger: I want to look at it eventually regardless, just as another way to get more familiar with the spec, and I don't mind if somebody else formally reviews it and merges first

[03:57:59.0000] <MikeSmith>
but I will try to make time for it tomorrow anyway

[03:58:20.0000] <Ms2ger>
I do'n

[03:58:38.0000] <Ms2ger>
*I don't necessarily want to get more familiar with the spec

[03:58:42.0000] <Ms2ger>
So go ahead :)

[03:59:50.0000] <MikeSmith>
heh

[03:59:51.0000] <MikeSmith>
ok

[04:52:28.0000] <annevk>
The algorithm for iso-2022-jp is mostly new, so I don't think anybody other than me will be overly familiar

[04:52:45.0000] <MikeSmith>
yeah

[04:52:57.0000] <annevk>
Perhaps unsung hero  Arkadiusz Michalski

[04:53:11.0000] <MikeSmith>
annevk: question,

[04:53:13.0000] <MikeSmith>
ah yeah

[04:53:15.0000] <MikeSmith>
that guy

[04:53:23.0000] <MikeSmith>
annevk: question about http://w3c-test.org/conformance-checkers/html/elements/a/href/userinfo-password-contains-pile-of-poo-novalid.html

[04:53:54.0000] <MikeSmith>
galimatias reports an error for taht

[04:54:10.0000] <annevk>
MikeSmith: seems like it should be valid

[04:54:11.0000] <MikeSmith>
"Illegal character in user or password: not a URL code point."

[04:54:24.0000] <MikeSmith>
ok yah that's what I thought

[04:54:32.0000] <MikeSmith>
will file a bug on galimatias

[04:55:24.0000] <annevk>
I don't how that's not a URL code point

[04:55:41.0000] <MikeSmith>
you didn't change that at some earlier point?

[04:56:03.0000] <MikeSmith>
for userinfo specifically, I mean?

[04:56:17.0000] <annevk>
I don't remember doing such a thing

[04:56:40.0000] <MikeSmith>
oh even in that case it would have been a different error than "not a URL code point"

[05:12:00.0000] <MikeSmith>
annevk: weird, as far as I can see, the relevant part of the galimatias sources actually already conforms to the spec

[05:12:04.0000] <MikeSmith>
annevk: https://github.com/smola/galimatias/blob/master/src/main/java/io/mola/galimatias/URLUtils.java#L237

[05:12:23.0000] <MikeSmith>
specifically https://github.com/smola/galimatias/blob/master/src/main/java/io/mola/galimatias/URLUtils.java#L262

[05:13:42.0000] <annevk>
MikeSmith: I guess you'd have to check the parser bit then

[05:14:21.0000] <MikeSmith>
yeah I have. But I guess I need to check more

[05:15:18.0000] <annevk>
https://github.com/smola/galimatias/blob/master/src/main/java/io/mola/galimatias/URLParser.java#L511 looks alright...

[05:25:06.0000] <MikeSmith>
annevk: yup

[05:25:41.0000] <MikeSmith>
this is odd. I'm building it in my workspace and it's now failing its own test suite due to this same problem

[05:26:14.0000] <MikeSmith>
I'm wondering if it might be caused by some difference between Java 6 and 7

[05:31:17.0000] <onur>
Hi. I am wondering who is copyright owner of whatwg.org/html and what is the licence of this page?

[05:41:30.0000] <MikeSmith>
onur: there's a statement at the very end of the spec if you scroll down

[05:42:12.0000] <MikeSmith>
onur: and at https://html.spec.whatwg.org/multipage/acknowledgements.html#acknowledgments if you don't want to load the whole thing as a single document

[05:51:33.0000] <onur>
acknowledgements are not enough for me. I need to declare clear licence text and copyright holder of this page. Google's gumbo-parser have this page in its source, I prepared a Debian package for gumbo-parser but unfortunately we can't add gumbo-parser into Debian because this page has no copyright information, licence and owner...

[05:52:00.0000] <MikeSmith>
that statement is not part of the acknowledgements

[05:52:10.0000] <MikeSmith>
it's a copyright statement

[05:52:44.0000] <MikeSmith>
and a license statement

[05:52:52.0000] <MikeSmith>
"You are granted a license to use, reproduce and create derivative works of this document."

[05:53:29.0000] <MikeSmith>
and a little bit above that, "This specification is written by Ian Hickson (Google, ian⊙hc), with contributions from Simon Pieters (Opera, simonp⊙oc) in the img section"

[05:54:27.0000] <Ms2ger>
onur, IceWeasel has parts of the same text, fwiw

[09:04:12.0000] <annevk>
I wonder when someone will come up with a solution to decentralized software packages

[09:04:15.0000] <annevk>
Oh wait, that's the web

[09:09:32.0000] <MikeSmith>
heh

[09:23:26.0000] <annevk>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=19961#c3 could use review (security considerations for encodings)

[10:38:13.0000] <MikeSmith>
annevk: r? https://critic.hoppipolla.co.uk/r/3129 https://github.com/w3c/web-platform-tests/pull/1371

[10:38:29.0000] <MikeSmith>
annevk: see also https://github.com/smola/galimatias/pull/46

[10:38:36.0000] <MikeSmith>
/me heads off to bed

[11:07:32.0000] <annevk>
MikeSmith: seems like there's a small bug there

[11:15:34.0000] <annevk>
MikeSmith: nn


2014-11-10
[17:59:40.0000] <MikeSmith>
annevk: pushed another commit to fix that. thanks for catching it

[23:49:29.0000] <MikeSmith>
hsivonen: http://bugzilla.validator.nu/show_bug.cgi?id=1010 and https://bugzilla.mozilla.org/show_bug.cgi?id=1096172 are htmlparser bugs I raised today that I think don't affect the parser in gecko. Please let me know if there's some other place I should submit patches for bugs like that -- I mean other than through bugzilla.mozilla.org

[00:51:23.0000] <annevk>
MikeSmith: you don't sleep long

[01:02:02.0000] <MikeSmith>
annevk: I get some extra sleep on the train :) going to the office 3 days a week these days

[01:32:52.0000] <annevk>
/me tries to reply to all the emails

[01:52:08.0000] <jgraham>
annevk: Mind doing mine too?

[01:53:06.0000] <annevk>
hah

[01:54:48.0000] <jgraham>
Well about 98% of my email is telling me that a test I wrote is unstable and no one either disabled it or fixed it in the last two weeks

[01:56:19.0000] <annevk>
jgraham: speaking of tests, really amazed with the infrastructure you guys put together for web-platform-tests

[02:05:18.0000] <annevk>
https://twitter.com/larsberg_/status/531641273959333889 :-)

[02:22:40.0000] <Ms2ger>
:)

[03:03:19.0000] <jgraham>
Pretty sure that Ms2ger is actually the one running the whole show

[03:04:05.0000] <annevk>
About time Björn Höhrmann got a replacement

[03:04:12.0000] <Ms2ger>
Ha

[03:04:25.0000] <Ms2ger>
/me starts sending rambling emails about rust packages to www-archive

[03:04:36.0000] <jgraham>
Why do you think they are different entities?

[03:40:56.0000] <Ducki>
hi

[03:41:02.0000] <annevk>
jgraham: so I can't edit the hosts file on Windows

[03:41:13.0000] <annevk>
jgraham: the workaround I found was that 10.0.2.2 points to the Mac's localhost

[03:41:23.0000] <annevk>
jgraham: which is a Virtualbox feature

[03:41:44.0000] <annevk>
jgraham: since I'm not doing cross-origin tests, that appears to be working

[03:43:10.0000] <jgraham>
annevk: Hmm, why can't you edit it?

[03:43:23.0000] <annevk>
jgraham: it claims that file is readonly

[03:43:53.0000] <annevk>
jgraham: changing the readonly-ness of the directory talks about admin stuff and then fails...

[03:45:37.0000] <jgraham>
annevk: The internet claims it should be possible to unset the readonly bit on that file :|

[03:58:17.0000] <Ms2ger>
annevk, while you're in a testing mood, https://critic.hoppipolla.co.uk/r/3138 might be of interest to you :)

[04:06:28.0000] <annevk>
jgraham: that "sign in" problem though...

[04:06:30.0000] <annevk>
Ms2ger: done

[04:07:04.0000] <Ms2ger>
I guess I never have sign-in issues because I have critic in a pinned tab

[04:07:11.0000] <Ms2ger>
annevk, thanks

[04:50:51.0000] <annevk>
Does IDL now do nested dictionaries?

[04:54:05.0000] <Ms2ger>
What are those?

[04:57:32.0000] <annevk>
Ms2ger: e.g. new Notification(..., { behavior: { vibrate: [2, 3, 2, 3] }})

[04:57:52.0000] <Ms2ger>
Oh, I think those always existed

[04:59:14.0000] <annevk>
Pretty sure that is not true

[05:20:31.0000] <hsivonen>
Is the item at the end of http://www.w3.org/Consortium/mission.html really everything the W3C proclaims about privacy and mission?

[05:31:23.0000] <annevk>
hsivonen: well, you know how much scrutiny TR/ stuff gets, this is worse

[05:35:07.0000] <matijs>
annevk: edit the host file on windows by running notepad as administrator (or start cmd as administrator if you prefer command line edit)

[05:35:35.0000] <annevk>
matijs: how does that even work?

[05:41:26.0000] <annevk>
hsivonen: if you have some time, would appreciate a look at https://www.w3.org/Bugs/Public/show_bug.cgi?id=19961#c3

[05:42:17.0000] <jgraham>
annevk: You should be able to right click items on the start menu and do "Run as Administrator"

[05:43:12.0000] <matijs>
annevk: Right click in the start menu is the new sudo

[06:15:56.0000] <zcorpan>
annevk: looks like https://www.w3.org/Bugs/Public/show_bug.cgi?id=19961#c3 was cut off. i guess you used a non-BMP character?

[06:25:44.0000] <annevk>
zcorpan: oh god

[06:27:53.0000] <annevk>
zcorpan: added a comment that doesn't have that problem

[07:20:40.0000] <matijs>
1f4a9 :D

[07:22:08.0000] <caitp>
carlooooos!

[09:29:27.0000] <caitp>
answer in one sentence or less, why you think the web is the greatest country on earth

[09:30:01.0000] <danbri>
caitp, because it's the easiest to make a backup of?

[09:31:24.0000] <jgraham>
"who the hell are you and how did you get into my house". Or at least that's what TimBL said when I asked him. (with apologies to xkcd)

[09:32:36.0000] <caitp>
first step in solving any problem is recognizing there is one

[09:36:18.0000] <caitp>
but jeff daniels is right, the web is not the greatest country in the world, and he doesn't know what the eff you're talking about, with all of the crazy nonsense baked into the platform, if only there was some way to make it less terrible

[09:37:50.0000] <gsnedders>
Greatest or least bad? :)

[09:38:18.0000] <caitp>
like five eyes, the web is pretty much in the pockets of the other terrible countries in the world, and as such is not any less bad

[09:39:14.0000] <caitp>
not that that's the webs fault, per se

[09:40:27.0000] <caitp>
anyways, that's your motivational talk for today, now focus on making the web a better place =)

[09:40:43.0000] <jgraham>
(I have literally no idea what you are talking about btw)

[09:41:52.0000] <caitp>
it's vague by design, you could apply it to any particular problem and motivate yourself to solve it, or to cry about how unfixable it is

[09:42:41.0000] <caitp>
but maybe things don't have to be unfixable

[10:43:49.0000] <annevk>
https://twitter.com/jbouie/status/531835851287056385 o_O

[12:38:26.0000] <rubys>
annevk: should javascript:alert("Hello, world!"); be a parse error?  See http://intertwingly.net/projects/pegurl/liveview.html#javascript:alert%28%22Hello,%20world!%22%29;

[13:21:42.0000] <annevk>
rubys: yeah, at least " " is not a URL code point

[13:23:08.0000] <annevk>
rubys: note that I have been thinking about relaxing some of these rules, but so far I tried to follow the RFCs on conformance, except for a couple of differences with RFC 3987 that seemed wrong in that RFC

[13:24:20.0000] <annevk>
rubys: dfn.js breaking is really painful

[13:24:35.0000] <annevk>
rubys: but I can fix that next week most likely

[13:24:56.0000] <annevk>
rubys: you were back next week as well, right? Can we just do the bikeshed transition then?

[13:27:59.0000] <jarek>
Hi

[13:28:31.0000] <jarek>
Is there any standardisation effort to introduce cursor manager API like CursorManager in Flash?

[13:28:58.0000] <jarek>
this API is important for rich desktop-like application

[13:32:59.0000] <rubys>
annevk: I should be back next week, yes.

[13:34:06.0000] <tantek>
jarek - what are your specific use-cases for cursors? i.e. what scenario in what kind of "desktop-like application"? can you be more specific?

[13:35:50.0000] <rubys>
annevk: in case you didn't notice, I've tried to implement IDNA processing: http://intertwingly.net/projects/pegurl/idna.js  I also found a unicode normalizer https://github.com/walling/unorm

[13:36:55.0000] <tantek>
jarek, for starters, perhaps check out the CSS 'cursor' property and what you need beyond that.

[13:37:23.0000] <jarek>
tantek: simillar API is present in all desktop toolkits

[13:38:48.0000] <jarek>
tantek: for example, I have an app with a canvas widget and a slider widget. When cursor is over canvas I want to show "zoom" cursor, but when user drags the slider I want to change the cursor to "resize" (even if user drags the cursor over canvas)

[13:39:33.0000] <jarek>
tantek: for starters CSS is enough, but for complex desktop-like apps you need abstraction on top of it

[13:40:28.0000] <jarek>
that will allow you to register/unregister cursors and assign weights to them

[13:56:12.0000] <Hixie>
so have you people seen this? https://www.w3.org/wiki/Webizen

[13:56:21.0000] <Hixie>
the w3c wants to come up with a way to even shake non-companies for money

[13:57:06.0000] <annevk>
rubys: oh cool

[13:57:56.0000] <tantek>
Hixie, I think they offer a t-shirt

[13:57:56.0000] <annevk>
rubys: perhaps that makes it easier to work out a syntax production for valid domain names

[13:58:29.0000] <Hixie>
tantek: bloody expensive t-shirt

[13:59:40.0000] <tantek>
Hixie, people pay lots of money for branded clothing & accessories of various sorts

[14:02:41.0000] <jarek>
"Add a line on the CV that shows commitment to the advances of Web standards" :)

[14:03:31.0000] <Hixie>
i can't believe how brazen that is, even for the w3c

[14:03:39.0000] <Hixie>
i love how the goals section has all the w3c's goals first

[14:03:41.0000] <Hixie>
that's so symbolic

[14:03:50.0000] <tantek>
Hixie, IIRC it was in response to *requests* from some number of folks to be able to do that

[14:03:54.0000] <rubys>
annevk: disallowed code points are clearly a parse error.  Would ignored and/or mapped code points be a recoverable parse error?

[14:04:28.0000] <annevk>
Hixie: I saw it, but it didn't make much sense...https://twitter.com/annevk/status/445628553556930560 Jeff himself said it best: "Valuable membership forces the price to be too high for this program."

[14:04:56.0000] <annevk>
rubys: what's the difference?

[14:05:25.0000] <annevk>
rubys: oh wait, you're talking conformance

[14:06:01.0000] <rubys>
annevk: yes

[14:06:01.0000] <Hixie>
tantek: man, i wish people would ask _us_ if they could send us money

[14:06:01.0000] <Hixie>
well, except for the tax implications

[14:06:01.0000] <annevk>
rubys: I still had the javascript URL in my mind, not IDNA

[14:06:01.0000] <tantek>
Hixie, you mean people haven't?

[14:06:03.0000] <tantek>
we've definitely gotten requests to accept donations at microformats.org and indiewebcamp.com

[14:06:06.0000] <Hixie>
oh man i have the best idea for a whatwg membership program

[14:06:07.0000] <annevk>
rubys: yeah, that sounds about right for IDNA

[14:06:27.0000] <tantek>
Hixie, you could print ID cards and hand them out ;)

[14:06:27.0000] <Hixie>
we ask people to write their address on an envelope, and to stamp the envelope

[14:06:34.0000] <Hixie>
then put some money on the envelope

[14:06:36.0000] <Hixie>
then post it

[14:06:40.0000] <Hixie>
er, in, not on

[14:06:53.0000] <tantek>
Hixie, what's an address?

[14:06:56.0000] <tantek>
Is that like a URL?

[14:07:05.0000] <Hixie>
it's a url for the physical web

[14:07:15.0000] <tantek>
what scheme does it use?

[14:07:35.0000] <Hixie>
http://en.wikipedia.org/wiki/Address_(geography)

[14:07:50.0000] <Hixie>
("depends on the country")

[14:07:59.0000] <tantek>
/me goes to create a wikipedia redirect thanks to bad auto-linker in Colloquy

[14:09:30.0000] <rubys>
annevk: possible exception: uppercase is mapped to lowercase.  Would uppercase be conforming or not?

[14:09:32.0000] <annevk>
rubys: I guess we need to allow either ASCII or Unicode as input, perhaps if input is only ASCII, require ToASCII(ToUnicode(ToASCII(input))) === input and when it's Unicode require ToUnicode(ToASCII(input)) === input

[14:09:39.0000] <annevk>
ooh

[14:09:48.0000] <annevk>
rubys: should probably not be

[14:10:00.0000] <annevk>
rubys: because IDNA2008 does not have such a mapping

[14:10:17.0000] <tantek>
Hixie I don't see any address URL schemes defined in that page.

[14:10:23.0000] <annevk>
rubys: so the address would not be portable for "pure" IDNA2008 systems (if those would exist...)

[14:10:44.0000] <tantek>
Hixie, perhaps you meant https://en.wikipedia.org/wiki/Geo_URI ?

[14:10:47.0000] <annevk>
rubys: but if we start taking that into account things get tricky fast

[14:11:16.0000] <tantek>
/me checks URL spec to see if it includes geo:

[14:11:36.0000] <tantek>
apparently not.

[14:12:07.0000] <annevk>
tantek: URL specification defines infrastructure, not all URL types

[14:12:44.0000] <tantek>
annevk - seems to define parts of some URL schemes here: https://url.spec.whatwg.org/#urls

[14:13:04.0000] <annevk>
tantek: infrastructure unfortunately relies on knowledge of some scheme names

[14:13:21.0000] <annevk>
tantek: it's somewhere between XML and HTML at this point

[14:13:24.0000] <tantek>
is there a criteria about what needs to go into that table and not?

[14:14:01.0000] <annevk>
tantek: yeah, it's for legacy parsing rules basically

[14:15:57.0000] <annevk>
anyway, you all have fun, nn

[14:17:28.0000] <tantek>
Hixie perhaps you need to define an "adr:" address scheme for your "address" requests. Note that vCard4 has an "ADR:" property that sorta looks like it might fit your needs, perhaps you can extract and repurpose. http://tools.ietf.org/html/rfc6350#section-6.3.1

[14:18:30.0000] <rubys>
tantek: FYI http://intertwingly.net/projects/pegurl/url.html#url

[14:18:34.0000] <jarek>
Is UndoManager spec dead?

[14:21:07.0000] <Hixie>
tantek: i was being deadpan to your facetious comments, sorry to confuse you :-P

[14:25:46.0000] <tantek>
Hixie - it's ok, I'm easily confused, especially where web standards are concerned. :P

[14:26:01.0000] <tantek>
so I just keep asking questions :)

[14:26:02.0000] <tantek>
rubys did you mean http://intertwingly.net/projects/pegurl/url.html#relative-scheme ?

[14:27:38.0000] <tantek>
Hixie, also, addresses are a pain (almost as much as "person" formats), and people keep unnecessarily reinventing them in much worse versions than vCard.

[14:32:32.0000] <Hixie>
tantek: vCard doesn't support chinese addresses :-(

[14:32:44.0000] <tantek>
Hixie, oh? Thought it did.

[14:32:47.0000] <Hixie>
tantek: we had to extend it in html's autocomplete stuff

[14:32:55.0000] <tantek>
any particular Chinese addresses you had trouble encoding?

[14:33:05.0000] <Hixie>
any with more than two locality/region fields

[14:33:16.0000] <tantek>
Hixie, hence the cardinality of those fields changed in vCard4

[14:33:20.0000] <tantek>
you can have more than one

[14:33:29.0000] <Hixie>
ah, cool, same thing we did in autocomplete basically

[14:33:38.0000] <Hixie>
(though limited to 4)

[14:33:40.0000] <tantek>
yes. fixed years ago.

[14:34:29.0000] <tantek>
for an email-list-only based standard, vCard4 is not bad, and definitely a big improvement over vCard3 in many ways.

[14:37:11.0000] <Hixie>
well except that it's versioned and specced in a snapshot format :-P

[15:17:05.0000] <rniwa>
wycats: yt?

[15:17:33.0000] <jarek>
rniwa: what is the status of UndoManager spec?

[15:18:01.0000] <rniwa>
jarek: I don’t know. it’s probably abondoned?

[15:18:10.0000] <rniwa>
jarek: I stopped working on it since I left Google

[15:19:00.0000] <jarek>
rniwa: is there any alternative API proposed?

[15:19:18.0000] <rniwa>
jarek: don’t think

[15:19:20.0000] <rniwa>
jarek: so*

[15:19:35.0000] <rniwa>
jarek: although Microsoft implemented some enhancements to undo via execCommand

[15:20:11.0000] <rniwa>
jarek: see http://blogs.msdn.com/b/ie/archive/2013/10/24/enhanced-rich-editing-experiences-in-ie11.aspx

[15:20:11.0000] <jarek>
Mozilla did implement the spec: https://bugzilla.mozilla.org/show_bug.cgi?id=617532

[15:20:18.0000] <rniwa>
jarek: wow!

[15:20:40.0000] <jarek>
not sure if it's just a stub though...

[15:21:01.0000] <rniwa>
I apploud the effort if they really did

[15:21:06.0000] <rniwa>
the spec was a mess at the end...

[15:21:14.0000] <rniwa>
it got way too complicated


2014-11-11
[18:32:44.0000] <MikeSmith>
abinader:

[18:44:07.0000] <MikeSmith>
abinader: ignore thatー fat-fingered

[18:44:55.0000] <abinader>
MikeSmith: sure :)

[18:45:13.0000] <MikeSmith>
cheers

[18:48:12.0000] <MikeSmith>
rubys: http://intertwingly.net/projects/pegurl/idna.js is bold :) I hope it works out. because it would be nice to have a self-contained conforming implementation with no dependencies

[00:09:59.0000] <annevk_>
MikeSmith: still depends on punycode

[00:18:18.0000] <MikeSmith>
annevk: oh. Sam's idna.js doesn't implement it yet?

[00:19:12.0000] <annevk>
MikeSmith: I think he uses a different library or file for that

[00:20:02.0000] <MikeSmith>
ah ok

[00:20:12.0000] <MikeSmith>
annevk: btw I'm behind on reading up about suborigins. From what I've gleaned through mailing-list messages, it seems like a great idea but I've yet to read an actual writeup/proposal for it yet. Is there one somewhere?

[00:20:20.0000] <annevk>
MikeSmith: also afaict this is only ToACII, although I'm missing some bits

[00:20:32.0000] <MikeSmith>
ok

[00:20:35.0000] <annevk>
MikeSmith: http://www.chromium.org/developers/design-documents/per-page-suborigins

[00:20:43.0000] <MikeSmith>
super

[00:20:44.0000] <MikeSmith>
thanks

[00:31:10.0000] <MikeSmith>
annevk: my next question is whether somebody else has done a higher-level writeup for webdevs

[00:31:17.0000] <MikeSmith>
maybe JakeA knows

[00:31:32.0000] <MikeSmith>
http://blog.joelweinberger.us/2013/08/suborigins-for-privilege-separation-in.html is pretty good I guess

[00:31:40.0000] <annevk>
MikeSmith: I was going to point you to that

[00:31:47.0000] <annevk>
MikeSmith: he's the guy behind the proposal

[00:31:53.0000] <annevk>
MikeSmith: I don't think you'll find much else

[00:31:54.0000] <MikeSmith>
yeah

[00:31:56.0000] <MikeSmith>
ok

[00:32:03.0000] <MikeSmith>
I'll go with that for now

[00:32:13.0000] <JakeA>
I'm not aware of anything else

[00:32:18.0000] <MikeSmith>
Joel's working on the SRI spec too, right?

[00:32:25.0000] <MikeSmith>
JakeA: k

[00:34:18.0000] <MikeSmith>
/me stumbles across Devdatta Akhawe's PhD thesis http://www.eecs.berkeley.edu/Pubs/TechRpts/2014/EECS-2014-56.pdf "Towards High Assurance HTML5 Applications"

[00:51:57.0000] <annevk>
MikeSmith: he is

[00:53:56.0000] <MikeSmith>
annevk: seems he's in Japan this week. Will ping Domenic and try to meet up with them for lunch

[00:54:36.0000] <annevk>
MikeSmith: you mean Dominic?

[00:54:46.0000] <MikeSmith>
yeah

[00:55:00.0000] <MikeSmith>
the "i" Dominic

[00:55:07.0000] <MikeSmith>
the Cooney

[00:55:38.0000] <annevk>
heh

[01:03:32.0000] <MikeSmith>
the word "compartmentalization" has far too many letters in it to be useful on twitter

[01:04:14.0000] <MikeSmith>
time for c18n

[01:08:41.0000] <zcorpan>
didn't we come up with a compression scheme for twitter earlier?

[01:09:58.0000] <annevk>
zcorpan: did you review the security thing about encodings?

[01:10:26.0000] <annevk>
zcorpan: learn Chinese and you have a great compression scheme

[01:10:46.0000] <zcorpan>
annevk: i read it yeah. lgtm but i don't have a good grasp of all the issues

[01:10:55.0000] <annevk>
zcorpan: I was gonna add you also have a large audience, but then I remembered that firewall they put in place

[01:11:27.0000] <zcorpan>
oh yeah twitter is blocked in china isn't it

[01:11:51.0000] <annevk>
yeah, you would only get notifications about it through iOS

[01:12:01.0000] <annevk>
it was amusing

[01:12:23.0000] <annevk>
So is anyone going to review my iso-2022-jp and gbk/gb18030 tests?

[01:12:27.0000] <annevk>
They're not that hard

[01:12:57.0000] <annevk>
And if they land I might be compelled to add some more tests (for all the single-byte stuff, I already wrote those a few times...)

[01:13:20.0000] <MikeSmith>
划分 is even half as many characters as c18n

[01:13:46.0000] <MikeSmith>
annevk: I will finally review them tonight, I promise.

[01:14:00.0000] <MikeSmith>
unless zcorpan wants to

[01:14:12.0000] <zcorpan>
i can do it if annevk reviews https://critic.hoppipolla.co.uk/r/3103 :-)

[01:14:19.0000] <MikeSmith>
haha

[01:15:12.0000] <MikeSmith>
if we could scale that review strategy, then we'd have something

[01:15:45.0000] <zcorpan>
heycam|away: ping https://www.w3.org/Bugs/Public/show_bug.cgi?id=22808

[01:20:22.0000] <annevk>
zcorpan: that looks rather ugly

[01:20:42.0000] <zcorpan>
annevk: yeah :-|

[01:21:21.0000] <annevk>
zcorpan: can't you move the test_obj.done()?

[01:21:51.0000] <annevk>
hmm

[01:22:51.0000] <zcorpan>
annevk: i should probably de-uglify everything about that test at some point

[01:23:36.0000] <zcorpan>
right now it works for exposing bugs and doubles as a stress test

[01:37:28.0000] <annevk>
Where would I put global object association tests?

[01:38:36.0000] <zcorpan>
where is it defined?

[01:42:07.0000] <annevk>
zcorpan: well, it isn't

[01:42:20.0000] <annevk>
My plan is that IDL gives spec algorithms some hooks

[01:42:32.0000] <annevk>
such as "context object", "current Realm", "base URL", whatever else

[01:43:12.0000] <annevk>
so I guess a mixture of IDL and any spec that defines an API

[01:43:34.0000] <annevk>
http://web.mit.edu/bzbarsky/www/testcases/global-object-association/createImageData.html

[01:43:41.0000] <annevk>
has an excellent example

[01:55:41.0000] <annevk>
jgraham: why is there no assert_instanceof?

[01:56:26.0000] <jgraham>
annevk: No one asked?

[01:57:22.0000] <annevk>
jgraham: see the file from bz above, it would make sense for that, no?

[02:00:12.0000] <gsnedders>
Because instanceof is probably too indirect for testing that, no?

[02:00:22.0000] <gsnedders>
Given it walks the prototype chain?

[02:02:54.0000] <annevk>
gsnedders: you have an alternative?

[02:03:36.0000] <gsnedders>
oh, wait, instanceof does [[HasInstance]]

[02:03:38.0000] <gsnedders>
um, ignore me

[02:05:13.0000] <zcorpan>
annevk: WebIDL/ if you want the tests in a central place i guess

[02:06:34.0000] <annevk>
jgraham: can I patch testharness.js from within web-platform-tests?

[02:07:13.0000] <Ms2ger>
It's in resources/

[02:07:47.0000] <Ms2ger>
And I put tests like that with the spec that defines the API

[02:08:40.0000] <gsnedders>
should idlharness.js not be able to test that?

[02:08:56.0000] <Ms2ger>
That would be even better

[02:09:10.0000] <annevk>
gsnedders: how?

[02:11:19.0000] <annevk>
I'm not super interested in splitting the tests over a dozen directories

[02:11:49.0000] <gsnedders>
doesn't the IDL give enough to know what the constructor function is for a given object?

[02:12:14.0000] <gsnedders>
like idlharness.js knows how to create a given object and knows the Function object that can be used to create it, if one exists, no?

[02:12:41.0000] <annevk>
gsnedders: nope

[02:13:35.0000] <annevk>
well, maybe it can be an idl thing eventually...

[02:14:09.0000] <zcorpan>
annevk: i guess in general what is needed is "is a Foo" check, not "is a Foo of global X"

[02:14:28.0000] <JakeA>
annevk: want to find time for a call this week or next on the API generality/scope stuff. Any evenings you can't do?

[02:15:05.0000] <gsnedders>
zcorpan: yeah, that's what I'm thinking of

[02:16:12.0000] <annevk>
zcorpan: instanceof can't check that

[02:16:43.0000] <annevk>
JakeA: Tuesday-Thursday evening this week, Tuesday next week

[02:17:06.0000] <zcorpan>
annevk: i mean since instanceof does the latter, that's probably why it's not in testharness (and testharness explicitly avoids using instanceof for this reason)

[02:17:09.0000] <gsnedders>
We should definitely be testing that [[HasInstance]] and what it's renamed to in ES6 works correctly on them

[02:17:18.0000] <JakeA>
annevk: Just realised I asked the question really stupidly. Those are evenings you can't do, or can do?

[02:17:29.0000] <annevk>
cannot

[02:17:42.0000] <JakeA>
ta

[02:22:09.0000] <jgraham>
Oh yeah zcorpan has a good point

[02:22:30.0000] <jgraham>
It's because instanceof is broken in edge cases

[02:22:48.0000] <annevk>
So what pattern should I be using here?

[02:23:35.0000] <gsnedders>
jgraham: even in ES6?

[02:24:00.0000] <annevk>
cross-Realm it is

[02:24:25.0000] <jgraham>
gsnedders: I don't know, but if ES6 is making non-backward-compatible changes here then I certainly don't want the test harness to depend on the new semantics

[02:25:02.0000] <gsnedders>
jgraham: I could just be forgetting what edge-cases you're meaning

[02:25:28.0000] <jgraham>
annevk: bz's pattern with assert_true. Or assert_instanceof that takes an explicit global object

[02:32:14.0000] <annevk>
jgraham: is using a synchronous test() within onload fine?

[02:32:49.0000] <jgraham>
annevk: "maybe"

[02:33:05.0000] <Ms2ger>
Who to follow...

[02:33:07.0000] <Ms2ger>
* W3C Widget Specs

[02:33:14.0000] <Ms2ger>
I don't think so, Twitter

[02:33:24.0000] <annevk>
jgraham: it works

[02:33:46.0000] <jgraham>
annevk: The harness adds a load event listener and if there are no tests remaining when that fires it stops accepting new tests

[02:34:14.0000] <jgraham>
So you might be depending on the axact order of event listeners

[02:34:21.0000] <jgraham>
*exact

[02:34:30.0000] <jgraham>
Or not, depending on what other tests you have

[02:36:32.0000] <annevk>
jgraham: currently I just have a single test() within onload()

[02:36:52.0000] <jgraham>
Then I think you are depending on the order of the event handlers

[02:46:59.0000] <annevk>
jgraham: I guess I could make them single-page tests and just have one file per object-creating thingy

[02:47:00.0000] <annevk>
hmm

[02:52:36.0000] <annevk>
jgraham: so it's not a common case you want to wait for onload and run a bunch of tests?

[02:53:55.0000] <annevk>
jgraham: should I create a whole bunch of async tests and then wait for onload and then do the t.step business for each of them?

[02:55:08.0000] <Ms2ger>
"Let result be the result of calling the [[Call]] internal method of method"

[02:55:10.0000] <Ms2ger>
Oh, ES

[02:57:19.0000] <jgraham>
annevk: I don't know what you're trying to achieve, but in general the harness has to have *some* way of telling when there are no more tests and there isn't anything later than onload to use

[02:57:43.0000] <jgraham>
If you need it you can use explicit_done: true

[02:58:03.0000] <annevk>
jgraham: all I want is onload = function() { test(); test(); test() }

[02:58:39.0000] <annevk>
jgraham: e.g. I want to run a bunch of tests synchronously once the subresources have loaded

[03:00:22.0000] <jgraham>
Well using setup({explicit_done:true}) at the start and done() at the end certainly works there

[03:03:13.0000] <annevk>
jgraham: I could add that

[03:04:55.0000] <Ms2ger>
annevk, xhr.open('get', url1); xhr.open('get', url2); xhr.send(); will get url2, right?

[03:05:29.0000] <annevk>
Ms2ger: yup

[03:05:34.0000] <Ms2ger>
Ta

[03:06:35.0000] <SimonSapin>
annevk: I updated http://simonsapin.github.io/data-urls/ to not pretend to be a spec, since it wasn’t really

[03:09:53.0000] <annevk>
SimonSapin: that's not very useful :-(

[03:11:08.0000] <SimonSapin>
you mean it would me more useful if I (or someone) had done more work that hasn’t been done yet

[03:12:01.0000] <SimonSapin>
I might get to it at some point, it’s just not a priority right now

[03:14:02.0000] <SimonSapin>
but the pretend-spec full of issues that I had there before was not very useful either

[03:29:26.0000] <JakeA>
wanderview: What's the status of Firefox devtools and ServiceWorker? Are they friendlier? Would love to get more people playing with it in Firefox Nightly

[04:12:01.0000] <annevk>
hmm

[04:12:28.0000] <annevk>
MikeSmith: I just reviewed your test, but now I'm wondering whether the input format should use surrogate code points or not

[04:17:05.0000] <annevk>
yeah seems like that's baked in and would be annoying to change

[04:25:16.0000] <zcorpan>
annevk: should i read https://github.com/whatwg/encoding/commit/19b0ebf0e48c3a607ab7623b5b272642dd59d6e7 for reviewing your test?

[04:25:51.0000] <annevk>
zcorpan: you can read https://encoding.spec.whatwg.org/#iso-2022-jp

[04:26:14.0000] <annevk>
zcorpan: that would be somewhat required, yes

[04:28:27.0000] <zcorpan>
annevk: ok. so i don't need to understand the old spec

[04:34:57.0000] <annevk>
zcorpan: nope, it's obsolete

[04:44:38.0000] <annevk>
jgraham: if I write a script that generates a bunch of static test files

[04:44:54.0000] <annevk>
jgraham: do you want only the script committed or what it generates?

[04:52:12.0000] <jgraham>
Both

[04:55:55.0000] <annevk>
jgraham: and Python, correct?

[04:57:02.0000] <jgraham>
Yeah

[04:57:02.0000] <Ms2ger>
Preferably

[04:57:11.0000] <Ms2ger>
annevk, replied to https://critic.hoppipolla.co.uk/r/3127

[04:57:51.0000] <annevk>
Ms2ger: so are you going to add it?

[04:57:59.0000] <Ms2ger>
I can

[04:58:24.0000] <annevk>
Ms2ger: e.g. if fetch/interfaces.html had BodyInit

[04:58:29.0000] <annevk>
Ms2ger: would that work?

[04:59:00.0000] <Ms2ger>
No, you need everything relevant in the one file

[04:59:12.0000] <Ms2ger>
Well, you don't need to, but that's easiest

[05:00:06.0000] <annevk>
Ms2ger: I guess add BodyInit with an explanation of its source

[05:00:45.0000] <Ms2ger>
And Blob and BufferSource and URLSearchParams, I guess

[05:01:17.0000] <annevk>
Ms2ger: hmm, are you going to add Document?

[05:01:30.0000] <Ms2ger>
Hrm

[05:01:31.0000] <annevk>
Ms2ger: and Node? and everything else? :-)

[05:01:39.0000] <annevk>
madness

[05:01:57.0000] <Ms2ger>
How about I leave it alone :)

[05:10:35.0000] <MikeSmith>
annevk: about that test, I wrote it with surrogates because I wasn't actually sure what format the test data expects for supplementary characters

[05:11:17.0000] <MikeSmith>
annevk: \ud83d\udca9 works as-is in Java, JavaScript, and (I think) in Python too

[05:11:44.0000] <MikeSmith>
annevk: is there some portable way to express it without using surrogates?

[05:12:02.0000] <annevk>
nah

[05:12:15.0000] <jgraham>
Whether that works in python might depend on what kind of build you have, I'm not sure

[05:12:27.0000] <MikeSmith>
ok

[05:13:24.0000] <MikeSmith>
I was assuming the test file data is sorta meant to be language-neutral

[05:20:45.0000] <annevk>
MikeSmith: which is why relying on surrogates is a bit weird, but it's fine I think

[05:21:02.0000] <MikeSmith>
annevk: OK

[05:21:36.0000] <annevk>
jgraham: actually, I'll prolly make it a dynamically generated resource so I can set some headers

[05:22:52.0000] <MikeSmith>
annevk: but my point was that I don't know a portable way to express it without surrogates. I mean if it were python-only, I think I could just do \U0001F4A9 (capital U). But that's not going to mean anything outside python.

[05:23:39.0000] <MikeSmith>
annevk: btw we really should have more URL tests with supplementary characters. The test file really doesn't have any

[05:23:41.0000] <annevk>
MikeSmith: well, e.g. \# is custom to that input format as well

[05:23:50.0000] <MikeSmith>
ok

[05:23:56.0000] <annevk>
MikeSmith: we could easily come up with something that languages would then have to convert before using

[05:24:02.0000] <MikeSmith>
yeah

[05:24:28.0000] <annevk>
feel free to add more tests

[05:24:29.0000] <MikeSmith>
we should just decide on something and use it consistently for any new tests

[05:24:31.0000] <MikeSmith>
heh

[05:24:32.0000] <annevk>
seems like a good idea

[05:24:50.0000] <annevk>
oh yeah, I think we decided that this is fine

[05:25:24.0000] <annevk>
after creating more Encoding tests I'll prolly create more URL tests

[05:27:06.0000] <MikeSmith>
annevk: yeah I wasn't volunteering necessarily to write more myself just now but was thinking about it in part because I just today got private mail from a guy saying:

[05:27:14.0000] <MikeSmith>
"One thing worth mentioning is there are some weird special cases in the URL standard for allowed content in query strings, and these differ from the rules used for the rest of the URL. RFC 3987 also special cases query strings, but it looks like it works a bit differently to the URL standard."

[05:27:41.0000] <MikeSmith>
"I suspect these cases are particularly important for non-English search queries passed to search engines. Whichever standard is used, it's probably worth some additional test coverage for query strings."

[05:28:06.0000] <annevk>
MikeSmith: yeah, the tests I'm creating for Encoding actually cover this

[05:28:16.0000] <MikeSmith>
rubys: ↑ FYI

[05:28:20.0000] <MikeSmith>
annevk: OK, good

[05:28:20.0000] <annevk>
MikeSmith: I'm using the URL parser to test the Encoding Standard

[05:28:28.0000] <MikeSmith>
hah cool

[05:28:50.0000] <annevk>
it's either that or <form> and the latter would require server-side setup

[05:28:59.0000] <MikeSmith>
ah yeah

[05:29:01.0000] <annevk>
though I guess I should cover that too at some point

[05:29:25.0000] <MikeSmith>
we could do something with wptserve I think, if/when it comes to that

[05:39:23.0000] <MikeSmith>
annevk: about https://github.com/w3c/web-platform-tests/pull/1369 I don't understand how you actually made a PR from two separate branches. I didn't think that was actually possible

[05:39:29.0000] <MikeSmith>
jgraham: ↑

[05:39:53.0000] <MikeSmith>
annevk: anyway I'm finally reviewing those right now

[05:40:57.0000] <rubys>
MikeSmith: thanks.  Annevk: is there a javascript implementation of Encoding?

[05:41:56.0000] <Ms2ger>
jsbell wrote something

[05:42:23.0000] <rubys>
annevk: re: "I'm using the URL parser to test the Encoding Standard" ... which URL parser?

[05:42:50.0000] <jgraham>
MikeSmith: I don't understand what you don't understand :)

[05:43:22.0000] <zcorpan>
rubys: https://github.com/search?q=user%3Amathiasbynens+encoding+standard

[05:44:33.0000] <zcorpan>
mathiasbynens: iso-2022-jp is missing :-)

[05:45:03.0000] <rubys>
zcorpan: thanks!

[05:45:22.0000] <rubys>
Ms2ger: what I found was http://src.chromium.org/viewvc/blink?view=revision&revision=173754 (which is c++)

[05:46:00.0000] <mathiasbynens>
zcorpan: i only have packages for the legacy single-byte encodings

[05:46:36.0000] <MikeSmith>
jgraham: I thought you could only create a PR from a single branch

[05:46:54.0000] <MikeSmith>
jgraham: I don't know what buttons to push to do a PR from multiple branches

[05:49:24.0000] <zcorpan>
mathiasbynens: ah ok

[05:49:38.0000] <zcorpan>
mathiasbynens: and utf-8

[05:49:55.0000] <mathiasbynens>
zcorpan: https://mths.be/utf8js

[05:50:00.0000] <mathiasbynens>
yeah and WTF-8

[05:51:03.0000] <jgraham>
MikeSmith: I don't know what you mean by "from". If you mean that you have master - A - B and you want a PR containing only B, you can edit the branch that the PR is against when you are in the create PR screen (I don't remember what the buttons look like). But in that case the merge button will try to merge into A rather than master which often isn't what you want

[05:52:20.0000] <zcorpan>
mathiasbynens: the readme doesn't say if it implements the encoding standard utf-8 or something else

[05:54:06.0000] <mathiasbynens>
yeah there’s an open issue on it; it doesn’t atm (allows lone surrogates)

[05:55:08.0000] <zcorpan>
mathiasbynens: looks like it throws on invalid input rather than emitting u+fffd (different contexts need different error handling iirc)

[05:56:33.0000] <zcorpan>
mathiasbynens: i see there's a bug about that also

[05:58:44.0000] <MikeSmith>
jgraham: I mean specifically look at https://github.com/w3c/web-platform-tests/commit/25c529dc883227d6417ab25cd167c135cba72541 So I guess what I mean is more, a PR with commits that are in multiple branches. i.e., in this case that's one commit that's both in PR #1369 (gbk branch) and also in PR #1367 (iso-2022-jp branch). I suppose that's just due to annevk having merged it into the gbk branch

[05:59:06.0000] <MikeSmith>
anyway no big deal. me being confused by git and github is nothing new

[06:00:42.0000] <wanderview>
JakeA: I'm not sure what the devtools status is... but a lot of our work is not in nightly yet since we're developing on a project branch

[06:00:55.0000] <jgraham>
MikeSmith: Well sure, that just falls out of the data model

[06:01:08.0000] <jgraham>
If you have a tree like:

[06:01:27.0000] <jgraham>
master - B - C

[06:01:41.0000] <JakeA>
wanderview: no worries, thanks for the update

[06:01:42.0000] <jgraham>
         \ D - E

[06:02:11.0000] <jgraham>
And you create reviews of branches pointing to C and E they will both contain B

[06:02:28.0000] <wanderview>
JakeA: we want more people to use it as well, of course... so we're working to get it into nightly

[06:02:59.0000] <JakeA>
wanderview: lemmie know when it happens & I'll make sure demos and docs are updated to work in Firefox

[06:03:02.0000] <wanderview>
JakeA: it is possible to run what we have in our project branch, though:  http://ftp.mozilla.org/pub/mozilla.org/b2g/tinderbox-builds/maple-macosx64_gecko-debug/latest/

[06:03:32.0000] <wanderview>
that install will auto-update when the project branch is updated too (I believe)

[06:03:37.0000] <JakeA>
wanderview: Ohh cool, can I link to that from isserviceworkerready?

[06:04:26.0000] <wanderview>
JakeA: I think so... its a public link... note, thats mac only... I can get the other platform links in just a sec

[06:05:05.0000] <wanderview>
http://ftp.mozilla.org/pub/mozilla.org/b2g/tinderbox-builds/maple-win32_gecko-debug/latest/

[06:05:30.0000] <wanderview>
http://ftp.mozilla.org/pub/mozilla.org/b2g/tinderbox-builds/maple-linux64_gecko-debug/latest/

[06:05:47.0000] <wanderview>
JakeA: ^^^ also note those are debug builds... so not as fast as optimized builds

[06:05:52.0000] <wanderview>
thanks!

[06:06:59.0000] <JakeA>
wanderview: Cheers! Is there any way to discover errors thrown within the SW? Even via a lower-level output that can be grep'd?

[06:07:15.0000] <JakeA>
(don't worry if not, just want to get as much info out as possible)

[06:08:04.0000] <wanderview>
JakeA: I'm pretty sure we report errors in the ServiceWorker script itself now... and I think console.log() is working in workers now, although I could be wrong about that

[06:08:28.0000] <wanderview>
let me ask

[06:08:43.0000] <JakeA>
ta!

[06:10:29.0000] <wanderview>
JakeA: hmm... the console in SW bug is not fixed yet... code in review... not sure if we have it on our project branch

[06:10:35.0000] <wanderview>
https://bugzilla.mozilla.org/show_bug.cgi?id=1058644

[06:10:37.0000] <wanderview>
:-\

[06:11:05.0000] <JakeA>
Sounds like it's close though, which is great

[06:13:34.0000] <MikeSmith>
annevk: so if you have a minute, I'm trying something basic about the spec for the iso-2022 decoder, which is: Where does it require implementations to return �$ for 0x1b, 0x24 rather than just returning � only?

[06:14:00.0000] <annevk>
MikeSmith: looking

[06:14:33.0000] <annevk>
So https://encoding.spec.whatwg.org/#iso-2022-jp-decoder 0x1B puts it into escape start

[06:14:38.0000] <MikeSmith>
ah, it continues after the �, it doesn't just abort

[06:14:54.0000] <annevk>
0x24 puts it into escape

[06:15:25.0000] <annevk>
Step 8 of escape puts 0x24 back

[06:15:32.0000] <annevk>
Step 9 returns error

[06:15:53.0000] <annevk>
(and sets state back to ASCII)

[06:16:05.0000] <annevk>
ASCII then outputs 0x24 as code point

[06:16:58.0000] <MikeSmith>
annevk: yeah I had (mis)thought it aborted after returning error

[06:17:10.0000] <annevk>
rubys: the one in the browser

[06:17:19.0000] <MikeSmith>
annevk: but I realize now the spec doesn't say abort, it says continue

[06:17:44.0000] <annevk>
rubys: https://github.com/inexorabletash/text-encoding is an actual polyfill

[06:18:30.0000] <annevk>
MikeSmith: oh yeah, the handler stops being invoked once finished is return

[06:18:33.0000] <annevk>
ed

[06:19:15.0000] <annevk>
MikeSmith: as for the PR, I think I messed up

[06:19:20.0000] <annevk>
MikeSmith: I don't really know how to git

[06:21:02.0000] <MikeSmith>
annevk: I don't know how either. But anyway you didn't mess up anything. It doesn't create any merge conflicts or anything

[06:21:29.0000] <annevk>
MikeSmith: well I now I have two PRs, one being a superset

[06:21:52.0000] <annevk>
zcorpan_: I think you meant "does not suffice"

[06:46:47.0000] <wanderview>
JakeA: console for SW patch just pushed to the project branch... so in theory should be supported in that download later today or tomorrow

[06:48:44.0000] <JakeA>
ohh, that's brilliant

[06:51:32.0000] <pikaren>
which browser vendor honor whatwg html5 the most?

[06:53:03.0000] <jgraham>
Browser vendors have honour?

[06:54:09.0000] <jgraham>
pikaren: By which I mean, that doesn't make much sense as a question

[06:54:13.0000] <JonathanNeal>
Domenic: https://github.com/promises-aplus/promises-tests/blob/master/lib/tests/2.2.1.js#L30 why are we checking non-functions for fulfilled on a rejected promise?

[06:55:23.0000] <JonathanNeal>
I’m trying to understand this part of the chaining process. It’s broken in my current Promise polyfill.

[07:16:30.0000] <rubys>
MikeSmith: here is a self-contained (no dependencies) punycode library: https://github.com/bestiejs/punycode.js/

[07:16:53.0000] <rubys>
annevk: thanks for the pointer to https://github.com/inexorabletash/text-encoding

[07:46:19.0000] <JonathanNeal>
Ah, figured out chaining. Woohoo!!

[07:46:36.0000] <caitp>
right on

[07:47:02.0000] <JonathanNeal>
Wow, everything passes. Woohoo!

[07:47:22.0000] <caitp>
isn't that just the best feeling?

[07:48:46.0000] <JonathanNeal>
Yes, like getting one of those tall pieces in Tetris.

[08:06:37.0000] <annevk>
rubys: it's not really clear to me how you're implementing http://www.unicode.org/reports/tr46/#ToASCII in idna.js

[08:07:53.0000] <annevk>
rubys: or www.unicode.org/reports/tr46/#Processing for that matter

[08:08:06.0000] <annevk>
ugh, address bar copy and paste is really terrible these days

[08:13:04.0000] <rubys>
annevk: take a look at https://github.com/rubys/url/blob/peg.js/url.pegjs#L603

[08:13:46.0000] <annevk>
rubys: yeah that looks wrong

[08:13:59.0000] <rubys>
annevk: explain?

[08:14:53.0000] <annevk>
rubys: you're running something called processing_map whereas the spec calls for running domain to ASCII

[08:15:34.0000] <rubys>
domain to ASCII has a number of steps.  I believe I implement those steps, but I unwrap them a bit so that I can do better error reporting.

[08:15:52.0000] <annevk>
rubys: should domain to ASCII be part of the IDNA module?

[08:16:15.0000] <rubys>
example: I now report conformance errors if IDNA ignore characters are encountered

[08:17:38.0000] <rubys>
I could refactor that logic into the IDNA module, sure.  I would like to retain the ability to detect conformance errors.

[08:18:00.0000] <annevk>
rubys: I guess you removed the optional bits that the URL Standard not ended up using

[08:18:01.0000] <rubys>
Meanwhile, if you could identify where this logic is wrong, I will try to fix.

[08:18:45.0000] <rubys>
My goal at the moment is to implement the URL standard.  In the process, I'm iteratively implementing more and more of the underlying dependencies.

[08:19:02.0000] <rubys>
well, implementing is too strong a word… implementing or incorporating implementations.

[08:19:51.0000] <annevk>
What is your plan for the conditional domain to Unicode step?

[08:20:06.0000] <mathiasbynens>
rubys: https://github.com/mathiasbynens/todo/issues/9

[08:20:40.0000] <JakeA>
annevk: If I open a tab, enter a url & go, is that request "no-cors"?

[08:21:23.0000] <annevk>
rubys: http://intertwingly.net/projects/pegurl/idna.js what I cannot find here e.g. is "xn--" while http://www.unicode.org/reports/tr46/#Processing definitely calls for that

[08:21:45.0000] <annevk>
JakeA: yeah

[08:22:19.0000] <rubys>
annevk: can you identify a test that requires that step?

[08:23:12.0000] <JakeA>
annevk: I think we've regressed on being able to provide another site's HTML in response to a navigation

[08:23:18.0000] <JakeA>
dunno if our implementation has

[08:23:22.0000] <annevk>
rubys1: http://xn--†/ or some such?

[08:23:57.0000] <annevk>
JakeA: you'll have to elaborate a bit

[08:25:39.0000] <JakeA>
annevk: I satisfy a request to evil.com with a response from example.com. I now have the content of example.com executed in the origin of evil.com

[08:26:16.0000] <JakeA>
annevk: if that includes something like a <script src> I'll pick that up again, and inject scripts that can inspect the content

[08:26:20.0000] <annevk>
JakeA: you'll have to elaborate more, e.g. what document is currently loaded, what SW is in effect

[08:26:47.0000] <JakeA>
annevk: I own evil.com, user visits, I install sw at /sw.js

[08:27:49.0000] <JakeA>
annevk: User visits evil.com again (or I force a refresh), I catch the request in the sw, and respondWith(fetch('//example.com', {mode: 'no-cors'}))

[08:28:49.0000] <annevk>
JakeA: ah yeah, I was expecting the Navigate algorithm to catch that

[08:29:09.0000] <annevk>
JakeA: perhaps navigate is always same-origin?

[08:29:25.0000] <annevk>
JakeA: navigation is a bit of a special case...

[08:30:42.0000] <JakeA>
annevk: that would fix it, although I should still be able to satisfy navigates with new Response, CORS requests are fine too

[08:31:00.0000] <JakeA>
annevk: Maybe navigates are CORS?

[08:31:25.0000] <JakeA>
no that doesn't work

[08:31:45.0000] <annevk>
perhaps we need mode=navigate

[08:31:52.0000] <annevk>
hmm

[08:32:08.0000] <annevk>
CORS doesn't work

[08:32:26.0000] <annevk>
Somewhere we need additional logic

[08:32:46.0000] <annevk>
"Just" have to decide where and what it should be

[08:32:51.0000] <JakeA>
Yeah, I was about to file that fetch bug about the contexts, and I was thinking "what we actually need is mode=navigate, didn't we have that to stop…" etc etc

[08:35:32.0000] <JakeA>
Is clicking a link a navigation?

[08:35:48.0000] <JakeA>
Even if it responds content-disposition?

[08:36:55.0000] <annevk>
JakeA: clicking a link invokes navigate

[08:37:28.0000] <JakeA>
annevk: mode=navigation would work then

[08:37:48.0000] <JakeA>
trying to figure out if we need it for sharedworker too

[08:38:06.0000] <JakeA>
I think we do

[08:38:11.0000] <JakeA>
not as much is exposed

[08:38:41.0000] <annevk>
JakeA: content-disposition however doesn't create a new Window

[08:38:45.0000] <annevk>
JakeA: it's treated as a download

[08:39:05.0000] <annevk>
JakeA: so basically when you click a link, navigate is invoked, which waits for the response to decide what to do

[08:39:18.0000] <annevk>
JakeA: sharedworker is always same-origin iirc

[08:41:52.0000] <JakeA>
annevk: if we know something is a navigation, we may not need that context group

[08:50:05.0000] <annevk>
JakeA: sure, but sharedworker isn't really a navigation

[08:50:11.0000] <annevk>
JakeA: it doesn't invoke navigate, for instance

[08:50:33.0000] <annevk>
JakeA: it does get its own SW and CSP

[08:50:54.0000] <annevk>
JakeA: and it does need mode=same-origin to do the right thing

[08:51:54.0000] <annevk>
JakeA: SW is similar, it gets its own CSP, it's the one thing that goes without SW, and it also needs mode=same-origin

[08:52:22.0000] <annevk>
JakeA: so we need some amount of orthogonality, and some amount of grouping

[08:53:07.0000] <annevk>
JakeA: see also this email that went unanswered: http://lists.w3.org/Archives/Public/public-webappsec/2014Oct/0120.html

[08:53:23.0000] <annevk>
Hixie: ^ that email was also addressed towards you

[08:59:31.0000] <JakeA>
annevk: I guess we could still have a group for navigates + sharedworker

[09:00:41.0000] <annevk>
JakeA: I think same-origin for navigation is not so bad

[09:00:43.0000] <JakeA>
annevk: Being able to expose mode=navigate to JS would be great. It's important when it comes to the type of fallback to display

[09:00:59.0000] <rubys>
annevk: https://github.com/rubys/url/blob/peg.js/url.pegjs#L646 is where xn-- is added

[09:01:25.0000] <JakeA>
annevk: does `new Response("Hello!")` count as same-origin?

[09:02:35.0000] <annevk>
JakeA: I think a synthetic response would also be same-origin, yes

[09:02:41.0000] <annevk>
always, even

[09:03:23.0000] <JakeA>
annevk: The alternative is https://fetch.spec.whatwg.org/#http-fetch 2.2.3 if request is navigate and response is opaque, fail

[09:03:43.0000] <JakeA>
(which allows CORS responses)

[09:04:54.0000] <rubys>
mathiasbynens: have you seen https://github.com/rubys/url/tree/peg.js/reference-implementation and http://intertwingly.net/projects/pegurl/liveview.html ?

[09:06:10.0000] <annevk>
JakeA: I think there is some sense in allowing a stored CORS response to a same-origin request

[09:06:34.0000] <JonathanNeal>
The order or timing in which Promises fire in Firefox and Chrome are pretty inconsistent.

[09:06:51.0000] <annevk>
JakeA: just have to make sure not to lose the masking

[09:07:11.0000] <annevk>
JonathanNeal: JavaScript <> HTML haven't worked out the spec for timing

[09:07:27.0000] <JonathanNeal>
Once started, Firefox moves through a promise chain synchronously.

[09:07:51.0000] <JonathanNeal>
Or at least, that’s how it appears to be when compared to Chrome.

[09:07:52.0000] <Hixie>
annevk: i don't understand the question in that e-mail

[09:08:05.0000] <annevk>
:-(

[09:08:15.0000] <annevk>
/me tried to be very elaborate for once

[09:08:41.0000] <annevk>
Hixie: actually, the question is just "Thoughts?"

[09:08:51.0000] <Hixie>
then the answer is "no" :-)

[09:08:57.0000] <Hixie>
i don't have the service workers stuff paged in

[09:09:25.0000] <Hixie>
the statement "Since you cannot message to a dedicated worker from anything but the" seems false

[09:09:28.0000] <Hixie>
environment that created it

[09:09:31.0000] <Hixie>
er

[09:09:33.0000] <Hixie>
mispaste

[09:09:35.0000] <Hixie>
but anyway

[09:09:41.0000] <Hixie>
that bit is wrong

[09:10:27.0000] <Hixie>
but fundamentally i don't understand the problem in that e-mail

[09:10:35.0000] <annevk>
Hixie: e.g. could you have multiple Worker objects in different environments communicating with the same DedicatedWorkerGlobalScope?

[09:10:45.0000] <Hixie>
sure

[09:10:56.0000] <Hixie>
MessagePorts lets anyone communicate with anyone

[09:11:05.0000] <Hixie>
just vend a port and send it along to the other place

[09:11:09.0000] <Hixie>
via as many other ports as you need

[09:11:13.0000] <annevk>
Hixie: I thought that the ports setup by new Worker() was a 1:1 channel

[09:11:26.0000] <Hixie>
that port is, but you can send others through it

[09:11:47.0000] <Hixie>
there's nothing special about that port other than that you can't get a hold of it from script directly

[09:12:23.0000] <Hixie>
the context that i'm missing in that e-mail is why we care about "clients" at all

[09:12:49.0000] <annevk>
The question is basically whether DedicatedWorker should be treated as a slave of its environment or more of an independent entity

[09:13:02.0000] <Hixie>
why treat it as either?

[09:13:09.0000] <Hixie>
what does it mean to treat it as either?

[09:13:10.0000] <wanderview>
JakeA: do we need to do anything if the SW script remains the same, but one of its importScript() resources changes?  as far as I can tell the spec doesn't check for that... so you have to change the SW script itself to get updates to your importScripts... correct?

[09:13:12.0000] <annevk>
Hixie: a service worker exposes the environments it handles fetches for

[09:13:19.0000] <Hixie>
why

[09:13:28.0000] <Hixie>
how?

[09:13:31.0000] <annevk>
Hixie: can't we just assume that it does?

[09:13:32.0000] <Hixie>
what does that mean

[09:13:46.0000] <Hixie>
the environment is the global object?

[09:13:48.0000] <annevk>
Hixie: whenever a new fetch comes in, there's some object that allows communicating back with the environment

[09:14:07.0000] <Hixie>
ok...

[09:14:13.0000] <Hixie>
so why is a worker any different than a Window here?

[09:14:31.0000] <Hixie>
i don't get the problem here

[09:14:51.0000] <annevk>
Hixie: well, SharedWorker is designed to be connected with multiple environments

[09:14:58.0000] <annevk>
Hixie: a dedicated worker is not

[09:15:02.0000] <Hixie>
no

[09:15:06.0000] <annevk>
Hixie: but I can see how a Window isn't either

[09:15:18.0000] <Hixie>
sharedworker and dedicatedworker and window are all identical in the regard of how they communicate to service workers

[09:15:39.0000] <Hixie>
sharedworker is like dedicatedworker, except that when a new connection _from a SharedWorker object_ comes in, you get a 'connect' event

[09:15:46.0000] <Hixie>
but you wouldn't want that event to be used for service workers

[09:15:48.0000] <Hixie>
that would make no sense

[09:16:22.0000] <Hixie>
shared workers and dedicated workers are both able to communicate with multiple environments

[09:16:39.0000] <annevk>
Thanks

[09:16:50.0000] <Hixie>
the only difference is that when you create a dedicated worker, you get back a new one, and when you create a shared worker, you get back the existing one if it's already there

[09:17:00.0000] <annevk>
You're right, I'm not sure why I was being silly

[09:18:26.0000] <annevk>
Not sure it's a good sign that nobody else noticed... or maybe they get bored of telling me

[09:19:02.0000] <annevk>
JakeA: ^^ is good material for sorting out the client stuff

[09:20:56.0000] <Hixie>
what kinds of communication are you expecting btw? between service workers and whoever is making a particular request?

[09:26:01.0000] <JakeA>
wanderview: correct

[09:26:08.0000] <wanderview>
thanks!

[09:27:54.0000] <JakeA>
Hixie: if you were going to polyfill something like client headers you may want to have a conversation about image size

[09:28:21.0000] <Hixie>
if the only use case is polyfill, then i'd drop it entirely.

[09:28:39.0000] <Hixie>
but i don't understand what client headers means in this context

[09:28:47.0000] <Hixie>
and i don't understand how you imagine this conversation would procede

[09:28:49.0000] <JakeA>
JakeA: or maybe just signal "hey, that thing I send you from the cache, well I make a network request for it too and found an update"

[09:28:50.0000] <Hixie>
can you elaborate?

[09:28:58.0000] <JakeA>
Didn't mean to reply to myself

[09:29:09.0000] <Hixie>
how do you expect to identify "that thing"?

[09:30:39.0000] <JakeA>
Hixie: isn't it part of the extensible web to allow polyfills?

[09:30:57.0000] <Hixie>
"extensible web"?

[09:31:03.0000] <Hixie>
you mean, "the web"?

[09:31:34.0000] <JakeA>
Hixie: maybe sending the window width or pixel density as a header

[09:32:44.0000] <JakeA>
Hixie: well it's certainly not extensible if we remove stuff from the spec because it only supports polyfilling potential future behaviours

[09:33:13.0000] <Hixie>
well a worker isn't going to know the pixel density. so you'd have to talk to a window for that, even if the client is the worker. so talking to a client doesn't help.

[09:33:43.0000] <Hixie>
imho, if something is polyfillable then we shouldn't be speccing it.

[09:33:59.0000] <Hixie>
and if something isn't truly polyfillable then we should just ship it and not waste authors' time with making them polyfill it.

[09:35:34.0000] <MikeSmith>
annevk: I'll do the rest of that PR (the gbk tests part) after a few hours

[09:35:47.0000] <MikeSmith>
s/do/review

[09:35:53.0000] <JakeA>
Hixie: no, but having some request clients have different methods would be surprising. Especially if there's no reason we can't post message to a particular type

[09:36:19.0000] <Hixie>
not sure what you're responding to there

[09:37:06.0000] <JakeA>
"a worker wouldn't know the pixel density"

[09:37:28.0000] <Hixie>
i didn't suggest anything having methods at all, let alone different ones

[09:37:34.0000] <Hixie>
so i don't follow

[09:38:18.0000] <JakeA>
I want to expose the request client so you can see its type and postmessage to it

[09:38:58.0000] <Hixie>
how would the client associate these incoming service worker messages with requests?

[09:39:26.0000] <JakeA>
Data sent with the postmessage

[09:40:03.0000] <JakeA>
There may be ambiguity linking it to the particular image element, that's fair. But window width & density shouldn't be an issue

[09:41:10.0000] <Hixie>
your solution doesn't address window width and density

[09:41:48.0000] <Hixie>
you'd need to find a request that came from a Window so you could ask it for the density (and hope that Window is on the same screen as the canvas that the dedicated worker that asked for the image is going to later have its data painted onto)

[09:42:35.0000] <Hixie>
and for the update use case, if you can't associate it to a particular image element, what's the client supposed to do?

[09:42:55.0000] <Hixie>
for the use cases you've given, the solution you've given seems suboptimal.

[09:43:26.0000] <Hixie>
i would recommend a different approach. First, have all the potential clients have a way to contact the service worker directly, similar to how shared workers work.

[09:43:48.0000] <Hixie>
second, have Fetch include a port to the service worker associated with that fetch

[09:44:06.0000] <JakeA>
In this case, the worker would respond "I don't know the pixel density, I'm a worker, assume [fallback]"

[09:44:09.0000] <Hixie>
so if you want to be notified of out-of-band data for a request, you use Fetch

[09:44:14.0000] <Hixie>
that response would be terrible

[09:44:24.0000] <Hixie>
why not just have the window send the service worker the right answer.

[09:44:49.0000] <JakeA>
In the update case can't you assume all elements using that url?

[09:45:23.0000] <Hixie>
you want the client to crawl its DOM doing URL checks? that's a pretty bad API

[09:46:14.0000] <JakeA>
All clients already can contact the SW

[09:46:57.0000] <JakeA>
"have Fetch include a port to the service worker associated with that fetch" I don't understands this.

[09:47:57.0000] <JakeA>
How would that surface in the API?

[09:47:58.0000] <Hixie>
when you do new Fetch()

[09:48:03.0000] <Hixie>
you expose fetch.port

[09:48:20.0000] <Hixie>
and on the service worker side, a fetch that corresponds to a Fetch has a port on it

[09:48:33.0000] <JakeA>
That will always be navigator.serviceWorker.controller

[09:48:44.0000] <Hixie>
?

[09:49:28.0000] <JakeA>
navigator.serviceWorker.controller is a reference to the worker the page will send requests to. It has postMessage

[09:49:43.0000] <Hixie>
no i mean a _new_ port

[09:49:50.0000] <Hixie>
specifically for that fetch

[09:50:04.0000] <Hixie>
new Fetch().port != new Fetch().port

[09:50:25.0000] <JakeA>
Oh ok, what wouldn't work for <img>

[09:50:35.0000] <Hixie>
right this would only be for Fetch

[09:50:40.0000] <Hixie>
if you want updates, you do it via Fetch

[09:50:57.0000] <Hixie>
maybe later if we expose the Fetch of images, it gets exposed there too

[09:52:40.0000] <JakeA>
Hmm, that could work well for progress stuff too

[09:53:23.0000] <JakeA>
Although the SW can enumerate its clients and send them messages

[09:53:41.0000] <JakeA>
I wanted those objects to be the same as request.client

[09:53:57.0000] <JakeA>
Seems weird to make them different

[09:54:04.0000] <Hixie>
imho request.client shouldn't exist

[09:54:31.0000] <Hixie>
exposing clients leads to bad patterns

[09:54:43.0000] <Hixie>
similar to ambient authority

[09:54:50.0000] <Hixie>
basically you get confused deputy issues

[09:55:03.0000] <Hixie>
consider an implementation where there's just a Window that does all requests

[09:55:15.0000] <Hixie>
and then one day, the code is refactored so that some requests are actually done from a worker

[09:55:19.0000] <Hixie>
it shouldn't change anything

[09:55:26.0000] <Hixie>
but it does

[09:56:06.0000] <JakeA>
Feels like we should expose as much about the request as we can safely expose, and treat devs like adults

[09:56:42.0000] <Hixie>
you don't give an untrained adult a loaded gun with the safeties off

[09:57:21.0000] <Hixie>
or to put it another way: guardrails on balconies aren't just for children

[09:57:21.0000] <annevk>
MikeSmith: thanks

[09:57:22.0000] <JakeA>
Which would include the type of client, it's visibility state on request, its url

[09:57:43.0000] <Hixie>
imho that's making the same mistake that was made by cookies

[09:58:29.0000] <Hixie>
the model used by capabilities is way more sensible

[09:59:26.0000] <annevk>
I like the idea of exposing Request.port

[09:59:32.0000] <annevk>
or some such, if we need it

[09:59:55.0000] <annevk>
makes more sense since you can actually negotiate things about the request with the party that initiated it

[10:00:38.0000] <JakeA>
Yep

[10:02:01.0000] <Hixie>
/me discovers that a mail filter for "Subject: * deadline *" on standards lists reliably catches only pointless e-mail

[10:02:25.0000] <annevk>
heh

[10:02:47.0000] <annevk>
JakeA: perhaps we should reconsider the clients model

[10:04:05.0000] <JakeA>
annevk: we still need it for interaction post push message, but will reconsider it for reqiest

[10:05:12.0000] <JakeA>
annevk: and announcing updates

[10:09:36.0000] <annevk>
jgraham: is there some way to require TLS for a test?

[10:10:17.0000] <jgraham>
annevk: Not for a top level page at the moment

[10:10:33.0000] <annevk>
jgraham: that seems problematic

[10:10:35.0000] <jgraham>
You can use an iframe or window.open a tlbc for the moment

[10:10:49.0000] <jgraham>
(also tls doesn't work at all until someone reviews my changes

[10:10:51.0000] <jgraham>
)

[12:52:37.0000] <caitp>
annevk, is it noted in the xhr spec anywhere that people might want to some day get rid of synchronous requests? if that's ever feasible... I just want to have something (other than https://www.w3.org/Bugs/Public/show_bug.cgi?id=24790) to discourage people from using it

[12:52:51.0000] <caitp>
well, doesn't matter I guess

[12:54:04.0000] <zcorpan>
caitp: https://xhr.spec.whatwg.org/#sync-warning

[12:54:33.0000] <caitp>
not quite a deprecation notice, just a warning of why it's a bad idea

[12:54:36.0000] <caitp>
i guess that works though

[13:02:03.0000] <rniwa>
wycats: yt?

[13:28:04.0000] <zcorpan>
caitp: what would you expect from a deprecation notice?

[13:28:30.0000] <caitp>
it would be nice to have a hardline "we want to get rid of this"

[13:28:52.0000] <caitp>
even if it was in the spec rather than in implementations, that would be awesome

[13:29:27.0000] <caitp>
because then whenever anyone asks for it (and they do :() I could say "hey look over there, it's gonna be gone in 6 months, so we can't" even if I know that's not really true

[13:29:38.0000] <zcorpan>
caitp: isn't that what the second sentence says?

[13:30:07.0000] <caitp>
it's definitely a discouragement

[13:30:12.0000] <caitp>
but it's maybe not a hard "no"

[13:30:29.0000] <zcorpan>
it says browsers are encouraged to throw so the feature can be removed

[13:30:43.0000] <zcorpan>
the first sentence says authors must not use it

[13:30:51.0000] <zcorpan>
i don't understand what you're missing

[13:32:44.0000] <caitp>
> when the JavaScript global environment is a document environment

[13:32:53.0000] <caitp>
^--- this statement doesn't mean anything to non-implementors

[13:33:06.0000] <caitp>
most people won't even interpret that as a "this doesn't apply to workers"

[13:33:59.0000] <caitp>
"as it has detrimental effects to the end user's experience" <<< a lot of people think they have reasons to use it in spite of that --- so it's definitely good that it's there, but they still think they know better

[13:34:46.0000] <caitp>
"encouraged to warn about such usage in developer tools and may experiment with throwing" <<< not really normative, not a strong statement

[13:35:05.0000] <caitp>
all I'm saying is it would be nice to have a strong statement against it

[13:35:26.0000] <caitp>
there are some in bugs, but it's hard to get people to look at those

[13:37:47.0000] <zcorpan>
caitp: what do you think of https://html.spec.whatwg.org/multipage/webappapis.html#dialogs-implemented-using-separate-documents ?

[13:38:52.0000] <caitp>
that's a lot nicer, and in cases where there are actually threads on removing them from the platform, you can link people to them so they can get the anger off their chests

[13:39:42.0000] <zcorpan>
technically it's weaker since it doesn't have anything normative. but i can see that it's easier to understand the message

[13:39:47.0000] <caitp>
just my opinion, though, it's up to you guys on the xhr thing --- it would just be a bit easier for for me

[13:40:02.0000] <zcorpan>
annevk: ^

[13:45:29.0000] <annevk>
caitp: zcorpan: thanks, let's try to fix that now

[13:56:10.0000] <annevk>
caitp: zcorpan: https://xhr.spec.whatwg.org/#sync-warning

[13:58:37.0000] <caitp>
that looks good :)

[13:58:53.0000] <caitp>
that oughta shut em up... I mean, convince them that they don't need to be able to do that**

[13:58:55.0000] <zcorpan>
annevk: the second sentence now has two "therefore"s

[13:59:22.0000] <caitp>
it does?

[13:59:24.0000] <annevk>
http://portal.cs.oag.state.tx.us/OAGStaticContent/portal/login/help/listPasswordRules.htm and no TLS

[13:59:30.0000] <annevk>
what the fuck

[13:59:30.0000] <zcorpan>
well one therefore and one as

[13:59:36.0000] <annevk>
(via Twitter)

[14:00:44.0000] <zcorpan>
annevk: maybe put "as it has detrimental effects to the end user's experience" in the first sentence?

[14:02:20.0000] <annevk>
zcorpan: thanks, done

[14:02:50.0000] <zcorpan>
lgtm

[14:10:28.0000] <heycam>
zcorpan, ack

[14:11:57.0000] <annevk>
heycam: 1) are you free to work on IDL bugs again? 2) will be in Portland?

[14:12:46.0000] <heycam>
annevk, yes, though so far this week I've been catching up on bugs. and yes.

[14:13:24.0000] <heycam>
annevk, haven't read mailing list mail / w3c bugs yet

[14:13:24.0000] <annevk>
heycam: twice awesome

[14:14:00.0000] <annevk>
heycam: enjoy

[14:14:27.0000] <heycam>
yeah always my favourite part of returning :/

[14:14:49.0000] <annevk>
heycam: I've been working on the associated Realm thing with bz

[14:15:06.0000] <annevk>
heycam: https://github.com/w3c/web-platform-tests/pull/1381 has a bunch of tests for the near empty WebIDL directory

[14:15:08.0000] <heycam>
annevk, oh cool, so this will replace the "associated ECMAScript global environment" wording?

[14:15:28.0000] <annevk>
heycam: haven't gotten quite that far yet

[14:15:53.0000] <annevk>
heycam: mostly figuring out what the status quo is

[14:15:55.0000] <heycam>
annevk, ok. tbh I never looked into what the ES6 spec did with Realms and how useful/realistic they are.

[14:16:17.0000] <annevk>
well they're a match for ES

[14:16:23.0000] <annevk>
but platform is more complicated :-(

[14:16:43.0000] <annevk>
so we have the current Realm, the entry settings object, and the incumbent settings object

[14:17:00.0000] <annevk>
and then specification writers have to make sure to pick the right one for base URLs, origins, etc.

[14:17:18.0000] <annevk>
hint: doesn't work

[14:17:20.0000] <heycam>
what a pain

[14:17:36.0000] <heycam>
seeing tests for this stuff will be awesome though!

[14:18:05.0000] <annevk>
yeah, so hopefully we can figure out what we want the default setup to be going forward, make that easy, and then prefix the rest with legacy or some such

[14:18:35.0000] <heycam>
sounds great

[14:19:14.0000] <heycam>
erm

[14:19:19.0000] <heycam>
where did my Web IDL tests go?

[14:19:30.0000] <annevk>
heycam: are they still in a pull request?

[14:19:38.0000] <heycam>
annevk, oh yeah that's right

[14:19:44.0000] <heycam>
annevk, I never addressed plh's/dom's comments

[14:22:09.0000] <annevk>
heycam: gotta go, guess we'll talk later about the open issues once you've caught up

[14:22:26.0000] <heycam>
annevk, cool, ttyl

[15:20:08.0000] <MikeSmith>
gb18030 is nuts

[15:21:48.0000] <jgraham>
or gblboeo as I call it

[15:23:00.0000] <MikeSmith>
heh


2014-11-12
[16:09:28.0000] <JonathanNeal>
Is there a Fetch test suite? https://fetch.spec.whatwg.org/

[16:31:58.0000] <MikeSmith>
JonathanNeal: none that I know of

[16:32:29.0000] <JonathanNeal>
Is the fetch API fairly simple? Is it a Promise-ified XMLHttpRequest?

[16:33:05.0000] <MikeSmith>
yeah that would be fair way to describe it I guess

[16:35:48.0000] <JonathanNeal>
Thanks, MikeSmith. Sounds good.

[16:36:48.0000] <MikeSmith>
JonathanNeal: there's a polyfill at https://github.com/github/fetch in case you've not found it on your own yet

[16:37:19.0000] <MikeSmith>
that does have a few tests

[16:38:58.0000] <MikeSmith>
and I guess you realize this but there's a lot more to the Fetch spec than just the API that's exposed

[16:39:30.0000] <JonathanNeal>
Yes, I’m seeing that as I look through the Headers and CORS sections.

[16:40:00.0000] <zewt>
dear firefox, #1 thing that will make me turn off auto-updates entirely: having a dialog with "update" and "later" buttons, but no "stop nagging me entirely" button

[16:41:26.0000] <TabAtkins>
"stop nagging me entirely" sounds like "turn off auto-updates entirely" anyway.

[16:43:20.0000] <zewt>
telling me about an update once (and presumably downloading it for me) is different from disabling update checks outright

[16:44:25.0000] <TabAtkins>
In practice, not really.  Most people will simple forget about it and not update.

[16:44:51.0000] <zewt>
apple does the same bullshit, and they're more deliberately-obtuse about it--the options are "install now", "remind me in an hour", and "remind me tomorrow" (or something to that effect), which is many miles beyond okay

[16:45:43.0000] <TabAtkins>
Chrome, of course, just makes the hamburger turn yellow, then red.  (And, though my coworkers keep denying it, I swear it also purposely starts breaking audio when you delay too long.)

[16:46:11.0000] <zewt>
chrome is pretty strict about not making the browser worse when you update, which firefox is not so good about

[16:46:20.0000] <zewt>
which makes me much less hesitant to let chrome update than firefox

[16:46:32.0000] <TabAtkins>
Can't comment on that.

[16:47:12.0000] <zewt>
chrome did basically remove user scripts at one point, which is the only reason I'm still loading firefox at all

[16:47:40.0000] <zewt>
the biggest breakage on a chrome update that I know of (for my usage patterns)

[16:48:48.0000] <zewt>
it's depressing that, for all the work people do, the web is unambiguously worse for me today than it was a year or two ago

[16:48:57.0000] <zewt>
as far as real-world day to day use

[17:08:24.0000] <roc>
some of that's because of the hard work the bad guys are doing

[18:00:20.0000] <JonathanNeal>
what’s the hard work the bad guys are doing and who are the bad guys?

[18:46:03.0000] <JonathanNeal>
roc: ^

[18:54:16.0000] <roc>
a ton of browser developer time and energy goes towards blocking the efforts of malware authors and

[18:54:20.0000] <roc>
"black hat" hackers

[18:54:57.0000] <roc>
and apart from the opportunity costs, this sometimes results directly in restrictions on what users and Web devs can do

[19:50:43.0000] <JonathanNeal>
Until things get better, the indie web helps, roc.

[19:54:39.0000] <caitp>
trying to block the efforts of malware distributors and plugging exploitable holes seems like a suitable thing to spend time on, though

[20:12:31.0000] <JonathanNeal>
agreed, the web is our new wild west

[20:13:03.0000] <JonathanNeal>
well, new like the 90’s is still kinda new.

[21:34:05.0000] <MikeSmith>
annevk: something that's been bugging me about the http://w3c-test.org/encoding/iso-2022-jp-encoder.html and http://w3c-test.org/encoding/gb18030-encoder.html and http://w3c-test.org/encoding/gbk-encoder.html testーthose aren't strictly tests of the encoding spec only, they're actually also tests of the URL. In other words, I couldn't be review/evaluate them just by looking at the Encoding spec, I needed to look at the URL spec too. So I wonder whethe

[21:45:38.0000] <MikeSmith>
annevk: also about the "iso-2022-jp encoder: SI/SO ESC" test, since nobody passes it and the actual behavior matches in gecko, webkit, and blink (they all return exactly the same thing, even though it doesn't match the spec), I wonder if the spec should change here to match the implementations

[21:51:44.0000] <MikeSmith>
annevk: or wait is that actually a problem in the test case itself?

[22:03:14.0000] <MikeSmith>
annevk: so yeah looking back at https://github.com/w3c/web-platform-tests/blob/master/encoding/iso-2022-jp-encoder.html#L12 now, I don't understand why you're doing that res.split("%1B").join("\x1B"). If that step in the test code is omitted, then the test passes as expected.

[22:34:01.0000] <MikeSmith>
annevk: also r? https://github.com/w3c/web-platform-tests/pull/1383 (minor nit)

[23:45:41.0000] <annevk>
MikeSmith: r+

[23:46:05.0000] <annevk>
MikeSmith: seems you're correct about that, I made a mistake

[23:46:26.0000] <annevk>
MikeSmith: although if you remove that split().join() line there's a few changes needed earlier too

[23:46:39.0000] <annevk>
MikeSmith: and there's no way to not have a dependency on either URLs or forms

[00:48:00.0000] <annevk>
zcorpan: https://bugzilla.mozilla.org/show_bug.cgi?id=1093611 is about changing Gecko with respect to URL fragments

[00:48:19.0000] <annevk>
zcorpan: i.e. align it with Safari and the original RFC

[00:48:34.0000] <zcorpan>
annevk: ok cool

[00:49:09.0000] <zcorpan>
annevk: do you know if there's a blink bug?

[00:49:19.0000] <annevk>
zcorpan: I don't know

[00:49:39.0000] <annevk>
zcorpan: it's only been fairly recent there's interest in URLs again

[00:49:52.0000] <annevk>
zcorpan: although in Gecko we're mostly patching a broken setup

[00:50:07.0000] <annevk>
Hopefully at some point we're going for the rewrite

[00:51:55.0000] <annevk>
http://jxck.hatenablog.com/entry/whatwg-fetch :-)

[00:52:09.0000] <zcorpan>
i'll wait and see what happens with that bug

[00:55:50.0000] <Dashiva>
I feel like there isn't enough "Stop trying to make fetch happen" jokes

[00:58:59.0000] <annevk>
http://www.hcn.zaq.ne.jp/___/WEB/Fetch-ja.html wow

[01:06:15.0000] <annevk>
MikeSmith: ah you already merged

[01:07:10.0000] <annevk>
MikeSmith: thanks, will create a new thing to fix the issue you found

[01:34:01.0000] <zcorpan>
hmm so firefox developer edition is aurora + a preinstalled extension?

[01:36:11.0000] <zcorpan>
the name and logo somehow makes me think of opera developer :-)

[01:38:22.0000] <zcorpan>
i guess it's more inviting than "aurora" which maybe makes people think it's a decease

[01:54:10.0000] <annevk>
timezone math in Google is nifty

[01:54:28.0000] <annevk>
I wish it supported "4pm Amsterdam in Toronto" as well

[01:54:38.0000] <annevk>
I never remember the timezone names

[01:55:14.0000] <annevk>
4pm cet in toronto doesn't even work

[02:22:36.0000] <jgraham>
zcorpan: AIUI "aurora" doesn't exist anymore; the release channels are nightly -> developer -> beta -> stable

[02:22:51.0000] <jgraham>
But I haven't haven't actually verified that

[02:34:48.0000] <annevk>
jgraham: looks correct per https://www.mozilla.org/en-US/firefox/channel/#aurora (though note the fragment)

[02:37:11.0000] <jgraham>
Right, aurora still exists on android, and I doubt we managed to update every externally visible use of the term already

[02:39:04.0000] <annevk>
I like dbaron's plan of removing beta

[02:42:29.0000] <jgraham>
Yeah I'm not sure how valuable the 12 week cycle is compared to a 6 week cycle, but I don't have the numbers on how many bugs we fix in that period

[02:42:54.0000] <jgraham>
Seems like it should be possible to figure out

[03:05:02.0000] <matijs>
annevk: wolframalpha's got you covered for timezone conversions… http://www.wolframalpha.com/input/?i=4pm+CET+in+toronto

[03:05:31.0000] <matijs>
sorry… https://www.wolframalpha.com/input/?i=4pm+CET+in+toronto

[03:12:59.0000] <jgraham>
Yeah, but it's also really slow to load :(

[04:02:53.0000] <annevk>
I really want Google to support U+XXXX for similar reasons

[04:03:43.0000] <annevk>
CSS property names and other web developer related aspects would be great too

[04:19:02.0000] <farnoy>
Hi, is there a way to get canvas composite operation `difference` work on non-100% opacity colors too?

[04:19:09.0000] <farnoy>
Both `difference` and `xor` seem to work only on 100% opaque areas

[04:20:35.0000] <annevk>
jgraham: http://wptserve.readthedocs.org/en/latest/response.html is all I need a Python file with a handler definition or is there more to it?

[04:24:16.0000] <annevk>
farnoy: dev.w3.org/fxtf/compositing-1/#porterduffcompositingoperators_xor is the math, I don't really understand what it does, but if browsers don't match what that says, you might want to file a bug

[04:24:25.0000] <annevk>
argh address bar

[04:25:52.0000] <annevk>
hmm UK lunch times

[04:42:32.0000] <jgraham>
annevk: In my case more like "UK being on a train times"

[04:43:25.0000] <jgraham>
annevk: Yes, although note that the exact interface there is only needed for difficult cases

[04:43:59.0000] <jgraham>
In simple cases the main() function can just return a status code / list of headers  / body

[04:44:14.0000] <jgraham>
(the first two are optional)

[04:44:44.0000] <annevk>
jgraham: the example as is didn't work

[04:44:58.0000] <annevk>
jgraham: main does seem to work (I copied some stuff from XHR)

[04:45:24.0000] <jgraham>
annevk: Sorry the documenation is a bit confusing

[04:45:48.0000] <jgraham>
the main() thing is a feature of web-platform-tests rather than vanilla wptserve

[05:03:27.0000] <MikeSmith>
annevk: yeah sorry I hadn't checked the iso-2022-jp encoding test carefully enough before I merged it. Thanks for fixing it

[05:04:11.0000] <MikeSmith>
annevk: also btw I think you'll be glad to know there are now bugzilla components for all the webappsec specs

[05:11:39.0000] <annevk>
MikeSmith: sweet

[05:23:37.0000] <annevk>
jgraham: fine to mix async_test and test?

[05:27:53.0000] <jgraham>
annevk: Yes

[05:59:03.0000] <annevk>
MikeSmith: https://github.com/w3c/web-platform-tests/pull/1384

[05:59:15.0000] <MikeSmith>
/me looks

[05:59:21.0000] <annevk>
jgraham: ^ has the Python file I was asking about

[05:59:27.0000] <MikeSmith>
ah cool

[05:59:34.0000] <MikeSmith>
annevk: will review

[06:02:06.0000] <annevk>
If anyone can think of more things to test with the data I have there, I'd be open to adding more things

[06:02:30.0000] <annevk>
Actually using the data from the <iframe> is a bit tricky since the HTML parser mangles a couple of bytes

[06:02:49.0000] <annevk>
Perhaps we should still do that though

[06:03:04.0000] <annevk>
Probably only affects \x00 and \r

[06:04:18.0000] <MikeSmith>
annevk: I'd bet zcorpan can think of more things. But it's sometimes dangerous to ask him unless you're prepared to actually do the more things

[06:05:00.0000] <annevk>
MikeSmith: heh, if it's too much work I'll commit a TODO I guess

[06:08:27.0000] <jgraham>
MikeSmith++

[06:16:56.0000] <Ms2ger>
MikeSmith++

[06:17:03.0000] <Ms2ger>
zcorpan++

[06:17:19.0000] <zcorpan>
what did i do?

[06:17:58.0000] <Ms2ger>
Think of more things to test, for as long as I can remember :)

[09:20:23.0000] <caitp>
so how is the "please address our issues with custom elements / shadow dom / etc" thing coming? I'd love to be CC'd on such bugs if possible

[09:29:10.0000] <annevk>
caitp: you could go through the open bugs and copy yourself ;)

[09:29:36.0000] <caitp>
it's impossible to find anything in there :(

[09:31:12.0000] <annevk>
caitp: anything recent you can find on public-webapps, as it's copied when a new bug is filed

[09:44:00.0000] <TabAtkins>
annevk: What do you mean by "support u+xxxx"? Show a onebox for it?

[09:44:18.0000] <annevk>
TabAtkins: if that's what it's called

[09:44:29.0000] <TabAtkins>
Yeah, dunno where the terminology comes from.

[09:44:42.0000] <TabAtkins>
I just always click the filesystem.info link. ^_^

[09:45:06.0000] <annevk>
TabAtkins: me too, but if I just want to copy-and-paste the actual code point, it could be easier...

[09:45:23.0000] <TabAtkins>
true that.

[09:45:39.0000] <TabAtkins>
We've got a thing to suggest new onebox results.  I'll ping. ^_^

[09:46:21.0000] <annevk>
TabAtkins: heh, can you ask about "4pm Amsterdam in Toronto"?

[09:46:42.0000] <TabAtkins>
heh, k.

[09:47:03.0000] <TabAtkins>
(I always just ask for "time in toronto" and then add/subtract hours from current time as necessary.)

[09:47:07.0000] <annevk>
TabAtkins: it seems some timezone support was rolled out, but it's fairly US-centric, e.g. not even "4pm cet in toronto" works

[09:47:20.0000] <annevk>
"4pm pst in toronto" works

[09:47:23.0000] <annevk>
so weird

[10:47:28.0000] <annevk>
JakeA: how much would you mind if I removed all the hyphens from https://fetch.spec.whatwg.org/#requestmode ?

[10:47:48.0000] <annevk>
JakeA: apparently there's precedent for enumerations to be lowercase and no hyphens

[10:51:52.0000] <Hixie>
zcorpan: you have some sort of syntax error in your picture stuff

[10:52:08.0000] <Hixie>
search for "<var>image request</span>"

[10:52:44.0000] <JakeA>
annevk: I'll ask the engineers how difficult it is to get a patch in for that. Will let you know.

[10:53:07.0000] <annevk>
JakeA: to be clear, from all enum productions

[10:54:17.0000] <JakeA>
annevk: everything in fetch right? So no-cors to nocors etc

[10:54:23.0000] <annevk>
JakeA: yup

[10:54:41.0000] <annevk>
ta

[11:00:36.0000] <JakeA>
annevk: I mean, hyphens seem loads better in terms of usability (or camelCase, whatever)

[11:00:58.0000] <annevk>
Hixie: opinion?

[11:01:04.0000] <Hixie>
on?

[11:01:16.0000] <annevk>
Hixie: enum naming

[11:01:33.0000] <annevk>
Hixie: e.g. arraybuffer vs arrayBuffer vs array-buffer

[11:01:36.0000] <Hixie>
you mean strings in JS used as arguments?

[11:01:40.0000] <annevk>
yes

[11:01:53.0000] <Hixie>
if they're not used as identifiers, i'd just go with readable strings, e.g. "fat array"

[11:01:55.0000] <annevk>
I think it's mostly justonelongstring

[11:02:08.0000] <Hixie>
but i view "arraybuffer" as one word, so...

[11:02:17.0000] <Hixie>
i definitely wouldn't camelcase in a string

[11:05:11.0000] <annevk>
"no cors"

[11:05:16.0000] <annevk>
hmm

[11:05:34.0000] <zcorpan>
Hixie: thanks, fixed

[11:05:40.0000] <annevk>
but then same origin or same-origin...

[11:05:43.0000] <annevk>
baaah

[11:05:46.0000] <Hixie>
zcorpan: coolio, regenning...

[11:06:33.0000] <caitp>
if something is not documented, nobody depends on it and you're free to break it in any way you see fit

[11:07:15.0000] <Hixie>
hahaha

[11:07:16.0000] <Hixie>
no

[11:07:28.0000] <caitp>
you're getting good at reading my sarcasm

[11:08:06.0000] <annevk>
caitp: well, you also suggested we could still change HTML parsing rules

[11:08:35.0000] <caitp>
i think it would be good to change it

[11:08:44.0000] <caitp>
i wouldn't say it wouldn't break anyone =)

[11:10:36.0000] <caitp>
more just that I don't really care if people get broken due to depending on bogus misfeatures

[11:10:42.0000] <caitp>
:c

[11:11:39.0000] <jarek>
is something like "new HTMLDivElement()" supposed to work?

[11:11:52.0000] <annevk>
jarek: nope

[11:11:53.0000] <caitp>
not afaik

[11:12:07.0000] <jarek>
at least on Chrome I can do "new DocumentFragment()", so I would expect other DOM APIs to have usable constructors as well

[11:12:07.0000] <annevk>
jarek: you can tell by the lack of [Constructor]

[11:12:13.0000] <caitp>
i think there have been some arguments that it "should" work, though

[11:12:37.0000] <annevk>
jarek: that's because I gave DocumentFragment a constructor: https://dom.spec.whatwg.org/#interface-documentfragment

[11:12:37.0000] <jarek>
annevk: I see, but there is nothing stopping WHATWG from adding the constructor in near future?

[11:13:00.0000] <annevk>
jarek: it's a bit hard for elements, since some interfaces are used for several elements

[11:13:05.0000] <jsbell>
What's WebIDL for "return type of a method that returns a promise that will fulfil to undefined"? Promise<void> or ... ?

[11:13:18.0000] <annevk>
jsbell: yes

[11:13:33.0000] <jsbell>
annevk: thx

[11:15:10.0000] <jarek>
annevk: but those are abstract interfaces, right?

[11:15:49.0000] <jarek>
on Chrome it's also possible to use "new" with custom element class that inherits from HTMLDivElement and has no constructor

[11:16:03.0000] <Ms2ger>
new HTMLDivElement()... Ugh

[11:16:11.0000] <Ms2ger>
Whatever happened to Element.create()?

[11:16:29.0000] <annevk>
Ms2ger: got too complex

[11:16:40.0000] <jarek>
Ms2ger: what's wrong with "new" approach? Factory pattern was cool 10 years ago

[11:17:13.0000] <Ms2ger>
jarek, the interface name is awful

[11:17:29.0000] <annevk>
jarek: the problem with the new approach is abstract interfaces (e.g. HTMLHeadingElement) and the verbosity

[11:17:47.0000] <Ms2ger>
jarek, and we have a localName <-> interface correspondence that makes that weird too

[11:18:59.0000] <caitp>
in 20 years, it will all be different, or irrelevant

[11:19:05.0000] <caitp>
pick one

[11:19:16.0000] <jarek>
Ms2ger: it's more generally HTML <-> JS correspondence

[11:19:30.0000] <annevk>
jarek: I don't think there's much opposition per se btw

[11:19:37.0000] <Ms2ger>
jarek, I don't follow that

[11:19:42.0000] <jarek>
Ms2ger: in JS I want to use constructors and in HTML localNames

[11:19:43.0000] <annevk>
jarek: it's just coming up with a good story that works for all elements

[11:20:50.0000] <annevk>
jarek: e.g. that is why new DocumentFragment works, but new Element does not (yet?)

[11:20:54.0000] <jarek>
annevk: I think Dart already does it (via some heavy wrappers)

[11:21:40.0000] <annevk>
jarek: it isn't immediately obvious how you'd create an element {test, test} other than createElementNS("test", "test")

[11:22:19.0000] <annevk>
jarek: and if you were to suggest new Element("test", "test") that'd be somewhat weird as new Element("http://www.w3.org/1999/xhtml", "div") would return HTMLDivElement...

[11:22:19.0000] <jarek>
annevk: isn't createElementNS going to be depracated?

[11:22:30.0000] <jarek>
I thought the plan was to move SVG and MathML into HTML namespace

[11:22:51.0000] <annevk>
jarek: ah yeah, I guess that's still somewhat a plan Google has

[11:25:26.0000] <jarek>
all new geometry interfaces (DOMMatrix, DOMPoint, DOMRect) are created with "new" rather than factories

[11:26:11.0000] <Ms2ger>
That seems like too much pain for too little gain

[11:26:43.0000] <jarek>
and the spec says that "new SVGMatrix" should also work because SVGMatrix should just reference DOMMatrix

[11:28:38.0000] <annevk>
jarek: sure, new objects use constructors

[11:29:05.0000] <annevk>
jarek: but as long as there's no plan for existing objects, nothing will happen

[12:11:10.0000] <TabAtkins>
The attempt to move SVG into the HTML namespace isn't a "Google" thing, it's a "me" thing, and the SVGWG explicitly agreed to try and do it at the last meeting, if possible.

[12:13:21.0000] <caitp>
what difference would it make exactly? let people create SVG elements with createElement() instead of createElementNS() ?

[12:13:44.0000] <caitp>
seems like it wouldn't work with <a>

[12:13:54.0000] <TabAtkins>
Yes, and making it a little less weird to intermix them more freely (putting <video>, <input>, etc inside of SVG)

[12:14:14.0000] <TabAtkins>
<a> is fine - SVG2 is dropping xlink:href in favor of href, so the elements'll match.

[12:14:22.0000] <TabAtkins>
<script> and <style> similarly can be merged.

[12:14:40.0000] <caitp>
so just getting rid of SVGAElement and using HTMLAnchorElement instead?

[12:14:40.0000] <TabAtkins>
And now that SVG Fonts are dropped, just using the HTML <font> is fine.  That's all the clashes.

[12:14:44.0000] <TabAtkins>
Yeah.

[12:14:49.0000] <TabAtkins>
That's the *hope*.

[12:15:33.0000] <annevk>
TabAtkins: sorry for misattribution

[12:17:27.0000] <TabAtkins>
annevk: No problem, I just don't like too many things getting attributed as "google stuff", because that plays into certain paranoid narratives.

[12:17:30.0000] <caitp>
so then what happens to everyones SVGAElements that do in fact use xlink stuff :p

[12:18:02.0000] <annevk>
TabAtkins: Google will burn for destroying namespaces

[12:18:19.0000] <TabAtkins>
SVG will allow xlink:href still, it'll just be lower-priority than href.

[12:18:41.0000] <annevk>
caitp has a point though that you cannot have both

[12:18:52.0000] <annevk>
Unless you make xlink:href work in HTML too...

[12:19:42.0000] <TabAtkins>
Some bleed-through back into HTML might be okay.  Or maybe we can hackily make xlink:href only work if there's an <svg> ancestor.

[12:26:48.0000] <caitp>
plus people would be like "hey this used to be an instance of SVGAElement but now it's not what happened"

[12:27:05.0000] <caitp>
i mean, it gets a bit murky I think

[12:27:08.0000] <caitp>
cool though

[12:30:27.0000] <gsnedders>
sure!

[12:31:24.0000] <TabAtkins>
We're somewhat concerned about code that uses "is this in the SVG namespace?" to do something special.

[12:31:55.0000] <TabAtkins>
We know that a decent chunk of code is for papering over differences in basic DOM operations between SVG and HTML elements, and now that most (and eventually all?) are consistent, having that sort of code go down the HTML path will be fine.

[13:10:39.0000] <Hixie>
in the ES6 iterator protocol, can done ever be true with value being set to some useful value?

[13:10:44.0000] <Hixie>
or is it always either done, or value?

[13:21:32.0000] <TabAtkins>
A *valid* iterator won't ever do that.

[13:21:49.0000] <TabAtkins>
You can make a custom iterator that violates the constraints, but that's your fault then.

[13:24:34.0000] <caitp>
from https://github.com/v8/v8-git-mirror/blob/d3d29c640cf14f0eac2057b4fbffa5fbc0a29231/src/x64/full-codegen-x64.cc#L1242-L1281, it looks like it's a `done or value` scenario, haven't checked the spec

[13:24:37.0000] <Hixie>
right, i mean according to the protocol

[13:24:40.0000] <Hixie>
k

[13:24:59.0000] <TabAtkins>
Yeah, a valid iterator only ever produces a {value} object or a {done} object.

[13:25:13.0000] <TabAtkins>
(Or {value: foo, done: false}, of course.)

[13:26:21.0000] <caitp>
i guess technically you could return anything you wanted from @@iterator though

[13:26:57.0000] <TabAtkins>
Yeah, and then it's your fault for getting possibly-confusing results.

[13:26:58.0000] <caitp>
were you inclined to confuse the vm

[13:39:38.0000] <annevk>
http://people.mozilla.org/~jorendorff/es6-draft.html#sec-iteratorresult-interface

[13:40:49.0000] <Hixie>
man the ES6 iterator protocol really makes it a pain to work out if you're dealing with the last item in the list

[13:41:42.0000] <annevk>
I suspect if you use a language feature you don't really have that problem

[13:41:45.0000] <TabAtkins>
Languages that make it easier for the consumer end up being *way* harder for the producer.  There was a lot of argument over this originally.

[13:42:07.0000] <Hixie>
yeah

[13:42:13.0000] <Hixie>
well

[13:42:15.0000] <Hixie>
either way :-)

[13:42:24.0000] <TabAtkins>
(You generally end up having to duplicate code between isEnded() and next(), or pre-compute next() to see if it's at the end and stash it away.)

[13:42:32.0000] <Hixie>
(personally i always prefer to make it harder on the producer)

[13:42:50.0000] <TabAtkins>
I've found that, while a "late end" is a little harder for the consumer, it's not a huge deal, and sometimes easier.

[13:42:52.0000] <Hixie>
(since there are fewer of those)

[13:43:16.0000] <TabAtkins>
Chaining iterables, for example, is slightly simpler, at least to me, with a late end.

[13:43:55.0000] <annevk>
Why is it hard btw? Just check if done is true?

[13:44:12.0000] <TabAtkins>
Hixie: Also, sometimes you *can't* early-end, while you can always late-end.  For example, your iterable might be lazily pulling stuff off the server.

[13:44:22.0000] <Hixie>
annevk: say you want to add all the numbers in an iteration except hte last one

[13:44:48.0000] <Hixie>
TabAtkins: *shrug* i'm just saying it's a pain. not making a counter-proposal.

[13:45:06.0000] <TabAtkins>
Hixie: Yeah, I know. I'm just providing more reasons why it was done the way it was, despite the pain.

[13:45:14.0000] <caitp>
do we have generator-iterators?

[13:45:18.0000] <TabAtkins>
Yes.

[13:45:21.0000] <caitp>
huh.

[13:45:26.0000] <TabAtkins>
Why "huh"?

[13:45:28.0000] <annevk>
while iterval.done != true ...?

[13:45:43.0000] <caitp>
i'm just imagining that working in a for...of context

[13:46:04.0000] <TabAtkins>
annevk: If you want all *but* the last, you have to specially stash the last one you've seen, and only add it in the *next* iteration if you're not done yet.

[13:46:14.0000] <caitp>
which is the way everyone ought to want to use iterators, because it's nice :(

[13:46:21.0000] <TabAtkins>
Though this isn't a big deal - if you want all but the last *two*, you have to do something like this regardless of early/late end.

[13:46:39.0000] <TabAtkins>
caitp: generators work fine in for-of.  What problem are you thinking about?

[13:46:56.0000] <Hixie>
TabAtkins: yeah iterators in general have this problem, basically

[13:47:03.0000] <Hixie>
TabAtkins: as opposed to access by index

[13:47:55.0000] <TabAtkins>
Hixie: Of course, you can abstract this away with an iterator combinator that drops the last N elements.  It needs to seek ahead N elements, of course, but that's what you'd be manually doing anyway.

[13:48:04.0000] <annevk>
TabAtkins: why do you have to wait for the next value? It tells you whether more is coming, no?

[13:48:12.0000] <TabAtkins>
Then you can just do itersum(dropLast(1, iter))

[13:48:19.0000] <Hixie>
TabAtkins: interesting idea

[13:48:25.0000] <TabAtkins>
annevk: No.  You either have a "value" frame, or a "done" frame.

[13:48:37.0000] <TabAtkins>
You don't know it's done until you ask for the next value and get a "done" frame instead.

[13:48:45.0000] <Hixie>
TabAtkins: probably not great for perf, but if it's not hot code, could work

[13:48:56.0000] <annevk>
TabAtkins: ah sorry

[13:48:59.0000] <TabAtkins>
Hixie: When working with iterators, more combinators is always the right answer.  They're easy to code up and easy to use.

[13:49:01.0000] <annevk>
TabAtkins: I see it now

[13:49:03.0000] <annevk>
thanks

[13:49:22.0000] <TabAtkins>
Hixie: It's the same thing you'll be doing manually, so I dont' see the perf concern (except for more function calls, I suppose.)

[13:49:41.0000] <Hixie>
TabAtkins: function calls can be expensive, depending on the language

[13:50:00.0000] <TabAtkins>
Sure. Those languages aren't very good for iterator-based code, which is heavily functional.

[13:51:56.0000] <Hixie>
i have profiled this in JS, so i don't know what the overhead would be

[13:52:06.0000] <Hixie>
i wouldn't be surprised if it was measurable, though

[13:52:26.0000] <annevk>
Hixie: you're actually writing JS these days?

[13:53:26.0000] <Hixie>
i often write js code :-P

[13:53:33.0000] <Hixie>
our whole platform uses js :-P

[13:53:53.0000] <Hixie>
but in this instance, i'm basically trying to learn all the new stuff to get more up to date

[13:54:06.0000] <caitp>
[16:46]  <TabAtkins> caitp: generators work fine in for-of.  What problem are you thinking about? <<< well it's not generators that are the issue really, but in my head i'm expecting async iterators would be likely to use them --- but mostly it's the whole "async for-of" that i'm talking about, does that work?

[13:54:15.0000] <caitp>
it's hard to verify in d8, so I'm not sure

[13:55:26.0000] <TabAtkins>
Ah, async generators will produce promises.  Consuming that directly with a for-of is obviously tricky, unless you really want to work with promises (which you might).  Along with async/await there's a proposal for an asynchronous version of for-of that handles async generators transparently.

[13:56:30.0000] <TabAtkins>
(And I think it just returns promises of iterator frames, so using for-of over an async generator won't be useful, as it'll produce an infinite list.)

[13:58:32.0000] <caitp>
infinite lists don't sound very useful, no

[13:59:42.0000] <TabAtkins>
They're very useful. Just not in a for-of when you can't actually verify where to manually break.

[13:59:54.0000] <TabAtkins>
Like, I've used prime number generators before - clearly infinite.

[14:00:10.0000] <TabAtkins>
Or just infinite ranges.

[14:01:28.0000] <TabAtkins>
Frex, Bikeshed's ID deduping appends an int to the end fo the ID to make it unique.  It just creates an infinite list starting from 0 and iterators until it finds a non-clashing one.

[14:04:46.0000] <TabAtkins>
s/ors/es/

[14:06:25.0000] <Hixie>
is "let x; let x;" valid?

[14:06:32.0000] <Hixie>
"var x; var x;" is

[14:06:50.0000] <Hixie>
though the second "var x" does sod all

[14:06:59.0000] <TabAtkins>
I don't *think* it is, but I'm not sure.

[14:07:10.0000] <TabAtkins>
var has stupid scoping and nobody cares about it.

[14:07:32.0000] <Hixie>
i care about it, but ok

[14:09:08.0000] <Domenic>
let x; let x; is not valid

[14:09:14.0000] <Hixie>
k

[14:09:15.0000] <Domenic>
in fact var x; let x; is not valid

[14:09:23.0000] <Hixie>
sure that makes sense

[14:11:20.0000] <TabAtkins>
let x; if(...) { let x; } *is* valid, though.

[14:11:25.0000] <TabAtkins>
New scope.

[14:11:45.0000] <TabAtkins>
(As is putting the let inside the if condition - it shares scope with its contents.)

[14:11:48.0000] <Hixie>
sure

[14:11:52.0000] <Hixie>
the case i was looking at was:

[14:12:06.0000] <Hixie>
let x = 0; while (...) { ... }

[14:12:08.0000] <Hixie>
let x = 0; while (...) { ... }

[14:12:20.0000] <Hixie>
where it would be aesthetically pleasing for the let to be valid

[14:12:25.0000] <Hixie>
but it's just as easy to do:

[14:12:26.0000] <Hixie>
let x;

[14:12:30.0000] <Hixie>
x = 0; while (...) { ... }

[14:12:31.0000] <Hixie>
x = 0; while (...) { ... }

[14:13:02.0000] <jyasskin_>
for (let x = 0; ...; ) {...} ?

[14:13:15.0000] <Hixie>
x isn't in the while loop

[14:13:18.0000] <Hixie>
er

[14:13:21.0000] <Hixie>
in the condition

[14:13:26.0000] <Hixie>
it's just an accumulator

[14:13:30.0000] <Hixie>
or similar

[14:13:33.0000] <Hixie>
or a state boolean

[14:13:37.0000] <Hixie>
or any number of other things

[14:14:33.0000] <TabAtkins>
Yeah, you just can't do the repeated let. Do it once and set it twice, instead.

[14:16:10.0000] <Hixie>
classes have no syntax for value properties, right? you have to create the property in the constructor?

[14:16:28.0000] <Hixie>
and there's no privates in classes? not even using Symbols?

[14:16:51.0000] <TabAtkins>
Value properties being "properties on the instance"?

[14:17:12.0000] <TabAtkins>
And what do you mean by "private", specifically? That term is wrapped up in a lot of language-specific baggage, just like "class". ^_^

[14:19:54.0000] <jsbell>
{ let x = 0; while (...) { ... } }

[14:23:17.0000] <Hixie>
TabAtkins: value properties meaning values without getters or setters, which in the case of JS would be on the instance, yes

[14:23:31.0000] <Hixie>
by "private" i mean "not accessible to code outside the class"

[14:23:54.0000] <TabAtkins>
Yes, instance properties are done in the constructor.

[14:24:20.0000] <TabAtkins>
You can implement private state by using WeakMaps.

[14:25:32.0000] <TabAtkins>
(And that'll be easier to use when we figure out relations and their syntax.)

[14:25:54.0000] <Hixie>
how do you do private state with weakmaps?

[14:26:39.0000] <TabAtkins>
You use the instance as the key, and the state as the value.  Then you use standard closure-based data-hiding to only expose the weakmap to the class's own methods.

[14:27:30.0000] <Hixie>
how do you do the latter?

[14:27:42.0000] <Hixie>
(also, that's really ugly)

[14:28:09.0000] <TabAtkins>
(function(){ let x = new WeakMap();  class foo { ... }; })()

[14:28:35.0000] <Hixie>
wouldn't "foo" also be non-visible then

[14:28:49.0000] <TabAtkins>
You can return it.

[14:28:52.0000] <Hixie>
...

[14:28:55.0000] <TabAtkins>
var foo = (...)

[14:29:25.0000] <gsnedders>
Hixie: this is what everyone does

[14:29:39.0000] <TabAtkins>
Some form of "real" private state would involve reifying classes more than we wanted to do at this point.  Maximin classes passed because they're sugar over the existing system.

[14:29:40.0000] <Hixie>
well, nobody actually does this

[14:29:44.0000] <Hixie>
since class { } doesn't work yet

[14:29:49.0000] <Hixie>
but also, everyone says js sucks

[14:29:56.0000] <Hixie>
i was assuming we were trying to fix that :-)

[14:30:01.0000] <TabAtkins>
They (and by that I mean, at least I) do this today with .prototype munging code.

[15:00:15.0000] <Hixie>
annevk: is there a reason to do https://www.w3.org/Bugs/Public/show_bug.cgi?id=27315 other than editorial clarity?

[15:06:11.0000] <caitp>
Hixie: enum will limit the values that can be assigned, whereas DOMStrings won't, so that's useful maybe

[15:06:22.0000] <caitp>
i mean, I guess it's kind of the same, but not really?

[15:06:47.0000] <caitp>
probably a good idea at any rate

[15:07:38.0000] <Hixie>
the spec already doesn't allow invalid values to be assigned

[15:07:41.0000] <Hixie>
so that's not a difference

[15:08:38.0000] <caitp>
well if browsers are implementing it as enums then there isn't much difference

[15:08:56.0000] <caitp>
but if they are then even if it's not a real difference, it would align better with reality?

[15:09:07.0000] <caitp>
i dunno

[15:09:31.0000] <TabAtkins>
The editorial clarify of enums is useful.

[15:09:38.0000] <Hixie>
yes, that much is clear

[15:09:49.0000] <Hixie>
the question is whether this is just an editorial change, or more than that

[15:10:10.0000] <Hixie>
since if it's just editorial, then i can punt it to 2018, if it's something that actually matters, i should look at it now...

[15:12:15.0000] <caitp>
well it sounds like you've decided that it doesn't really matter already, anyway it's time to stop caring about the internet and go make supper.

[15:16:21.0000] <Hixie>
i haven't decided anything, that's why i was asking

[15:19:13.0000] <Hixie>
if i say:

[15:19:27.0000] <Hixie>
foo.Bar = class Bar extends Baz { };

[15:19:39.0000] <Hixie>
does it declare Bar in the local scope?

[15:19:44.0000] <Hixie>
as in, can the next line be:

[15:19:52.0000] <Hixie>
let quux = new Bar();

[15:20:05.0000] <Domenic>
I am 90% sure it does not, but it does declare Bar inside the class body

[15:20:07.0000] <Hixie>
or does using it in an expression mean that only foo.Bar is set to the class?

[15:22:15.0000] <MikeSmith>
caitp: you're implementing js template strings in v8?

[15:22:30.0000] <Hixie>
i'm pretty sure the answer is in http://people.mozilla.org/~jorendorff/es6-draft.html#sec-class-definitions-runtime-semantics-evaluation somewhere

[15:23:04.0000] <Hixie>
i think steps 7 and 8 of the first part not being in the second part means the answer is "no"

[15:23:06.0000] <jorendorff>
Domenic is right, it's just like a function

[15:23:31.0000] <jorendorff>
there is a Bar binding, but only within the scope of the class itself

[15:23:41.0000] <jorendorff>
not the enclosing scope

[15:24:13.0000] <TabAtkins>
Domenic: Hm, I thought it did.  I thought you could declare anonymous classes to avoid that.

[15:24:25.0000] <Hixie>
ok i'm pretty sure the spec supports jorendorff and Domenic here

[15:24:35.0000] <Hixie>
(pity)

[15:24:55.0000] <TabAtkins>
I didn't actually know that `var foo = function bar(){};` didn't also declare a local "bar" variable.

[15:25:04.0000] <jorendorff>
it used to in IE :)

[15:25:23.0000] <jorendorff>
at least, i think it did - there was some horrible bug or other


2014-11-13
[16:10:30.0000] <caitp>
MikeSmith, yeah I'm working on that

[16:17:34.0000] <MikeSmith>
caitp: nice

[17:18:00.0000] <cvrebert>
Focus-on-click isn’t quite cross-platform/browser consistent :-(  https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#Clicking_and_focus https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#Clicking_and_focus

[17:18:56.0000] <MikeSmith>
  

[17:19:01.0000] <MikeSmith>
oofs

[17:22:21.0000] <cvrebert>
MikeSmith: Ah, hello! Would you happen to know if there’s a reason why the CSS validator isn’t on GitHub?

[17:26:54.0000] <MikeSmith>
hey cvrebert

[17:26:58.0000] <MikeSmith>
dunno why not

[17:27:02.0000] <MikeSmith>
/me looks

[17:27:36.0000] <MikeSmith>
cvrebert: btw the CSS validator code is ancient crufty stuff. I really needs to be rewritten

[17:28:02.0000] <MikeSmith>
cvrebert: https://github.com/w3c/css-validator

[17:29:12.0000] <cvrebert>
MikeSmith: Ah, so http://jigsaw.w3.org/css-validator/about.html#code is just way outdated then

[17:29:26.0000] <MikeSmith>
ah yeah

[17:31:01.0000] <MikeSmith>
lemm see if I can redirect that

[17:32:40.0000] <cvrebert>
If http://www.w3.org/Bugs/Public/buglist.cgi?product=CSSValidator wasn’t an apparent blackhole, I would gladly file a bug about it..

[17:34:31.0000] <MikeSmith>
cvrebert: yeah there's nobody been working the CSS validator code for quite a while now. It needs a new owner

[17:46:57.0000] <MikeSmith>
cvrebert: OK fwiw I just set up a redirect to github from that old "browse the code online" link

[17:47:14.0000] <cvrebert>
Progress!

[17:47:37.0000] <MikeSmith>
heh

[19:32:04.0000] <JonathanNeal>
It has taken me a while to realize that Chrome doesn’t use the fulfilled keyword to describe fulfilled promises, e.g. devtools showing me Promise {[[PromiseStatus]]: "resolved", [[PromiseValue]]: "p1-resolve-value"}

[19:32:54.0000] <JonathanNeal>
And I suppose it doesn’t matter, since it is internal. It was just throwing me off, as everywhere else there is no “resolved” state.

[19:33:33.0000] <caitp>
it just means it's fulfilled with a resolved value

[19:33:47.0000] <caitp>
slightly more specific than "fulfilled"

[19:34:04.0000] <caitp>
as opposed to fulfilled with a rejected value

[19:41:15.0000] <JonathanNeal>
caitp: hmm, but I thought that was called “settled” http://www.html5rocks.com/en/tutorials/es6/promises/

[19:44:32.0000] <caitp>
hmm, yeah my lingo is probably out of date by now

[19:45:12.0000] <caitp>
> A promise is resolved if it is settled or if it has been "locked in" to match the state of another promise. Attempting to resolve or reject a resolved promise has no effect. A promise is unresolved if it is not resolved. An unresolved promise is always in the pending state. A resolved promise may be pending, fulfilled or rejected.

[19:46:13.0000] <caitp>
so in that sense, its pretty vague :p

[19:48:13.0000] <JonathanNeal>
“A promise is unresolved if it is not resolved” beautiful.

[19:53:03.0000] <JonathanNeal>
MikeSmith: are you keen on Promise lingo?

[19:56:37.0000] <JonathanNeal>
> The first argument fulfills the promise, the second argument rejects it — but the first argument is called resolve and the second argument is called reject. nonsense!

[20:28:04.0000] <MikeSmith>
JonathanNeal: keen on it? meaning, do I like it?

[20:28:43.0000] <JonathanNeal>
Can you explain the difference between fulfill, resolve, and reject as it relates to the status of promises and the methods we use to trigger them?

[20:31:15.0000] <JonathanNeal>
*as it relates to the states of a Promise, and as it relates to the arguments commonly described as triggering these states?

[20:32:24.0000] <JonathanNeal>
There’s another mark against the Chrome devtool report. It calls the state the PromiseStatus.

[20:33:11.0000] <caitp>
based on my reading of the spec I was just wrong before, although I could have sworn `fulfilled` had been used to mean any non-pending state before

[20:33:14.0000] <caitp>
maybe i

[20:33:16.0000] <caitp>
am just crazy

[20:33:34.0000] <caitp>
or human and misremembering :)

[20:34:58.0000] <caitp>
i guess domenic is probably sleeping by now but maybe he'd have something to say about it

[20:36:14.0000] <MikeSmith>
JonathanNeal: yeah Domenic would be the one to ask, if you want an insightful answer

[20:37:59.0000] <JonathanNeal>
I’m probably extra confused because the documentation is mixed up (or seems that way). MDN docs call something an “executor” when other docs call it a “resolver”, and Chrome calls something a “PromiseStatus” when other docs call it a “state”. Add that to “wait, does fulfill means it passed succesfully or just finished? or is that what

[20:38:00.0000] <JonathanNeal>
resolved means?”

[20:39:20.0000] <caitp>
status and state don't seem too bad to me :p arent they basically synonyms?

[20:39:20.0000] <JonathanNeal>
Thanks caitp, MikeSmith. Sorry if I sounded like a crazy person walking the streets pulling their hair

[20:40:42.0000] <MikeSmith>
heh, no worries

[20:40:43.0000] <JonathanNeal>
caitp: it doesn’t seem to bad until Chrome’s PromiseStatus returns something that is never referred to as a state, “resolved”. The only states are “pending”, “fulfilled”, and “rejected”.

[20:40:56.0000] <caitp>
if you sounded like a crazy person I'd be relieved i'm not the only one :p kidding kidding

[20:42:28.0000] <JonathanNeal>
So I’m just pretending that “resolved” means “not pending, either fulfilled or rejected”, and we should be writing promises like so, new Promise(function (fulfill, reject) { /* magic */ });

[20:43:42.0000] <caitp>
i think you can pretty much write a promise however you want, the bindings don't matter much. but "resolve" and "reject" would be the common ones

[20:44:58.0000] <caitp>
most people aren't going to actually read the spec so it's only really going to matter what it means to them and their own vocabulary

[20:49:08.0000] <JonathanNeal>
caitp: yea, as long as they’re consistent, e.g. `.then(onResolved, onRejected)` or working alone.

[20:52:46.0000] <caitp>
you could call them \u1d19esolve if you wanted

[20:53:32.0000] <caitp>
people would be mad if you did, but you could do it

[20:55:06.0000] <JonathanNeal>
http://unicodesnowmanforyou.com/

[20:56:39.0000] <caitp>
that is my new favourite codepoint

[00:44:34.0000] <MikeSmith>
caitp: ☃

[01:09:10.0000] <annevk>
Hixie: it's editorial

[01:11:05.0000] <zcorpan>
i decided to check g+. latest news is annevk "Fullscreen for the web. Thoughts?﻿" from Oct 15, 2011

[01:11:39.0000] <annevk>
zcorpan: I'm still waiting :p

[01:12:27.0000] <zcorpan>
or it seems it's not the latest, just at the top

[03:26:47.0000] <JakeA>
annevk: so on "no-cors" vs "nocors", what's the precedent for nospacesorcamelcase?

[03:55:07.0000] <annevk>
JakeA: arraybuffer

[03:55:17.0000] <annevk>
JakeA: but I guess lowercase and sometimes a hyphen is fine

[03:57:36.0000] <jgraham>
So when does js get an enum type? :p

[04:03:44.0000] <Ms2ger>
annevk, if you're okay with my replies in https://critic.hoppipolla.co.uk/r/3127 , please resolve the issues :)

[04:26:28.0000] <annevk>
"Sign in" ugh

[04:26:41.0000] <annevk>
jgraham: could we do it in a IDL-compatible way?

[04:27:12.0000] <jgraham>
?

[04:34:19.0000] <annevk>
jgraham: introduce actual enums that are compatible with IDL enums

[04:37:04.0000] <jgraham>
I don't know, but I would imagine so

[04:55:38.0000] <Ms2ger>
zcorpan, r? https://critic.hoppipolla.co.uk/r/3126

[04:56:41.0000] <zcorpan>
Ms2ger: done

[04:57:06.0000] <Ms2ger>
Takk

[05:12:54.0000] <JakeA>
annevk: bit confused about https://github.com/slightlyoff/ServiceWorker/issues/560#issuecomment-62886149 - are you fine with the current model where security is based on the response?

[05:13:11.0000] <annevk>
JakeA: I think it is a fundamentally better model

[05:13:42.0000] <JakeA>
annevk: completely agree

[05:14:10.0000] <annevk>
JakeA: a synthetic response is never opaque so basically can always be read from

[05:14:16.0000] <annevk>
JakeA: so is basically always same-origin

[05:14:44.0000] <JakeA>
annevk: yep. The current model works fine. If we move to a redirect model it gets really confusing & full of exception cases

[05:16:15.0000] <JakeA>
annevk: ta. If moz see no benefit in this then that's all the more reason push back

[05:16:35.0000] <JakeA>
annevk: tbh I kinda wish CSP was response based too

[05:21:08.0000] <annevk>
JakeA: I think Mike West and I discussed this and found we needed to adjust CSP to check on both ends

[05:21:19.0000] <annevk>
JakeA: hasn't happened yet though

[05:21:38.0000] <JakeA>
annevk: yeah, I remember that, or have had a similar conversation myself

[05:21:46.0000] <annevk>
JakeA: there's also still some desire for strong coupling between request context and response

[05:22:17.0000] <annevk>
JakeA: so you can do fetch(... {context:"image"}) and the response object is tainted in such a way it can only be used in one place

[05:22:45.0000] <annevk>
JakeA: similar to what event.default() allows for, but with caching capabilities

[05:26:57.0000] <JakeA>
annevk: good for prioritisation too

[05:28:09.0000] <annevk>
JakeA: for the no CORS case however it does seem like changes are required for <img>, <script>, etc.

[05:28:22.0000] <annevk>
JakeA: which is probably why Chrome is hesitant and Firefox might be too

[05:28:52.0000] <JakeA>
annevk: how so?

[05:29:01.0000] <annevk>
JakeA: I guess this might be true for the CORS case as well, depending on how getRequestHeader() checks are implemented

[05:29:34.0000] <annevk>
JakeA: <img src/test> is no CORS, if it's same origin it's not opaque and you can paint and export from <canvas>

[05:29:48.0000] <annevk>
JakeA: if the SW returns a cross-origin images however, you should no longer be able to export from <canvas>

[05:30:05.0000] <JakeA>
annevk: right, so it's based on the taint flag of the response

[05:30:29.0000] <annevk>
JakeA: traditionally the browser would have noticed that as a redirect, but due to SW it won't and so might think it's same origin and still pain and export from <canvas> and have a security hole

[05:30:38.0000] <annevk>
paint*

[05:30:54.0000] <annevk>
I suspect that's the case they're worried about

[05:31:56.0000] <jgraham>
JakeA, annevk: Any opinions on https://critic.hoppipolla.co.uk/showfile?path=apisample16.html&review=2005&sha1=9d1f8984e3b37285f5d117a785b347a28d446006 ?

[05:32:04.0000] <jgraham>
Example test for service workers

[05:32:11.0000] <JakeA>
yeah, same goes for CSS DOM access

[05:32:13.0000] <jgraham>
Does it seem like a sane API?

[05:32:44.0000] <annevk>
There's a somewhat similar case with XHR and mode CORS; if the request URL was / but the response was actually CORS, would the browser let it read headers it is not allowed to?

[05:33:04.0000] <annevk>
Per Fetch with its internal response model and such it wouldn't... but...

[05:35:25.0000] <annevk>
jgraham: I like how you recreated callback-hell with promises

[05:36:26.0000] <JakeA>
jgraham: can you have asserts within a promise test?

[05:37:35.0000] <jgraham>
annevk: *I* didn't do anything

[05:37:45.0000] <annevk>
jgraham: I don't see anything obviously wrong, but you really want JakeA's opinion here

[05:38:01.0000] <jgraham>
i.e. I didn't create this API, I'm just reviewing it

[05:38:06.0000] <jgraham>
Which is difficult…

[05:39:07.0000] <jgraham>
JakeA: Yeah, so see https://critic.hoppipolla.co.uk/showfile?path=apisample13.html&review=2005&sha1=9d1f8984e3b37285f5d117a785b347a28d446006 for examples of the promise_test function

[05:39:41.0000] <JakeA>
jgraham: what am I reviewing here? Am I reviewing correct use of ServiceWorker or use of promise_test?

[05:39:52.0000] <jgraham>
annevk: Although of course the original design of testharness.js is my fault and might not be what you would design today

[05:40:54.0000] <jgraham>
JakeA: Both of those sound useful. Also if this seems like it's going to be a sane foundation for writing promise/service-worker based tests in the future

[05:41:16.0000] <jgraham>
JakeA: The top level review is https://critic.hoppipolla.co.uk/r/2005 if you want more context

[05:41:23.0000] <JakeA>
Gotcha, cheers!

[05:43:34.0000] <annevk>
jgraham: why when under commits I click [full] do I have to confirm again I want to see everything?

[05:44:21.0000] <jgraham>
annevk: Ask jl :p But I think the idea is that [Full] means "fully squashed", but you still might not want to see every file

[05:44:57.0000] <annevk>
jgraham: is it not jw now?

[05:45:21.0000] <zcorpan>
nope

[05:47:09.0000] <jgraham>
Some things change, some stay the same

[05:51:54.0000] <JakeA>
jgraham: SW code looks solid. Had to double check updatefound always fires after register resolves, which is does. How does fetch_tests_from_worker work?

[05:57:18.0000] <zcorpan>
i haven't looked at the SW thing, but how does it relate to https://critic.hoppipolla.co.uk/r/1996 ?

[05:59:02.0000] <jgraham>
JakeA: I haven't reviewed all the implementation details, but the basic idea is that test objects in the worker send their results to the main window over message ports. fetch_tests_from_worker sets up that machinary.

[06:00:11.0000] <JakeA>
makes sense

[06:00:13.0000] <jgraham>
zcorpan: Interesting question. I think the answer is that it replaces it, although there are some ideas there which could perhaps be ported to this new scheme

[06:00:52.0000] <annevk>
jgraham: that setup might not work if the SW is just servicing a worker

[06:01:12.0000] <annevk>
(everyone always forgets about that case :( )

[06:01:25.0000] <annevk>
(I suspect it'll be buggy as hell)

[06:01:46.0000] <jgraham>
annevk: Interesting. So is the setup window -> worker -> service worker? Or is there no window at all?

[06:02:06.0000] <annevk>
jgraham: there's likely a window

[06:02:11.0000] <jgraham>
"likely"?

[06:02:52.0000] <annevk>
jgraham: there's some not well defined exception for SharedWorker where when you navigate it may or may not be associated with something

[06:03:55.0000] <annevk>
jgraham: but the more important point is that a SW can service a worker without servicing that worker's window

[06:03:55.0000] <jgraham>
OK, it seems like a solvable problem, as long as there is actually a Window somewhere

[06:04:25.0000] <jgraham>
Because the worker can pass the result messages up to the Window

[06:04:35.0000] <annevk>
in the shared worker navigate case you could prolly test that with a nested browsing context that navigates and the top-level negotiating all the details...

[06:04:44.0000] <annevk>
although that way you'd never test the top-level...

[06:06:46.0000] <jgraham>
JakeA: Thanks for your help

[06:06:56.0000] <JakeA>
no worries

[07:27:26.0000] <wanderview>
JakeA: sorry for issue 550 :-\

[07:27:40.0000] <JakeA>
wanderview: ALL YOUR FAULT :D

[07:28:05.0000] <JakeA>
Labouring over a reply, don't know what to think anymore

[07:28:26.0000] <wanderview>
JakeA: at this point I don't know if a change is possible given ship dates, etc

[07:28:41.0000] <wanderview>
or desirable

[07:28:44.0000] <JakeA>
wanderview: do you still think they're useful for responses?

[07:28:55.0000] <wanderview>
JakeA: are what still useful?

[07:29:08.0000] <JakeA>
wanderview: consuming by default

[07:30:21.0000] <JakeA>
wanderview: If we shipped with .clone, we could make it a no-op the next version, eventually deprecate it. I'm not too worried there

[07:30:37.0000] <JakeA>
I guess it's useless for requests because they're buffered by default anyway because of redirects within fetch

[07:30:52.0000] <wanderview>
JakeA: so to be clear... I was thinking leave .clone() in place, but say fetch() and cache.put() automatically call it for you

[07:31:24.0000] <wanderview>
so content can still clone() in order to call the stream helpers multiple times

[07:31:32.0000] <JakeA>
(although if you were streaming a video, you'd want to avoid buffering the body even for fetch, but as annevk said that would be optional)

[07:32:08.0000] <wanderview>
JakeA: also, fetch() and cache.put() would still reject if the body was already consumed by something else when the auto-clone() was attempted

[07:32:41.0000] <JakeA>
wanderview: So if I'm storing a 1gb movie into the cache, but also sending to the browser, is auto-clone a problem?

[07:32:44.0000] <wanderview>
JakeA: maybe we leave it with clone() for now and then deprecate as you say later if developers complain

[07:33:08.0000] <wanderview>
JakeA: well, content would have to call clone() anyway, right?

[07:33:12.0000] <wanderview>
same effect

[07:33:39.0000] <JakeA>
In the current model I'd clone the version going to the browser but use the main one for the cache, so there'd only be buffering if the browser/cache consumed slower than the other

[07:34:02.0000] <JakeA>
If I cloned both, there's now an additional response object that *could* have its body read from the start

[07:34:14.0000] <wanderview>
hmm

[07:34:20.0000] <wanderview>
everything is terrible

[07:34:38.0000] <wanderview>
JakeA: yea, I see your point

[07:34:42.0000] <JakeA>
A super-smart implementation could go "oh, I'm saving this to cache, so I guess I can get it from there if I need to read-from-start"

[07:35:19.0000] <wanderview>
JakeA: I think that is made more difficult by the "only goes in cache when its fully consumed" semantics

[07:35:28.0000] <wanderview>
or fully loaded

[07:35:30.0000] <JakeA>
Or alternately "this is big so I'm going to buffer on disk rather than memory". But I guess a disk buffer of 1gb + a cache of 1gb is still a problem

[07:35:52.0000] <JakeA>
wanderview: I'm interested in changing that

[07:36:00.0000] <JakeA>
Or at least having it as a .match option

[07:36:14.0000] <wanderview>
JakeA: I think you have convinced me that we should leave explicit clone as is for v1... and we can introduce auto-clone in the future

[07:36:35.0000] <wanderview>
if the API is too clunky

[07:36:40.0000] <JakeA>
Glad I convinced you. I haven't convinced me :D

[07:36:51.0000] <JakeA>
But yeah, it's bad options all around

[07:37:11.0000] <JakeA>
We shouldn't feel bad about it, even when we reached out to devs for opinion they were split down the middle

[07:37:31.0000] <wanderview>
JakeA: well, its unclear which is best... but if I understand correctly blink wants to ship soon, so favoring no changes seems better... and we have a path to switch in this direction

[07:37:38.0000] <JakeA>
As you say, it's easier to go from manual clone to auto clone than the other way around

[07:37:47.0000] <JakeA>
yep

[07:37:49.0000] <wanderview>
JakeA: if we go with auto-clone now, we can't switch to explicit clone later

[07:37:54.0000] <wanderview>
yea

[07:38:21.0000] <JakeA>
I'll write this up on the ticket

[07:38:27.0000] <wanderview>
JakeA: thank you!

[07:38:33.0000] <wanderview>
sorry for my confusion/waffling

[07:38:37.0000] <wanderview>
I didn't get much sleep last night

[07:38:53.0000] <JakeA>
Me neither so we're probably both talking nonsense

[07:39:04.0000] <wanderview>
perfect... ship it!

[07:39:31.0000] <wanderview>
/me goes to get more coffee...

[07:41:33.0000] <annevk>
JakeA: I like the auto-clone from wanderview

[07:41:49.0000] <annevk>
JakeA: and then have an option for these cases to not do it, just as we plan for redirects/failure

[07:42:28.0000] <annevk>
JakeA: having said that, cache.match() prolly doesn't need it since you never need to look at the body there

[07:42:56.0000] <annevk>
JakeA: so it would only be for cache.put() and we could require .clone() for that, seems somewhat reasonable?

[07:45:11.0000] <JakeA>
annevk: .match doesn't consume body

[07:45:33.0000] <annevk>
/me read up on the issue debate

[07:45:55.0000] <JakeA>
annevk: See the chat between wanderview & I from 15:27 ^^

[07:46:21.0000] <JakeA>
Although I'm currently writing a summary

[07:47:51.0000] <wanderview>
annevk: JakeA talked my off the auto-clone ledge

[07:47:58.0000] <annevk>
JakeA: I think the pesky thing with all of this is that we already have auto-clone

[07:47:59.0000] <wanderview>
^my^me

[07:48:06.0000] <wanderview>
annevk: we do?

[07:48:12.0000] <annevk>
JakeA: the 10GiB resource case requires a new feature already

[07:48:16.0000] <annevk>
wanderview: yes, Fetch does it

[07:48:32.0000] <annevk>
wanderview: so if you hit a redirect or authentication dialog, you can resubmit the body

[07:48:38.0000] <wanderview>
annevk: but thats not on content observable objects, right?

[07:48:50.0000] <wanderview>
from contents perspective it made one call

[07:48:56.0000] <annevk>
wanderview: yes

[07:49:07.0000] <annevk>
wanderview: but content might not like the memory bloat if it deals with something large

[07:49:45.0000] <wanderview>
to me that seems a consequence of implementing redirects... developers can choose not to host huge things behind redirects

[07:50:07.0000] <annevk>
wanderview: the problem is that you need to clone before you even know there is a redirect

[07:50:14.0000] <wanderview>
true

[07:50:16.0000] <annevk>
wanderview: you always need to clone, for every fetch

[07:50:37.0000] <annevk>
wanderview: and potentially multiple times if there's a redirect chain (pathological case)

[07:51:15.0000] <wanderview>
I go back to me "everything is terrible" statement

[07:51:21.0000] <wanderview>
^me^my

[07:51:26.0000] <wanderview>
/me can't type today.

[07:51:33.0000] <annevk>
Is that part of a new Lego movie?

[07:52:15.0000] <annevk>
This is why shipping early for something so big is a mistake, I don't think we've had sufficient iteration :-(

[07:52:37.0000] <annevk>
/me is away for a bit

[07:52:56.0000] <wanderview>
annevk: given that we can introduce auto-clone for cache later, but not the other way around... I'm inclined to stick with explicit clone() for now

[07:56:35.0000] <JakeA>
annevk: wanderview: summary at https://github.com/slightlyoff/ServiceWorker/issues/550#issuecomment-62913664

[07:57:24.0000] <JakeA>
I get the "not enough iteration" thing, but also we could sit on this for years and improve it in small ways and not actually benefit the web because it isn't in browsers.

[07:57:46.0000] <JakeA>
I guess the question is have we had enough iteration to be out of the danger zone

[07:58:02.0000] <wanderview>
thanks!

[07:58:33.0000] <wanderview>
JakeA: back to that original issue's question, though... I still think maybe we should not reject/mark used if there is no body... what do you think?

[07:59:43.0000] <wanderview>
since there may be cases where content knows a request has no body, etc... var reusableRequest = new Request('./my/url')

[08:21:17.0000] <JakeA>
wanderview: no strong opinion (as I'd always clone for safety).

[08:21:38.0000] <wanderview>
k

[08:24:22.0000] <JakeA>
wanderview: tempted to say consume for the consistency

[08:24:30.0000] <JakeA>
But can be easily swayed

[08:25:08.0000] <wanderview>
JakeA: the thing that made me think of this was the blink cache tests... they create an array of Request/Response pairs and then populate a cache for each test case... seemed silly to require a clone for all these requests with no body

[08:26:06.0000] <wanderview>
JakeA: like this:  https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/LayoutTests/http/tests/serviceworker/resources/cache-match-worker.js

[08:29:50.0000] <JakeA>
Hmm true. Will ask a few people what they think, but yeah, no strong opinion

[08:35:57.0000] <wanderview>
thanks

[08:35:59.0000] <wanderview>
/me lunches

[08:43:55.0000] <annevk>
"Tab Many Cooks™" heh

[08:44:24.0000] <annevk>
I wonder what meme I missed that makes people routinely change their names on Twitter

[08:47:15.0000] <tantek>
annevk - it's particularly funny if you retweet a lot - because twitter doesn't show your @-name if you retweeted something, just retweeted by "long form name"

[08:47:24.0000] <tantek>
pretty sure that's why people do it

[10:01:54.0000] <TabAtkins>
tantek: Nah, I just do it because it's funny.

[10:02:03.0000] <JakeA>
I've almost tweeted "not cool enough to change my Twitter name daily" but worried people will think it's a dig

[10:02:08.0000] <JakeA>
which to be fair, it is

[10:02:10.0000] <TabAtkins>
annevk: The Halloween twittername meme finally got big this year. I've been doing it the last 3 years.

[10:02:27.0000] <TabAtkins>
Jenn Schiffer changes her display name every week or so.

[10:02:44.0000] <TabAtkins>
There's a Twitter bot (@js_usernames) that tweets her name changes, in case you miss it. ^_^

[10:06:05.0000] <TabAtkins>
caitp: You have the terminology wrong.  "resolved" vs "unresolved" are fates - a promise is "resolved" if it's fulfilled, rejected, or slaved to another promise; it means that whatever's going to happen to it is already decided, and can't be changed by more calls to the resolver functions.  "fulfilled", "rejected", and "pending" are mutually-exclusive states

[10:06:06.0000] <TabAtkins>
that a promise can be in.

[10:06:58.0000] <caitp>
didn't we cover this last night? :p

[10:07:46.0000] <TabAtkins>
I'ts possible - I was skimming scrollback and saw you talking with JonathanNeal about it. If you were corrected, sorry, I missed it.

[10:08:40.0000] <JonathanNeal>
I didn’t correct anybody. I was and am still a little lost. I hope I didn’t sound like I was correcting anyone.

[10:09:40.0000] <JonathanNeal>
but your bit of explanation did help, TabAtkins

[10:09:57.0000] <TabAtkins>
Cool.

[10:10:30.0000] <TabAtkins>
"resolved" and "unresolved" just mean "can I still call resolve()/reject() or not".

[10:10:47.0000] <TabAtkins>
(I mean, you can always call them. It's just a no-op if the promise is already resolved.)

[10:11:53.0000] <caitp>
i corrected myself

[10:12:06.0000] <TabAtkins>
caitp: All right, sorry for the noise then. ^_^

[11:00:59.0000] <caitp>
is there any way in IDL to specify if an attribute is supposed to be enumerable or not? are IDL properties supposed to be "own" properties, or do they live on the interface prototype?

[11:01:01.0000] <caitp>
*confused*

[11:04:47.0000] <smaug____>
caitp: attributes are getters/setters in the prototype

[11:05:14.0000] <smaug____>
(by default)

[11:07:04.0000] <smaug____>
caitp: http://heycam.github.io/webidl/#es-attributes

[11:08:13.0000] <caitp>
seems like blink is doing something wrong here then

[11:08:18.0000] <caitp>
i don't think that's really surprising though

[11:08:22.0000] <caitp>
i recall this was a known bug

[11:08:31.0000] <smaug____>
yes, blink is doing all wrong with attributes

[11:08:51.0000] <caitp>
blink doing wrong thing -> bug gets filed on us because safari (and firefox) do it differently and correctly ;)

[11:09:20.0000] <smaug____>
hmm, I thought webkit had the same behavior as blink still

[11:09:21.0000] <caitp>
can't make everyone happy I guess

[11:09:42.0000] <TabAtkins>
Blink has been trying for a while to get things fixed, but micro-benchmarks that regress when we do keep stopping us.  We keep trying, though!

[11:11:12.0000] <caitp>
but these properties should be enumerable though right?

[11:11:16.0000] <caitp>
or is that not the case

[11:11:38.0000] <TabAtkins>
I don't think they're enumerable normally?

[11:11:46.0000] <caitp>
hm

[11:15:06.0000] <caitp>
*WONTFIX-es bug :3*

[11:15:09.0000] <caitp>
that is so satisfying

[11:15:40.0000] <smaug____>
" The property has attributes { [[Get]]: G, [[Set]]: S, [[Enumerable]]: true, [[Configurable]]: configurable }, where" ...

[13:27:44.0000] <afa>
crazy thought.  so far as i know, there's no way to transition position, but it's something i find myself wanting to do all the time (e.g. let the browser calculate the position of an item in a list, but let me tell that item to move to a fixed position when the user interacts with it)

[13:28:14.0000] <afa>
it's something that you could carefully fake with JavaScript (though I'm always skeptical of the performance implications of scripting animation in JS)

[13:28:38.0000] <TabAtkins>
afa: This was the idea of "layout transitions" that I've been noodling on for a year or two.

[13:28:55.0000] <afa>
but given that the charter of the standards bodies seems to be "pave the cowpaths", how crazy would it be to come up with a spec for transitioning on position

[13:29:07.0000] <afa>
TabAtkins: good.  i can't imagine this is a novel idea

[13:29:15.0000] <TabAtkins>
Turns out to be too hard to do in purely-declarative syntax to be worth it, but we've come up with some tools that make the JS side way easier to work with.

[13:29:26.0000] <afa>
i'm often surprised at how many things that you intuitively want to do take a shitton of work to implement in browser

[13:29:49.0000] <afa>
TabAtkins: anythign i should be looking at?

[13:29:58.0000] <TabAtkins>
Yup, there's often a huge cliff you have to fall off before you reach something you can actually tweak.  The EWM is about reducing that.

[13:30:07.0000] <afa>
EWM?

[13:30:17.0000] <TabAtkins>
afa: Nah, dont' have anything written up publicly.  Just ideas thrown around with my fellow implementors.

[13:30:23.0000] <TabAtkins>
Extensible Web Manifesto.

[13:31:15.0000] <afa>
thanks

[13:31:36.0000] <afa>
TabAtkins: nothing you've written up publicly, but any "tools that make the JS side easier to work with"?

[13:32:08.0000] <TabAtkins>
I'm referring to APIs we'd build into the browser for it, such as giving the ability to stop an element from painting, and take "snapshots" of an element for doing animations with.

[13:32:23.0000] <afa>
whenever i have to calculate the fixed position of an asset my rolling up all its relative positions inside scroll panes, that feels super brittle

[13:33:16.0000] <afa>
i'd love to be able to say "you know where you are, now just transition over to here (in fixed/viewport space)"

[13:34:31.0000] <roc>
getBoundingClientRect should give you that

[13:35:13.0000] <TabAtkins>
roc: That doesn't give you useful coordinates to use to tell it to transition to.

[13:35:20.0000] <TabAtkins>
But your geometry extensions would.

[13:35:33.0000] <TabAtkins>
Since you can translate a screen-space point into an element-space point.

[13:35:47.0000] <TabAtkins>
(I can't find those, btw - did they ever make it into a spec?)

[13:35:48.0000] <roc>
ah

[13:36:38.0000] <roc>
yes and no. The IDL is in CSSOM-views: http://dev.w3.org/csswg/cssom-view/#the-geometryutils-interface

[13:36:55.0000] <roc>
unfortunately Simon hasn't gotten around to writing the actual text

[13:37:13.0000] <roc>
in the meantime we have shipped it :-/

[13:37:30.0000] <TabAtkins>
Yay!

[13:37:42.0000] <roc>
I don't feel too bad about it since we actually agreed on the list how they should work

[13:37:54.0000] <roc>
but we do need the text

[13:39:43.0000] <roc>
/me emails Simon

[13:44:59.0000] <afa>
https://hacks.mozilla.org/2014/03/introducing-the-getboxquads-api/

[13:45:08.0000] <afa>
thanks roc and TabAtkins


2014-11-14
[16:14:45.0000] <zewt>
bleh, is there a non-pain-in-the-ass way to see which page/script is hosing Firefox these days, like some way to attach the script profiler to the browser

[16:15:18.0000] <zewt>
firefox is persistently in a 3-10-second-delay-per-input CPU chewing state now and I'm not sure what's causing it (and I don't really want to binary search everything)

[16:19:19.0000] <TabAtkins>
No task manager or equivalent in FF?

[16:25:58.0000] <zewt>
i think firefox is upset at my vertical tab plugin, but for reasons that look like they would take a while for me to figure out

[16:26:31.0000] <zewt>
triggering a slow code path or something

[16:34:43.0000] <zewt>
i remember why this is hard now, you can attach the inspector to the browser ... but you can't actually view things like the tab box in it (seems strange--going to the trouble of implementing a browser this way, but not making the development tools actually work on the browser. i'd think that'd be a high priority for their own work)

[16:38:03.0000] <birtles>
zewt: not sure if I understand your problem, but did you turn on chrome debugging?

[16:39:43.0000] <zewt>
yeah, I can attach to the debugger and see the tabbrowser, but the tab view itself isn't visible (which is what I think I need to fiddle with)

[16:40:11.0000] <zewt>
which I remember seeing a ticket for fixing the last time I tried to do something like this

[16:40:15.0000] <birtles>
zewt: ok, I don't know them. Does the DOM Inspector add-on do the same thing?

[16:40:26.0000] <birtles>
s/them/then

[16:41:53.0000] <zewt>
it doesn't, just restarted firefox to turn it back on (and to reset the lag; got too bad to do anything)

[16:42:17.0000] <zewt>
(it's a bit glitchy for those elements, which I guess is why they're hidden in the builtin tools, but better glitchy than nothing...)

[16:47:21.0000] <jgraham>
I think some sort of per-tab CPU monitoring is in the works

[16:47:28.0000] <jgraham>
Well it's a rumor I heard at least

[17:39:58.0000] <roc>
the Gecko profiler should solve your problem, though I admit it's not the most user-friendly tool

[17:45:04.0000] <zewt>
i tried it, but i think it only gave a red herring (some noise in the tabbrowser, but after a restart and things are fast again, the profile results are identical)

[17:47:09.0000] <roc>
that suggests the problem was in some thread that it doesn't monitor :-(

[17:47:32.0000] <roc>
though that wouldn't explain why it was causing laggy response to input

[17:48:42.0000] <zewt>
not leaping at the thought of making a debug build

[17:49:29.0000] <zewt>
(opening menus was taking 10-20 seconds, so I could hit it then break in the debugger and see where I end up ... but i could just land in the JS VM somewhere, heh)

[00:52:54.0000] <zcorpan>
roc: i'm sorry. it's high on my todo list now though

[00:55:24.0000] <roc>
zcorpan: it's OK. how can I help?

[00:57:24.0000] <zcorpan>
roc: i don't know right now. i plan to reverse engineer the impl. maybe you can give me relevant pointers to the source code?

[00:58:35.0000] <roc>
you shouldn't need to do that

[01:02:48.0000] <roc>
zcorpan: there's an email thread in www-style titled "Behavior of getBoxQuads, convert*FromNode" which I replied to with some information

[01:03:50.0000] <roc>
zcorpan: basically if you search for "getBoxQuads" in www-style there are several threads with issues and resolutions

[01:04:23.0000] <roc>
if you have any questions, ask me instead of trawling through source

[01:04:36.0000] <zcorpan>
roc: yep. they are "unread" in my inbox :-)

[01:05:43.0000] <annevk>
So memes on Twitter have it that WebRTC in the IETF will require both H264 and V8

[01:29:14.0000] <zcorpan>
http://www.w3.org/TR/mixed-content/#references references a whatwg spec

[01:33:33.0000] <JakeA>
2014 was the year the w3 first referenced a whatwg spec. By 2016 the machines had taken over.

[01:34:36.0000] <danbri>
new W3C TR style rules: all normative references to external living standards MUST blink

[01:39:34.0000] <annevk>
zcorpan: Fetch has no fork

[01:43:37.0000] <annevk>
http://open.blogs.nytimes.com/2014/11/13/embracing-https/ does this mean NYT will use TLS?

[02:01:56.0000] <matijs>
By the end of 2015… :)

[02:54:56.0000] <JakeA>
annevk: I'm looking at https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#service-worker-container.1 and wanting to make it non-window specific so we can expose it within workers. All the associated document is used for is url. I'm thinking I should swap this for associated environment settings object and rely on

[02:54:56.0000] <JakeA>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=27146 - does that make sense or am I going in the wrong direction?

[02:55:30.0000] <annevk>
JakeA: makes sense

[02:56:15.0000] <JakeA>
Ta

[03:59:03.0000] <annevk>
JakeA: thanks for working on it

[03:59:17.0000] <annevk>
JakeA: btw, did you follow the conversation where Hixie pointed out dedicated workers should just be a client?

[03:59:35.0000] <annevk>
JakeA: and once navigator.serviceWorker is exposed, that makes perfect sense

[04:00:49.0000] <JakeA>
annevk: yep. I think my past objections were because appcache doesn't treat a dedicated worker as its own thing. But yeah, it should be its own client.

[04:02:09.0000] <JakeA>
annevk: Out of curiosity, what do you use to edit specs? It sounds like heresy, but given that specs are more markup than text, I almost find myself wanting some kind of higher-level editor

[04:05:39.0000] <annevk>
Anolis

[04:06:11.0000] <annevk>
Domenic has a Markdown setup I think

[04:06:19.0000] <annevk>
Through TabAtkins's bikeshed perhaps?

[04:06:45.0000] <annevk>
Study Streams repo

[04:18:10.0000] <JakeA>
Cheers

[04:22:28.0000] <JakeA>
annevk: I've defined navigator.serviceWorker's associated env settings obj as the env settings obj of the currently executing script

[04:22:44.0000] <JakeA>
I feel like I need a reference to "currently executing"

[04:22:52.0000] <JakeA>
Is there a hook for that?

[04:23:59.0000] <annevk>
JakeA: I think what you want to say is that a global has an associated whatever navigator.serviceWorker returns

[04:24:17.0000] <annevk>
JakeA: and then use the global's env settings object

[04:24:38.0000] <annevk>
JakeA: so that whenever a global is constructed a navigator.serviceWorker thingy is constructed to

[04:30:26.0000] <JakeA>
annevk: brilliant, thanks. That was all there but I was getting to env settings via script rather than global. \o/

[04:52:58.0000] <Domenic>
JakeA: I still am using raw HTML through Bikeshed, but dherman and I are working on something to integrate Ecmarkdown https://github.com/domenic/ecmarkdown into it to make it easier to write and read the algorithm steps.

[04:54:05.0000] <JakeA>
Ohh cool. Will look into Bikeshed & keep an eye on ecmarkdown. Ta!

[05:02:55.0000] <smaug____>
hmm, why has the spec changed to require type="popup" and not type="context"

[05:03:26.0000] <smaug____>
/me really misses some blame/annotation for the spec

[05:04:10.0000] <annevk>
smaug____: what spec?

[05:04:17.0000] <smaug____>
HTML

[05:04:43.0000] <annevk>
I don't know what type=popup is

[05:04:55.0000] <smaug____>
menu element

[05:05:02.0000] <annevk>
Ah

[05:11:48.0000] <smaug____>
http://lists.w3.org/Archives/Public/public-whatwg-archive/2012Dec/0264.html apparently

[05:14:44.0000] <annevk>
'Chrome is correct, "popup" the required type value. Firefox, as usual, is ignoring the specification' lolwat

[05:15:38.0000] <smaug____>
yup, had to answer to that

[05:16:39.0000] <JakeA>
annevk: Currently we assign a serviceworker registration to documents, is env settings obj the right thing to replace document with here?

[05:17:01.0000] <annevk>
JakeA: I think you want global object

[05:17:19.0000] <annevk>
JakeA: or env settings obj, yes

[05:17:25.0000] <annevk>
JakeA: they should be 1:1

[05:18:14.0000] <JakeA>
Cheers

[05:18:15.0000] <annevk>
Good rule of thumb is probably that anywhere service worker mentions document, it's wrong

[05:18:27.0000] <JakeA>
hah

[05:20:39.0000] <smaug____>
(missing the context, but the same document can be used for several globals, and a global can be used for 1 or 2 documents)

[06:00:42.0000] <annevk>
JakeA: I thought I'd engage a bit more in that discussion with Joel, just in case we do have to change course

[06:02:40.0000] <JakeA>
annevk: Cool, sounds like he's pretty sold on fixing Chrome rather than breaking the platform more

[07:16:31.0000] <rektide_>
can we please make event-handlers declarative? there is, as far as i am aware, no specification which can enumerate listeners

[07:16:36.0000] <rektide_>
:(

[07:17:33.0000] <rektide_>
i had a newbie i was trying to help make his codeschool life not suck

[07:17:34.0000] <rektide_>
https://gist.github.com/johnelliott/690905bb909347a56941

[07:17:36.0000] <rektide_>
we failed

[07:18:00.0000] <caitp>
:'(

[07:19:08.0000] <caitp>
the way that problem is usually solved is to maintain a collection of listeners for a given event, eg jquery will store this collection in an element's expando

[07:19:19.0000] <caitp>
it's not a very good solution, but it works for them

[07:39:30.0000] <rektide_>
this is one of those dark dank corners of HTML that isn't at all in any way declarative

[07:39:47.0000] <rektide_>
it's entirely invisible imperative

[07:40:08.0000] <rektide_>
:'(

[07:40:54.0000] <rektide_>
(the reason we failed is that getEventListeners is a tool available only to debuggers, with no specification: it was something Moz implemented a long long time ago & which spread... for debuggers)

[07:41:03.0000] <rektide_>
(in case the problem wasn't apparent)

[07:48:48.0000] <TabAtkins>
Domenic: Ah, I didn't realize you were trying to integrate ecmarkdown into Bikeshed.  You should let me know about these things. ^^_

[07:50:10.0000] <TabAtkins>
JakeA: You should absolutely not be editting specs by hand.  Use either Bikeshed or ReSpec (I prefer Bikeshed obvs).

[07:50:58.0000] <Ms2ger>
Use whatever isn't respec :)

[07:52:32.0000] <JakeA>
TabAtkins: Are you around for Chrome Dev Summit? Would be good to see your workflow. I just did a series of editing by hand and now I kinda just want to go to bed and never get up again

[07:56:31.0000] <TabAtkins>
I'm in the office today if that's what you're asking.

[08:08:26.0000] <annevk>
rektide_: what does making them declarative mean?

[08:12:21.0000] <TabAtkins>
JakeA: Yeah, I can show up for CDS.

[08:12:26.0000] <TabAtkins>
It's just over in the Quad.

[08:13:01.0000] <JakeA>
TabAtkins: I may pop over to your desk on Mon/Tues if I get my shit together before CDS

[08:15:57.0000] <TabAtkins>
JakeA: kk

[08:23:11.0000] <JakeA>
TabAtkins: An alternate to Kenji & Ilya's font loading rendering proposal https://github.com/KenjiBaheux/css-font-rendering/issues/11#issuecomment-63088971

[10:26:10.0000] <Hixie>
zcorpan: you around?

[10:26:26.0000] <Hixie>
zcorpan: are you in charge of firing 'scroll' events?

[10:27:13.0000] <jgraham>
(that sounds much funnier than it is supposed to)

[10:38:44.0000] <Hixie>
if you have a WebIDL-defined callback that returns type A

[10:38:48.0000] <Hixie>
and the actual callback returns type B

[10:38:57.0000] <Hixie>
what does Web IDL say should happen? throw TypeError?

[10:40:01.0000] <Hixie>
looks like yes

[10:40:34.0000] <zcorpan>
Hixie: yeah cssom view

[10:42:26.0000] <annevk>
Hixie: yes it would throw

[10:42:47.0000] <annevk>
Hixie: note that there's a number of open bugs around callbacks and rethrowing exceptions, some depending on fixes in HTML

[10:44:04.0000] <annevk>
Hixie: unless it's a promise, then it'd reject, though I'm not sure if that makes sense

[10:45:04.0000] <annevk>
it does make sense

[11:02:26.0000] <Hixie>
bummer, missed zcorpan

[11:02:57.0000] <Hixie>
zcorpan: when you come back, i'm looking at https://www.w3.org/Bugs/Public/show_bug.cgi?id=26839 which involves me firing 'scroll' events at a defined time, and would like to hook into your spec to do this

[11:45:01.0000] <gsnedders>
TabAtkins: I wonder if you could adapt some existing tagger to reasonably do POS tagging of Twitter.

[11:45:11.0000] <gsnedders>
TabAtkins: (assume we limit ourselves to English here)

[11:45:16.0000] <TabAtkins>
Never worked with one, so I dunno.

[11:45:28.0000] <gsnedders>
("you" was really the generic "one" there)

[11:45:55.0000] <gsnedders>
most tagged corpora are done through taggers nowadays, often with human review after

[11:46:14.0000] <gsnedders>
but I dunno if it'll work so well with more informal language, probably containing more typos and more unknown words

[11:46:22.0000] <gsnedders>
I'd be skeptical?

[11:53:38.0000] <rektide>
annevk: making registered event handlers declarative means exposing the registered handler in the DOM

[11:56:05.0000] <Ms2ger>
Anyone know a spec for the enter-to-submit behaviour in forms?

[11:56:48.0000] <tantek>
HTML?

[12:05:04.0000] <Ms2ger>
tantek, where in the kitchen sink? :)

[13:26:20.0000] <annevk>
rektide: odd definition of declarative

[13:28:56.0000] <caitp>
well it's JS, it's imperative --- but they're right, it kinda sucks :)

[13:30:25.0000] <annevk>
inspecting event listeners kinda sucks too, so I guess it's all good

[15:15:13.0000] <rektide>
annevk: by 'kind of sucks' do you mean it sucks for people trying to do it, or it sucks that people try to do it?

[15:15:50.0000] <rektide>
people trying to inspect event emitters

[15:51:33.0000] <Hixie>
why do we have a cancelAnimationFrame()?

[15:51:41.0000] <Hixie>
is that for the times where waiting 16ms is just too long?

[15:53:13.0000] <rektide>
it could be a very long time if the display is off or with dynamic refresh

[15:53:37.0000] <zewt>
if you want to shut something down synchronously you don't want to leave things that'll be fired in the future

[15:53:44.0000] <rektide>
release handles to assets early, release handles to assets often

[15:54:15.0000] <zewt>
if you have a "startRendering()/stopRendering()" api you don't want stopRendering to have to keep track of whether it needs to ignore the next frame (and then remember to not ignore it anymore if startRendering is called before it)

[15:55:37.0000] <zewt>
today's web goal: getting rid of autocomplete=off. tomorrow's goal: getting rid of target=_blank

[15:55:48.0000] <zewt>
(if only)

[15:56:49.0000] <rektide>
if we can land a robot on a comet, we can get rid of the worst target on the web.

[15:57:20.0000] <zewt>
i guess a more practical solution would be tab scoping, so windows opened by a tab appear as a secondary row of tabs inside that tab

[15:57:36.0000] <zewt>
which would make it less obnoxious without actually breaking things

[15:58:48.0000] <zewt>
i had a coworker ask how to make it so it always opens a window and never a tab :(


2014-11-15
[17:01:58.0000] <jamesr_>
Hixie: for posterity, it's useful if you want to tear down things that a pending animation frame wants to reference

[17:03:16.0000] <jgraham>
zewt: That sounds like tree-style tabs or Opera 9 era UI

[17:03:32.0000] <jgraham>
Well I guess it was still possible up to 12

[17:44:48.0000] <TabAtkins>
As much as target=_blank is occasionally annoying, it's useful in enough cases that I still think it's worthwhile.  For example: Twitter.

[19:06:28.0000] <zewt>
but 99/100 uses are abusive

[19:07:51.0000] <zewt>
and really, middle clicking isn't a challenge of dexterity

[22:01:57.0000] <Manishearth>
Hixie: around?

[22:18:05.0000] <Manishearth>
filed https://www.w3.org/Bugs/Public/show_bug.cgi?id=27333 , nvm

[03:10:53.0000] <annevk>
rektide: neither

[03:41:37.0000] <Ms2ger>
zewt, I don't have a middle mouse button on my touchpad

[03:46:37.0000] <annevk>
TabAtkins: that Twitter breaks the back button due to its infinite scrolling is what is bad, I think

[05:31:11.0000] <jgraham>
gsnedders: You seem to have 3 r+d reviews for html5lib that were never merged

[06:16:40.0000] <gsnedders>
jgraham: which?

[06:17:05.0000] <gsnedders>
jgraham: also I'd rather sort out expected failures before merging anything

[06:33:40.0000] <Ms2ger>
MikeSmith, can you update the link at https://www.w3.org/Bugs/Public/enter_bug.cgi?product=WebAppsWG&component=DOM ?

[07:12:31.0000] <MikeSmith>
Ms2ger: ok, changed

[07:20:08.0000] <Ms2ger>
有難う

[08:17:43.0000] <smaug____>
how do I see older changes to the HTML spec than what https://html5.org/tools/web-apps-tracker lists?

[08:18:42.0000] <smaug____>
ah, manually changing the rev number

[08:24:54.0000] <GPHemsley>
/me pokes Ms2ger with Bugzilla

[08:48:57.0000] <zewt>
Ms2ger: that's your/your browser's UI problem

[08:50:30.0000] <zewt>
(shift-click, right-click/open in tab, etc. are usually the same thing)

[08:55:33.0000] <jsx>
Why is fragid 'top' defined in the spec to denote the top of the document, when already just # did that?

[08:55:50.0000] <TabAtkins>
zewt: Middle clicking is a challenge when you're using a touchpad. Even right-clicking (to hit "Open In New Window" from the menu) is occasionally chancy; I've accidentally single-clicked plenty of times.

[08:56:21.0000] <TabAtkins>
jsx: # doesn't do that.

[08:56:29.0000] <TabAtkins>
# does *nothing*. It doesn't take you to the top.

[08:57:44.0000] <jsx>
But it does :(

[08:58:15.0000] <jsx>
TabAtkins: Clicking a link with just # takes you to the page top, right?

[08:58:23.0000] <jsx>
Am I missing something?

[08:58:28.0000] <TabAtkins>
Oh, so it does.

[08:58:39.0000] <zewt>
TabAtkins: the random-new-tab disease is so rampant I'd take a one-time permission thing for the 1% web-app-like applications where it makes sense to the nonsensical, basically random behavior today

[08:59:38.0000] <zewt>
a strange case: amazon.com's search results open normally ... but amazon.co.jp's search results open new tabs. o_O

[09:02:28.0000] <zewt>
"#" is pretty commonly used as a "don't care" placeholder in script-driven links (commonly causing that problem where a broken script won't cancel and lands you at the top); i assume there's some benefit to having one that explicitly means top

[09:06:40.0000] <jsx>
Oh, so in the future, browsers might just ignore #? I was hoping to know why the spec writers thought defining top was beneficial.

[09:06:53.0000] <zewt>
don't know, just conjecturing

[09:08:16.0000] <gsnedders>
jsx: do browsers currently implement top? have they done for a while? it may well simply be de-facto expected behaviour, and that's why it's speced

[09:08:37.0000] <zewt>
IE9 does it, so it's probably just defining what browsers do

[09:09:30.0000] <jsx>
oh, is that what 'normative' means to in specs?

[09:09:37.0000] <jsx>
*means

[09:10:30.0000] <TabAtkins>
"normative" means "these are actual rules", as opposed to "informative", which means "we're just explaining stuff here, don't try to get implementation rules out of this section".

[09:11:22.0000] <jsx>
ok

[09:11:31.0000] <jsx>
thanks :)

[09:48:38.0000] <Ms2ger>
GPHemsley, ?

[10:27:42.0000] <GPHemsley>
Ms2ger: https://bugzilla.mozilla.org/show_bug.cgi?id=568516

[10:29:21.0000] <annevk_>
Why do we have a bug tracking an out-of-date fork of HTML?

[10:37:13.0000] <GPHemsley>
annevk: Because until today no one had edited it for a while.


2014-11-16
[13:15:52.0000] <The-Compiler>
Not directly related to the WhatWG, but is there some document saying how I should handle file downloads when writing a browser? E.g. in most cases I already get the open network reply and I'm asking the user for a filename - if I don't start reading the reply before the user decided on a name, the server might close the connection. Should I just start downloading to a temporary file and then rename that when

[13:15:54.0000] <The-Compiler>
the user entered a filename? Should I slowly download to RAM?

[13:51:20.0000] <Domenic>
The-Compiler: I believe that most implementations use a temporary file anyway, so that users don't have partial downloads with the name they've given.

[14:03:50.0000] <The-Compiler>
Domenic: that's true, but those are already in the directory the user choosed I believe. I guess downloading a whole download to /tmp isn't a good idea either, as users might have that on a ramdisk.

[14:04:10.0000] <Domenic>
The-Compiler: my browsers download to /tmp

[14:10:46.0000] <The-Compiler>
Domenic: I just took a look at Firefox with strace - if I understand it correctly, it starts downloading to /tmp and then switches over to the real destination folder when the filename is entered

[14:48:30.0000] <gsnedders>
TabAtkins: happy birthday!


2014-11-17
[16:37:20.0000] <TabAtkins>
gsnedders: Thanks!

[21:12:24.0000] <zewt_>
misspellings to not make: "bare with me"

[00:48:17.0000] <Ms2ger>
"Fun fact: You can't visit http://html.spec.whatwg.org  if you disable RC4 in Firefox." < eh?

[00:55:22.0000] <Ms2ger>
MikeSmith, thanks!

[00:56:15.0000] <annevk>
Ms2ger: DreamHost updated all Shared, but not VPS

[00:59:52.0000] <MikeSmith>
Ms2ger: cheers

[01:22:58.0000] <zcorpan>
Ms2ger: requiring RC4 is how we lead the web to its full potential

[02:34:33.0000] <jgraham>
foolip: Thanks for looking at karlt's test chnages

[02:51:17.0000] <hsivonen_>
annevk: fwiw, I turned off DNSSEC for hsivonen.fi. I haven't gotten around to blogging about it. TL;DR is: no real upsides considering what hsivonen.fi has in DNS, but did have a downside every 9 months due to the provider not implementing the rollover tooling the way it should be implemented

[04:37:44.0000] <annevk>
hsivonen: I thought there was an upside for email?

[04:38:12.0000] <annevk>
hsivonen: however, from everything I read it seems like something like DNSCurve would be preferable

[05:03:26.0000] <foolip>
jgraham: np!

[05:10:04.0000] <annevk>
Manishearth: you're asking the right questions

[05:10:28.0000] <annevk>
Manishearth: now someone will ask you if you want to write the UI Event specification :p

[05:10:43.0000] <annevk>
context: https://www.w3.org/Bugs/Public/show_bug.cgi?id=27337

[05:14:06.0000] <Manishearth>
annevk: Isn't DOM3 events supposed to handle that?

[05:14:18.0000] <Manishearth>
Also, if I were to write it, I would write "Do whatever the hell you want" :P

[05:15:31.0000] <Ms2ger>
Manishearth, oh no you won't :)

[05:16:18.0000] <annevk>
Manishearth: well DOM3 Events will be renamed since I think the editors finally agreed it has the wrong name

[05:16:27.0000] <Manishearth>
hah

[05:39:56.0000] <gsnedders>
I thought DOM3 Events went to REC ages ago and we're changing the name now?

[05:40:56.0000] <Ms2ger>
Heh, rec

[05:41:09.0000] <Ms2ger>
It's been to note, and nearly to cr

[05:41:52.0000] <jgraham>
It's the spec that won't die

[05:45:21.0000] <annevk>
Given that it doesn't even begin to answer the questions Manishearth asked in that bug it is neither worthy of REC nor CR

[05:48:38.0000] <gsnedders>
annevk: I never questioned that :)

[05:49:09.0000] <jgraham>
Just as well the W3C doesn't have a history of releasing unfinished specs

[05:49:34.0000] <Ms2ger>
Sarcasm from jgraham? That's a first!

[05:54:31.0000] <foolip>
annevk: do you recall why you dropped Text.replaceWholeText() but not Text.wholeText?

[05:55:49.0000] <Domenic>
/me goes to look up this strangely-named API

[06:00:14.0000] <Domenic>
wow Text and CharacterData are more bananas than I realized

[06:00:30.0000] <gsnedders>
does anyone have any stats on percentage of Linux users have gstreamer h.264 codecs installed?

[06:02:32.0000] <foolip>
gsnedders: I can make some up: not enough to depend on it without telling users what to do when it's not the case :)

[06:03:31.0000] <gsnedders>
foolip: I know that's the case! :)

[06:05:50.0000] <foolip>
gsnedders: unless your software is already using GStreamer as the media framework, you might also want to check for a system-installed ffmpeg/libav

[06:06:54.0000] <gsnedders>
foolip: all browsers use gstreamer, no?

[06:07:25.0000] <foolip>
gsnedders: nope, the only ones I know of are Presto (dead) and GtkWebKit

[06:07:37.0000] <gsnedders>
Oh. You guys all use ffmpeg/libav?

[06:08:05.0000] <foolip>
from memory:

[06:08:05.0000] <gsnedders>
I definitely had the impression that Gecko had some gstreamer impl

[06:08:28.0000] <gsnedders>
Though now you mention it Chrome using ffmpeg rings a significant bell

[06:08:34.0000] <foolip>
WebKit uses the platform framework, which is different on Mac OS X and iOS

[06:08:51.0000] <foolip>
Chromium uses a bundled ffmpeg

[06:09:06.0000] <foolip>
and my impression was that Gecko had a custom media framework

[06:09:37.0000] <foolip>
but there's content/media/gstreamer/ in gecko-dev

[06:09:59.0000] <gsnedders>
I care only about platforms that don't always have H.264 codecs installed, FWIW.

[06:10:09.0000] <gsnedders>
i.e., OS X/Windows/iOS/Android are for the most part irrelevant.

[06:10:27.0000] <foolip>
maybe ask rillian if Gecko's GStreamer stuff is always used or just to support proprietary codecs

[06:11:01.0000] <foolip>
gsnedders: didn't http://www.openh264.org

[06:11:07.0000] <foolip>
"solve" the problem?

[06:11:16.0000] <hsivonen>
foolip: pretty sure it is used only for proprietary codecs, only on X11 and only for media linked to via src

[06:11:46.0000] <hsivonen>
foolip: OpenH264 doesn't have all profiles yet

[06:12:02.0000] <foolip>
hsivonen: yeah, I'd be quite surprised if you used GStreamer for MSE

[06:12:13.0000] <gsnedders>
Also means trusting third-party binaries. Don't yet have reproducible builds.

[06:12:48.0000] <hsivonen>
gsnedders: http://andreasgal.com/2014/10/14/openh264-now-in-firefox/#comment-6620

[06:12:50.0000] <annevk>
foolip: no not sure

[06:13:27.0000] <foolip>
annevk: the definition of https://dom.spec.whatwg.org/#contiguous-text-nodes is cute :)

[06:13:43.0000] <hsivonen>
annevk: DNSSEC has an upside for email if your MX points to a name that has DNSSEC enabled and you control the TLS cert of the SMPT server

[06:13:54.0000] <hsivonen>
annevk: neither is currently true in the case of hsivonen.fi

[06:14:03.0000] <annevk>
foolip: bit of a copout, but it was the simplest I could come up with

[06:14:14.0000] <hsivonen>
annevk: I hope to make both true in due course as baby care and work permit

[06:14:14.0000] <gsnedders>
hsivonen: still more trust than would be nice, though. can't be verified by third parties.

[06:14:24.0000] <hsivonen>
annevk: so maybe I'll end up re-enabling DNSSEC in the future

[06:14:58.0000] <foolip>
annevk: I'm plotting to remove replaceWholeText() from Blink. If you don't have data showing that wholeText is needed, I'll add a UseCounter, wait, and see.

[06:16:00.0000] <annevk>
foolip: I'm happy to UseCounter all the things

[06:16:53.0000] <hsivonen>
annevk: anyway, to re-enable DNSSEC, one of three things needs to happen: 1) I figure out how to run my own DNS server, or 2) EasyDNS figure out key sizes and rollover or 3) I locate a provider that has things figured out and is reasonable in other ways, too

[06:17:11.0000] <hsivonen>
gsnedders: it's also sandboxed

[06:17:22.0000] <hsivonen>
or maybe "will be"

[06:17:29.0000] <hsivonen>
I've lost track of what code ships

[06:19:16.0000] <hsivonen>
annevk: I'm not saying DNSSEC is totally useless. Just saying that its usefulness is very narrow on balance considering how much trouble it is

[06:24:09.0000] <gsnedders>
hsivonen: I'm aware.

[06:43:44.0000] <SteveF__>
TabAtkins: hi, if I want to add a script to a bikeshed spec can I do it .bs?

[06:48:51.0000] <Domenic>
annevk: fetch will auto-add Content-Length header when passing a non-streaming body, right?

[06:55:10.0000] <annevk>
Domenic: yeah

[06:55:17.0000] <annevk>
Domenic: haven't really defined that part in detail yet

[06:59:24.0000] <Domenic>
headers are hard

[07:02:36.0000] <Domenic>
annevk: relevant https://github.com/joyent/node/blob/master/lib/_http_outgoing.js#L194-L201 (and https://github.com/joyent/node/blob/master/lib/_http_incoming.js#L158-L175 )

[07:05:32.0000] <annevk>
That Node is reverse engineering Mozilla should be a sign to the IETF that they are doing something wrong

[07:05:39.0000] <Domenic>
hehehe

[07:05:41.0000] <annevk>
Please tell mnot about it

[07:07:31.0000] <Domenic>
i wonder what's so special about set-cookie (a few lines above)

[07:08:22.0000] <Domenic>
hmm i see. it's an array for set-cookie; drop duplicates for the long list; and concatenate with commas for anything else

[07:11:36.0000] <gsnedders>
that's relatively common, and not the only header it's done for

[07:13:33.0000] <annevk>
I think Cookie is actually becoming the only special case

[07:19:32.0000] <rektide>
annevk: then which

[07:19:53.0000] <rektide>
annevk: which other

[07:19:57.0000] <rektide>
annevk: if 'neither'

[07:20:05.0000] <annevk>
rektide: context?

[07:21:45.0000] <rektide>
"annevk: inspecting event listeners kinda sucks too, so i guess it's all good" "rektide: by kind of sucks do you mean it sucks of people trying to do it, or it sucks taht people try to do it" "annevk: neither"

[07:23:43.0000] <rektide>
i'd like to understand what others think of the un-inspectability of event listeners

[07:25:18.0000] <jgraham>
It seems like being able to inspect them is anti-composition by providing global state that any script can read / mutate.

[07:26:02.0000] <jgraham>
If you can only touch event listeners you own there isn't the worry that someone else might unregister your listeners

[07:27:35.0000] <rektide>
i thought the point of HTML being declarative was that it was revealing and mutable?

[07:27:44.0000] <rektide>
that's always what's been so glorious about it to me- nothing is hidden

[07:28:04.0000] <rektide>
i'm sorry for countering- i want to be learning here, not trying to contradict

[07:28:24.0000] <jgraham>
I don't understand why you're sorry

[07:28:43.0000] <rektide>
i'm analyzing your statement, and i feel like we are in a pre-analysis mode

[07:28:54.0000] <jgraham>
I don't think that declarativeness and mutability are really related

[07:29:22.0000] <jgraham>
For example, at one time, web components promised declarativeness (at least to some degree) and encapsulation

[07:29:35.0000] <jgraham>
In the end it looks like they may provide neither

[07:30:07.0000] <rektide>
now that's an arch i wish i'd gotten to see more intimiately

[07:30:22.0000] <annevk>
rektide: there's a thread on www-dom that goes into the subject to some extent

[07:30:28.0000] <jgraham>
But that doesn't mean that everything being a giant pile of shared global state is great design

[07:31:06.0000] <annevk>
rektide: but basically events are an observer system, if you start attaching meaning to the observers themselves, there's something wrong with the code

[07:32:07.0000] <rektide>
both of you are coming at this from a distinctly use-case driven viewpoint in my perspective

[07:32:21.0000] <rektide>
i see your framing in terms of how one ought be building their code

[07:32:38.0000] <rektide>
are there other use cases you feel your statements are appropriate to?

[07:33:51.0000] <caitp->
rektide: so like I said last time this came up, jquery / similar libraries will expose these event listeners, so you could just use those (or a similar strategy) to get around it

[07:33:57.0000] <caitp->
if you were so inclined

[07:34:29.0000] <rektide>
i think there's a case to be made taht hte web is something we ought be able to learn about and meddle with

[07:34:44.0000] <rektide>
and thusfar, in 98% of the cases, you can show up on someone's site and begin to meddle quite effectively

[07:35:02.0000] <rektide>
jquery is again another case of authorship, where you as author of a site, are enforcing a system on the site

[07:35:20.0000] <rektide>
(rather, you are delegating to jquery an enforcement)

[07:35:45.0000] <rektide>
that freedom to meddle, this being US the user's agent

[07:36:14.0000] <jgraham>
rektide: a) that isn't true anymore sadly (most sites these days seems to use compiled, minified js that is very hard to understand as a human). However if you want to see event listeners as a user you can do that through devtools

[07:36:16.0000] <rektide>
giving site authors the freedom to meddle with their own event handlers

[07:36:33.0000] <jgraham>
Uh, b) was supposed to be the However

[07:37:03.0000] <rektide>
jgraham: because of the nature of event handlers, one just has to identify entrance points into the black box

[07:37:11.0000] <rektide>
jgraham: intercept on the way in and modify

[07:37:25.0000] <rektide>
jgraham: there is still a plasticity, at every level except the event handler level

[07:37:46.0000] <rektide>
event handlers are uniquely write-only in the whole scheme of things

[07:37:54.0000] <rektide>
and the defense is that it's good for authors, keeps them from doing bad things

[07:38:27.0000] <jgraham>
That isn't true

[07:38:35.0000] <jgraham>
You can't do lots of things

[07:38:46.0000] <jgraham>
You can't change a tag name in place, for example

[07:39:07.0000] <rektide>
you can't instantaneously change a tag name, but you can effectively do so via createElement, moving the children, attaching

[07:39:18.0000] <rektide>
there's the ability to, over steps, mutate into a desired state

[07:39:28.0000] <rektide>
that's a malleability to me

[07:39:29.0000] <jgraham>
Building larger web applications in the future will demand stronger invariants, not weaker ones

[07:40:25.0000] <rektide>
jgraham: it comes of as really condescending to me that architects would defend systems that create unseeable, unchangeable data-systems, because they think it's what users need

[07:40:55.0000] <rektide>
i understand there is data in letting users see the state they've built, in letting them manipualte it

[07:41:10.0000] <rektide>
but i don't see removing that capability, blocking them from it as a feature

[07:41:49.0000] <caitp->
http://www.mexicosolidarity.org/sites/default/files/images/popcornhk.gif

[07:42:00.0000] <jgraham>
And yet the ability to enforce invariants is considered one of the most important requirements for building large, maintainable, software systems

[07:42:04.0000] <rektide>
and it's extremely hugely detrimental to those trying to learn the web, those who want to see and experiment with web sites that they happen upon to further their own education

[07:42:14.0000] <jgraham>
No, it isn't

[07:43:25.0000] <rektide>
ok let's take it step by step

[07:43:57.0000] <jgraham>
Honestly, I have other things to do. I encourage you to send email

[07:44:58.0000] <rektide>
in that case, i just want to drop this: it's a usescript i tried to help my friend write to make his CodeSchool experience not suck. https://gist.github.com/johnelliott/690905bb909347a56941

[07:45:22.0000] <rektide>
he was not given the tools by the web to do the constructivist work he wanted

[07:45:34.0000] <rektide>
the web hid from him the valuable state he wanted to play with

[07:45:38.0000] <rektide>
his user agent was not his

[07:45:43.0000] <rektide>
it was the user agent of CodeSchool

[07:45:46.0000] <rektide>
and he was only using it

[07:46:22.0000] <caitp->
template strings are going to make those so much more readable in the future

[07:46:30.0000] <caitp->
can't wait :d

[07:46:58.0000] <rektide>
(my fork is a little better doc'ed, https://gist.github.com/rektide/b4f6d6ce9b780ed59512 )

[07:47:25.0000] <rektide>
"so copy paste this content in rather than actually running it as a userscript"

[07:48:24.0000] <jgraham>
User scripts aren't the web, they are proprietary UA features. A user script could certainly expose a method to mess with state that authors can't.

[07:49:03.0000] <rektide>
i don't see why authors ought be prohibited from instrumenting themselves either

[07:49:26.0000] <rektide>
if i want to go wrap all my keyup handlers, i don't see why i should need jquery keeping track of all my handlers to do that

[07:49:43.0000] <rektide>
it's anti-constructivist to create a system which won't tell you what's in it

[07:49:53.0000] <rektide>
the whole point of the Document Object Model

[07:49:56.0000] <rektide>
as per the name

[07:50:03.0000] <rektide>
is to tell you the structure

[07:50:28.0000] <rektide>
this is obvious to me. this is basic tenants of constructivism. this is what makes things malleable. this is why the web is good.

[07:51:00.0000] <rektide>
this one tiny little corner is the one example where the web page refuses to report what state it holds

[07:51:26.0000] <caitp->
i mean, you don't need jquery to do it, you could do it with anything

[07:51:37.0000] <rektide>
caitp-: it implies a monolithic developmoent practice

[07:51:50.0000] <rektide>
caitp-: it mandates that whomever wants to do this starts by doing this one practice

[07:51:51.0000] <caitp->
heck, you could even monkeypatch Add/RemoveEventListener

[07:51:53.0000] <boogyman>
rektide: HTTP is stateless by default. there are ways of introducing state, but that's a decision for that "web page".

[07:51:58.0000] <rektide>
caitp-: but you still have to get there first

[07:52:20.0000] <caitp->
it's not something everyone wants or needs to do :p

[07:52:22.0000] <rektide>
caitp-: it's still not modelled, it's still not something you can show up at latter and patch in

[07:52:27.0000] <caitp->
but the primitives are basically there to do it

[07:52:49.0000] <rektide>
caitp-: but why should this one thing be the one and only place in all the HTML lands where you don't have an object model to represet the state?

[07:53:05.0000] <boogyman>
rektide: because http is stateless.

[07:53:11.0000] <rektide>
boogyman: html is nothing but state

[07:53:16.0000] <caitp->
html and the dom are crazy, i wouldn't expect much from them

[07:53:28.0000] <rektide>
boogyman: it is the declared, mutable embodiment of state

[07:53:42.0000] <rektide>
boogyman: the dom is nothing but state handling

[07:54:15.0000] <rektide>
boogyman: i really have no idea at all what you think the http connection has to do with anything topical to the DOM not exposing an object model for one tiny corner of itself

[07:55:43.0000] <boogyman>
rektide: so it is your view that everything on a webpage should be mutable? including things like the scroll bar, the address bar, the bookmarks bar etc…

[07:56:27.0000] <rektide>
the point of the dom is to make state mutable. the defenses i've heard in here today are that: a) you can track state yourself (if you get there first and instrument/monkeypatch), b) you shouldn't need/want to track state. these seem insufficient. i would love to broaden my horizon of objections to my point of view; if you can help me find other categorical objections to my ask (model this aspect of the document), i'd love to hear

[07:57:23.0000] <rektide>
boogyman: those aren't the webpage, those are the user agent. and yes, those aspects fo the user agent should be an in some user agents are alterable. for instance: i can change the scheme in my OS. i can add awesomebar extensions to my browser. you're throwing some real softballs my way friend.

[07:57:52.0000] <rektide>
i can css3 style the scrollbar too, actually

[07:59:00.0000] <boogyman>
So your viewpoint is that once a fragment gets parsed by the rendering engine, that should be mutable?

[08:00:43.0000] <rektide>
boogyman: you rules lawyer me. i don't know what definition you are setting up to pull me on me now. i believe that it's intuitively obvious that the Document Object Model models the elements in it, and that it's failure to model the events is a clear fault in the scope of what it models

[08:01:58.0000] <boogyman>
I'm trying to understand your viewpoint, so I can make an accurate assessment and potentially "find categorical objections"

[08:02:26.0000] <rektide>
annevk: i respect you as someone who provides a lot of direction, and i really would appreciate a clash from you on this at some point. i'll try to find a way to cobble together something for a mailing list, but i was hoping to better understand the background and viewpoints ahead of time.

[08:04:15.0000] <rektide>
boogyman: i don't think teh view engine is concerned at all in this topic, would be my main distinction. this is an issue of the DOM, outside what renders: the DOM is the living breathing state object, and it shows us a model of that state. with this one rare peculiar exception: events.

[08:04:44.0000] <rektide>
parsing is incidental, is a means of getting into that state-holding system

[08:05:33.0000] <boogyman>
So, are you asking for mutable access to events?

[08:06:08.0000] <boogyman>
access of a defined event*

[08:06:08.0000] <rektide>
yes, i would like the Document Object Model- the thing that exposes the state- to expose events as a part of that state that it exposes

[08:06:17.0000] <annevk>
rektide: look at e.g. promises or observers

[08:06:35.0000] <annevk>
rektide: none of these systems provide a means to get to the listeners

[08:06:56.0000] <rektide>
well, neither of those have 'Model' in their name

[08:07:02.0000] <rektide>
as a quick start

[08:07:14.0000] <annevk>
rektide: events don't have 'Model' in their name either

[08:07:26.0000] <rektide>
DOM does and EventTArget is defined in the DOM

[08:07:37.0000] <annevk>
rektide: events, promises, and, observers are all roughly equivalent

[08:08:14.0000] <rektide>
this anti-constructivist trend is one i'd like to strike at, as you see

[08:08:19.0000] <rektide>
and it's growth is worrying

[08:08:29.0000] <rektide>
i agree that the problem is growing rapidly

[08:09:26.0000] <rektide>
i'll try to mention these others in my eventual email

[08:09:41.0000] <rektide>
MutationObserverTarget here we come.

[08:09:57.0000] <rektide>
gods above willing

[08:11:46.0000] <rektide>
ugg i've yet again wasted my chances to pick up intel from the enemy

[08:11:51.0000] <rektide>
drat

[08:12:32.0000] <caitp->
(・_・ヾ)???

[08:14:15.0000] <rektide>
caitp-: i was un-asiding that i've already made progressive conversation- getting annevk to go on & give me more context for this- much harder, much less likely

[08:15:36.0000] <rektide>
i think my first step here might be to get on hte horn with kris kowal and pick his brain on promises for a while

[08:16:23.0000] <rektide>
i don't necessarily want to go into that domain- DOM has Model in the name, whereas promises, in contrast, as ALWAYS a procedural instantiation- but see what weaknesses he thinks closuring everything up has

[08:20:04.0000] <caitp->
well, bon voyag

[08:20:05.0000] <caitp->
e

[08:29:13.0000] <smaug____>
/me feels stupid. Doesn't quite understand what annevk means with data properties. How are those different to [Unforgeable]

[08:30:28.0000] <annevk>
smaug____: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object-type IDL only supports accessor properties at the moment, afaik

[08:31:06.0000] <smaug____>
ah, so it would be without a getter

[08:32:00.0000] <annevk>
yup

[08:32:43.0000] <annevk>
Just trying to knock down the walls between JS and IDL

[08:34:37.0000] <smaug____>
would there be any reason to use data property and not just normal webidl readonly attribute?

[08:36:20.0000] <annevk>
It can be overkill to use the latter, especially from a self-hosting perspective, as it requires internal state

[08:46:13.0000] <TabAtkins>
SteveF__: Yeah, .bs is just .html with more syntax additions. You can drop in a <script> no problem.

[08:46:40.0000] <SteveF__>
TabAtkins: thanks

[08:48:12.0000] <TabAtkins>
(And as long as the start and end tags are on a line by themselves, Bikeshed will recognize them, and will avoid trying to do any "helpful" syntax conversions inside of your script.)

[08:48:32.0000] <SteveF__>
good to know

[14:17:16.0000] <TabAtkins>
Turns out that you shouldn't add things that aren't friendly with a language's tokenization rules, especially for languages without contextual tokenization algorithms.

[14:17:34.0000] <TabAtkins>
(Writing up the specification of unicode-range in terms of CSS tokens is tricky and dumb.)

[14:27:32.0000] <Hixie>
TabAtkins: oh?

[14:27:41.0000] <Hixie>
TabAtkins: what's the difficulty?

[14:30:05.0000] <TabAtkins>
For example, u+2e-30 parses as IDENT(u) NUMBER(2e-30)

[14:33:55.0000] <TabAtkins>
While u+2a-30 parses as IDENT(u) DIMENSION(2, a-30)

[14:34:15.0000] <TabAtkins>
And u+20-30 parsed as IDENT(u) NUMBER(20) NUMBER(-30)

[14:35:17.0000] <TabAtkins>
There are actually five parses to deal with, with different variations in the hex digits triggering the cases in a difficult-to-predict way.

[14:39:16.0000] <Hixie>
TabAtkins: can't you just change the tokeniser to have a U+<hex> token?

[14:39:36.0000] <TabAtkins>
The point was that I just *removed* the specialized unicode-range token from the tokenizer.

[14:39:46.0000] <Hixie>
oh

[14:39:47.0000] <Hixie>
why?

[14:39:48.0000] <TabAtkins>
Because special-purpose tokens are the devils' work, and cause confusing bugs elsewhere.

[14:40:09.0000] <TabAtkins>
For example, `u+a { font-weight: bold; }` is a syntax error.

[14:40:23.0000] <TabAtkins>
(becuase the selector parsed as a unicode-range token)

[14:40:29.0000] <Hixie>
wait, why are you using the same tokens for selectors as property vluaes

[14:40:43.0000] <TabAtkins>
Because CSS's tokenizer isn't contextually interwoven with its parser.

[14:40:52.0000] <Hixie>
i have a proposal!

[14:40:56.0000] <TabAtkins>
NOPE

[14:41:38.0000] <Hixie>
(why not?)

[14:41:52.0000] <TabAtkins>
Because that kind of interweaving makes it harder to write parsers, and requires more state.

[14:42:15.0000] <TabAtkins>
Also: requires knowledge of the language inside of the parser, preventing generic processing.

[14:42:34.0000] <Hixie>
seems pretty straight-forward to have a set of selector tokens and a set of value tokens, but ok

[14:42:38.0000] <TabAtkins>
Also: selectors can appear in more places than just the prelude of blocks.

[14:42:48.0000] <Hixie>
ah, that's an interesting one

[14:42:55.0000] <Hixie>
can they appear in values?

[14:43:05.0000] <TabAtkins>
Yes.  Inside of some functions, for example.

[14:43:12.0000] <Hixie>
funky

[14:43:25.0000] <TabAtkins>
Well, when you're referring to one element from within another element...

[14:43:35.0000] <Hixie>
how do you handle #color vs #id ?

[14:43:44.0000] <Ms2ger>
#hash

[14:43:51.0000] <TabAtkins>
Both of those are just <hash-token>s, and contextually interpreted.

[14:43:58.0000] <TabAtkins>
By the property-level grammars.

[14:44:45.0000] <TabAtkins>
(In other words, a <hash-token> is a valid <color>.  A <hash-token> is also a valid <id-selector>.)

[14:45:19.0000] <Hixie>
is there any string that causes a tokenisation-level error when parsing a value, short of an unexpected EOF?

[14:45:25.0000] <TabAtkins>
No.

[14:45:30.0000] <Hixie>
interesting

[14:45:35.0000] <TabAtkins>
If by "error" you mean "abort processing".

[14:45:43.0000] <Hixie>
by "error" i mean "throw property away"

[14:45:48.0000] <TabAtkins>
There are some strings of characters that generate guaranteed-invalid tokens.

[14:46:01.0000] <Hixie>
the way 'color:#ABC;color:#XYZ;' results in the second colour being dropped

[14:46:05.0000] <TabAtkins>
But still, throwing away is done at the property-grammar level, or block-grammar level.

[14:46:13.0000] <Hixie>
oh what are the guaranteed-invalid tokens?

[14:46:18.0000] <TabAtkins>
That's the cascade level, which is even further down the stream.

[14:46:27.0000] <TabAtkins>
<bad-string-token> and <bad-url-token>

[14:47:16.0000] <caitp>
you(SP)'ve written the grammar such that there is no sequence of valid tokens that does not result in a valid production?

[14:47:25.0000] <TabAtkins>
A string which contains an unescaped literal newline becomes a <bad-string-token>.  An unquoted url with spaces in it becomes a <bad-url-token>.

[14:47:41.0000] <Hixie>
so 'color:#XYZ' is dropped at a different spot than 'color:url( \n )' ?

[14:47:43.0000] <TabAtkins>
caitp: For what?

[14:48:18.0000] <caitp>
wait, you're talking about lexer errors right

[14:48:23.0000] <TabAtkins>
Hixie: No, those two are dropped at the same spot - that sort of <hash-token> isn't a valid <color>, and the 'color' grammar doesn't allow <bad-url-token>.

[14:48:34.0000] <TabAtkins>
caitp: I use the term "tokenizer", but sure.

[14:48:36.0000] <Hixie>
ah, interesting

[14:48:41.0000] <Hixie>
cool, carry on

[14:48:53.0000] <caitp>
lexer, scanner, tokenizer, tic tac to

[14:49:10.0000] <TabAtkins>
caitp: The grammar of CSS is, like HTML, captured by the regex /.*/

[14:49:35.0000] <TabAtkins>
And is then filtered down afterwards according to various production grammars.

[14:49:49.0000] <Hixie>
(btw, to make that true required a hell of a long time arguing in the csswg)

[14:50:06.0000] <Hixie>
(back in the early 2000s)

[14:50:25.0000] <TabAtkins>
Hixie: It still wasn't technically true when I started work on Syntax, I think.  (I don't recall details, but I think there were still a few possible cases not covered by the error-recovery rules.)

[14:50:39.0000] <Hixie>
really? wow

[14:50:44.0000] <Hixie>
doesn't surprise me that we missed some

[14:50:46.0000] <TabAtkins>
They were arcane, iirc.

[14:50:47.0000] <Hixie>
we weren't being rigorous

[14:51:23.0000] <TabAtkins>
I'm pretty sure I talked about them on the ML when I was first writing Syntax.

[14:52:05.0000] <TabAtkins>
But yeah, error-recovery in grammars is a fucking trainwreck, and nobody should ever do it.  Do your parsing explicitly, *then* apply grammars on top of that.

[14:52:48.0000] <TabAtkins>
Because at that point you can validly say "nope, you don't match, throw the whole thing out" where "the whole thing" is some construct within the file that's already well-delimited.

[14:53:52.0000] <Hixie>
hear hear


2014-11-18
[18:45:23.0000] <zewt_>
neat, i got mojibake out of amazon jp's account page

[18:45:34.0000] <zewt_>
don't think i've ever had that happen on an amazon page before

[18:45:53.0000] <zewt_>
(tracking info, probably a bad conversion between the shipping service in japan and amazon)

[20:15:07.0000] <MikeSmith>
where is the canonical definition for el.find and .findAll and .matches these days?

[20:15:29.0000] <MikeSmith>
I thought it was supposed to be moved into the DOM spec

[20:17:30.0000] <caitp>
google finds them mentioned on https://blog.whatwg.org/2011/11, seems to indicate that they're just aliases for qsa

[20:17:35.0000] <caitp>
and qs*

[20:17:47.0000] <caitp>
and presumably not implemented anywhere

[20:19:07.0000] <caitp>
only seeing it in mail

[20:19:55.0000] <caitp>
https://dom.spec.whatwg.org/#dom-parentnode-query maybe that?

[20:25:46.0000] <MikeSmith>
caitp: ah yeah

[20:25:48.0000] <MikeSmith>
thanks

[20:25:58.0000] <MikeSmith>
man I should know this

[20:26:11.0000] <MikeSmith>
way too many things to keep up with

[20:27:19.0000] <caitp>
the web is a really, really big framework

[20:27:38.0000] <caitp>
nobody could keep on top of it all all the time :O

[20:28:45.0000] <MikeSmith>
well right now my immediate need is just to review some test cases that Ms2ger refactored, for .findAll, etc.

[20:29:00.0000] <MikeSmith>
but I have no non-obsoleted spec to review them against

[20:29:20.0000] <MikeSmith>
so I guess I'll just pretend

[21:20:15.0000] <MikeSmith>
I notice IE11 still doesn't support .matches

[21:21:36.0000] <MikeSmith>
ah I guess they still have prefixed msMatchesSelector

[00:30:45.0000] <foolip>
MikeSmith: does any engine except Blink implement matches without a prefix?

[00:31:31.0000] <Ms2ger>
foolip, I thought Gecko did

[00:31:58.0000] <Ms2ger>
https://bugzilla.mozilla.org/show_bug.cgi?id=886308 says so

[00:34:56.0000] <MikeSmith>
yeah

[00:35:14.0000] <foolip>
Ms2ger: nice, https://developer.mozilla.org/en-US/docs/Web/API/Element.matches says only IE hasn't unprefixed yet

[00:35:37.0000] <foolip>
that all happened fast, I'm pretty sure when I unprefixed it in Blink it was the first

[00:38:02.0000] <MikeSmith>
http://w3c-test.org/selectors-api/tests/submissions/Opera/Element-matches.html says so now too

[00:38:27.0000] <MikeSmith>
gecko passes more of those than blink :-)

[00:38:56.0000] <MikeSmith>
caniuse seems to have up-to-date info

[00:40:08.0000] <MikeSmith>
http://caniuse.com/#search=matches

[01:06:17.0000] <foolip>
yay Gecko :)

[01:07:11.0000] <Ms2ger>
foolip, since you're interested, want to review that test? :)

[02:14:18.0000] <annevk>
Formalizing internal slots <3

[02:14:55.0000] <annevk>
Is anyone reviewing my single byte decoder tests?

[02:16:14.0000] <Ms2ger>
I probably could

[02:28:01.0000] <MikeSmith>
annevk: zcorpan did already, and jgraham too I think

[02:28:13.0000] <MikeSmith>
annevk: you need to look in critic

[02:28:34.0000] <Domenic_>
Formalizing internal slots <3 indeed

[02:29:11.0000] <Domenic_>
Hmm I seem to not be identified with nickserv on my iPad, annoying

[03:35:14.0000] <annevk>
Ooh, critic

[03:35:24.0000] <annevk>
Ooh, jgraham reviewed some stuff from the Realm thingie

[03:36:21.0000] <annevk>
jgraham: I'm still not intimately familiar with how apply/call/bind work; guess I'd have to read up...

[03:37:11.0000] <Ms2ger>
annevk, actually, zcorpan has reviewed https://critic.hoppipolla.co.uk/r/3155

[03:38:09.0000] <annevk>
Ms2ger: that's not the only set of tests I submitted though

[03:38:26.0000] <Ms2ger>
/me looks

[03:39:26.0000] <Ms2ger>
annevk, where?

[03:39:45.0000] <annevk>
Ms2ger: https://critic.hoppipolla.co.uk/r/3147

[03:40:19.0000] <Ms2ger>
annevk, well, you asked about decoder tests :)

[03:40:30.0000] <Ms2ger>
I think I'm staying out of this one

[03:40:54.0000] <annevk>
Ms2ger: yes, but MikeSmith made me look at critic and I found some other stuff...

[03:45:02.0000] <annevk>
jgraham: why is it t.step_func_done and not just t.done taking a callback?

[04:00:35.0000] <jgraham>
annevk: Ask zcorpan or Ms2ger. I didn't implement that one.

[04:00:49.0000] <jgraham>
But I guess "because we didn't think of that"

[04:00:57.0000] <annevk>
zcorpan: ^^

[04:01:06.0000] <jgraham>
Although I guess it could be argued that it's less confusing

[04:01:31.0000] <jgraham>
A callback in done() could be post-test cleanup or something

[04:01:52.0000] <annevk>
The current Pythonic naming and superfluous "func" don't really make it attractive

[04:04:13.0000] <jgraham>
The "func" isn't superfluous

[04:04:19.0000] <zcorpan>
i guess i went from function() { t.step(function() { ... t.done(); }; } to t.step_func(function() { ... t.done(); }); to t.step_func_done(function() { ... });

[04:04:34.0000] <jgraham>
It returns a function that when called runs a step

[04:04:43.0000] <jgraham>
It doesn't actually run a step

[04:08:14.0000] <annevk>
I see

[04:08:42.0000] <annevk>
zcorpan: ideas for testing XML and CSS and such?

[04:09:44.0000] <jgraham>
I guess soon onw will be able to write t.step_func_done(() => {}), which seems like a nice improvement

[04:09:48.0000] <annevk>
zcorpan: note that if you are interested mostly in label testing I think that should probably be covered separately as well

[04:10:09.0000] <annevk>
jgraham: yeah, I was kind of wondering if I could use those already

[04:10:20.0000] <annevk>
jgraham: though they have different this handling, is that going to be signifnicant?

[04:10:32.0000] <jgraham>
annevk: I don't know how widespread the support is

[04:12:02.0000] <jgraham>
The function is called like func.apply(this_obj, Array.prototype.slice.call(arguments, 2))

[04:12:29.0000] <jgraham>
Where the this_obj defaults to the tests object, or can be supplied

[04:12:37.0000] <jgraham>
s/tests/Test/

[04:13:20.0000] <jgraham>
So I guess it will be different in that that won't work, but if you don't use this inside the function it won't matter?

[04:13:55.0000] <annevk>
"t.step_funk_done is not a function" oops

[04:16:50.0000] <jgraham>
Sounds more like a Daft Punk album or something.

[04:27:06.0000] <annevk>
jgraham: I would buy it

[04:37:09.0000] <annevk>
rubys: I created a url team on GitHub

[04:37:13.0000] <annevk>
rubys: and invited you

[04:38:18.0000] <annevk>
rubys: currently url.spec.whatwg.org only pulls in url.html

[04:38:25.0000] <annevk>
rubys: if that setup needs changing let me know

[04:39:23.0000] <rubys>
Thanks!  So to be clear, I can make direct edits to the url spec, and simply by committing url.html the whatwg URL Standard will be updated?

[04:39:43.0000] <annevk>
rubys: I think you might need to update your bikeshed since it's still not adding allcaps

[04:40:00.0000] <annevk>
rubys: to the <h1>

[04:40:31.0000] <annevk>
rubys: yeah, though I would appreciate some communication around major changes

[04:40:32.0000] <rubys>
Bikeshed itself needs to be updated as it generates the <h1>

[04:40:42.0000] <annevk>
rubys: yeah, TabAtkins did that

[04:41:01.0000] <rubys>
oh, so you mean I simply need to update and regenerate?  Let me do that.

[04:41:16.0000] <annevk>
https://github.com/tabatkins/bikeshed/issues/278

[04:41:38.0000] <annevk>
rubys: it seems the same might be true for your RFC database

[04:41:50.0000] <annevk>
rubys: since tobie_ updated those too to point towards tools.ietf.org

[04:42:22.0000] <rubys>
I'm updating everything.

[04:47:03.0000] <GPHemsley>
Is it true that names of characters introduced into Unicode before 1992 cannot be changed?

[04:47:33.0000] <gsnedders>
AFAIK Unicode character names are guaranteed constant.

[04:47:44.0000] <annevk>
Except they still changed some

[04:47:48.0000] <gsnedders>
http://www.unicode.org/policies/stability_policy.html

[04:50:05.0000] <gsnedders>
annevk: AFAIK they only changed stuff from Unicode 1.0 to 2.0, and never since.

[04:50:22.0000] <gsnedders>
Like there's a documented list of errors, some pretty major, in the canonical names

[04:51:34.0000] <rubys>
annevk: https://rawgit.com/rubys/url/anolis2bikeshed/url.html -- better?

[04:52:27.0000] <annevk>
rubys: unless I'm missing something it looks identical

[04:52:43.0000] <annevk>
rubys: still www.ietf.org rather than tools.ietf.org links and no allcaps

[04:53:29.0000] <rubys>
https://github.com/rubys/url/commit/364e29c04ff2e911e78f5fac5d10ac238dc9e9ef

[04:54:21.0000] <annevk>
rubys: I see, I think you might have pushed that to a different branch

[04:54:33.0000] <zcorpan>
annevk: add_cleanup callback also runs if the test fails or times out

[04:55:30.0000] <zcorpan>
annevk: also if document.body.removeChild(frame) would throw for some reason it would fail to produce a result for the test

[04:56:19.0000] <annevk>
zcorpan: if that throws logging an error somewhere would be good

[04:57:12.0000] <rubys>
trying again: https://github.com/rubys/url/commit/86049dad29e79c1ac14753c67704cdf00f403a6f

[04:57:27.0000] <zcorpan>
annevk: putting it inside step does that

[04:58:11.0000] <rubys>
annevk: https://rawgit.com/rubys/url/anolis2bikeshed/url.html -- better?

[05:02:08.0000] <annevk>
rubys: yeah

[05:02:20.0000] <zcorpan>
annevk: as for xml, i imagine loading an iframe and have the server return <x>...</x> (maybe also with xml decl specifying the encoding), and then checking documentElement.textContent

[05:02:43.0000] <rubys>
annevk: is the bikeshed conversion ready to merge now, or is there more work that needs to be done?

[05:02:47.0000] <annevk>
zcorpan: it's a bit trickier than that, since technically XML has to fail on certain bytes

[05:03:05.0000] <zcorpan>
annevk: for css, #foo:before { content:"..." } and getComputedStyle

[05:03:07.0000] <zcorpan>
annevk: ah yeah

[05:03:24.0000] <annevk>
rubys: go for it

[05:03:36.0000] <annevk>
/me still has to install bikeshed

[05:04:06.0000] <zcorpan>
annevk: i guess for xml we'd have to separate the valid bytes and use one document per invalid byte

[05:04:13.0000] <annevk>
zcorpan: also, for CSS it's trickier too, due to certain bytes that have meaning in CSS

[05:04:19.0000] <rubys>
annevk: cool.  I plan to complete setters on my clone of the url repository, and then begin work on merging in a branch in the whatwg repository.

[05:05:14.0000] <annevk>
rubys: by setters you mean what the spec currently uses the override state argument for, right?

[05:05:15.0000] <rubys>
annevk: no urgency, but I would like to move my interop results and livedom url parser demo to someplace on whatwg.org.

[05:05:16.0000] <zcorpan>
annevk: only " \ CR LF i think, but yes

[05:05:49.0000] <rubys>
annevk: yes, overriding state.  Once I push, I'll discuss what I have done with you before proceeding.

[05:06:25.0000] <annevk>
rubys: I can change the setup of url.spec.whatwg.org now; I'll make it copy all of master instead of copying a single file and set the DirectoryIndex to url.html index.html

[05:07:00.0000] <zcorpan>
annevk: alternatively DOMParser instead of iframe

[05:07:03.0000] <rubys>
just a sec, let me check how I do my push

[05:07:12.0000] <annevk>
rubys: then we can use url.spec.whatwg.org/dir/ for non-spec stuff

[05:07:30.0000] <annevk>
zcorpan: doesn't DOMParser take a string?

[05:07:37.0000] <rubys>
url.spec.whatwg.org works for me.  Again, just a sec

[05:07:48.0000] <zcorpan>
annevk: ...yes. nevermind

[05:08:52.0000] <annevk>
zcorpan: so it sounds like both CSS and XML are easyish, but would require a distinct setup from what I have now

[05:09:06.0000] <annevk>
zcorpan: I mostly added the <iframe> thingy because I already had the infrastructure

[05:09:06.0000] <zcorpan>
yeah

[05:09:10.0000] <annevk>
zcorpan: same for TextDecoder()

[05:09:35.0000] <zcorpan>
annevk: are you done with the PR?

[05:09:36.0000] <annevk>
So I would prefer doing those separately. And for the XML case it's not clear that anyone really cares

[05:09:54.0000] <annevk>
zcorpan: I should probably do the cleanup thingy you mentioned

[05:10:02.0000] <zcorpan>
k

[05:11:36.0000] <rubys>
annevk: I'm not currently checking in the outputs of the process, but I can clearly do so.  More specifically, three subissues:

[05:11:40.0000] <annevk>
zcorpan: well actually, if you can verify what bytes to avoid in CSS I guess I can add CSS tests

[05:11:46.0000] <zcorpan>
xml could be attack surface if it uses different decoders

[05:12:26.0000] <rubys>
1) I have a CGI, and the shebang comment at the top of the file needs to point to a version of Ruby on the host

[05:12:40.0000] <annevk>
zcorpan: with I meant does anyone care about not-well-formed vs well-formed-with-U+FFFD

[05:13:07.0000] <rubys>
2) punycode.js, unorm.js, etc are downloaded from various places and not checked in.

[05:13:25.0000] <zcorpan>
annevk: ah. yeah possibly we could change that if we wanted to

[05:13:47.0000] <rubys>
3) the urltest-results directory is produced locally and then rsynced.

[05:16:07.0000] <rubys>
annevk: I guess most importantly, url.html in my branch is incomplete (it only contains parsing, not the rest of the spec).

[05:16:26.0000] <rubys>
annevk: I think the net of this is that this is something we should revisit when that branch is ready to merge.

[05:16:51.0000] <annevk>
rubys: issues 1-3 seem like something we could address by giving you access to the server

[05:17:09.0000] <rubys>
annevk: that works to.  Dreamhost?

[05:17:38.0000] <annevk>
rubys: however, currently access to this domain is shared with a bunch of others, so I think I'd prefer it if Hixie created an isolated account for url.spec.whatwg.org if we're going to be running more advanced scripts

[05:18:05.0000] <rubys>
I'm in no particular rush, and that works for me.

[05:18:39.0000] <rubys>
I only have one script, that's the one that allows people to upload browser results.

[05:18:54.0000] <rubys>
everything else is static html, javascript, and css.

[05:18:58.0000] <annevk>
so yeah, let's keep the url.html setup for now and then get Hixie to make an account for that domain we can share SSH access to

[05:19:14.0000] <annevk>
rubys: hmm okay

[05:20:25.0000] <annevk>
rubys: just message me your public key then

[05:20:59.0000] <rubys>
https://people.apache.org/keys/committer/rubys.asc

[05:23:58.0000] <annevk>
rubys: you have it in a format somewhere that works for ssh-rsa?

[05:25:01.0000] <annevk>
rubys: https://apache.org/ seems bad btw

[05:25:02.0000] <rubys>
annevk: any of these work http://intertwingly.net/public/ ?

[05:26:43.0000] <annevk>
ta

[05:27:05.0000] <annevk>
hopefully no man-in-the-middle...

[05:30:33.0000] <rubys>
yea, yea, I do need to fix https on my site.

[05:31:01.0000] <zcorpan>
annevk: also U+000C

[05:40:12.0000] <annevk>
zcorpan: so my setup is going to be using a single <iframe> that keeps loading a new HTML page that points to a different CSS file, based on <iframe> load I know the CSS file has loaded

[05:40:24.0000] <aleray>
hi, if I only have one section in my page, should I enclose it in a section tag or is it unnecessary (I'm already using a main element)

[05:40:41.0000] <annevk>
zcorpan: both HTML and CSS file are generated; CSS file doesn't generate problematic bytes, and on the result of getComputedStyle we don't check the problematic bytes

[05:40:54.0000] <annevk>
aleray: not needed

[05:43:26.0000] <zcorpan>
annevk: you can use a backslash before the problematic bytes in css

[05:44:40.0000] <zcorpan>
annevk: and expect empty string for 0x10 0x12 0x13 in getComputedStyle

[05:44:58.0000] <annevk>
zcorpan: why?

[05:46:05.0000] <zcorpan>
annevk: for completeness i guess. but maybe it's not interesting to test those

[05:46:59.0000] <annevk>
zcorpan: no why I should I expect the empty string?

[05:47:20.0000] <zcorpan>
annevk: oh, because that's what \LF means in css

[05:50:14.0000] <aleray>
annevk, thanks

[05:50:32.0000] <annevk>
zcorpan: I see

[05:58:15.0000] <rubys>
Bikeshed produced version of URL Living Standard is now live: https://url.spec.whatwg.org/

[05:58:36.0000] <annevk>
zcorpan: you meant 0x0A, 0x0C, and 0x0D right?

[05:59:11.0000] <zcorpan>
annevk: yes

[05:59:26.0000] <Ms2ger>
Looks like it regressed the FileAPI reference

[05:59:38.0000] <Ms2ger>
And WebIDL

[05:59:51.0000] <rubys>
I'll fix.  Any others?

[06:00:08.0000] <Ms2ger>
Looks like that's it

[06:10:25.0000] <rubys>
Ms2ger: done

[06:10:47.0000] <rubys>
annevk: FYI, if you have anolis installed, you have all the prereqs necessary for bikeshed.  You can start here: https://github.com/tabatkins/bikeshed/blob/master/docs/install.md#common-steps

[06:10:51.0000] <Ms2ger>
Thanks!

[06:11:01.0000] <annevk>
rubys: ta

[06:17:46.0000] <annevk>
zcorpan: euhm so CSS is quite a bit harder

[06:17:58.0000] <annevk>
zcorpan: it turns out this also depends on the particular serialization rules of computed style

[06:18:26.0000] <annevk>
zcorpan: e.g. I don't get back U+008D, but \8D followed by a space...

[06:19:43.0000] <annevk>
zcorpan: e.g. this is what I get back for x-mac-ukrainian

[06:19:45.0000] <annevk>
assert_equals: expected "x" but got "\"�\\1 \2 \3 \4 \5 \6 \7 \8 \9 \B \E \F \10 \11 \12 \13 \14 \15 \16 \17 \18 \19 \1A \1B \1C \1D \1E \1F !\\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\7F АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёё

[06:19:45.0000] <annevk>
яабвгдежзийклмнопрстуфхцчшщъыьэю\""

[06:19:49.0000] <zcorpan>
annevk: hmm, yeah. would need to implement http://dev.w3.org/csswg/cssom/#serialize-a-string in js. and assume that the browser conforms to that

[06:20:04.0000] <annevk>
("x" was my expected test value)

[06:20:09.0000] <rubys>
annevk: I'm going to move my name in the acknowledgements to follow yours.  I'm also going to fix a pet peeve of mine: the following statement is semantically meaningless: Except where different objects implementing URLUtilsReadOnly are identical to objects implementing URLUtils.

[06:20:39.0000] <rubys>
what I think you mean is that like name attributes in these two interfaces have the same definition for getters.

[06:21:08.0000] <Ms2ger>
annevk, ha

[06:21:53.0000] <annevk>
rubys: yeah, that wording is ugly

[06:22:17.0000] <annevk>
rubys: it should probably become part of the note as well, there's nothing normative there

[06:22:52.0000] <rubys>
annevk: ack

[06:24:52.0000] <annevk>
zcorpan: so yeah, I'll fix the cleanup thing, but leave this CSS stuff for another time

[06:25:30.0000] <zcorpan>
annevk: i'm hacking together a css string serializer if that helps

[06:26:42.0000] <annevk>
zcorpan: yeah, I hadn't actually considered building a string, that might be nicer for the XHR case too

[06:26:52.0000] <annevk>
zcorpan: instead of doing code point comparison

[06:26:59.0000] <annevk>
hmm

[06:28:07.0000] <zcorpan>
annevk: http://software.hixie.ch/utilities/js/live-dom-viewer/saved/3308

[06:28:12.0000] <annevk>
zcorpan: however, we could push https://critic.hoppipolla.co.uk/r/3155 now

[06:28:49.0000] <annevk>
zcorpan: hmm let me look

[06:29:43.0000] <annevk>
zcorpan: throw new Error('InvalidCharacterError') should return U+FFFD, no?

[06:30:11.0000] <annevk>
zcorpan: this would be even better btw if it took an array of code points and returned a string

[06:30:24.0000] <annevk>
zcorpan: the array of code points I have...

[06:30:48.0000] <zcorpan>
annevk: yeah it should. i just implemented the spec literally :-)

[06:43:39.0000] <annevk>
zcorpan: I can put what I have for CSS decoding into a branch so you can play with it if you want

[06:43:59.0000] <zcorpan>
annevk: sure

[06:45:44.0000] <annevk>
zcorpan: https://github.com/w3c/web-platform-tests/tree/encoding-and-css

[07:10:09.0000] <annevk>
Domenic_: https://github.com/tc39/ should offer a template for TC39 proposals

[07:10:56.0000] <annevk>
Domenic_: found it, never mind

[07:11:46.0000] <annevk>
https://github.com/tc39/ecma262 has steps at the end

[07:21:52.0000] <annevk>
rubys: seems to be not as easy for me to get that working that way, I haven't been using MacPorts for a while

[07:22:12.0000] <rubys>
you don't need macports

[07:23:05.0000] <rubys>
annevk: git clone, pip install, git pull --rebase, and bikeshed update should be all you need.

[07:23:35.0000] <rubys>
annevk: https://github.com/tabatkins/bikeshed/blob/master/docs/install.md#common-steps

[07:28:38.0000] <annevk>
https://www.eff.org/deeplinks/2014/11/certificate-authority-encrypt-entire-web \o/

[07:30:09.0000] <annevk>
rubys: -bash: pip: command not found

[07:30:33.0000] <Ms2ger>
easy_install pip

[07:30:36.0000] <annevk>
rubys: I tried installing through running setup.py install but that did not work

[07:30:49.0000] <annevk>
rubys: well, it seemed to work, but then it didn't

[07:31:07.0000] <darobin>
/me thinks before "easy_install pip" you have to "setup.py easy_install" :)

[07:31:27.0000] <annevk>
easy_install seems to be there

[07:31:44.0000] <darobin>
that should work, otherwise brew install pip ought to too

[07:33:46.0000] <annevk>
thanks all

[07:34:02.0000] <annevk>
rubys: once I run it on whatwg/url a <main> element is moved...

[07:34:14.0000] <annevk>
/me wonders why it would use <main>

[07:34:19.0000] <zcorpan>
hmm, why does gecko have toString, valueOf and toJSON on location? http://software.hixie.ch/utilities/js/live-dom-viewer/saved/3309

[07:37:07.0000] <annevk>
rubys: a newline is also added before <body>

[07:37:33.0000] <Ms2ger>
zcorpan, [Unforgeable]

[07:37:43.0000] <Ms2ger>
zcorpan, everything moves off of the prototype

[07:39:56.0000] <zcorpan>
Ms2ger: but Location doesn't inherit from any other interface, and those members are not specified in the IDL. http://heycam.github.io/webidl/#dfn-consequential-interfaces

[07:40:02.0000] <annevk>
rubys: I suggest we reword the abstract to this: "The URL Standard defines URLs, domains, IP addresses, the <code title>application/x-www-form-urlencoded</code> format, and their API."

[07:40:22.0000] <Ms2ger>
zcorpan, they're on Object.prototype

[07:40:26.0000] <annevk>
rubys: I haven't committed that since it would be interesting to know why our bikeshed does subtly different things for url.html

[07:41:07.0000] <gsnedders>
where does Object.prototype.toJSON come from? is that some new thing in ES6?

[07:41:20.0000] <Ms2ger>
Is it?

[07:41:28.0000] <gsnedders>
It's certainly not in ES5.

[07:41:41.0000] <gsnedders>
Ms2ger: I do like how the solution to "I don't have pip!" is "install pip using another Python package manager" :)

[07:41:43.0000] <zcorpan>
Ms2ger: hmm looks like the requirement is in http://heycam.github.io/webidl/#es-platform-objects

[07:42:06.0000] <Ms2ger>
gsnedders, install easy_install with pip first ;)

[07:42:08.0000] <rubys>
annevk: what are those differences (and, I'm fine with that abstract)

[07:42:27.0000] <zcorpan>
why are these enumerable?

[07:42:30.0000] <zcorpan>
seems annoying

[07:42:31.0000] <Ms2ger>
No idea

[07:43:03.0000] <rubys>
annevk: if you do commit, github will helpfully show those diffs :-)

[07:43:17.0000] <gsnedders>
zcorpan: they predate the concept of enumerability

[07:43:22.0000] <Ms2ger>
Find bholley? :)

[07:43:54.0000] <annevk>
rubys: enjoy the diff

[07:45:14.0000] <annevk>
gsnedders: toJSON was in ES5

[07:45:22.0000] <rubys>
annevk: looks like it moved the </main>

[07:45:34.0000] <gsnedders>
annevk: where? only Date.prototype.toJSON was

[07:46:02.0000] <annevk>
gsnedders: JSON.stringify invokes it

[07:46:20.0000] <gsnedders>
No it doesn't

[07:46:25.0000] <annevk>
I'm not sure if toJSON should be on each object though, only on objects that make sense

[07:46:52.0000] <gsnedders>
Oh, it does

[07:46:54.0000] <gsnedders>
I'm blind

[07:47:03.0000] <gsnedders>
But Object.prototype.toJSON shouldn't exist per ES5.

[07:47:18.0000] <gsnedders>
Well, I mean, it /can/ exist, but it's a non-standard extension.

[07:48:35.0000] <annevk>
Yeah, that part hasn't changed in ES6

[07:48:39.0000] <zcorpan>
filed https://www.w3.org/Bugs/Public/show_bug.cgi?id=27361

[08:19:15.0000] <smaug____>
is whatwg.org down

[08:19:55.0000] <smaug____>
apparently so

[08:19:58.0000] <smaug____>
"Whatwg.org is DOWN for everyone."

[08:22:02.0000] <smaug____>
up

[08:29:00.0000] <Domenic_>
annevk: rubys: we should move https://github.com/whatwg/streams/blob/master/index.bs#L25-L77 into the common WHATWG CSS so that you get the linkable section headers that http://streams.spec.whatwg.org/ has

[08:29:32.0000] <Domenic_>
I would PR it myself but apparently airplane wifi is horribly shitty

[08:29:52.0000] <annevk>
Domenic_: WHATWG CSS is not in GitHub so that wouldn't work

[08:29:57.0000] <annevk>
Domenic_: requires Hixie

[08:30:37.0000] <annevk>
Domenic_: we could put it on resources.whatwg.org perhaps as bikeshed.css since it only applies to bikeshed specs

[08:30:39.0000] <Domenic_>
annevk: or we could put it in the Bikeshed repo

[08:30:47.0000] <Domenic_>
ah yeah or that

[08:31:18.0000] <rubys>
Domenic_, annevk: I'm OK with any of these approaches.

[08:31:37.0000] <Domenic_>
resources sounds easiest

[08:32:38.0000] <rubys>
Domenic_, annevk: I don't mean the following to be defensive, but just as an accurate description of what I have done to date: what I did was push through to see what could be done, now it is time to refactor that work into the best "home" for each piece.

[08:33:37.0000] <rubys>
Domenic_, annevk: nevermind, I just realized that Domenic_ was talking about *his* work, not mine.  Oopsie.  :-)

[08:54:51.0000] <annevk>
Ah okay, so Let's Encrypt is signed by IdenTrust until it gets into browsers

[10:21:16.0000] <annevk>
foolip: I'm a bit reluctant to change the attribute stuff around again

[10:21:52.0000] <annevk>
foolip: unless we have some coherent plan for why we should be different

[10:25:55.0000] <TabAtkins>
Domenic: Yeah, please either put stuff in a common css file, or inline into the header-whatwg.include file.

[11:09:47.0000] <Hixie>
i'm here now

[11:09:52.0000] <Hixie>
looks like some people need something from me?

[11:10:44.0000] <TabAtkins>
Nah, we get along fine without you.

[11:12:22.0000] <TabAtkins>
But really, there's some styling common to all the Bikeshedded WHATWG specs that should either go into the header boilerplate, or into a stylesheet on resources.whatwg.org.

[11:17:26.0000] <annevk>
Hixie: I think we solved the problems some other way, though you might want to open the developer console and fix some of the WHATWG stylesheet errors

[11:22:10.0000] <Hixie>
which spec?

[11:22:19.0000] <Hixie>
https://html.spec.whatwg.org/multipage/ doesn't give me any messages in chrome

[11:26:36.0000] <Hixie>
annevk: i can't work out which problems you mean

[11:26:44.0000] <Hixie>
annevk: all the warnings firefox gives me are bogus

[11:27:23.0000] <annevk>
Hixie: oh it seems they are

[11:27:46.0000] <annevk>
Hixie: perhaps you fixed the non-bogus one I saw a while back

[11:27:49.0000] <annevk>
sorry

[11:28:35.0000] <Hixie>
did you want something with domains or something?

[11:29:30.0000] <TabAtkins>
Hixie: The aural stuff is bogus, though.

[11:29:34.0000] <TabAtkins>
You can just kill that whole thing.

[11:30:09.0000] <Hixie>
last i checked, emacs still supports that

[11:30:59.0000] <TabAtkins>
emacs is supporting deprecated specs, then, and violating current MQ ("aural" should always be false)

[12:03:36.0000] <hsivonen>
annevk: pretty interesting how the use case for restoring DOS code pages turned out to be better served by the DOS code page that we kept rather than the DOS code pages that we removed

[12:04:37.0000] <hsivonen>
I guess the lesson is to always push for use cases instead of just taking "OMG you broke my workflow" at face value

[12:32:21.0000] <Hixie>
MikeSmith: is cssom not in https://platform.html5.org/ ?

[12:37:20.0000] <Hixie>
resize events then scroll events? or scroll events then resize events?

[12:37:33.0000] <Hixie>
i'm thinking resize first, so you can react to the resize by scrolling

[13:40:50.0000] <foolip>
annevk: ok, if you WONTFIX https://www.w3.org/Bugs/Public/show_bug.cgi?id=27344 it'll at least be a clear signal that you hope that Blink changes instead of the spec

[13:43:37.0000] <foolip>
I suggested what I think would be the shortest and least riskiest path for Blink, since it basically amounts to removing the redundant and almost unused setAttributeNodeNS

[14:18:43.0000] <annevk>
foolip: I'm not really here, but I just wanted to say that I don't really have an opinion, if you could convince a non-Webkit/Chromium browser to chime in that'd help

[14:46:45.0000] <foolip>
annevk: ok :)

[14:47:52.0000] <TabAtkins>
rubys: I'm noodling on a more compact syntax for custom anchor data: https://gist.github.com/tabatkins/b9b07594dbcde338fd86

[14:48:46.0000] <TabAtkins>
(I really like whitespace-based nesting syntaxes. They're so natural and easy to use!)

[14:49:16.0000] <TabAtkins>
(And importantly, easy to edit when you rearrange things.  Far better than enclosing-character-based nesting syntaxes.)

[15:09:55.0000] <Hixie>
(and so friendly to copy-paste across whitespace-ignoring environments like HTML)

[15:43:32.0000] <TabAtkins>
Hixie: Luckily, don't care!  That's what <pre> is for. ^_^

[15:43:41.0000] <TabAtkins>
Or <plaintext> ^_^


2014-11-19
[16:03:24.0000] <hober>
<xmp> 4evah

[16:07:46.0000] <caitp>
"Blending of HTML and SVG elements" << is that part of what you were saying before about moving svg into the html namespace?

[16:08:02.0000] <pdr>
caitp, no, this is about blend modes

[16:08:12.0000] <caitp>
mm

[16:08:35.0000] <caitp>
if google groups notifications would link to the actual thread it would be easier to read the whole thing :>

[16:09:19.0000] <pdr>
caitp, https://groups.google.com/a/chromium.org/d/msg/blink-dev/WoLwgoPB-GE/KqAftxiogKMJ

[16:09:37.0000] <pdr>
caitp, agreed, google groups... ( ._.)

[16:10:02.0000] <caitp>
so it's basically a feature, that's cool

[17:23:16.0000] <MikeSmith>
Hixie: CSSOM added now (and CSSOM Views)

[17:24:13.0000] <JonathanNeal>
A few of us are starting work on Element Queries. Your thoughts, concerns, questions, and feedback are most desired. https://github.com/ResponsiveImagesCG/eq-demos

[17:28:29.0000] <Una>
hey JonathanNeal can you give me a use case? I'm trying to understand better

[17:32:25.0000] <JonathanNeal>
Una: yes. You have a widget running in a web page that you do not control. The widget may be in a narrow column or a wide column. When the column is narrow, even though the screen is large, things go poorly for the widget.

[17:33:10.0000] <JonathanNeal>
Una: there is also an effort in progress to formalize use cases @ http://responsiveimagescg.github.io/eq-usecases/

[17:33:14.0000] <Una>
JonathanNeal but if you don't control the widget, how are you going to style it with element queries?

[17:33:45.0000] <JonathanNeal>
The widget deploys its own HTML and CSS, but does not control where it lives on the page.

[17:34:48.0000] <JonathanNeal>
The admin who controls the page has the power to “deploy the widget here”, here being any kind of column.

[17:35:15.0000] <JonathanNeal>
This is the same need we have in media queries, but in context of the layout vs in context of the screen size.

[17:58:05.0000] <JonathanNeal>
For Element Queries, I think the simpliest use case is: “I have a widget that needs to look good in any column of our layout, whether that column is small, medium, or large.”

[18:06:04.0000] <Hixie>
MikeSmith: cool, thanks

[20:23:44.0000] <jamesr_>
JonathanNeal: how do you avoid creating cycles?

[23:11:36.0000] <jamesheston>
Can anyone recommend any alternatives to Filezilla for OSX? Want to try something different.

[00:02:42.0000] <zcorpan>
TabAtkins: is bikeshed responsible for this URL? https://github.com/whatwg/url/blob/bd3f0ce38f61db5cfa2c485fef7aec2e4bdb0182/url.html#L26

[00:05:21.0000] <annevk>
Hixie: https://github.com/whatwg/platform.html5.org/pull/7

[02:18:29.0000] <annevk>
rubys1: "If the @ flag is set, parse error, prepend "%40" to buffer." does not cause reordering...

[02:20:16.0000] <rubys>
annevk: can you explain?  If buffer has characters, and you put another character in front of those characters, doesn't that re-order?

[02:20:41.0000] <annevk>
rubys: it only puts it in front if the flag was set, meaning it has to be in front

[02:21:47.0000] <rubys>
https://url.spec.whatwg.org/#authority-state

[02:22:25.0000] <rubys>
step 1.1; prepend.  step 1.2, sets the flag.  Next time through the loop, the flag is still set?

[02:22:57.0000] <rubys>
by the way, testing with chrome and firefox shows that re-ordering does occur.

[02:24:57.0000] <rubys>
(it also shows that browsers don't implement this interoperably)

[02:29:15.0000] <annevk>
hmm, yeah, there's a bug there, I can't reproduce reordering in Firefox

[02:29:58.0000] <rubys>
ah, cool!.  I'll change mine to simply string.replace('@', '%40')

[02:30:16.0000] <rubys>
er, /@/g

[02:30:26.0000] <annevk>
rubys: btw, we say that diagrams are non-normative, yet you want to introduce normative ones...

[02:30:57.0000] <annevk>
rubys: and that spec is still lacking normative statements, and has some normative statements in notes, doesn't really seem ready

[02:30:58.0000] <rubys>
ack

[02:31:35.0000] <rubys>
I still have that on the todo list. I also don't really understand the comment, so some concrete suggestions would be helpful.

[02:38:47.0000] <annevk>
Also, a concern was raised that these productions are not accessible and that therefore it's hard to treat them as normative

[02:38:56.0000] <annevk>
s/productions/diagrams/

[02:39:12.0000] <annevk>
rubys: what is unclear about the comment?

[02:39:52.0000] <rubys>
valid concern.  I can provide BNF-like notation as an alternate.  Might need to work with TabAtkins to make that so.

[02:40:27.0000] <MikeSmith>
yeah seems like the CSS spec has the same issue if so

[02:40:40.0000] <MikeSmith>
specs

[02:40:54.0000] <rubys>
First, I don't understand how you have normative statements that say that you MUST do x, and then follow up with a statement that you don't need to do x, you just need to produce the same results as x.

[02:40:56.0000] <MikeSmith>
or are the railroad diagrams in the CSS specs never normative?

[02:41:06.0000] <rubys>
in CSS, they are not normative

[02:41:16.0000] <MikeSmith>
ok

[02:42:17.0000] <rubys>
MikeSmith: even so, it probably would be good if they were accessible.

[02:43:48.0000] <MikeSmith>
trueーunless it's clear from the context that they're simply illustrating some normative part of the spec

[02:44:58.0000] <rubys>
MikeSmith: my understanding is that the normative part describes the full grammar (with error correction), and the non-normative diagrams are a simplified form explaining correct usage.

[02:45:16.0000] <MikeSmith>
ok

[02:45:23.0000] <MikeSmith>
makes sense

[02:45:43.0000] <rubys>
In the URL space, the grammar is much smaller

[02:47:34.0000] <MikeSmith>
sure

[02:50:10.0000] <annevk>
rubys: you MUST do x or equivalent and for brevity "or equivalent" is omitted and expanded upon elsewhere; that's pretty normal

[02:51:24.0000] <rubys>
annevk: can you identify a case where a MUST is missing?  I work best from examples.

[02:52:11.0000] <annevk>
rubys: I thought you wanted to do the heavy lifting

[02:52:38.0000] <annevk>
rubys: if I still have to shift through everything and explain how to write a specification, I'm not sure it's going to be much quicker than just doing it myself

[02:53:03.0000] <rubys>
I didn't think asking for a single example was asking too much.

[02:53:37.0000] <annevk>
rubys: well currently the only places the spec uses MUST is in the conformance section and parse exceptions

[02:54:01.0000] <annevk>
rubys: it seems pretty self-evident that requirements are missing in that case

[02:54:57.0000] <annevk>
rubys: it's not entirely clear to me currently what the entry point is

[02:54:58.0000] <rubys>
annevk: ok.  It is still on the todo list (as listed in the spec).  I fear that I'm playing "fetch me a rock", but I'll try.

[02:55:45.0000] <annevk>
rubys: I have the same feeling, whenever I point out something that's wrong, I get asked for examples, tests, and demonstrations

[02:56:16.0000] <MikeSmith>
incidentally, looking back at the CSS Syntax spec now, I wonder if I'm the only only who doesn't find it so useful that following a hyperlink for, e.g., "<string-token>" doesn't actually take me to any kind of definition of what a <string-token> isーnot even to an (informative) railroad diagram; instead it takes to me to... I don't know what http://dev.w3.org/csswg/css-syntax/#typedef-string-token And i

[02:56:22.0000] <MikeSmith>
f I want the actual normative definition of what a <string-token> is, there's nothing directly hyperlinked toーI just have to somehow know I need to read "Consume a string token" http://dev.w3.org/csswg/css-syntax/#consume-string-token

[02:56:56.0000] <annevk>
MikeSmith: that is pretty confusing

[02:58:06.0000] <MikeSmith>
annevk: yeah I am recalling now just how confusing I really find it when I was trying to understand the formalism for the "sizes" attribute value (which normatively refers to the CSS specs)

[02:58:17.0000] <MikeSmith>
*found it

[03:02:44.0000] <annevk>
rubys: I guess I should also say that I'm not okay with encouraging the W3C to fork whatwg/url

[03:03:15.0000] <annevk>
rubys: that happening just after I accepted working with you is rather surprising and discomforting, I'm not entirely sure if I want to proceed

[03:05:02.0000] <rubys>
annevk: two things.  (1) I intend to work with everybody and anybody; and (2) I am entirely unimpressed with the lack of response by the webapps (in particular, the webapps chairs).

[03:06:18.0000] <rubys>
If Mike cares to, he can confirm that I have expressed my displeasure on this matter to all levels of W3C management.

[03:09:17.0000] <rubys>
regarding the timing, I had published my plan to do exactly what I am doing three weeks ago

[03:10:27.0000] <rubys>
http://lists.w3.org/Archives/Public/public-webapps/2014OctDec/0315.html

[03:11:20.0000] <rubys>
My experience is that when I ask questions in the WHATWG, I get answers.  When I ask questions in WebApps, I get... silence.

[03:11:51.0000] <MikeSmith>
rubys: You may have noticed that I've stayed completely out of that conversation. Also I can imagine that Anne probably couldn't care less about the lack of response from the the webapps chairs or the WG on this because I can imagine he doesn't see what problem needs to be solved here, and he clearly doesn't think the solution is for the webapps WG to publish a copy of the URL spec

[03:12:24.0000] <rubys>
MikeSmith: ack

[03:12:46.0000] <rubys>
I do think that's a discussion we ought to have.  Meanwhile, I plan to make my work available to everybody who might be interested.

[03:13:10.0000] <rubys>
My making it available to the WHATWG is not meant to be an exclusive arrangement.

[03:13:50.0000] <MikeSmith>
rubys: you're making to available to everybody simply by it being published at url.spec.whatwg.org under cc0

[03:14:39.0000] <rubys>
MikeSmith: actually, I'm making it available to everybody simply by publishing it at intertwingly.net under cc0.

[03:14:48.0000] <MikeSmith>
that works too

[03:14:49.0000] <annevk>
rubys: euhm, whatwg/url is not your work

[03:15:50.0000] <rubys>
I'm going back to working on code.  I will arrange to have the proper people in this discussion, including the Director.

[03:16:45.0000] <annevk>
rubys: W3C's the Director has not written whatwg/url either

[03:17:33.0000] <MikeSmith>
rubys: the discussion you seemed to be having here seemed to be a useful one for you and anne to have as co-editors and seems like it could be had separately from any other people or from the W3C Director

[03:19:44.0000] <jgraham>
/me wonders if MikeSmith has "W3C Director" as an irc keyword ;)

[03:23:43.0000] <rubys>
annevk: an example of my confusion: I don't see a single "MUST" here: https://url.spec.whatwg.org/#percent-decode

[03:24:31.0000] <annevk>
rubys: as I said, it depends on the entry point

[03:25:55.0000] <rubys>
entry point?  The only other mention to this is in the index.

[03:26:40.0000] <annevk>
rubys: that's not true

[03:26:47.0000] <annevk>
rubys: click on it

[03:27:05.0000] <rubys>
weird.  firefox couldn't find that.

[03:27:14.0000] <rubys>
ah, "percent decoding"

[03:27:37.0000] <rubys>
"Let domain be the result of  utf-8 decode without BOM on the  percent decoding of  utf-8 encode on input.     "

[03:27:40.0000] <rubys>
Still no must

[03:28:00.0000] <annevk>
rubys: still no entry point :-) it's mostly the API that requires things

[03:28:10.0000] <annevk>
rubys: and other specs that reference these algorithms

[03:28:45.0000] <rubys>
what I have is a spec fragment, rewriting the parsing logic.  Logic that doesn't have musts in either the current url standard or in my proposed replacement.

[03:28:55.0000] <jgraham>
annevk: I can't see any text in url that explicitly says that when you are asked to run an algorithm only black-box indistinguishability matters

[03:29:17.0000] <annevk>
jgraham: "Conformance requirements phrased as algorithms or specific steps may be implemented in any manner, so long as the end result is equivalent. (In particular, the algorithms defined in this specification are intended to be easy to follow, and not intended to be performant.)"

[03:29:18.0000] <rubys>
jgraham: https://url.spec.whatwg.org/#conformance

[03:29:59.0000] <jgraham>
Oh, that's at the bottom now? How very confusing

[03:30:28.0000] <annevk>
rubys: it might be okay, though then that lone MUST is confusing

[03:31:13.0000] <rubys>
jgraham: bikeshed templates do that, not sure why.

[03:31:44.0000] <annevk>
jgraham: blame TabAtkins

[03:32:09.0000] <rubys>
perhaps we need to add "This specification should be read like all other specifications. First, it should be read   cover-to-cover, multiple times. Then, it should be read backwards at least once. Then it should be   read by picking random sections from the contents list and following all the cross-references."

[03:32:21.0000] <jgraham>
I guess someone thought that getting to the actual spec without the boilerplate stuff was a good idea. But having the "important stuff you need to know to understand the spec" at the top of the spec rather than at the bottom does seem to make more sense

[03:33:56.0000] <jgraham>
Or there could be a meta-specification and the top of the spec could just say "this spec must be read according to the WHATWG specification specification"

[03:34:36.0000] <jgraham>
(that is essentially what RFC 2119 is ofc)

[03:34:39.0000] <annevk>
jgraham: I have at times wanted to write the "Boilerplate Standard" that also includes common terminology

[03:40:08.0000] <rubys>
MikeSmith, annevk: since you are both here, I appear to have update access to web-platform-tests; should I still do pull requests for changes to url/urltestdata.txt?

[03:40:25.0000] <jgraham>
rubys: Yes, see my message to whatwg

[03:41:08.0000] <rubys>
jgraham: ok, I can work with that.

[03:41:18.0000] <rubys>
jgraham: should I do one pull request or three?

[03:47:57.0000] <jgraham>
rubys: That's up to you

[05:12:51.0000] <annevk>
hsivonen: https://news.ycombinator.com/item?id=8624160 is terrible

[05:13:11.0000] <annevk>
hsivonen: trying very hard to not 386 the entire thread

[05:15:18.0000] <annevk>
hsivonen: it has everything, praising EV, dissing DV, suggestions to replace the entire crypto stack because it's too complicated, ...

[05:17:57.0000] <annevk>
hsivonen: I was going to tweet HN jumped the shark, but then I found https://news.ycombinator.com/item?id=1339857

[05:27:47.0000] <jgraham>
The other possible response is to assume that this represents the real opinions of a subset of the relatively-tech-literate population and work out how to fix that, if necessary

[05:29:43.0000] <jgraham>
I'm guessing a post suggesting that forum jumped the shark isn't going to help (c.f. the fact that post got modded into grey). I'm guessing a more informative post written there would help more, but not that much, since it comes across as no more authoratative than any other post

[05:34:53.0000] <Ms2ger>
MikeSmith, thanks again :)

[05:35:53.0000] <MikeSmith>
Ms2ger: happy to help

[05:47:19.0000] <rubys>
annevk: OK, I've had my coffee.  If you want to talk about copying, let me know if you are available.

[05:51:16.0000] <MikeSmith>
rubys: see critic for comments on the urltestdata.txt PR

[05:52:57.0000] <rubys>
MikeSmith: wierd.  I copy and pasted from working code.  Odd that I lost spaces in that process.  Good catch!

[05:53:03.0000] <MikeSmith>
rubys: and btw thanks extremely much for providing the relevant citations/links for the changes. I wish everybody would do that, and I hope you keep doing it. It saves a lot of reviewing time.

[05:53:34.0000] <rubys>
MikeSmith: yw.  It is second nature to me to do so, and I plan to continue.

[05:54:02.0000] <MikeSmith>
cool

[05:56:22.0000] <MikeSmith>
rubys: btw I notice also that there's some unrelated borkedness in the expected behavior of the harness in Chrome at least. Compare the results for the last test (Parsing: <x> against <test:test>) in Chrome and Firefox

[05:57:15.0000] <MikeSmith>
rubys: in my Chromium build at least, it says 'assert_equals: href expected "x" but got ""' but that's clearly not what the test is actually saying

[05:57:43.0000] <MikeSmith>
/me re-checks it in stable Chrome

[05:58:09.0000] <MikeSmith>
yeah, same thing in stable Chrome

[05:59:11.0000] <rubys>
MikeSmith: try it here: https://url.spec.whatwg.org/reference-implementation/liveview2.html (it isn't just the harness)

[05:59:26.0000] <MikeSmith>
rubys: also, in all UAs, the "assert_unreached: Expected URL to fail parsing Reached unreachable code" fails are all wrong. They should all be passes.

[05:59:39.0000] <MikeSmith>
rubys: looking now

[06:01:51.0000] <rubys>
MikeSmith: FYI, I haven't actually looked at test harness.  Ever.  I've only "adopted" the test data.

[06:02:37.0000] <rubys>
MikeSmith: OK, I've updated the pull request.  What do I need to do with the critic comments?

[06:02:38.0000] <MikeSmith>
rubys: OK. and yeah of course I didn't mean to suggest that the harness problems were something for you to fix

[06:02:51.0000] <MikeSmith>
rubys: they should be resolved automatically

[06:03:04.0000] <MikeSmith>
that's one of the nice features of critic

[06:03:42.0000] <rubys>
MikeSmith: it seems possible that there isn't a harness problem; as a "black box", Chrome behaves a bit unpredictably when dealing with unknown url schemes.

[06:04:02.0000] <MikeSmith>
ah

[06:04:06.0000] <MikeSmith>
yeah that makes sense

[06:07:56.0000] <MikeSmith>
rubys: I can't tell from https://url.spec.whatwg.org/reference-implementation/liveview2.html whether I'm seeing the expected result for the "Parsing: <x> against <test:test>" case

[06:08:14.0000] <rubys>
do you see any red?

[06:08:33.0000] <MikeSmith>
rubys: no but I guess I expect it would clearly say "Parsing failed as expected" or something

[06:09:10.0000] <MikeSmith>
instead it says "href https://url.spec.whatwg.org/reference-implementation/liveview2.html" and "hostname url.spec.whatwg.org" etc.

[06:09:40.0000] <MikeSmith>
which to mean implies that it's successfully parsing a URL, though not the URL I asked it to parse

[06:09:41.0000] <rubys>
MikeSmith: you are using chrome?

[06:10:03.0000] <MikeSmith>
I see the same thing in both Firefox and Chrome for this

[06:10:11.0000] <rubys>
MikeSmith: In Chrome do exactly what I say, in this order:

[06:10:35.0000] <MikeSmith>
/me nods

[06:10:48.0000] <rubys>
1) refresh.  2) enter test:test in base, 3) enter x in the first input field

[06:11:32.0000] <rubys>
my conclusion: order matters, and this "black box" is unpredictable.

[06:12:18.0000] <rubys>
when parsing fails, you shouldn't see https://url.spec.whatwg.org/reference-implementation/liveview2.html, you should see ":" for protocol, what you specified in href, and nothing else different.

[06:12:32.0000] <rubys>
s/else different/else/

[06:13:02.0000] <rubys>
For example, try http://foo:x/ as the input, which fails predictably.

[06:13:41.0000] <rubys>
Chrome gives a port number of 0 in that case, which is out of spec, but at least sane.

[06:14:03.0000] <MikeSmith>
rubys: OK yeah I see different results now when I fill in the base URL field first, then the URL field

[06:14:30.0000] <MikeSmith>
rubys: but I see different results in Firefox also, when I change the order

[06:15:10.0000] <rubys>
frameworks don't always do well when the function they are testing behave unpredictably :-)

[06:15:25.0000] <MikeSmith>
sure

[06:15:48.0000] <rubys>
MikeSmith: see pm

[06:19:41.0000] <annevk>
MikeSmith: the test format is very peculiar, I can take a look later

[06:30:35.0000] <annevk>
rubys: I'm mostly available now, is there anything more to say?

[06:31:05.0000] <rubys>
I have plenty to say.  How would you like to have the discussion?  PM, here, email, ... ?

[06:49:04.0000] <annevk>
rubys: www-archive or here would be fine

[06:50:45.0000] <rubys>
annevk: give me a sec, I'll post to www-archive, and then we can discuss here (it is a half-dozen paragraphs+ of material at this point)

[06:55:20.0000] <rubys>
http://lists.w3.org/Archives/Public/www-archive/2014Nov/0023.html

[07:43:09.0000] <annevk>
rubys: I don't really see it addresses the point, other than you disagreeing with my position

[07:47:02.0000] <rubys>
annevk: I would be sad if the only solution I had available to fixing the problems I see in the URL spec is to rewrite everything myself.

[07:47:58.0000] <annevk>
rubys: that seems like a non-sequitur given that I gave you commit access

[07:48:42.0000] <rubys>
annevk: It seems that commit access was given with a string that I wasn't aware of.  And that you are reconsidering that.  I'd like to discuss.

[07:49:35.0000] <rubys>
we clearly have philosophical differences; but I'm convinced that operationally they don't matter.

[07:50:21.0000] <rubys>
you'd prefer an approach which actively denies WebApps the ability to work on the URL spec; I'd prefer an approach which gives them the opportunity to do so, with the expectation that they won't.

[07:50:43.0000] <Ms2ger>
rubys, nobody denies anyone any ability

[07:50:50.0000] <Ms2ger>
rubys, that doesn't mean it's a good idea

[07:50:58.0000] <annevk>
rubys: you offered to be editor

[07:51:14.0000] <annevk>
rubys: and I don't think that is what I prefer as "approach"

[07:51:25.0000] <rubys>
annevk: I made that offer to both the W3C and the WHATWG

[07:53:47.0000] <annevk>
rubys: what I prefer is that we have a single version of the specification, available under CC0; and I want that idea to be shared by any active collaborators (e.g. those that commit)

[07:54:16.0000] <annevk>
rubys: it was not clear to me what upon getting commit access you would ship the repository around to other standards bodies

[07:54:54.0000] <rubys>
annevk: I agree with that goal.  The proposal to update the WebApps version predated my contributions and eventual acceptance as editor.

[07:54:55.0000] <annevk>
rubys: that is in your right of course, but then I would prefer that we go back to the PR-style way of working together

[07:55:02.0000] <Domenic>
/me reminds everyone to assume good intent...

[07:55:33.0000] <rubys>
I will state that I agree with "a single version of the specification, available under CC0; and I want that idea to be shared by any active collaborators (e.g. those that commit)"

[07:56:08.0000] <rubys>
I will also state that I don't think it quite is there yet, but I am hopeful that it will be.

[07:56:31.0000] <annevk>
rubys: given point bad-3 in your email that seems untrue

[07:56:48.0000] <rubys>
annevk: ok, then let me explain

[07:56:50.0000] <annevk>
rubys: unless my sentence was not specific enough...

[07:56:57.0000] <Domenic>
(I didn't interpret bad-3 that way.)

[07:57:19.0000] <annevk>
Domenic: how did you interpret it?

[07:57:26.0000] <rubys>
I believe that the barrier to entry for participation is too high on some specs at the WHATWG.  Dominic's spec work is an example that others should follow.

[07:58:09.0000] <rubys>
What I see in streams is a signs of a true meritocracy, much like I see at the Apache Software Foundation.

[07:58:13.0000] <Domenic>
annevk: I interpreted bad-3 as he does not agree with the general WHATWG stance on copying in principle, but in combination with good-3, rubys seems fine going along with that stance in practice.

[07:58:46.0000] <rubys>
The fact that I am able to scale that barrier to entry isn't evidence that the barrier to entry is too high.

[07:59:48.0000] <rubys>
If the barrier remains too high, I'll eventually decide to work elsewhere and accept a suboptimal license.

[07:59:59.0000] <rubys>
And that would make me sad.

[08:00:19.0000] <annevk>
rubys: how is Streams different?

[08:00:56.0000] <rubys>
https://github.com/whatwg/streams - 8 contributors.  https://github.com/whatwg/url - 2 contributors.

[08:02:41.0000] <rubys>
I will state this: if you allow me to continue to co-edit, I WILL build a community.  I WILL have the meeting with the W3C Director and actively challenge the need for a copy.

[08:02:53.0000] <rubys>
And I will do that based on evidence, not philosophy.

[08:04:34.0000] <annevk>
rubys: okay, sounds good, make it happen

[08:04:48.0000] <rubys>
sweet!

[08:05:05.0000] <annevk>
Looking at https://github.com/whatwg/streams/graphs/contributors though it's not that diverse, but at least the number is higher :-)

[08:05:17.0000] <rubys>
Note: this conversation is publicly archived.  If I don't follow through, feel free to call me on it.

[08:05:57.0000] <Domenic>
streams has good diversity in the issue tracker. the actual contributions are mostly takeshi and I, plus a few editorial corrections.

[08:06:15.0000] <Domenic>
also lol how you can see when i joined google from that graph :P

[08:13:49.0000] <hsivonen>
jgraham: do you have ideas how to make the relatively tech literate crowd see that certifying the binding between a public key and a host name has value?

[08:16:55.0000] <wilhelm>
hsivonen: Which additional attack vectors are possible without that certification?

[08:18:00.0000] <hsivonen>
wilhelm: a MITM establishing an encrypted connection with the browser and another with the origin server and either reading or modifying the traffic as the MITM moves it from one pipe into the other

[08:18:51.0000] <hsivonen>
wilhelm: (or the MITM establishing an encrypted connection with the browser and not even bothering with taking any data from the real server)

[08:19:31.0000] <hsivonen>
wilhelm: so without authenticity, a MITM can compromise both integrity and confidentiality

[08:20:13.0000] <hsivonen>
on the topic of https, an https-enabled validator.nu exist but DNS doesn't point to it yet, because I want to avoid breaking legacy API clients

[08:20:40.0000] <hsivonen>
so I want a redirect from http to https that only happens if the method is GET and there is no query string

[08:20:50.0000] <hsivonen>
can someone teach me how to do that in nginx?

[08:21:05.0000] <hsivonen>
I can do a redirect conditional on the method being GET

[08:21:20.0000] <hsivonen>
and I can do a redirect conditional on the query string being empty

[08:21:37.0000] <hsivonen>
but I don't know how to check for both conditions at the same time

[08:23:34.0000] <wilhelm>
hsivonen: That's the attack vector I assumed. Wouldn't merely pointing to that convince the audience?

[08:26:52.0000] <hsivonen>
wilhelm: apparently not. people seem to assume that the set of MITMs that can only read and not write is significant

[08:28:35.0000] <annevk>
hsivonen: it seems to me so much that's like flipping a switch, maybe not quite right now, but definitely down the line

[08:38:17.0000] <hsivonen>
annevk: the notion that backbone MITMs can't write *as much* data at a given time as they can read seems believable

[08:38:49.0000] <hsivonen>
annevk: so it's probably not a flip of the switch for equal amounts of MITMing in all cases

[08:39:09.0000] <hsivonen>
annevk: but it does seem naive to assume that a MITM who can read can't write at all

[08:39:22.0000] <hsivonen>
annevk: and then you don't know when the MITM is writing

[08:40:20.0000] <annevk>
hsivonen: was it claimed that you could detect MITM?

[08:40:47.0000] <hsivonen>
annevk: with TOFU, you can detect if your first connection happened to be clean

[08:42:00.0000] <hsivonen>
of course, with TOFU, people just assume that the key changed for benign reasons

[08:46:02.0000] <hsivonen>
nginx is usually awesome, but the redirect stuff is remarkably inflexible (likely to be very fast)

[08:52:45.0000] <jgraham>
hsivonen: publicise a tool that makes MITMing a site served using a self-signed cert trivial (c.f. firesheep)?

[09:05:33.0000] <TabAtkins>
jgraham: Don't blame me, it's a result of the boilerplate that Domenic wrote for WHATWG specs. (Which he partially based on the CSSWG boilerplate, probably.)

[09:40:24.0000] <gsnedders>
zcorpan: grattis!

[09:40:32.0000] <zcorpan>
gsnedders: tack!

[09:40:56.0000] <TabAtkins>
jgraham: But it's also a good idea, in general, to move that crap out of the top of the spec. You read it once, you internalize it, you're done.  Requiring people to scroll past it every time is a bit reader-hostile.  (At least, that was our reasoning in the CSSWG when we rejiggered our boilerplate.)

[09:45:15.0000] <TabAtkins>
zcorpan: That url comes from WHATWG's boilerplate files in Bikeshed.  If something's wrong with it, it can be corrected.

[09:46:09.0000] <zcorpan>
TabAtkins: it should be https://whatwg.org/

[09:46:48.0000] <wilhelm>
hsivonen: Setting up a rogue access point just to MITM people is trivial.

[09:47:40.0000] <TabAtkins>
zcorpan: Fixed.

[09:48:07.0000] <TabAtkins>
rubys: What's this about BNF-like notation?

[09:48:15.0000] <zcorpan>
TabAtkins: thx

[09:48:36.0000] <rubys>
TabAtkins: there needs to be an accessible alternative to the railroad diagrams

[09:48:36.0000] <TabAtkins>
rubys: If I'm understanding correctly, it's about you wanting to define some things in terms of a normative railroad diagram?

[09:48:58.0000] <rubys>
whether it is normative or not, if it is useful, it should be accessible

[09:49:02.0000] <TabAtkins>
Ah, kk.  I'd like to have such a thing, so I can add a <title> to the SVG.

[09:49:36.0000] <TabAtkins>
I'll bet I could auto-generate BNF from the diagram code.

[09:50:08.0000] <rubys>
I also can meet you half way if you like.  I generate the Railroad diagrams from peg.js input, so if you provide me a means to provide extra input, I can likely do so in a few lines of code.

[09:50:49.0000] <zcorpan>
i recall a proposal at tpac about an svg <connector> or something, to connect things in a way that can be communicated to AT

[09:50:59.0000] <rubys>
TabAtkins: very low on the priority list, but I've seen a few cases where the vertical alignment is off.  I've rejiggered some to avoid the problem, but a few remain.

[09:51:02.0000] <TabAtkins>
Yes.

[09:51:16.0000] <TabAtkins>
rubys: Ooh, point out when you find them.

[09:51:32.0000] <rubys>
http://intertwingly.net/projects/pegurl/url.html#host

[09:52:09.0000] <rubys>
File had a vertical gap (extra whitespace) and overlap.  By reordering, I made that go away.

[09:55:48.0000] <TabAtkins>
rubys: Hmm, I see.

[09:57:10.0000] <rubys>
I'll open two issues to track this?  Make railroad diagrams accessible, and fix vertical alignment?  Or is that unnecessary/unhelpful?

[09:57:20.0000] <TabAtkins>
Go for it!

[09:57:25.0000] <TabAtkins>
Issues are always good.

[10:01:49.0000] <rubys>
done

[10:08:13.0000] <jarek>
Hi

[10:08:40.0000] <jarek>
What is the difference between node.prototype.querySelector() and node.prototype.query() ?

[10:08:55.0000] <Domenic>
jarek: query() isn't implemented yet, but when it is, it'll be better in a few ways:

[10:09:06.0000] <Domenic>
1) it'll work with selector strings like "> div", which QS fails on

[10:09:26.0000] <Domenic>
oh wait I think that's most of it because you asked about query vs. querySelector not queryAll vs. querySelectorAll

[10:09:51.0000] <jarek>
Domenic: what about queryAll? How is it better than querySelectorAll?

[10:10:07.0000] <Domenic>
jarek: it returns an instance of Elements, which is a proper Array subclass, which is awesome.

[10:10:43.0000] <terinjokes>
Domenic: you mean qS(A) doesn't support the exact string of "> div"?

[10:11:01.0000] <Domenic>
terinjokes: yeah it uses "selector" instead of "relative selector"

[10:11:06.0000] <jarek>
Domenic: is it safe to shim query()/queryAll() by just aliasing it to querySelector()/querySelectorAll()?

[10:11:17.0000] <Domenic>
jarek: no, definitely not.

[10:11:30.0000] <Domenic>
jarek: use https://github.com/barberboy/dom-elements, it's pretty OK

[10:12:45.0000] <jarek>
there was another collection class introduced in DOM? Why not just make NodeList inherit from Array?

[10:13:56.0000] <annevk>
jarek: there's no "just"

[10:14:01.0000] <Domenic>
jarek: that breaks the web... lemme find the bug

[10:14:39.0000] <Domenic>
wow all of these answers are wrong http://stackoverflow.com/questions/13433799/why-doesnt-nodelist-have-foreach

[10:14:56.0000] <Domenic>
ah here we go https://esdiscuss.org/topic/why-does-legacy-content-break-when-making-array-likes-real-arrays

[10:17:27.0000] <caitp>
it's hard not to be wrong when talking about js

[10:17:41.0000] <jarek>
is there also some alternative to node.children that would give Elements instance instead of NodeList?

[10:17:57.0000] <Domenic>
node.queryAll("> *")

[10:18:46.0000] <jarek>
Domenic: uhm... for (let child of this.queryAll("> *")) doesn't look very readable

[10:18:52.0000] <Domenic>
seems fine to me

[10:19:57.0000] <jarek>
I think I'm sticking with NodeList, with ES6 it will be very easy to convert NodeList to Array, e.g. let childrenArray = [...element.children]

[10:20:29.0000] <Domenic>
*shrug*

[10:20:30.0000] <jarek>
[...this.children].forEach( (child) => console.log(child))

[10:20:54.0000] <Domenic>
You can't convert children to an array unless we make children iterable

[10:21:01.0000] <Domenic>
s/children iterable/NodeList iterable/

[10:21:11.0000] <caitp>
which would probably be a good idea, I mean

[10:21:19.0000] <Domenic>
yeah

[10:21:22.0000] <TabAtkins>
Domenic: Which I assume we'd do, since it's a symbol property and so won't be problematic int he same way.

[10:21:24.0000] <jarek>
Domenic: I can make NodeList iterable myself :P

[10:21:27.0000] <Domenic>
in which case it's just for (const child of this.children) { ... }

[10:22:39.0000] <caitp>
it would kind of suck to have to manually polyfill NodeList / HTMLCollection / etc to be iterable

[10:29:09.0000] <annevk>
jgraham: specification authors not maintaining their specification is also bad, though ;-)

[10:29:48.0000] <annevk>
NodeList is already iterable

[10:30:53.0000] <Hixie>
not that my opinion matters on this, but fwiw, i prefer conformance at the top, and for the bottom to be indices, references, acks, in that order.

[10:31:06.0000] <Hixie>
conformance at the bottom in particular is quite confusing to me at first :-)

[10:31:40.0000] <TabAtkins>
Hixie: I can definitely say I'm happy that our conformance moved to the bottom, because it means less PgDn necessary to get to the spec text.

[10:32:09.0000] <jgraham>
annevk: Right, but most bugs in implementations aren't bugs in specifications

[10:32:38.0000] <Hixie>
tab: yeah, i guess it depends on the spec. when you have the table of contents and then a multipage intro before anything else, the issue of whether the conformance section is before or after the rest of the spec text is pretty moot.

[10:32:47.0000] <annevk>
jgraham: do we have data on that? Often a clearer specification would help

[10:32:58.0000] <Hixie>
tab: (and HTML's conformance section is pretty big in practice, it's not really just boilerplate)

[10:33:12.0000] <annevk>
jgraham: oops, I don't have data either, so I should not have said that second thing :-)

[10:33:26.0000] <jgraham>
annevk: I have a hard time believing that most platform bugs in Gecko (for example) were actually spec bugs

[10:34:03.0000] <jgraham>
It's certainly *sometimes* true, but you have a huge observer bias since you almost only see bugs where it is true

[10:34:21.0000] <Ms2ger>
/me must be missing context

[10:34:28.0000] <jgraham>
But yeah I can't prove it

[10:34:34.0000] <jgraham>
Ms2ger: whatwg@

[10:34:52.0000] <jgraham>
Well I assume, either that or I have no idea waht annevk is on about :)

[10:35:09.0000] <annevk>
/me isn't sure what jgraham is on about either

[10:35:14.0000] <Ms2ger>
Ha

[10:36:53.0000] <annevk>
Hixie: it certainly seems that in practice "Conformance" being boilerplate would help implementers, as they are unlikely to read the whole document

[10:37:40.0000] <annevk>
Hixie: not that I'm particularly happy about the new section ordering, but I haven't really put time into appreciating it either

[10:37:55.0000] <jarek>
I recall there were some plans to introduce document.createElement("svg:rect") in place of document.createElement("http://www.w3.org/2000/svg", "rect")

[10:37:56.0000] <Hixie>
my "conformance" section includes pages and pages of terminology definitions that other specs rely on, as well as references to other specs that i rely on, a long description of all the conformance classes which is pretty html-specific, etc.

[10:38:04.0000] <jarek>
^ is this standarized anywhere already?

[10:38:16.0000] <TabAtkins>
jarek: No.

[10:38:19.0000] <Ms2ger>
No

[10:38:21.0000] <Hixie>
the actual boilerplate is only a few paragraphs but having that specifically moved elsewhere would be really weird and wouldn't really help tab's page-down-count issue.

[10:38:23.0000] <jarek>
it should be document.createElementNS("http://www.w3.org/2000/svg", "rect")

[10:38:24.0000] <tantek>
qnames lol

[10:39:02.0000] <jarek>
TabAtkins: how likely is this proposal to get accepted? Would it be reasonable to shim it already?

[10:39:27.0000] <jarek>
createElementNS feels out of place in HTML5, there has to be better API introduced

[10:39:45.0000] <Ms2ger>
Quite unlikely

[10:39:55.0000] <TabAtkins>
Nobody's really picked it up after the initial thread wound down, so no clue what it'll eventually look like.  Do whatever you want for your own APIs, though.  No need to shim document.createElement(), that's a terrible long name anyway.

[10:40:04.0000] <tantek>
you had me at NS feels out of place in HTML5

[10:40:26.0000] <Hixie>
document.createElementNetscape() ? :-)

[10:40:36.0000] <TabAtkins>
In my Python code I have an E class, so I can write `E.div({"class":"foo"}, "some text")`

[10:41:02.0000] <TabAtkins>
Making your own element-creation helper in that vein would be better.

[10:41:05.0000] <Hixie>
/me uses an E function, as in E('div', {class:'foo'}, 'some text', ...)

[10:41:15.0000] <Hixie>
where "some text" is any child elements

[10:41:18.0000] <Hixie>
including further nested E()s

[10:41:30.0000] <Hixie>
better than DOM, but still worse than E4H

[10:42:51.0000] <jarek>
Hixie: did you mean E4X?

[10:43:39.0000] <jarek>
Hixie: with ES6 E4X-like element creation is already possible

[10:43:41.0000] <Hixie>
i meant http://hixie.ch/specs/e4h/strawman

[10:44:15.0000] <Hixie>
as far as i can tell, that is incorrect. es6 lacks the key feature that i need, compile-time syntax checking.

[10:44:26.0000] <jarek>
Hixie: I see, I hope this was proposed before work on ES6 started?

[10:44:40.0000] <Hixie>
it was proposed in 2012ish

[10:44:51.0000] <Hixie>
but based on e4x which long predates es6

[10:48:20.0000] <annevk>
jarek: Hixie also proposed Element.create()

[10:48:45.0000] <annevk>
jarek: there's also some push for new HTMLDivElement() and friends

[10:49:23.0000] <jarek>
annevk: yeah, that would make a lot of sense since custom elements can be already "newed"

[10:49:34.0000] <annevk>
jarek: none have made it far enough so far

[10:51:35.0000] <terinjokes>
what's the browser interest in sendBeacon?

[10:51:41.0000] <jarek>
let element = new SVGComponentTransferFunctionElement();

[10:52:16.0000] <jarek>
feels very semantic and obvious, but verbose

[10:52:58.0000] <Ms2ger>
jarek, new HTMLHeadingElement()?

[10:55:38.0000] <jarek>
Ms2ger: I believe both verbose semantic syntax and shorthand concise E4X-like syntax are needed

[10:56:05.0000] <jarek>
depending on context in which elements are created

[10:58:56.0000] <jarek>
I would expect abstract interfaces like HTMLHeadingElement to just throw an error when used with "new"

[11:08:02.0000] <Domenic>
terinjokes: landed in CHrome 39

[11:08:11.0000] <Domenic>
terinjokes: I think Mozilla is on track to ship too?

[11:15:12.0000] <wanderview>
Domenic: terinjokes: looks like it shipped if FF30:  https://bugzilla.mozilla.org/show_bug.cgi?id=936340

[11:15:51.0000] <wanderview>
ah, not enabled until FF31

[11:47:30.0000] <terinjokes>
Domenic: Chrome/40 seems non-compliant

[11:47:43.0000] <terinjokes>
at least w/r/t Blob

[12:26:39.0000] <zcorpan>
jarek: i think changing document.createElement("svg:rect") might not be possible but we could use a space or so instead of colon

[12:28:00.0000] <Hixie>
oh hey, a zcorpan

[12:28:12.0000] <zcorpan>
sup Hixie

[12:28:15.0000] <Hixie>
zcorpan: one sec, loading conversation

[12:28:47.0000] <Hixie>
zcorpan: https://html.spec.whatwg.org/#processing-model-9

[12:29:00.0000] <Hixie>
zcorpan: note step 8's new steps (work in progress, not yet checked in)

[12:29:13.0000] <Hixie>
zcorpan: i'm interested in your input on how you'd like to integrate this into cssom-view

[12:29:22.0000] <Hixie>
zcorpan: basically, this provides a specific place for scroll and resize events

[12:29:27.0000] <Hixie>
zcorpan: (and many other things)

[12:29:33.0000] <zcorpan>
Hixie: multipage is up to date?

[12:29:39.0000] <Hixie>
zcorpan: so that we don't have to use tasks for things that are rendering-specific

[12:29:42.0000] <Hixie>
yes

[12:29:43.0000] <Hixie>
multipage updates with single page now

[12:29:52.0000] <Hixie>
same tool outputs both at once

[12:32:51.0000] <zcorpan>
Hixie: this looks great

[12:33:43.0000] <Hixie>
cool

[12:34:08.0000] <Hixie>
zcorpan: let me know if you think anything should change, i'm completely open to doing this however you want

[12:35:15.0000] <zcorpan>
Hixie: i guess "Evaluate media queries and report changes" is something that HTML in turn hooks into for <link media>, <source media> etc?

[12:36:02.0000] <zcorpan>
Hixie: did you base the order on something or is it arbitrary?

[12:36:11.0000] <Hixie>
zcorpan: mostly that was intended for MediaQueryList's events, but I hadn't thought of <link> and <source> etc

[12:36:48.0000] <Hixie>
zcorpan: it's more or less the superset of the orders that people seemed to give in various e-mails and specs I found

[12:37:36.0000] <Hixie>
zcorpan: mostly the order is arbitrary except that: resize is before scroll, animation frame callbacks are the last script thing in the list

[12:37:42.0000] <zcorpan>
ok. might be interesting to check what order e.g. Blink uses. i think blink syncs some of these things with rAF these days

[12:37:56.0000] <Hixie>
step 6 is rAF

[12:38:15.0000] <Hixie>
i spoke to one of the blink guys about this, and to dbaron

[12:38:32.0000] <zcorpan>
ok

[12:38:40.0000] <Hixie>
i believe it's consistent with what they said

[12:38:49.0000] <Hixie>
though mistakes are always possible!

[12:42:09.0000] <zcorpan>
Hixie: ok so let me think out loud about how to spec the resize event...

[12:42:22.0000] <Hixie>
shoot

[12:47:43.0000] <zcorpan>
Run the resize steps are as follows: for each browsing context associated with the given event loop, if it has a viewport and it has had its width or height changed since the last time these steps were run, fire an event named resize at the Window object associated with that viewport.

[12:48:02.0000] <zcorpan>
except maybe resize events need to be throttled

[12:50:46.0000] <Hixie>
seems reasonable

[12:50:57.0000] <Hixie>
no need for throttling; this only happens at 60Hz anyway

[12:51:22.0000] <Hixie>
or rather, the throttling is taken care of on my side

[12:52:17.0000] <zcorpan>
if we want 60Hz for resize, sure

[12:52:58.0000] <zcorpan>
but if there are sites doing expensive things in onresize, might want to throttle more than that

[12:53:14.0000] <zcorpan>
i'll have to check what browsers do

[12:54:36.0000] <Hixie>
well you want it to be possible to resize at 60Hz, otherwise it'll be impossible for a web app to have clean resize behaviour

[12:54:39.0000] <Hixie>
but sure

[12:54:56.0000] <Hixie>
that's why browsers are allowed to throttle the whole rendering loop further

[12:55:03.0000] <astearns_>
"...if it has a viewport and that viewport has had..."

[13:00:07.0000] <annevk>
zcorpan: happy b-day

[13:01:36.0000] <Hixie>
anyone know if https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/HighResolutionTime/Overview.html is the latest version of that spec?

[13:02:09.0000] <Hixie>
http://www.w3.org/TR/hr-time/ is dated later, but presumably if an error was found that's not hte spec that would be updated..

[13:02:22.0000] <Hixie>
gah, w3c doc policy grr

[13:02:48.0000] <annevk>
I recommend emailing the WG

[13:03:40.0000] <zcorpan>
annevk: thanks!

[13:03:57.0000] <Hixie>
annevk: i've never had any luck mailing that wg

[13:04:32.0000] <zcorpan>
Hixie: actually i'd like the "for each browsing context" to be on your side, so that these things get consistent order across browsing contexts

[13:04:36.0000] <annevk>
Hixie: email plh directly?

[13:04:40.0000] <Hixie>
zcorpan: fair enough

[13:04:52.0000] <annevk>
Web Performance is not particularly great indeed :/

[13:04:57.0000] <zcorpan>
Hixie: and maybe say what the order should be (creation order?)

[13:05:17.0000] <Hixie>
zcorpan: what do you want to be called for? Documents? browsing contexts? does it differ based on which hook we're talking about?

[13:05:28.0000] <Hixie>
for rAF i want to be called for documents

[13:08:07.0000] <zcorpan>
Hixie: i think document works for scroll/resize/matchMedia. i can always get the viewport or browsing context from a document if i need it, right?

[13:08:19.0000] <Hixie>
yup

[13:08:43.0000] <Hixie>
do you want to be called with a list, or called once for each doc? (if you're doing anything per top-level-b-c, you'll have to track which you've done)

[13:09:04.0000] <Hixie>
i think for rAF i'm going to have the event loop loop over docs, and the rAF handling be per-doc

[13:10:41.0000] <zcorpan>
per-doc is OK

[13:20:59.0000] <terinjokes>
xhr.send(blob) is supposed to send the contents of the blob, correct?

[13:23:47.0000] <annevk>
terinjokes: yes

[13:24:22.0000] <terinjokes>
any ideas why I might be doing wrong if instead Chrome/40 serializes/stringifies the blob instance?

[13:25:33.0000] <annevk>
terinjokes: Chrome might not support it

[13:27:36.0000] <annevk>
terinjokes: we still haven't really clarified what happens if someone closed the blob I think

[13:28:17.0000] <annevk>
terinjokes: could be that by not addressing that quickly enough I delayed implementation, I was trying to get answers elsewhere, but no luck thus far, I should probably just decide on something

[13:29:06.0000] <terinjokes>
/me smashes head against desk

[13:29:16.0000] <terinjokes>
i found the error was between the chair and the keyboard

[13:30:14.0000] <Domenic>
ah phew i was scared

[13:30:35.0000] <terinjokes>
i was as well

[13:30:42.0000] <annevk>
hmm okay

[13:30:53.0000] <terinjokes>
forgot that there was stupid serialization code happening elsewhere

[13:30:55.0000] <annevk>
if you find out how the dealt with that case I'd be interested in specifying it :-)

[13:31:04.0000] <annevk>
they*

[13:37:01.0000] <Hixie>
zcorpan: reload html spec for new hooks

[13:42:47.0000] <zcorpan>
Hixie: looks good

[13:57:18.0000] <Hixie>
ok rAF is specced in HTML now

[13:57:32.0000] <Hixie>
annevk: see the event loop section for stuff you probably want to use for fullscreen

[13:58:05.0000] <annevk>
Hixie: oh cool

[13:58:15.0000] <annevk>
Hixie++

[14:09:28.0000] <jamesr_>
Hixie: the storage mutex text is all dead code, but you know that

[14:09:50.0000] <Hixie>
jamesr_: one day browsers will realise that data corruption is bad :-P

[14:10:07.0000] <jamesr_>
that's a guess on your part :)

[14:10:36.0000] <jamesr_>
Hixie: the "update the rendering" step will in practice happen independently of any explicitly queued "task" running

[14:10:49.0000] <gsnedders>
it's a nice guess :)

[14:11:04.0000] <Hixie>
jamesr_: not sure what you mean by your last comment, can you elaborate?

[14:11:28.0000] <jamesr_>
i.e. if the only thing on your page is a rAF() loop, it never puts a 'task' into any queue

[14:11:34.0000] <jamesr_>
it adds things to the raf list

[14:11:43.0000] <jamesr_>
so you basically want to run step 8 of the event loop processing model

[14:11:45.0000] <jamesr_>
without having anything in 1

[14:12:35.0000] <jamesr_>
Hixie: your spec for requestAnimationFrame() simply adds an entry to the list (which is correct, it doesn't really queue a task) but there's nothing that explicitly says "the browser then has to go and run through the processing model"

[14:12:57.0000] <jamesr_>
and i don't see a way to get to step 8 in that algorithm without a task around to run step 3

[14:14:19.0000] <Hixie>
jamesr_: oh, right, that's the long-standing issue that step 1 should happen even if it's got no tasks to run

[14:14:23.0000] <Hixie>
jamesr_: yeah, i should fix that

[14:14:57.0000] <Hixie>
step 6 already admits that no task might be run

[14:15:06.0000] <jamesr_>
yeah

[14:15:11.0000] <jamesr_>
just need to teach steps 2-4 about that factoid

[14:15:41.0000] <jamesr_>
each of the "For each Document in docs" should go in the same order, right?

[14:15:49.0000] <Hixie>
yeah

[14:15:55.0000] <Hixie>
see the last paragraph of 8.2

[14:15:57.0000] <jamesr_>
what happens if you add or remove a new document in one of the step 8 substeps?

[14:16:06.0000] <Hixie>
that doc is ignored

[14:16:09.0000] <Hixie>
for that rendering loop

[14:16:25.0000] <jamesr_>
and if you remove one?

[14:16:35.0000] <jamesr_>
i guess it's pretty clearly not run

[14:16:57.0000] <jamesr_>
less obvious is what happens if you rejigger the tree such that the invariants in step 8.1 no longer hold for the list you generated

[14:17:13.0000] <Hixie>
i guess removing it would still run the steps, hmm

[14:17:24.0000] <Hixie>
the order is maintained for all the steps regardless of what you do

[14:17:35.0000] <jamesr_>
like the event chain?

[14:17:38.0000] <Hixie>
yeah

[14:17:39.0000] <jamesr_>
makes sense

[14:17:55.0000] <Hixie>
i didn't add in any of the "hidden" logic from your draft btw

[14:18:05.0000] <Hixie>
i suppose i should have that too

[14:18:17.0000] <Hixie>
does that handle "the document is removed from the dom"?

[14:18:38.0000] <jamesr_>
hmm, not sure if that is covered

[14:18:44.0000] <jamesr_>
but it should

[14:18:48.0000] <jamesr_>
a document that isn't in the dom isn't visible

[14:19:23.0000] <jamesr_>
Hixie: i think it'd be reasonable for a UA to handle "hidden" under the "run these steps if necessary" clause

[14:19:36.0000] <jamesr_>
and choose not to run step 8 at all if it decided that the things it cared about were not visible

[14:19:52.0000] <jamesr_>
that determination can be tricky sometimes

[14:20:01.0000] <jamesr_>
for instance we have a feature in chrome where we can "cast" a tab to a remote screen

[14:20:06.0000] <jamesr_>
and that works even if you "background" the tab

[14:20:14.0000] <Hixie>
instead of "For each document" i'll say "For each visible document", which will handle removing documents. Need to define "visible" somehow.

[14:20:25.0000] <jamesr_>
so if you're looking at the computer screen it appears to be not visible, but it is

[14:20:26.0000] <jamesr_>
somewhere else

[14:20:31.0000] <jamesr_>
Hixie: that's not what you want actually

[14:20:52.0000] <jamesr_>
raf runs in frames that are not "visible" by a reasonable definition if the parent frame is

[14:20:59.0000] <Hixie>
s/visible/relevant/

[14:21:15.0000] <jamesr_>
the defiintion of "hidden" that the w3c RAF spec used defers to the top-level document or some such

[14:21:24.0000] <jamesr_>
i think boris disagrees with me here on the desirable behavior here

[14:21:53.0000] <jamesr_>
but there are common cases like "you load all your JS code in a same-origin 0x0 iframe and drive the parent frame from it" where you want the behavior the w3c spec specifies

[14:23:21.0000] <Hixie>
how about: a document is "relevant" if it is a fully active document that the user agent believes would benefit from having its rendering updated?

[14:25:53.0000] <jamesr_>
i think you do want to specify the set of documents exactly, since at least in the same origin case it's very easy to detect whether things happened in different documents in the same context

[14:27:15.0000] <zcorpan>
Hixie: timers should also be slower in background tabs iirc

[14:30:26.0000] <Hixie>
/me tries a different approach

[14:33:52.0000] <jamesr_>
zcorpan: they are. the timer spec allows the UA to add whatever delay they want, which allows the slower in background tabs behavior

[14:34:02.0000] <jamesr_>
but i think browsers have roughly stabilized

[14:34:20.0000] <Hixie>
jamesr_, zcorpan: ok look now. https://html.spec.whatwg.org/multipage/#processing-model-9

[14:35:04.0000] <jamesr_>
hah - why does #processing-model-9 go to step 8.1.4.2?

[14:35:30.0000] <Hixie>
cos there's 8 earlier sections titled "processing model" :-)

[14:36:05.0000] <jamesr_>
hm, so you null out the docs list as a way to skip the rest of the steps?

[14:37:14.0000] <Hixie>
not null out necessarily

[14:37:25.0000] <zcorpan>
Hixie: doesn't rAF drop to 0Hz for background tabs? while timers are 1Hz. and i don't know about scroll/resize/etc

[14:37:30.0000] <Hixie>
if there's two tabs, and one is to be updated and the other not, then only the background tab's docs get removed

[14:37:39.0000] <Hixie>
zcorpan: the spec leaves this open to the browser

[14:38:43.0000] <Hixie>
zcorpan: (i hate how chrome doesn't update background tabs, it means that when i switch to a tab, i get the old picture for a frame and then i see the new frame, it's ugly)

[14:38:51.0000] <jamesr_>
the timers spec says "take the |timeout| value from script. if you feel like it, add an arbitrary amount to |timeout|"

[14:39:05.0000] <jamesr_>
Hixie: that's a slightly different issue

[14:39:20.0000] <jamesr_>
you wouldn't want the background tab to be continuously rendering as if it was visible

[14:39:41.0000] <jamesr_>
but when you do decide to switch to the tab, there's a choice a browser can make between janking the tab switch until the tab's new contents is ready or showing you whatever it has

[14:39:45.0000] <zcorpan>
Hixie: the spec seems to require the same interval for resize/scroll/MQ/fullscreen/rAF

[14:40:02.0000] <Hixie>
no, but you might want to update all the tabs once as soon as the user hits command, in case the user then hits tab to switch to the other tabs, or something

[14:40:09.0000] <Hixie>
anyway the point is the browser just allows it

[14:40:12.0000] <Hixie>
zcorpan: right.

[14:40:17.0000] <Hixie>
zcorpan: that's what we want, no?

[14:40:45.0000] <jamesr_>
in practice we've been moving to that in blink and been pretty happy

[14:41:06.0000] <jamesr_>
Hixie: yeah or start rendering the new tab on the mouse/touch-down even though the switch doesn't happen until the -up

[14:41:13.0000] <jamesr_>
Hixie: or start rendering when you over or whatever

[14:41:16.0000] <Hixie>
yeah

[14:41:19.0000] <jamesr_>
there's a lot we could do predictively

[14:41:22.0000] <zcorpan>
Hixie: i don't know. maybe

[14:41:22.0000] <jamesr_>
but #lifeishard

[14:41:41.0000] <Hixie>
jamesr_: i just want to make sure we don't prevent those. especially since there's no obvious interop need for a particular speed here.

[14:42:05.0000] <Hixie>
zcorpan: seems like it's a much better authoring experience if you can rely on all of these happening in order together every time

[14:43:01.0000] <Hixie>
i'm amused at https://www.w3.org/Bugs/Public/show_bug.cgi?id=27347, which says a majority of browsers (browser a, browser b) do one thing and a minority of browsers (browser c, browser d) do another

[14:43:02.0000] <jamesr_>
sure

[14:43:14.0000] <jamesr_>
heh

[14:43:18.0000] <jamesr_>
browser counting

[14:43:19.0000] <jamesr_>
hard to do

[14:43:39.0000] <Hixie>
i think they meant majority by usage share

[14:43:43.0000] <Hixie>
but still, it reads funny

[14:44:01.0000] <Hixie>
ok, event loop updates are committed

[14:44:56.0000] <Hixie>
i've no idea what https://www.w3.org/Bugs/Public/show_bug.cgi?id=27367 means

[14:45:54.0000] <zcorpan>
Hixie: looks like chrome and firefox don't fire resize until the tab is activated again, so that one seems OK

[14:46:49.0000] <Hixie>
do they fire anything else?

[14:47:38.0000] <zcorpan>
i can try testing the other things tomorrow

[14:47:47.0000] <zcorpan>
right now i need to get some sleep :-)

[14:47:57.0000] <Hixie>
nn!

[14:48:08.0000] <zcorpan>
thanks for fixing this btw

[14:48:25.0000] <Hixie>
np

[14:50:43.0000] <zcorpan>
i've sent an email to www-style about this btw for cssom-view and animations

[15:06:19.0000] <Hixie>
zcorpan: cool

[15:30:03.0000] <Domenic>
was rAF specced elsewhere before?

[15:58:11.0000] <Hixie>
wow, firefox actually scrolls the document when you call drawFocusIfNeeded()

[15:58:13.0000] <Hixie>
that's crazy

[15:58:31.0000] <Hixie>
try making the window small and then scrolling http://goo.gl/QAfAoy

[15:59:26.0000] <Hixie>
ah, looks like they only do it if the element was just focused?


2014-11-20
[16:00:30.0000] <Hixie>
how weird

[17:42:08.0000] <MikeSmith>
Hixie: If you have a couple minutes maybe you can help me understand something about why annevk set up the URL test harness the way he did

[17:42:22.0000] <MikeSmith>
if you look at https://github.com/w3c/web-platform-tests/blob/master/url/a-element.html#L25 and https://github.com/w3c/web-platform-tests/blob/master/url/a-element.html#L38

[17:45:10.0000] <MikeSmith>
rather than just doing var url = new URL(expected.input, expected.base), it's first creating an an <a> element then setting the href attribute on it, then checking the URL attributes from that

[17:46:58.0000] <MikeSmith>
I know there's a reason why it's necessary to do it that way in a test like this -- instead of just using new URL(...) -- and I should rightly already understand what the reason is, but I'll admit that I don'

[17:47:19.0000] <MikeSmith>
(I would ask annevk but I'm assuming he's asleep right now)

[17:49:16.0000] <MikeSmith>
the actual immedidate problem I'm trying to solve right now is, for tests where parsing of the URL is expected to fail, I want the test to actually recognize that it's failed in a spec-conformant way

[17:50:24.0000] <MikeSmith>
...which is, per https://url.spec.whatwg.org/#constructors that calling new URL(...) with it should throw

[17:50:51.0000] <MikeSmith>
a TypeError exception

[17:55:47.0000] <MikeSmith>
even with the way that the test harness is set up (using a[href]) it should still fail per https://html.spec.whatwg.org/multipage/infrastructure.html#resolve-a-url but I can't tell from that how/where I would be able to catch the failure in that case

[18:00:25.0000] <MikeSmith>
... and further, from the relevant referenced part of URL spec for this (non-constructor) case, the URL spec says "return failure" but I don't know how to test that

[19:54:28.0000] <MikeSmith>
Domenic: I think at the time it was first implemented in gecko as mozRequestAnimationFrame there wasn't any formal spec yet http://robert.ocallahan.org/2010/08/mozrequestanimationframe_14.html (after it was originally proposed by roc in http://robert.ocallahan.org/2009/07/progress_01.html). I'm pretty sure it was never formally specced out anywhere before heycam first wrote it up (http://web.archive.org/

[19:54:34.0000] <MikeSmith>
web/20110228051128/http://people.mozilla.org/~cmccormack/anim-timing/Overview.html is the earliest version that hasn't disappeared)

[19:55:23.0000] <MikeSmith>
http://web.archive.org/web/20110228051128/http://people.mozilla.org/~cmccormack/anim-timing/Overview.html

[20:03:11.0000] <roc>
what's the context?

[20:07:42.0000] <Hixie>
MikeSmith: my guess is that not all browsers implement URL

[20:10:49.0000] <MikeSmith>
roc: comment from Domenic earlier, "was rAF specced elsewhere before?" http://krijnhoetmer.nl/irc-logs/whatwg/20141120#l-18 following Hixie saying even earlier, "ok rAF is specced in HTML now" http://krijnhoetmer.nl/irc-logs/whatwg/20141119#l-927

[20:11:42.0000] <Hixie>
oh i missed Domenic's comment

[20:11:50.0000] <roc>
ah right

[20:11:50.0000] <Hixie>
yeah rAF was specced in some w3c spec

[20:11:55.0000] <roc>
sorta-kinda

[20:11:55.0000] <Hixie>
the editors asked me to move it to html

[20:12:09.0000] <MikeSmith>
yeah https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/RequestAnimationFrame/Overview.html

[20:12:12.0000] <Hixie>
so we could integrate it with the event loop

[20:13:13.0000] <MikeSmith>
oh I guess maybe Domenic maybe didn't know about that other spec at all (I thought he was asking if there was something that came before that spec)

[20:13:28.0000] <benschwarz>
Hixie: ping

[20:15:01.0000] <Hixie>
yo

[20:20:42.0000] <benschwarz>
I was just following the redirects for the dev spe

[20:20:44.0000] <benschwarz>
spec

[20:20:50.0000] <benschwarz>
but they lead nowhere :/

[20:21:16.0000] <benschwarz>
Hixie: 404 https://html.spec.whatwg.org/dev-index

[20:23:22.0000] <Hixie>
yeah, the generator is broken

[20:23:39.0000] <Hixie>
there's some github issue where someone was going to describe exactly what i need to implement iirc

[20:24:10.0000] <Hixie>
given a specific spec for what to implement i can get this done in a few days

[20:24:18.0000] <Hixie>
but i don't know what we need

[20:24:26.0000] <benschwarz>
are you talking about the one that we chatted about?

[20:24:39.0000] <Hixie>
maybe?

[20:24:44.0000] <Hixie>
wasn't only you

[20:25:00.0000] <benschwarz>
https://github.com/benschwarz/developers.whatwg.org/issues/90

[20:25:51.0000] <Hixie>
that's the one!

[20:48:06.0000] <MikeSmith>
benschwarz: thanks for the good karma at cssconf.asia

[20:49:09.0000] <benschwarz>
MikeSmith: <3

[20:50:14.0000] <MikeSmith>
benschwarz: and at the risk of stating the obvious I didn't have anything to do with the choice of speakers for the http://css.w3ctech.com/ event I mentioned in my twitter reply :-)

[20:50:31.0000] <benschwarz>
:-)

[20:50:44.0000] <MikeSmith>
benschwarz: I'll tell them they should have you speak there instead next time

[20:50:52.0000] <benschwarz>
SGTM!

[21:59:41.0000] <MikeSmith>
Hixie: maybe it'd be good to have https://whatwg.org/style/specification in github somewhere

[21:59:53.0000] <MikeSmith>
Hixie: in https://github.com/whatwg/resources.whatwg.org I would think

[22:30:04.0000] <Hixie>
MikeSmith: yeah, probably

[01:43:14.0000] <annevk>
MikeSmith: I used <a> because new URL() does not have universal support and we need to test <a> too

[01:43:29.0000] <annevk>
MikeSmith: it would be good to also run them through new URL() though

[01:48:08.0000] <MikeSmith>
annevk: ok, yeah today I wrote up a separate test using new URL(), so I'll make a PR for that later

[01:48:27.0000] <annevk>
MikeSmith: cool

[01:52:00.0000] <MikeSmith>
annevk: for URLs that are expected to fail parsing, it checks for TypeError with the testharness.js assert_throws thing

[01:53:34.0000] <MikeSmith>
I notice that blink still throws SyntaxError instead; filed a blink bug

[02:27:00.0000] <zcorpan>
hmm. https://github.com/domenic/Array.prototype.includes/commit/4b6b9534582cb7991daea3980c26a34af0e76c6c

[02:27:15.0000] <zcorpan>
bad idea to change DOMTokenList#contains i guess?

[02:44:21.0000] <Ms2ger>
Really

[03:21:27.0000] <annevk>
We could add an alias, but lets see if this new name sticks first https://twitter.com/jdalton/status/535249955435601924

[04:07:45.0000] <smaug____>
/me wonders if requestFullscreen() should work when element is in shadow dom

[04:26:50.0000] <zcorpan>
"array prototype includes" OR "string prototype includes" -> 148

[04:26:58.0000] <zcorpan>
"array prototype includes" OR "string prototype includes" -> 5,296

[04:36:04.0000] <zcorpan>
Array.prototype["∋"]

[05:07:28.0000] <annevk>
jgraham: do you have a reference for "One of A and B" is better than "One of A or B"?

[05:07:36.0000] <annevk>
jgraham: https://github.com/slightlyoff/ServiceWorker/pull/394#issuecomment-63761704 could use it

[05:11:42.0000] <annevk>
MikeSmith: thanks for that

[05:31:22.0000] <jgraham>
annevk: I'm not even sure that's true. Did I say that before? :)

[05:31:40.0000] <annevk>
jgraham: nah, just wondering

[05:32:10.0000] <annevk>
"And X is one of A, B, or C" or "And X is one of A, B, and C"

[05:32:22.0000] <annevk>
the latter reads better to me...

[05:33:07.0000] <jgraham>
I think the first reads better

[05:34:01.0000] <darobin>
the first definitely reads better

[06:00:56.0000] <zcorpan>
Hixie: what should i do with the timestamp?

[06:29:45.0000] <zcorpan>
hmm, if a script scrolls the viewport twice in the same script, a single scroll event is fired. if a script scrolls the viewport then an element, a scroll event is fired first on document then on the element. flipping the order flips the order of the events

[06:30:28.0000] <hemanth>
Object.observe on DOM entities, without any intermediate object, anyone?

[06:31:46.0000] <annevk>
hemanth: ?

[06:33:16.0000] <hemanth>
annevk, I can't just do a Object.observe on say a input element, right?

[06:35:43.0000] <hemanth>
yes, there is MutationObserver....but...

[07:02:56.0000] <annevk>
hemanth: I feel like we had this discussion before

[07:05:17.0000] <hemanth>
did we! annevk definitely not me.

[07:08:43.0000] <annevk>
hemanth: maybe not

[07:08:49.0000] <annevk>
hemanth: http://lists.w3.org/Archives/Public/public-whatwg-archive/2014Aug/0176.html is relevant

[07:09:08.0000] <annevk>
I actually think we could maybe make this work through my IDL internal slots proposal

[07:10:33.0000] <hemanth>
Remember that it doesn't work out-of-the-box for getters.....hmm

[07:11:03.0000] <hemanth>
But if it's not a DOM object, and has getter, it would work fine...right?

[07:11:27.0000] <annevk>
hemanth: filed https://www.w3.org/Bugs/Public/show_bug.cgi?id=27381 to explore that idea

[07:12:55.0000] <annevk>
hemanth: note that even with that you still need MutationObserver for actual DOM changes

[07:13:07.0000] <annevk>
hemanth: but not for <input>.value changes

[07:13:23.0000] <annevk>
(which is an object change, and not a tree change)

[07:14:05.0000] <annevk>
heycam|away: I would appreciate prioritization of internal slots

[07:15:28.0000] <hemanth>
annevk, gave a +1 :)

[07:15:57.0000] <annevk>
hemanth: heh, this is not the IETF, but thanks

[07:16:13.0000] <hemanth>
heh heh ^_^

[07:20:40.0000] <annevk>
hemanth: and thanks for bringing this subject again, it was rather timely as last Monday we came up with being more formal about internal slots, seems it might have some nice side effects as I was hoping for

[07:23:30.0000] <hemanth>
annevk, hoping for the best...

[07:25:39.0000] <smaug____>
annevk: I'm still missing why you'd want to prioritize slots ?

[07:25:46.0000] <smaug____>
would that help spec writing?

[07:25:57.0000] <smaug____>
(if so, that is a good reason :) )

[07:26:06.0000] <annevk>
smaug____: yes, and it would address a bunch of ambiguous cases now

[07:26:23.0000] <smaug____>
/me wonders which ambiguous cases

[07:26:27.0000] <annevk>
smaug____: e.g. we often talk about the value of a certain attribute, while we should be talking about the value of the internal slot it represents

[07:26:42.0000] <smaug____>
oh, those are just spec bugs

[07:26:51.0000] <smaug____>
I mean, vague language in them

[07:26:54.0000] <annevk>
smaug____: because attributes have no values, they have a getter and a setter, and we don't want to invoke those because they could be overridden by script

[07:27:09.0000] <annevk>
smaug____: yeah, vague language is sometimes known as ambiguous

[07:27:16.0000] <annevk>
:-)

[07:27:55.0000] <annevk>
smaug____: and it will help defining creation of objects and their associated objects

[07:28:33.0000] <annevk>
smaug____: e.g. that if you create a Document object, you also create a DOMImplementation object, what Realm they're both associated with, etc. without language required from the specification

[07:29:30.0000] <annevk>
smaug____: and for the self-hosting crowd it will make it much clearer what the expected internal representation of an object is supposed to be

[07:31:43.0000] <zcorpan>
Hixie: https://dvcs.w3.org/hg/csswg/rev/1e907e3ac50c resize and scroll events; MediaQueryList still to be done.

[07:32:16.0000] <smaug____>
annevk: so what does a slot actually mean

[07:32:34.0000] <smaug____>
in which case a slot means the object slot points to is in the same realm as the owner of the slot?

[07:32:51.0000] <annevk>
smaug____: no

[07:32:57.0000] <annevk>
smaug____: a slot just holds a value

[07:33:06.0000] <smaug____>
ok

[07:33:17.0000] <smaug____>
so where does it help with document.implementation Realm ?

[07:33:21.0000] <annevk>
smaug____: but when IDL needs to create an object, it can look through the object's associated slots to discover if any associated objects need to be created

[07:34:02.0000] <smaug____>
ok, so need to be careful in the specs to say which all properties are supposed to be created when the object itself is created

[07:34:56.0000] <annevk>
smaug____: yeah, ideally all through IDL

[07:34:57.0000] <smaug____>
or all the none-nullable attributes without [NotSlot] would be implicitly created?

[07:35:22.0000] <annevk>
smaug____: that's my current idea, with default values if they have any set

[07:35:40.0000] <smaug____>
well, default values are like true/false etc

[07:35:51.0000] <smaug____>
do those even really belong to a Realm

[07:36:34.0000] <annevk>
smaug____: no those don't, but it's still useful

[07:36:47.0000] <annevk>
smaug____: it removes the need for defining things like "canceled flag" and such

[07:36:58.0000] <smaug____>
sure

[07:37:25.0000] <smaug____>
just hoping the specs don't end up looking like Promise spec and such

[07:37:36.0000] <smaug____>
which are hard to read

[07:38:57.0000] <annevk>
smaug____: I think what's hard to read depends on what you're used to. But if you're used to IDL this would actually move even more logic into IDL, have less prose, and align specifications to be more similar in terms of object descriptions

[07:39:36.0000] <smaug____>
indeed, idl defining the default behavior sounds good

[07:39:43.0000] <smaug____>
I'm just worried about the text

[07:40:03.0000] <annevk>
smaug____: "the text"?

[07:40:45.0000] <smaug____>
annevk: prose, text, whatever you call it

[07:40:53.0000] <smaug____>
the non-idl part :)

[07:41:44.0000] <smaug____>
just have capitalized text for implicit interface member variables

[07:41:58.0000] <smaug____>
(why they should be called slots?)

[07:42:05.0000] <smaug____>
and use those in the text

[07:42:20.0000] <smaug____>
something like that

[07:42:39.0000] <annevk>
We call them slots because that's the established term from ECMAScript

[07:42:58.0000] <annevk>
And the idea is to use [[slot]] because that's the established convention

[07:43:47.0000] <annevk>
I don't think we should try to be different from ECMAScript. It'll help people understand what they are about better

[07:44:02.0000] <smaug____>
[[]] is in ecma specs, not in w3c/whatwg  specs

[07:44:14.0000] <smaug____>
if we can create easier to read specs, we should

[07:44:59.0000] <annevk>
I recommend talking to Domenic about changing that style

[07:46:44.0000] <smaug____>
why

[07:47:08.0000] <annevk>
Because he might be able to influence it, if anyone

[07:47:35.0000] <smaug____>
well, I hope I can influence how specs using webidl will be written ;)

[07:47:45.0000] <smaug____>
Domenic doesn't seem to like webidl anyway

[08:20:04.0000] <Domenic>
ES uses overly verbose "the [[x]] internal slot of y" but we can shorten to "x@[[y]]" which should help.

[08:21:47.0000] <Domenic>
A few other tweaks like https://streams.spec.whatwg.org/#conventions and more can be used to improve readability while still maintaining ES spec level precision. (And those are just a starting point.)

[08:26:20.0000] <TabAtkins>
I use [[foo]] in the Font Loading spec, doesn't seem too hard to read http://dev.w3.org/csswg/css-font-loading/#fontface-interface

[09:03:02.0000] <annevk>
I missed that Accept-Charset has now been removed from WebKit and Chromium as well

[09:03:38.0000] <annevk>
User-Agent and Accept are still bloated

[09:21:41.0000] <Hixie>
annevk: imho slots is a poor way to describe what's going on

[09:21:54.0000] <Hixie>
annevk: it implies that something could have slots from two different classes and act like both

[09:22:04.0000] <Hixie>
zcorpan: ignore the timestamp, probably

[09:22:09.0000] <annevk>
Hixie: I'm not sure what you're saying

[09:22:17.0000] <annevk>
Hixie: slots is exactly what is happening under the hood

[09:22:34.0000] <Hixie>
annevk: under the hood there are wrappers for C++ classes

[09:23:13.0000] <annevk>
Hixie: yes, IDL objects that have variables ("slots") that hold IDL values

[09:23:29.0000] <Hixie>
?

[09:23:57.0000] <Hixie>
there's no such thing as an IDL object or IDL value in the real world :-)

[09:24:02.0000] <Hixie>
those are just exposition

[09:24:15.0000] <Hixie>
there are real JS objects, there are real C++ objects

[09:24:26.0000] <Hixie>
there are JS objects that wrap C++ objects

[09:25:17.0000] <annevk>
yeah

[09:25:31.0000] <annevk>
in spec land we call the latter IDL thingies

[09:25:49.0000] <annevk>
in Servo they're typically backed by some Rust

[09:29:02.0000] <annevk>
Hixie: it sounds like you're confusing slots with branding

[09:29:06.0000] <annevk>
Hixie: perhaps

[09:31:17.0000] <Hixie>
i have no idea what branding is

[09:31:53.0000] <annevk>
https://tools.ietf.org/html/draft-davies-idntables ...

[09:32:08.0000] <Hixie>
my point is that you can't have an object that has both a Promise's slots and an ArrayBuffer's slots. or an HTMLElement's slots and a WebSocket's slots.

[09:32:18.0000] <Hixie>
and therefore slots are a poor way to explain what's going on

[09:32:31.0000] <Hixie>
because there's nothing implicit in the definition of slots that would prevent that

[09:32:52.0000] <Hixie>
and indeed you can totally imagine someone speccing an object that has both a Promise's slots and an ArrayBuffer's slots.

[09:33:05.0000] <Hixie>
in other news, does anyone know of a case where we invoke the HTML fragment parsing algorithm without a context node?

[09:33:11.0000] <annevk>
In this proposal they would be scoped to the object

[09:33:21.0000] <Hixie>
what does that mean?

[09:33:45.0000] <annevk>
That the slot represents the private state of the object

[09:35:36.0000] <Hixie>
if it's private, why do we need to document it?

[09:40:47.0000] <annevk>
Hixie: I explained this in the bug

[09:40:52.0000] <annevk>
Hixie: and in this channel

[09:43:22.0000] <annevk>
I wonder if http://www.bbc.com/news/technology-30121159 will help in the WebRTC requiring TLS discussion

[09:43:42.0000] <Hixie>
i don't see anything in the bug that explains _why_ you want this

[09:43:46.0000] <Hixie>
you just say it should exist

[09:43:54.0000] <Hixie>
assuming you mean https://www.w3.org/Bugs/Public/show_bug.cgi?id=27354 ?

[09:44:08.0000] <Ms2ger>
Hixie, dunno about "slots", but being cleared about the internal state would be nice

[09:44:14.0000] <Ms2ger>
clearer

[09:44:46.0000] <Hixie>
clearer how?

[09:44:54.0000] <Hixie>
the current state of specs seems pretty clear to me

[09:45:03.0000] <Hixie>
is there an example of what's not clear that i could look at?

[09:45:48.0000] <Ms2ger>
I think having types could be useful when first reading a spec

[09:46:10.0000] <annevk>
Hixie: the main driver is defining the associated Realm of objects, and better defining how objects are created in general

[09:46:19.0000] <Hixie>
well, realms in general are a mistake

[09:46:22.0000] <Hixie>
so...

[09:46:29.0000] <annevk>
Hixie: they're just another name for the window object

[09:46:36.0000] <annevk>
so...

[09:46:40.0000] <Hixie>
no, they're not

[09:46:50.0000] <Hixie>
and they fail around document.domain

[09:47:03.0000] <annevk>
What do you mean, fail?

[09:47:30.0000] <Hixie>
the vat/realm/global modal doesn't match the web's security model

[09:47:34.0000] <annevk>
And how are they not another name for the global object?

[09:47:41.0000] <annevk>
Nobody is talking vats

[09:47:55.0000] <Hixie>
global objects and realms are not the same thing, just look in the ES spec

[09:48:21.0000] <annevk>
This is just about cases such as window2.Document.prototype.createElement.call(window3.document, ...) being run in window1

[09:48:40.0000] <annevk>
And what that means for the Element that is created and its associated objects

[09:49:58.0000] <annevk>
Hixie: afaik Realm is just some bookkeeping object for a global and they're 1:1

[09:50:55.0000] <annevk>
Per http://people.mozilla.org/~jorendorff/es6-draft.html#sec-code-realms that looks to be true

[09:51:15.0000] <Hixie>
so in your understand what is a global environment record ?

[09:54:12.0000] <annevk>
Hixie: properties not on the global object but nevertheless in scope

[09:54:54.0000] <Hixie>
so you're saying JS has three objects that are always 1:1:1 ?

[09:56:39.0000] <annevk>
Hixie: afaict

[09:56:48.0000] <Hixie>
yeah, i go back to, "realms in general are a mistake". We don't need three objects here. We only need one. In any case, we don't need to define anything to do with realms if they're 1:1 with globals, we just have to define the associated globals. And that's not a problem that requires any new IDL to solve as far as I can tell.

[09:58:31.0000] <annevk>
Hixie: bz and I reached a different conclusion

[09:58:59.0000] <Hixie>
apparently; that's why i'm trying to find out why :-)

[09:59:10.0000] <Hixie>
but you keep just saying "i explained it already" without explaining it :-)

[10:00:33.0000] <annevk>
Hixie: are you subscribed to public-script-coord?

[10:00:47.0000] <Hixie>
i don't follow any of the w3c lists anymore, they're full of crazy

[10:00:50.0000] <annevk>
Hixie: we had an email exchange there and based on that filed bugs

[10:01:11.0000] <annevk>
Hixie: if I have to explain every decision we come to on W3C lists again to you, I'm going to be seriously annoyed

[10:01:29.0000] <Ms2ger>
Seems like you already are :)

[10:01:47.0000] <annevk>
Well, it's not the first time

[10:01:50.0000] <Hixie>
well  if you keep making decisions that affect me without my input, I'm going to be seriously annoyed too :-)

[10:02:01.0000] <Hixie>
but here all i'm asking for is a pointer, if there is one

[10:02:08.0000] <Hixie>
i did read the bug and it had nothing

[10:02:24.0000] <annevk>
Hixie: http://lists.w3.org/Archives/Public/public-script-coord/2014OctDec/thread.html#msg156

[10:02:30.0000] <annevk>
Hixie: is what the bug pointed to

[10:03:38.0000] <Hixie>
ah, yes, i did actually read the start of that thread when it happened, but it wasn't going anywhere useful

[10:03:43.0000] <annevk>
Hixie: I copy you on many threads and there's not often a reply

[10:04:07.0000] <annevk>
Hixie: but I can try to copy you on more I guess

[10:04:15.0000] <Hixie>
where in this thread is the slots stuff?

[10:04:20.0000] <Hixie>
the start of that thread is just bogus

[10:04:26.0000] <Hixie>
which is why i ignored it

[10:04:32.0000] <Hixie>
it says "we have to define what the global is"

[10:04:35.0000] <Hixie>
the answer to that is simple

[10:04:37.0000] <Hixie>
just define what the global is

[10:04:38.0000] <Hixie>
done

[10:04:44.0000] <Hixie>
how do we get from that to slots?

[10:04:51.0000] <annevk>
Hixie: http://lists.w3.org/Archives/Public/public-script-coord/2014OctDec/0180.html

[10:04:54.0000] <Hixie>
or realms?

[10:05:08.0000] <annevk>
Hixie: realms are globals

[10:05:25.0000] <Hixie>
they're not, but whatever

[10:05:39.0000] <annevk>
Hixie: pointer?

[10:05:42.0000] <Hixie>
(e.g. CreateRealm() creates a realm without a global)

[10:06:12.0000] <Hixie>
http://lists.w3.org/Archives/Public/public-script-coord/2014OctDec/0180.html doesn't explain why we need slots

[10:06:18.0000] <Hixie>
it just says we need slots

[10:06:20.0000] <annevk>
but that's not exposed...

[10:06:29.0000] <Hixie>
neither are realms...

[10:06:39.0000] <annevk>
which is why they're globals

[10:06:45.0000] <Hixie>
they're not globals...

[10:06:54.0000] <Hixie>
they're some internal state that shouldn't exist in the first place

[10:07:07.0000] <Hixie>
and that other specs shouldn't need to ever mention

[10:07:12.0000] <caitp>
one of these days, all of the different spec editors should go bowling or something and sort this stuff out

[10:07:30.0000] <Hixie>
i mean the most obvious way to see that these are not needed is that ES3 didn't have them yet nothing changed in the semantics here

[10:07:36.0000] <Hixie>
anyway

[10:07:41.0000] <Hixie>
that's not the argument i care about

[10:07:55.0000] <Hixie>
i'm just trying to understand why we're trying to solve the problem of "define the global for an object" by adding IDL syntax

[10:08:07.0000] <Hixie>
IDL syntax that, in particular, doesn't match realty

[10:08:30.0000] <annevk>
the idea is to let IDL define the globals, including for objects associated with a particular object

[10:09:17.0000] <annevk>
as the stuff around multiple globals is way too hard on spec authors

[10:09:45.0000] <Hixie>
i don't understand what is ambiguous about globals

[10:10:13.0000] <Hixie>
all the objects we create come from a global or an object that itself comes from a global, directly or indirectly.

[10:10:28.0000] <Hixie>
can you give me a concrete example of something that's not defined?

[10:11:09.0000] <annevk>
"This is just about cases such as window2.Document.prototype.createElement.call(window3.document, ...) being run in window1"

[10:11:15.0000] <annevk>
"And what that means for the Element that is created and its associated objects"

[10:13:41.0000] <Hixie>
"The global associated with an method call is the global object of the object on which the method was invoked (the 'this' value of the method call)"

[10:13:44.0000] <Hixie>
done. solved it for you.

[10:14:02.0000] <Hixie>
(maybe make my grammar better)

[10:15:12.0000] <Hixie>
is there some reason that's not enough?

[10:15:17.0000] <Hixie>
i really don't understand what is hard here

[10:15:34.0000] <Hixie>
i mean we have to define which Document that calls works on too, regardless of the global object

[10:15:48.0000] <Hixie>
and once you've defined that, the global object issue solves itself

[10:16:02.0000] <annevk>
That doesn't define it for objects associated with the Element

[10:16:05.0000] <Hixie>
(and solving the global object issue doesn't solve the "which Document" issue)

[10:16:13.0000] <Hixie>
how do you mean?

[10:16:29.0000] <Hixie>
if an object is associated with an Element, then by definition they're associated with an object that has a global

[10:16:59.0000] <Hixie>
every object has an associated global, it's the global on which the prototypes find themselves

[10:18:07.0000] <annevk>
What I mean is that if you create an element, it would be good if it's properly defined what the global associated with that element's NodeList is for instance

[10:18:20.0000] <annevk>
Or with ImageData's data

[10:18:29.0000] <Hixie>
there's only one sane answer, yes?

[10:18:32.0000] <Hixie>
the same global as the element?

[10:18:44.0000] <annevk>
I don't know, in implementations that's not always the case

[10:18:49.0000] <Manishearth>
Hixie: can the DOM3 events spec be fixed, or is it frozen?

[10:18:55.0000] <Hixie>
Manishearth: no idea

[10:19:05.0000] <Hixie>
Manishearth: if it's frozen, it's dead

[10:19:10.0000] <Manishearth>
I guess we should cc the relevant person on the bug?

[10:19:11.0000] <Manishearth>
hah

[10:19:19.0000] <Hixie>
Manishearth: so hopefully it's either being maintained, or there's some other spec that's replaced it

[10:19:35.0000] <Hixie>
Manishearth: but in general, key and mouse events have not found anyone who wants to do a real spec for them :-(

[10:19:58.0000] <Hixie>
Manishearth: so i suspect the answer is that DOM3 Events isn't frozen per se, but is also not interested in correctly and fully speccing key and mouse events

[10:20:12.0000] <Hixie>
annevk: when is an Element going to have a different global than its childNodes NodeList?

[10:21:01.0000] <Hixie>
annevk: adoptNode doesn't change the prototypes, does it?

[10:23:07.0000] <annevk>
Hixie: that is the plan, actually

[10:23:17.0000] <Hixie>
does anyone do that currently?

[10:23:21.0000] <annevk>
Hixie: Gecko

[10:23:29.0000] <Hixie>
just gecko?

[10:23:31.0000] <Manishearth>
Hixie: after filing https://www.w3.org/Bugs/Public/show_bug.cgi?id=27337 annevk told me something similar and said that I would be probably asked to write the spec myself :p

[10:23:38.0000] <annevk>
Hixie: and Safari does it but less deterministic

[10:24:10.0000] <Hixie>
annevk: ok so why aren't we going towards the saner "don't change prototypes half way through an object's lifetime" model that more browsers implement?

[10:24:17.0000] <annevk>
Manishearth: Travis and some people are working on DOM Level 3 Events

[10:24:22.0000] <Hixie>
since it would be way simpler and not require any of this stuff?

[10:25:02.0000] <annevk>
Hixie: that's not what's motivating this

[10:25:08.0000] <Hixie>
and anyway, even if you did change that, you still wouldn't need this slots stuff. Just have adoptNode() update the prototypes you care about.

[10:25:12.0000] <Hixie>
so what _is_ motivating this?

[10:25:18.0000] <Manishearth>
annevk: yeah, I moved the bug over to DOM3 and Travis

[10:25:23.0000] <Hixie>
dude i'm just trying to understand why you're trying to do this

[10:25:39.0000] <annevk>
Hixie: I tried to explain, but you don't think it's a problem

[10:25:55.0000] <Hixie>
why do you think it's a problem?

[10:25:59.0000] <Hixie>
why am i wrong?

[10:27:15.0000] <annevk>
Hixie: I think it would be better if internal slots were better formalized as currently specs often make a mess about how to talk about private state; and it seems it would help defining associated globals as well as creation of objects

[10:27:54.0000] <annevk>
Hixie: and then once that's done it seems we can maybe build things on top, such as Object.observe

[10:28:13.0000] <annevk>
baby steps...

[10:31:29.0000] <Hixie>
wait, what has Object.observe() got to do with anything. you haven't brought this up before.

[10:31:52.0000] <annevk>
Hixie: that's what started the discussion about internal slots today...

[10:34:15.0000] <Hixie>
hm?

[10:34:18.0000] <Hixie>
i thought i started it

[10:34:30.0000] <Hixie>
i don't see anything about Object.observe() in our conversation?

[10:39:26.0000] <SimonSapin>
annevk: was it deliberate to drop the error handling mode here? it’s not mentioned in the commit message or the bugs linked from there https://github.com/whatwg/url/commit/f7ab990492ff6f6f69b557b7693149f42bba6bd8#diff-bb9242250d394d9ad4dc0019a1dfe4aeL1921

[10:39:56.0000] <SimonSapin>
annevk: If so, how should failure be handled? (Since "fatal" is the default for encode.)

[10:40:28.0000] <annevk>
Hixie: it's in the backlog

[10:41:31.0000] <SimonSapin>
(This is in the application/x-www-form-urlencoded serializer)

[10:41:32.0000] <annevk>
SimonSapin: I don't think it is for the algorithm it calls

[10:41:45.0000] <annevk>
SimonSapin: unless I'm linking to the wrong one

[10:41:46.0000] <Hixie>
i paged through it but didn't see anything relevant. i found the bug though. looks like i am not the only one with concerns on that one.

[10:41:50.0000] <Hixie>
bbiab

[10:42:05.0000] <SimonSapin>
annevk: I don’t understand that sentence. What is it?

[10:42:20.0000] <annevk>
SimonSapin: https://encoding.spec.whatwg.org/#encode

[10:43:15.0000] <SimonSapin>
URL links to #encoding

[10:44:07.0000] <annevk>
<span data-anolis-spec=encoding>encode</span> was in that commit

[10:44:47.0000] <annevk>
SimonSapin: if that regressed please file a bug?

[10:44:52.0000] <SimonSapin>
the latest version links to #encoding. Maybe it got changed accidentally in the bikeshed conversion?

[10:44:56.0000] <annevk>
SimonSapin: I suspect it might be the bikeshed conversion

[10:45:40.0000] <SimonSapin>
annevk: also, I’ve said it before, but I think it’s very error-prone to have terms with very close names (encode vs encoder) and subtly different behavior

[11:08:14.0000] <annevk>
TabAtkins: why does the "encode" link under https://url.spec.whatwg.org/#concept-urlencoded-serializer not go to "encode"?

[11:09:15.0000] <TabAtkins>
Ahahaha, interesting.  It's because Bikeshed's being too smart for its own good.

[11:10:04.0000] <annevk>
SimonSapin: seems hard to avoid, "encoding" and "encoder" are close too

[11:10:08.0000] <TabAtkins>
It understands English conjugation enough to recognize that "encode" and "encoding" are the same word.  I'll have to see how to tweak this so it doesn't do corrections if the exact word is around.

[11:13:15.0000] <Ms2ger>
I wonder if I ever received an email whose subject started "I have a proposal" that wasn't spam

[11:13:25.0000] <SimonSapin>
TabAtkins: too much magic?

[11:14:25.0000] <TabAtkins>
SimonSapin: Yeah.  It also doesn't help that, originally, Bikeshed only had the auto-correction on link texts.  Mike West added it to definition texts, but the implementation isn't quite right.

[11:15:33.0000] <SimonSapin>
TabAtkins: but yeah, preferring exact matches over fuzzy matches sounds good

[11:49:33.0000] <TabAtkins>
annevk: Actually, the problem is that "encode" doesn't show up in the linking database at all, so there's nothing to exact-match against.  Fuzzy-matching then leads to Bikeshed concluding that you probably meant "encoding", which it knows about.

[11:49:58.0000] <TabAtkins>
(The fact that this didn't error out is probably why it's not in the custom anchors block.)

[13:29:53.0000] <TabAtkins>
Yay, fun times finding bugs in the Python stdlib!

[13:45:33.0000] <foolip>
/me reads http://intertwingly.net/blog/2014/11/20/WHATWG-W3C-Collaboration


2014-11-21
[19:12:33.0000] <hgl>
i was testing if changing a range object (e.g., insert a node) returned by selection should change the selection, and found out browsers behave differently on this one. Should the spec codify this?

[19:38:27.0000] <MikeSmith>
hgl: yeah. But which spec? The Selection API spec?

[19:38:59.0000] <hgl>
I believe so, already opened an issue: https://github.com/w3c/selection-api/issues/25

[19:39:13.0000] <hgl>
hope that's the correct place.

[19:42:48.0000] <MikeSmith>
hgl: yeah I think that's the best

[19:43:02.0000] <hgl>
great, thank you.

[19:43:18.0000] <MikeSmith>
hgl: also, rniwa's usually around here during us/west hours

[19:44:40.0000] <hgl>
cool, would be great if i get to talk to him. :)

[19:45:47.0000] <MikeSmith>
it's only 7:45pm in Cupertino so he may still drop in after he stops by his favorite taco place for dinner :)

[19:47:07.0000] <MikeSmith>
Ben Peters is doing a lot of related spec work on the rich-textediting-related stuff, but I see he's following https://github.com/w3c/selection-api so he'll see your issue

[19:49:23.0000] <hgl>
Thank you for heads up. You know i actually have another question relate to rich text editing, but not sure if it should be in the spec, can i discuss with you here?

[19:49:25.0000] <MikeSmith>
hgl: you can always send messages about issues and comments to public-webapps⊙wo too. Main advantage there is just that a few more people with possible insights will see it.

[19:50:21.0000] <hgl>
i like irc, especially when get quick response. :) but will try out the mail list. thanks

[19:50:37.0000] <MikeSmith>
you can discuss it with me but I'm not keeping up clostely with the current work, so the odds are low that I'll be much help

[19:51:50.0000] <MikeSmith>
hgl: yeah I prefer  IRC too and this is definitely the best place to hang out and ask things. But prime time for more people being around here is a few hours earlier than now, when Europe is still awake

[19:53:34.0000] <MikeSmith>
hgl: you can always just ask here -- drop your question in and you may not get a response right away but a lot of people here read scrollback and the logs so you may get an answer later (if you're still here or the next time you /join)

[19:53:51.0000] <hgl>
ok. i was wondering if there is a way to get the pixel location of a collapsed selection (i.e., caret). the only way i can think of is to insert an empty span element and calc it's boundingrect, since the range is empty. do you think the spec should make it easier?

[19:54:12.0000] <hgl>
MikeSmith, that's great, i will definitely hang out here more.

[19:56:57.0000] <hgl>
for a non-empty selection, i can use getBoundingClientRect() on the range object, very convenient, but if the selection is collapsed, i can no longer use this method.

[19:57:22.0000] <MikeSmith>
the way you describe his how I've seen others doing it. I'm not sure how much easier it could be made but anything's possible :) Anyway, it's worth asking more people about -- here or elsewhere. At the very least you'll eventually get an explanation about why it's not practical to provide some easier means (if that's the case) -- which wouldn't be totally satisfying but at least would clarify things for

[19:57:28.0000] <MikeSmith>
you some

[19:57:31.0000] <MikeSmith>
hgl: right

[19:57:46.0000] <MikeSmith>
I remember a very recent discussion here about something similar

[19:57:51.0000] <MikeSmith>
maybe roc knows

[19:58:45.0000] <roc>
Range.getBoundingClientRect should work

[19:59:03.0000] <roc>
it should return a meaningful rectangle even for a collapsed selection, if the collapsed selection is in a text node.

[19:59:13.0000] <hgl>
if the range is collapsed, return rect is 0,0,0,0

[19:59:18.0000] <roc>
which browser?

[19:59:18.0000] <hgl>
i have tested it.

[19:59:24.0000] <hgl>
safari

[20:00:07.0000] <roc>
got a link to a testcase?

[20:00:13.0000] <hgl>
let me set up a demo, wait a sec

[20:00:41.0000] <rniwa>
hgl: it’s defined in http://w3c.github.io/selection-api/#user-interactions

[20:00:42.0000] <roc>
I'm pretty sure that's a Webkit bug, and it should work in Firefox.

[20:00:50.0000] <rniwa>
hgl: the spec matches WebKit/Blink for now

[20:02:21.0000] <roc>
hgl: http://dev.w3.org/csswg/cssom-view/#dom-range-getclientrects

[20:03:22.0000] <roc>
note that if your collapsed range is not in a text node then you will get nothing. How caret works when you're not in a text node is very underspecified and not very interoperably implemented either...

[20:04:55.0000] <hgl>
ok, info avalanche, let me process it one by one.

[20:05:16.0000] <roc>
:-)

[20:06:54.0000] <hgl>
rniwa, "with suitable start and end", "suitable" here seems a bit vague. why not go with firefox and change the selection accordingly? seems more accurate and easy to define.

[20:07:19.0000] <rniwa>
hgl: I think there is a compat issue as far as I could recall.

[20:07:54.0000] <rniwa>
hgl: If I remember correctly, Gecko wanted to change their behavior.

[20:08:03.0000] <hgl>
ok, fair enough.

[20:08:06.0000] <rniwa>
also* wanted

[20:08:54.0000] <hgl>
rniwa, i guess, i could live with that behavior.

[20:10:07.0000] <hgl>
roc, please give me a minute to set up the demo.

[20:11:52.0000] <hgl>
rniwa, i should read the spec more carefully, shouldn't have missed that paragraph. :)

[20:12:04.0000] <rniwa>
hgl: no problem.

[20:12:08.0000] <rniwa>
hgl: i’ll close your issue then :)

[20:12:14.0000] <rniwa>
hgl: I file these bugs all the time as well

[20:12:19.0000] <rniwa>
some specs are hard to read

[20:12:20.0000] <hgl>
rniwa, please do. thanks.

[20:14:51.0000] <jarek>
btw, are there an plans to make getBoundingClientRect() return DOMRect instance?

[20:16:05.0000] <roc>
jarek: you mean in Webkit?

[20:16:11.0000] <jarek>
nvm, I just checked the spec

[20:16:21.0000] <jarek>
it is already mentioning DOMRect

[20:16:37.0000] <jarek>
roc: no, I meant in DOM standard

[20:16:53.0000] <roc>
yeah, it already does :-)

[20:18:15.0000] <hgl>
roc, http://jsbin.com/jafebipexa/3/edit

[20:18:40.0000] <hgl>
roc, click on the hello text, and see the 0 0 0 0 in output div

[20:19:09.0000] <hgl>
roc firefox doesn't have selectionchange event, so currently don't work on it.

[20:20:05.0000] <hgl>
roc, both safari and chrome return 0 0 0 0

[20:21:20.0000] <hgl>
the problem with inserting a span element to calc the position is that it will trigger a selectionchange event

[20:21:32.0000] <roc>
if you trigger the code another way (e.g. setInterval) you'll see that getBoundingClientRect() works in FF

[20:22:07.0000] <roc>
I think the spec agrees

[20:23:34.0000] <hgl>
roc, yes you are right, so do you think it's a bug in webkit and blink?

[20:25:39.0000] <roc>
yeah, that is

[20:28:45.0000] <hgl>
roc, cool. glad to know the spec actually specified it. all i need to do now is to open an issue and figure out a polyfill, thanks. :)

[20:30:33.0000] <hgl>
MikeSmith, thanks again for the liaison. :)

[20:53:23.0000] <hgl>
now, flame suite on. if i got a question with a spec, should i go to whatwg or w3c?

[20:57:40.0000] <roc>
depends on the spec

[21:01:22.0000] <hgl>
all questions relate to these https://whatwg.org/specs/ should be submitted to whatwg, and all else to w3c?

[21:04:49.0000] <roc>
yeah I would

[21:05:00.0000] <hgl>
ok, got it. thanks.

[22:33:18.0000] <hsivonen>
Hixie, annevk: Could you, please, change the <a href> and <form action> references to html5.validator.nu from http to https at https://validator.whatwg.org/ ?

[22:35:25.0000] <Hixie>
done for validator.whatwg.org, any others?

[22:36:22.0000] <hsivonen>
Hixie: thanks. I'm not aware of others.

[22:36:32.0000] <Hixie>
coolio

[22:38:22.0000] <hsivonen>
confirmed: no more cross-scheme form submission warning when using https://validator.whatwg.org/

[23:40:47.0000] <hsivonen>
annevk: http://webforms2.testsuite.org/ redirects to Test the Web Forward. Are the tests actually somewhere in the Web Platform Test git repo?

[23:45:18.0000] <annevk>
hsivonen: I'm not sure, I assume someone has created webforms2 tests

[00:10:14.0000] <hsivonen>
annevk: OK. I take it that you tests have vanished from the Web then

[00:10:47.0000] <hsivonen>
s/you/your/

[00:11:12.0000] <hsivonen>
MikeSmith: https://about.validator.nu/ *finally* gives up-to-date build instructions (by linking to github instead of trying to offer them inline)

[00:11:53.0000] <hsivonen>
MikeSmith: also, I added clarifications that the terms of service and privacy policy do not apply to the W3C instance

[01:25:09.0000] <MikeSmith>
hsivonen: very coolー thanks

[01:28:34.0000] <annevk>
hsivonen: yeah, they didn't seem that useful anymore with all the automated tests

[01:28:40.0000] <MikeSmith>
hsivonen: btw I'd like to change validator.w3.org/nu/ over to TLS some time soon

[01:29:13.0000] <annevk>
hsivonen: kudos on getting TLS btw

[01:30:06.0000] <annevk>
foolip: really, we're going to bring back CDATASection? :-(

[01:30:11.0000] <Ms2ger>
Boo

[01:30:45.0000] <annevk>
foolip: it's not entirely clear to me why we'd restore the node and then not have createCDATASection return an instance of it

[01:40:47.0000] <annevk>
foolip: oh wait, it was one or the other

[01:52:13.0000] <zcorpan>
anyone know how web components work? https://www.w3.org/Bugs/Public/show_bug.cgi?id=27376

[01:52:56.0000] <Ms2ger>
No

[01:56:41.0000] <zcorpan>
where is serializeAsCDATA now?

[02:01:10.0000] <Ms2ger>
Probably nowhere

[02:33:17.0000] <annevk>
zcorpan_: there's no CSS syntax for web components; that idea had a different name and got dropped

[02:33:56.0000] <annevk>
zcorpan_: decorators

[02:34:00.0000] <zcorpan_>
annevk: comment in the bug please :-)

[02:47:51.0000] <hsivonen>
annevk: I'm particularly happy to end the shame of running a site that had login without https (v.nu bugzilla)

[02:48:07.0000] <annevk>
zcorpan_: done

[02:48:15.0000] <zcorpan_>
thx

[02:52:05.0000] <smaug____>
/me learns something new, rel=nofollow

[02:52:12.0000] <smaug____>
not that I understand the use case

[03:01:53.0000] <Ms2ger>
smaug____, search engines?

[03:09:21.0000] <zcorpan_>
Ms2ger: do you remember if serializeAsCDATA was for compat or just someone complained?

[03:16:16.0000] <mathiasbynens>
does `itemtype` accept any URL as vocabulary?

[03:16:48.0000] <mathiasbynens>
schema.org now supports TLS, so it would be nice to use https:// instead of http:// in the spec examples if that’s possible https://html.spec.whatwg.org/multipage/semantics.html

[03:17:19.0000] <Ms2ger>
zcorpan_, it seems plausible that serializing cdata sections as text would break things

[03:17:22.0000] <annevk>
mathiasbynens: you could file a bug

[03:17:35.0000] <Ms2ger>
zcorpan_, but nobody tried, so no idea if that's actually the case

[03:17:44.0000] <annevk>
mathiasbynens: changing the URL changes the meaning as well though

[03:17:49.0000] <Ms2ger>
zcorpan_, IIRC, glazou cared quite strongly

[03:18:19.0000] <zcorpan_>
Ms2ger: ok, i'll take that as "someone complained" :-)

[03:19:07.0000] <mathiasbynens>
annevk: that’s what i was wondering about – does it change the meaning if both URLs provide the same vocabulary/response

[03:23:08.0000] <mathiasbynens>
filed https://www.w3.org/Bugs/Public/show_bug.cgi?id=27388

[03:23:41.0000] <annevk>
mathiasbynens: per spec it's just a string that happens to look like a URL

[03:23:50.0000] <annevk>
mathiasbynens: there's no fetching protocol involved afaik

[03:24:22.0000] <annevk>
mathiasbynens: we don't change http://www.w3.org/1999/xhtml either even though it's all sorts of wrong

[03:26:16.0000] <mathiasbynens>
i (naively) assumed vocabularies were somehow different

[03:26:28.0000] <mathiasbynens>
is there a canonical list of vocabulary identifiers/URLs?

[03:30:22.0000] <zcorpan_>
maybe we should change the namespace to https://n.whatwg.org/html

[03:48:33.0000] <annevk>
mathiasbynens: DNS?

[03:49:26.0000] <Ms2ger>
zcorpan_, why not about:blank?

[03:50:11.0000] <zcorpan_>
Ms2ger: it doesn't use TLS

[03:50:22.0000] <Ms2ger>
abouts:blank

[03:50:32.0000] <zcorpan_>
now we're talking

[03:50:46.0000] <mathiasbynens>
i meant vocabularies that are commonly supported by crawlers etc.

[04:32:20.0000] <zcorpan_>
hsivonen: maybe you can emit a warning in the validator when accessed over http?

[04:36:43.0000] <hsivonen>
zcorpan_: hmm. I wonder if API users would want to see an extra warning that doesn't pertain to what they are validating...

[04:37:47.0000] <zcorpan_>
hsivonen: of course they don't. which is why it might be a working incentive for them to switch to https before you force them to switch. they probably won't see your tweet

[04:43:41.0000] <jgraham>
zcorpan_: UnicodeEncodeError: 'charmap' codec can't encode character u'\xe5' in position 81: character maps to <undefined>

[04:44:00.0000] <jgraham>
From wpt html/infrastructure/urls/resolving-urls/query-encoding/resources/css-tmpl.py

[04:44:12.0000] <jgraham>
From /html/infrastructure/urls/resolving-urls/query-encoding/windows-1251.html

[04:44:30.0000] <zcorpan_>
hmm

[04:47:33.0000] <zcorpan_>
jgraham: filed https://github.com/w3c/web-platform-tests/issues/1403 i'll look at it next week

[05:26:18.0000] <buyoancing>
The website https://html.spec.whatwg.org/ has a SSL configuration that allows only RC4 (which is considered weak/broken) and has some other problems, see https://www.ssllabs.com/ssltest/analyze.html?d=html.spec.whatwg.org

[05:27:53.0000] <buyoancing>
"As of 2013, there is speculation that some state cryptologic agencies  may possess the capability to break RC4 even when used in the TLS  protocol. Microsoft recommends disabling RC4 where possible."

[05:33:33.0000] <buyoancing>
Is there someone here who can fix the configuration?

[05:34:11.0000] <buyoancing>
StartSSL also offers an intermediate certificate with SHA256 btw

[05:35:40.0000] <annevk>
buyoancing: DreamHost

[05:35:49.0000] <annevk>
buyoancing: Hixie could fix the intermediate certificate problem

[05:36:20.0000] <annevk>
(I pointed him to the incorrect intermediate certificate initially, since StartSSL instructions were not super clear :/)

[05:37:23.0000] <buyoancing>
i can provide some apache SSL directives that will give the site an A+ score

[05:38:45.0000] <annevk>
buyoancing: I don't think DreamHost allows that level of configuration

[05:39:01.0000] <annevk>
buyoancing: we need them to upgrade their VPS servers just as they did for their Shared servers

[05:39:27.0000] <annevk>
buyoancing: they've upgraded all Shared servers over the past month or so, so hopefully VPS will happen soon

[05:39:41.0000] <buyoancing>
I see

[05:39:58.0000] <buyoancing>
Anyway, if someone can point them in the right direction, http://pastebin.com/YYitWhgQ has some clues

[05:40:57.0000] <annevk>
That -SSLv2 is still required is somewhat disturbing

[05:41:21.0000] <buyoancing>
Is that Apache's fault or mod_ssl or OpenSSL?

[05:42:28.0000] <annevk>
Apache / mod_ssl I suspect, unless they just pass this straight through to OpenSSL but that doesn't seem like a good idea

[05:42:45.0000] <buyoancing>
perhaps it's required due to the "ALL" before "-SSLv2" ?

[05:44:01.0000] <buyoancing>
"all" is the default

[05:44:09.0000] <buyoancing>
https://httpd.apache.org/docs/current/mod/mod_ssl.html#sslprotocol

[05:44:10.0000] <annevk>
buyoancing: I have no idea; https://wiki.mozilla.org/Security/Server_Side_TLS#Apache recommends the same

[05:44:59.0000] <buyoancing>
it says: "all"  is a shortcut for ``+SSLv3 +TLSv1'' or     - when using OpenSSL 1.0.1 and later -     ``+SSLv3 +TLSv1 +TLSv1.1 +TLSv1.2, respectively

[05:45:34.0000] <buyoancing>
anyway, thanks

[05:45:37.0000] <buyoancing>
TTYL

[05:47:36.0000] <annevk>
Oh he left

[05:47:41.0000] <annevk>
Well I filed https://www.w3.org/Bugs/Public/show_bug.cgi?id=27390 anyway

[06:38:29.0000] <annevk>
This prototype.includes decision fucks over DOMTokenList and DOMStringList (if we can't remove it)

[06:40:06.0000] <annevk>
Maybe TC39 needs a "1Platform" slogan

[06:49:19.0000] <jgraham>
I think the slogan of the web is something like TSBOWTDI;BTWIDFEAAOTSMOTFLRA (There Should Be One Way To Do It; But That Way Is Different For Every API And Often There's More Than One For Legacy Reasons Anyway)

[07:37:25.0000] <smaug____>
How unstable or stable might http://drafts.csswg.org/css-scoping/ be

[07:37:36.0000] <smaug____>
TabAtkins might have an opinion

[09:16:14.0000] <annevk>
Anyone here with input on the security considerations for Encoding? https://www.w3.org/Bugs/Public/show_bug.cgi?id=19961#c3

[09:23:41.0000] <hsivonen>
annevk: isn't a VPS all about having your own virtual server? is it really Dreamhost's responsibility to update the TLS config on Hixie's VPS?

[09:24:35.0000] <annevk>
hsivonen: as far as I can tell DreamHost VPS just means you're guaranteed some set of system resources

[09:24:53.0000] <hsivonen>
annevk: ok. pretty misleading to call that "VPS"

[09:24:54.0000] <annevk>
hsivonen: you could copy yourself on the bug I filed, perhaps Hixie knows more

[09:25:53.0000] <hsivonen>
I guess I can't make Validator.nu emulate Firefox's initial TLS handshake until whatwg.org moves away from its RC4-only state

[09:26:11.0000] <hsivonen>
not that I'm in a particular hurry to do that

[09:26:15.0000] <hsivonen>
but I want to at some point

[09:26:38.0000] <annevk>
WHATWG is holding back the web, you heard it here first

[09:27:21.0000] <annevk>
It's a shame DreamHost took such a long time to start paying attention to this stuff, but then so did I

[09:42:53.0000] <jgraham>
From Dreamhost's page it at least looks like you would expect it to be possible to update the TLS config

[09:43:09.0000] <jgraham>
Since it seems like it's a VM on which you have root

[09:57:23.0000] <annevk>
Yeah sounds likely, not sure if Hixie is game for playing with that

[10:01:23.0000] <annevk>
hsivonen: I'm trying to restore webforms2.testsuite.org, but it's taking a bit longer than expected

[10:01:47.0000] <annevk>
hsivonen: no ETA, something is broken on DreamHost's end :/

[10:56:22.0000] <Hixie>
i'm reluctant to do anything to change the system config because the changes tend to get blown away easily

[11:09:10.0000] <hsivonen>
Hixie: blow away as in Dreamhost overwriting stuff on VPSs?

[11:09:25.0000] <Hixie>
yeah, when you fiddle with the panel for example

[11:09:30.0000] <Hixie>
or when they're trying to fix some problem

[11:10:04.0000] <hsivonen>
oh so a VPS has some management tools connected to it even though you are supposed to have root?

[11:10:50.0000] <Hixie>
you have root, but yes, the management tools also have root.

[11:11:09.0000] <Hixie>
(i'd much rather have the management tools than have root)

[11:11:38.0000] <hsivonen>
I see

[11:12:23.0000] <hsivonen>
I wonder if Dreamhost has always been RC4-only or if this is fallout from the "mitigate BEAST with RC4" meme

[13:11:36.0000] <JonathanNeal>
I’m working to standardize tests for polyfills - something that could benefit multiple polyfill projects or services. Would anyone be interested in collaborating with me on this?

[13:18:42.0000] <JonathanNeal>
Or maybe I should say tests for browser features.

[13:20:22.0000] <Ms2ger>
Too late, we've already done that

[13:20:31.0000] <Ms2ger>
https://github.com/w3c/web-platform-tests

[13:22:27.0000] <JonathanNeal>
oh sweet!

[13:24:21.0000] <JonathanNeal>
Ms2ger: I’m glad I asked. I am hoping to standardize testing suites between the different polyfill projects. I am having trouble finding tests for <Element>.append or Promise. Do you have those, too?

[13:24:44.0000] <Ms2ger>
I don't know where Promise tests are hidden

[13:25:07.0000] <Ms2ger>
Has anyone implemented append()?

[13:26:03.0000] <Ms2ger>
Don't see any functional tests for it in wpt

[13:26:09.0000] <JonathanNeal>
“are hidden” - am i supposed to read into that?

[13:26:17.0000] <jgraham>
Ms2ger: append?

[13:26:25.0000] <Ms2ger>
jgraham, on nodes

[13:29:22.0000] <JonathanNeal>
Ms2ger: I don’t think either are there, at least after surfing through commit logs.

[13:29:52.0000] <Ms2ger>
I think some Promise tests may exist outside wpt

[13:29:59.0000] <Ms2ger>
In my view, that makes them hidden :)

[13:31:12.0000] <JonathanNeal>
some, like there are others inside wpt?

[13:31:28.0000] <jgraham>
Isn't promise in TC39 now?

[13:32:03.0000] <jgraham>
I don't think they are interested in contributing to wpt

[13:32:45.0000] <JonathanNeal>
Well, Domenic has tests. I could port them.

[13:32:53.0000] <JonathanNeal>
If they’re not already perfect ootb.

[13:33:29.0000] <astearns_>
jgraham: I thought test262 had looked into contributing to wpt

[13:34:06.0000] <JonathanNeal>
Wow, and with that (TC39, test262) you’ve almost lost me.

[13:35:03.0000] <jgraham>
astearns_: If so you know more than me

[13:35:05.0000] <JonathanNeal>
Well, I would like to help, or at least integrate with or leverage those tests.

[13:35:32.0000] <jgraham>
I thought that tobie enquired about it at some point but nothing happened

[13:36:42.0000] <JonathanNeal>
How can I help?

[13:37:42.0000] <jgraham>
JonathanNeal: Help with what?

[13:38:13.0000] <JonathanNeal>
Making some of those tests un-“hidden”.

[13:38:36.0000] <jgraham>
JonathanNeal: See if they're at https://github.com/tc39/test262

[13:38:45.0000] <jgraham>
Then see if any vendors import those tests, I guess

[13:39:12.0000] <JonathanNeal>
oh my, that’s a rough testing suite to understand.

[13:39:56.0000] <jgraham>
Looks like Mozilla has http://dxr.mozilla.org/mozilla-central/source/js/src/tests/test262 but I don't know how up to date it is

[13:41:08.0000] <astearns_>
hmm - can't find a reference to what I was thinking of

[13:41:49.0000] <JonathanNeal>
Are those intended to be human readable?

[13:42:13.0000] <JonathanNeal>
human readable / searchable

[13:42:23.0000] <astearns_>
bterlson: do you remember whether test262 was looking into contributing to wpt? Failing that, do you know the state of promises tests?

[13:53:22.0000] <bterlson>
/me reads backlog

[13:53:33.0000] <JonathanNeal>
jgraham: it’s hard to tell since so many of the tests use assertions via Promise

[13:54:11.0000] <JonathanNeal>
But maybe in es6/ch25/25.4/25.4.4/25.4.4.1

[13:54:29.0000] <bterlson>
astearns_: I don't htink there have been any discussions about contributing to wpt, but they are OSS and could be adapted by anyone I believe

[13:54:40.0000] <bterlson>
yes, those are the promise tests

[13:55:16.0000] <JonathanNeal>
And they should be hidden from wpt?

[13:55:18.0000] <bterlson>
note that once https://github.com/tc39/test262/issues/107 is finished (probably this weekend) the promise tests will be under lib/Promise

[13:55:48.0000] <bterlson>
also you may want to check out https://github.com/bterlson/test262-harness if you don't want to use the included python harness

[13:55:55.0000] <bterlson>
JonathanNeal: was that question directed at me?

[13:56:01.0000] <sicking>
annevk: ping

[13:56:26.0000] <JonathanNeal>
bterlson: anyone, since i don’t understand the organizational structure of these tests.

[13:57:12.0000] <bterlson>
JonathanNeal: I don't know what "hidden from wpt" means, exactly

[13:57:29.0000] <bterlson>
JonathanNeal: the current organization is based on a hybrid of ES5 and ES6 spec section numbers

[13:57:49.0000] <JonathanNeal>
bterlson: Ms2ger wrote “I don't know where Promise tests are hidden” and “I think some Promise tests may exist outside wpt” “In my view, that makes them hidden :)”

[13:57:52.0000] <bterlson>
but as per 107 we are moving to a more undertandable organization structure

[13:58:41.0000] <bterlson>
I think I disagree with that view :-P

[13:59:31.0000] <bterlson>
the entire goal of test262 is to be exactly what you want it sounds like: a test suite that implementers (including, perhaps especially, polyfill authors) can use

[13:59:35.0000] <Ms2ger>
Would you claim that JS isn't part of the web?

[14:00:10.0000] <JonathanNeal>
I help contribute to https://github.com/Financial-Times/polyfill-service and I’d like to see some standardization of tests. wpt seems very promising but possibly quite behind. Not sure if you were saying tc39 is becoming more readable or if you were talking about wpt or whatever 107 is.

[14:00:10.0000] <bterlson>
JS is part of the web yes. But its domain is not exclusive to the web.

[14:01:08.0000] <bterlson>
JonathanNeal: test262 is standardized tests, and is under active development, and is the official test suite for ECMAScript. Anything polyfilling ECMAScript functionality should be running official ECMA tests.

[14:01:54.0000] <JonathanNeal>
Ideally, I would rather contribute a test to some independent repository and reference it in whatever service I’m using. I would, however, like the tests to be somewhat readable to developers, and be possible to test across all browsers/versions to generate a compatibility list.

[14:02:01.0000] <bterlson>
issue 107 that I linked above is just the details about us changing the organization to be more striaght forward (eg. test/library/Promise for promise tests rather than test/suite/es6/ch25/...)

[14:02:26.0000] <bterlson>
Independent of a standards body you mean?

[14:02:36.0000] <JonathanNeal>
No, independent of the polyfill implementation.

[14:02:42.0000] <bterlson>
Oh, right, I agree

[14:03:48.0000] <bterlson>
sounds like test262 is what you want. There will be some problems to solve TBH, but we share the same goals and so would work to address any problems

[14:04:51.0000] <bterlson>
once issue 107 is addressed, identifying tests by feature and getting pass rates across browsers (or any other JS hosts incluidng node) will be fairly easy. Needs harness work, though I have already started it.

[14:05:17.0000] <Hixie>
wtf http://www.w3.org/2011/tracking-protection/drafts/tracking-dnt.html

[14:06:08.0000] <JonathanNeal>
For instance, there’s https://github.com/polyfills/polyfills and Yahoo is building their own service https://twitter.com/kaelig/status/534335699512999936 and there are numerous other polyfill libraries out there.

[14:06:51.0000] <bterlson>
and meanwhile, the actual polyfills are in various stages of spec compliance, ranging from pretty good to "what is this doing?"

[14:09:06.0000] <bterlson>
JonathanNeal: feel free to email me too if you have long form concerns you want to hash out

[14:09:31.0000] <JonathanNeal>
bterlson: I’ve been a sinner and saint in regards to spec compliance. Sure, let me PM you for deets.

[14:10:06.0000] <JonathanNeal>
But the bigger subject is that we have this big, massively distributed polyfills, and the tests they use also generate compatibility charts, like the kind you see at kangax or caniuse.

[14:10:23.0000] <JonathanNeal>
*have these

[14:10:47.0000] <bterlson>
Yes. I am hoping that test262 can ultimately feed data into Kangax's chart at least. He's open to the idea.

[14:10:50.0000] <JonathanNeal>
So, it would make sense for us to be sharing at least SOME tests, and to be addressing the varying levels of spec compliance.

[14:11:36.0000] <bterlson>
I'd argue that there is little reason not to share all tests. Eg. if ECMA spec says test should pass then it should go in test262. Better for everyone that way. Plus implementers run test262 a lot.

[14:11:37.0000] <JonathanNeal>
For instance, I think it’s reasonable to see a polyfill that matches functionality, but discards aspects of conformance, like the iterability of a method or property, or the argument of some method.

[14:12:07.0000] <JonathanNeal>
Yea, I’ve worked to make all of our tests CC0, so no signing an agreement just to play.

[14:12:25.0000] <bterlson>
I don't know how it can match functionality but also take different arguments

[14:12:39.0000] <bterlson>
thankfully the test262 CLA is super simple

[14:12:40.0000] <JonathanNeal>
*argument lengths

[14:12:49.0000] <bterlson>
ahh

[14:13:21.0000] <JonathanNeal>
function() {} vs function properName() {}, or function () { /* parse arguments */ } function (technicalExpectsAtLeastOneArgument) {}

[14:13:23.0000] <bterlson>
if s/iterability/enumerability/ then I agree with reservations (it probably depends on if iterating over the keys of the object is a common thing)

[14:13:52.0000] <bterlson>
but yeah, no point tanking perf just to have proper enumerability in a case no one will run in to

[14:14:30.0000] <JonathanNeal>
Right, so having a consistent chart, like “A conformance meets these demands (tests), AA conformance meets these demands” even if the browser can’t technically meet AA conformance it’s good to know that a polyfill meets the basic requirements.

[14:14:46.0000] <JonathanNeal>
We’ve run into that ourselves with iterability tests in older browsers.

[14:15:03.0000] <JonathanNeal>
We don’t want to say “sorry, this polyfills fails” when it doesn’t, it just doesn’t conform to iterability.

[14:15:31.0000] <bterlson>
my theory in this area is that developers want to make the call about what "good enough" is for themselves

[14:15:39.0000] <bterlson>
it's a hard thing to prescribe

[14:16:00.0000] <JonathanNeal>
Yes, but some accessibility standards have adopted a pretty good approach, like I’ve referenced with A, AA, AA compliance.

[14:16:15.0000] <JonathanNeal>
*AAA, pardon all the typos.

[14:16:49.0000] <bterlson>
but it takes a judgement call to decide what AAA means, so it seems possible that depending on the tradeoffs made, an A polyfill might be better than AAA. Maybe better just to give information on what passes and fails.

[14:17:05.0000] <bterlson>
can you link me to these tests though? Curious

[14:17:12.0000] <JonathanNeal>
And this seems like a problem for a standards body to address, and I definitely have an immediate need. With Yahoo entering the scene, it seems like we should take it a bit more seriously.

[14:17:39.0000] <bterlson>
agreed

[14:17:46.0000] <bterlson>
well, it's why test262 exists in the first place

[14:18:05.0000] <JonathanNeal>
https://github.com/polyfills/polyfills/blob/master/test/test.js (bundled into one file) https://github.com/Financial-Times/polyfill-service/tree/master/polyfills (packaged with each polyfill)

[14:18:16.0000] <bterlson>
although until recently we've not had a harness that js devs want to use, or done a good job of making the tests accessable

[14:19:00.0000] <JonathanNeal>
And don’t forget https://github.com/es-shims/es5-shim/tree/master/tests

[14:19:52.0000] <JonathanNeal>
Those, I think, are the most widely cited (not including Domenic’s https://github.com/promises-aplus/promises-tests which are exclusively for promises)

[14:20:48.0000] <bterlson>
yeah I briefly talked to Jordan about test262 couple days back at tc39. I think we can share tests with es5/6/7-shim.

[14:20:49.0000] <JonathanNeal>
In the process of creating our own tests, we also noticed that sometimes the caniuse or mdn reports were off (possibly even a few older kangax es5 ones). I think this is because those tests are not automatically generated.

[14:21:13.0000] <bterlson>
the A+ promise tests we decided not to port on the grounds that it also tests promise interaction with non-ECMAScript things like setTimeout

[14:22:24.0000] <Domenic>
and also all vendors are running them anyway

[14:22:27.0000] <JonathanNeal>
Well, for those of you working on these official suites, I would love to involve you in *our discussion or get *us talking to you about using your tests. *our/us as in the various polyfill libs.

[14:23:03.0000] <bterlson>
yes and that

[14:23:09.0000] <bterlson>
yep, love to be included in that discussion :)

[14:23:45.0000] <JonathanNeal>
Domenic: Thoughts? Do you think I’m accurating describing a real problem or just off in my own la la land? Please be honest.

[14:24:26.0000] <Domenic>
JonathanNeal: it would be good if polyfills used and contributed to the standard test repos (viz. web-platform-tests and test262). If you can make it happen, go for it.

[14:25:30.0000] <bterlson>
(viz. used properly is a beautiful thing to behold)

[14:26:02.0000] <JonathanNeal>
If the tests can (as I imagine they should) generate caniuse-like support maps for all browsers, then I can definitely help make that happen.

[14:28:48.0000] <JonathanNeal>
Two things on the testing suite’s end could really help. If the tests could allow lower bands of conformance (re: functional, without conforming to iterability, argument length, or argument name).

[14:28:54.0000] <JonathanNeal>
*method name

[14:29:22.0000] <JonathanNeal>
A good case for method name is Promise prototype’s catch. You can’t name a method catch.

[14:29:55.0000] <JonathanNeal>
Well, you could, but then your JS will surely fail in almost any browser.

[14:30:10.0000] <bterlson>
JonathanNeal: we'll get there in a few weeks. Step 1 is identify tests by feature name, which is almsot complete. Step 2 is teach the harness how to pull categories from a config file and report pass rates by category.

[14:30:46.0000] <JonathanNeal>
The second thing that could really help would be organization of the tests. Some kind of common configuration. Right now, things seem pretty scattered.

[14:31:02.0000] <bterlson>
JonathanNeal: IE8 is the only browser I know of that doesn't like reserved words for property names?

[14:31:30.0000] <JonathanNeal>
Try function catch() {} in whichever browser you please.

[14:31:45.0000] <bterlson>
that's not a property name

[14:32:16.0000] <bterlson>
but say var obj = {catch: 1} is fine

[14:32:20.0000] <JonathanNeal>
Sorry, I thought I said method name.

[14:32:37.0000] <JonathanNeal>
Method name, like right now you can test Promise.prototype.catch.name === “catch"

[14:32:43.0000] <bterlson>
methods are usually attached to objects right? so foo.catch is fine (IE>8)

[14:32:59.0000] <JonathanNeal>
obj.foo can be function bar() {}

[14:33:45.0000] <JonathanNeal>
So, if you test for someFunction.name and someFunction.length you could have a functional polyfill that fails.

[14:34:02.0000] <JonathanNeal>
Or, likewise, a browser that fails the test on those grounds.

[14:34:28.0000] <Domenic>
You can name a method catch in all browsers. You just can't name a function catch.

[14:35:03.0000] <Domenic>
Anyway, tests are meant for browsers, not polyfills, so polyfills will always fail some tests

[14:35:27.0000] <Domenic>
If polyfill authors want to collate a list of "known to be impossible to pass" (or hard to pass) tests, they should do that

[14:35:39.0000] <Domenic>
e.g. like how V8 maintains a list of "known to be slow to run" test262 tests.

[14:35:53.0000] <Domenic>
that's not really part of test262/wpt's job

[14:35:59.0000] <bterlson>
JonathanNeal: Re: your second item, you will find that after this weekend (I hope) the organization will make much more sense.

[14:36:40.0000] <JonathanNeal>
Which testing suite is this for again, bterlson? Is this the one that asked me to sign something?

[14:37:28.0000] <JonathanNeal>
That later question is less important.

[14:37:33.0000] <JonathanNeal>
At least, to me.

[14:38:15.0000] <bterlson>
JonathanNeal: test262 is what I'm talking about

[14:38:18.0000] <JonathanNeal>
Domenic: agreed that “known to be X” might need to exist somewhere else, as long as it’s all iteroperable.

[14:38:51.0000] <JonathanNeal>
If, at the end of the day, I just copied and pasted the tests I liked from wpt or 262, it doesn’t do us much good.

[14:39:50.0000] <JonathanNeal>
In other words, I want browser feature support charts and polyfill support charts that can get gold, silver, or bronze medals that actually mean something and aren’t awarded by ourselves.

[14:40:11.0000] <bterlson>
Sounds like we want the same things :)

[14:41:08.0000] <bterlson>
JonathanNeal: I think the form your "known-tests" would take is a config file for the harness that users can pick up to tell the harness to run only the specific set of tests for whatever "conformance level" you've defined

[14:42:15.0000] <JonathanNeal>
Yes, except that I would need the conformance level to be beyond my implementation, too.

[14:42:21.0000] <JonathanNeal>
conformance levels

[15:11:48.0000] <Hixie>
annevk: it strikes me that realms and global objects can't be the same thing because you can change the global object during runtime of a script (using document.open) but that presumably doesn't change the realm

[15:11:55.0000] <Hixie>
not sure if it changes the global environment record

[15:40:10.0000] <Hixie>
we have 31 domains with a cert

[15:40:16.0000] <Hixie>
each of which takes about 12 seconds to update

[15:40:19.0000] <Hixie>
i am going insane

[15:41:16.0000] <Hixie>
and dreamhost's !@#$%^ portal won't let you just open each one in a new tab and update them all, because they store state in !@#$%^ cookies

[15:41:20.0000] <Hixie>
good work team


2014-11-22
[16:56:20.0000] <Domenic>
TabAtkins: any ideas on how to Bikeshed autolink to https://html.spec.whatwg.org/multipage/webappapis.html#fire-a-simple-event ? <a>fire a simple event</a> doesn't seem to work, even if I put "fire a simple event" in the Link Defaults.

[17:08:18.0000] <TabAtkins>
Domenic: Ask bikeshed if it knows the anchor:

[17:09:05.0000] <TabAtkins>
bikeshed debug --print-refs-for="fire a simple event"

[17:10:17.0000] <TabAtkins>
If no, does the anchor in html have a title attr? If so, add a title attr to your link with the same value.

[02:14:58.0000] <Ms2ger>
annevk, I didn't call out gEBTN/NS because Servo didn't fail tests for those

[03:38:05.0000] <jgraham>
Ms2ger: Context?

[03:46:51.0000] <Ms2ger>
jgraham, someone commented on the recent DOM commit to clarify that element.gEBCN doesn't include element

[06:41:02.0000] <IZh>
Hi! Who is responsible for web-server settings of whatwg.org?

[12:30:45.0000] <MatixYo>
Hello

[12:31:53.0000] <MatixYo>
Could someone regsiter metadata name "theme-colors"?

[12:31:58.0000] <MatixYo>
register*

[12:32:46.0000] <MatixYo>
It's used in Android Chrome for setting color of navigation bar.

[12:33:22.0000] <MatixYo>
Oh wait

[12:33:58.0000] <MatixYo>
my mistake it's theme-color and it is there. Last time I checked it wasn't but now I've mistyped it. Mea culpa.


2014-11-23
[23:43:11.0000] <_2_Andreina>
Hola

[00:43:44.0000] <annevk>
Hixie: bz believes document.open() should create a new Realm and global environment record as well

[00:44:25.0000] <annevk>
hsivonen: https://webforms2.testsuite.org is now restored, though you might need to clear cache

[00:44:46.0000] <annevk>
hsivonen: apparently DreamHost uses a 301...

[03:31:01.0000] <jsx>
First of all, sorry for asking this here, with a spec link to w3c. But I couldn't understand why some of the predefined CSS counter styles are listed under 'Complex' prefefined styles? For example, the japanese-formal and japanese-informal styles don't seem to be using any special algorithms - http://dev.w3.org/csswg/css-counter-styles/#limited-japanese.

[03:31:01.0000] <jsx>
Then why are they listed under 'complex' styles?

[03:41:18.0000] <Ms2ger>
TabAtkins, ^

[12:33:50.0000] <GPHemsley>
Wait, mailman supports topic categories... why don't we use them?

[15:01:26.0000] <TabAtkins>
jsx: They group with the Chinese styles, which are "complex". Also, they previously were defined out to 10^16, which requires "complex" handling. That's not true any more, but wtv.


2014-11-24
[16:09:24.0000] <gsnedders>
SimonSapin: you don't have a WTF-8 impl in Python, do you?

[16:13:10.0000] <gsnedders>
SimonSapin: (I realise the Py2 UTF-8 codec is actually WTF-8)

[17:54:13.0000] <Manishearth>
annevk: around?

[18:04:05.0000] <gsnedders>
jgraham: https://github.com/html5lib/html5lib-tests/pull/52 ASAP plz

[20:48:55.0000] <SimonSapin>
I don't, only Rust

[20:51:06.0000] <SimonSapin>
gsnedders: ⬆

[01:00:41.0000] <Ms2ger>
Github uses emoji now?

[01:06:19.0000] <Ms2ger>
hsivonen, thanks, and no worries about the delay :)

[01:14:13.0000] <annevk>
Manishearth: yup

[01:49:55.0000] <foolip>
zcorpan: what is serializeAsCDATA? Blink doesn't have it and neither does Gecko it seems

[01:51:38.0000] <zcorpan>
foolip: it's an attribute of Text that ms2ger specified in domparsing as part of trying to kill cdata sections in dom. mostly because glazou wanted his editor to continue to emit cdata sections aiui

[01:52:59.0000] <zcorpan>
not sure the dom should have that sort of thing for the sake of editors, but anyway

[02:05:00.0000] <annevk>
I don't think we should

[02:05:27.0000] <annevk>
Editors would want preservation of spaces between attributes, original order of attributes, etc. as well

[02:09:13.0000] <annevk>
JakeA: thanks for opening #566

[02:35:09.0000] <foolip>
annevk: if you're curious, I prepared a CL seeing what it would take to purge CDATASection from Blink: https://codereview.chromium.org/739433003/

[02:35:36.0000] <foolip>
but that also removes createCDATASection, so doesn't seem viable

[02:36:40.0000] <foolip>
so the XML parser and createCDATASection is the only source of these objects, as you suspected

[02:38:15.0000] <foolip>
my hunch is that the likeliest compat issue would be script that parse and then serialize XML and expect cdata to survive intact

[02:38:52.0000] <foolip>
which is a bit odd, of one considers cdata like a form of escaping like &bla;

[02:39:00.0000] <foolip>
if

[02:43:42.0000] <JakeA>
annevk: no worries. Would have done it sooner, but Chrome Dev Summit.

[02:49:00.0000] <darobin>
foolip: anyone expecting CDATA to roundtrip likely deserves to break; a lot of mainstream XML tools won't roundtrip it either

[02:49:39.0000] <foolip>
darobin: deserving or not isn't really relevant :)

[02:50:00.0000] <darobin>
foolip: I know, but the underlying idea is that it seems unlikely to be common to me :)

[02:50:11.0000] <foolip>
that would be very nice

[02:50:24.0000] <foolip>
I should probably add a use counter for serializing cdata

[02:54:42.0000] <zcorpan>
i can imagine polyglot stuff breaking <script> if cdata starts serializing as text. but i don't know if the browser is in that "toolchain" typically

[02:57:29.0000] <darobin>
zcorpan: I wouldn't expect the browser to be involved there, and anyway: polyglot

[02:58:07.0000] <zcorpan>
darobin: right

[02:58:24.0000] <zcorpan>
just first thing i could think of that would break

[02:58:41.0000] <zcorpan>
another is substring or regex match against innerHTML

[02:59:13.0000] <zcorpan>
something that had us use literal < and > when serializing attribute values

[02:59:43.0000] <darobin>
XML + innerHTML + CDATASection + regex?

[03:00:03.0000] <zcorpan>
yep

[03:00:10.0000] <darobin>
that's some seriously fucked up combo :)

[03:00:44.0000] <zcorpan>
/me points at topic :-)

[03:00:50.0000] <darobin>
I know, I know :)

[03:01:16.0000] <darobin>
still

[03:01:26.0000] <darobin>
there are things that would be worthy of a StabInTheFaceCounter

[03:14:38.0000] <Ms2ger>
I wouldn't expect polyglot and browsers to overlap at all :)

[03:33:41.0000] <hsivonen>
Ms2ger: you're welcome. I wish I had had more insightful comments to make.

[03:35:12.0000] <gsnedders>
I need to refactor stuff so I can publish my script to update expected failures for html5lib, I think. So many failing tests if I update…

[03:42:44.0000] <jgraham>
gsnedders: If you want review for your encoding tests I suggest you ask annevk

[03:42:55.0000] <jgraham>
They were wpt changes, right?

[03:43:04.0000] <gsnedders>
jgraham: no, html5lib-tests

[03:43:15.0000] <gsnedders>
jgraham: they're all about encoding detection in HTML

[03:44:33.0000] <gsnedders>
It just updates the labels to be what the primary form is in the Encoding spec by and large.

[03:45:20.0000] <jgraham>
gsnedders: Oh, in that case you should get annevk to review ;)

[03:47:53.0000] <gsnedders>
annevk: https://critic.hoppipolla.co.uk/r/592

[03:48:27.0000] <gsnedders>
jgraham: also I realised we have multiple bits of metadata for scripted tests in the tree-construction tests

[03:48:34.0000] <gsnedders>
jgraham: which is pretty bad

[03:49:34.0000] <jgraham>
We do?

[03:49:44.0000] <gsnedders>
We have a scripted folder, and then there's the fact that I realised I really don't like Hixie's #script-on and #script-off sections, because they're really just flags. I'd rather have a #scripting section containing {any,enabled,disabled}.

[03:51:00.0000] <jgraham>
That seems like bikeshedding

[03:51:07.0000] <gsnedders>
Yeah, on the whole it is

[03:51:13.0000] <gsnedders>
But we should probably get rid of the scripted folder

[03:51:26.0000] <jgraham>
That makes more sense

[03:51:40.0000] <gsnedders>
Which we currently totally ignore in html5lib-python, despite implementing the scripting enabled case and not supporting scripting.

[03:52:35.0000] <gsnedders>
jgraham: also see the question in https://github.com/html5lib/html5lib-python/pull/174

[03:53:30.0000] <annevk>
gsnedders: I'm not sure I follow the yahoo example

[03:54:03.0000] <annevk>
gsnedders: I guess I need more context

[03:54:20.0000] <annevk>
/me finds a way to get more context

[03:54:35.0000] <gsnedders>
annevk: more context in what way?

[03:54:40.0000] <gsnedders>
annevk: surrounding lines?

[03:54:45.0000] <annevk>
gsnedders: yeah, reviewed now

[03:55:33.0000] <gsnedders>
annevk: thx

[04:03:27.0000] <jgraham>
gsnedders: I thought there already was a system of escapes although I don't remember exactly what it covered

[04:10:52.0000] <gsnedders>
jgraham: no, there isn't; we have double-escaped stuff for the JSON tests

[04:12:16.0000] <Manishearth>
annevk: Filed an issue https://www.w3.org/Bugs/Public/show_bug.cgi?id=27414

[04:16:04.0000] <annevk>
coolio

[05:22:39.0000] <zcorpan>
darobin: what should i do with <img> bugs filed in html wg?

[05:23:01.0000] <darobin>
zcorpan: you mean ones that you've closed? or something else?

[05:23:15.0000] <darobin>
in general?

[05:23:53.0000] <zcorpan>
darobin: new ones

[05:23:53.0000] <zcorpan>
darobin: https://www.w3.org/Bugs/Public/show_bug.cgi?id=27393

[05:24:32.0000] <darobin>
zcorpan: well, at the technical level, I would say "solve them" but I'm guessing that's not your question :)

[05:25:12.0000] <zcorpan>
darobin: do i move them or clone them to whatwg - html <img>

[05:25:57.0000] <zcorpan>
i guess i could leave them and put "<img>" in the summary

[05:25:59.0000] <darobin>
zcorpan: if the choice is move or clone I would say clone, but wouldn't it be best if this had its own component?

[05:26:10.0000] <darobin>
yeah, that wfm

[05:26:34.0000] <zcorpan>
darobin: it has its own component for the whatwg product

[05:26:44.0000] <darobin>
oh right

[05:27:01.0000] <darobin>
I meant across the board

[05:27:24.0000] <darobin>
/me kicks irccloud back together

[05:31:16.0000] <zcorpan>
darobin: i guess i'll clone to whatwg for now

[05:31:45.0000] <darobin>
zcorpan: if you prefer it that way, you're the one working on the stuff; but I'd rather we could figure out a way to avoid dupes

[05:32:19.0000] <zcorpan>
darobin: my preference is to move the bug :-)

[05:32:26.0000] <darobin>
heh

[05:32:43.0000] <darobin>
zcorpan: I'd be happy with that, but I know others won't be

[05:33:21.0000] <darobin>
even better: just use the GH tracker :)

[05:34:10.0000] <zcorpan>
we use GH but that doesn't make bugzilla go away

[07:07:44.0000] <annevk>
jgraham: what's the current best way to test an API that requires permission, such as notification?

[07:08:09.0000] <annevk>
jgraham: I would also want to test the getting permission part, to be clear

[07:09:17.0000] <Ms2ger>
Manual tests

[07:12:50.0000] <darobin>
I don't even think that can be automated with webdriver

[07:12:58.0000] <darobin>
(worth checking though)

[07:17:59.0000] <jgraham>
Yeah, it's tough. For individual browsers it may be possible to enable a mode where no permission prompt is given, but we don't have a generic solution

[07:18:25.0000] <jgraham>
Periodically people suggest some way to tackle this, but it quickly ends up at "standardise a debug-only api"

[07:18:53.0000] <jgraham>
and we haven't even got good at standardising shipping apis yet

[08:18:12.0000] <annevk>
I shared some pain points on www-archive: http://lists.w3.org/Archives/Public/www-archive/2014Nov/

[08:20:05.0000] <rubys>
annevk: Thank you.  I'm responding now.

[08:34:22.0000] <rubys>
Email sent: http://lists.w3.org/Archives/Public/www-archive/2014Nov/0044.html .  Now I plan to go back to evaluating to what extent existing browsers match the URL setter behavior as specified by the URL Standard.

[08:35:33.0000] <annevk>
rubys: thanks, I might wait a bit before replying

[08:36:20.0000] <annevk>
rubys: to be clear, if you want to work on URLs and it stays under CC0, I think I'm okay with you exploring what you're suggesting

[08:37:34.0000] <annevk>
rubys: I'm not happy with such a situation since I prefer more clarity for implementers, but if you're putting in the (CC0) work that's worth something too

[08:37:58.0000] <annevk>
rubys: and as noted I have tried to get such a thing in the past, but the W3C refused (although Jeff conveniently forgot about it)

[08:43:06.0000] <arunranga>
annevk, if you add something like an instanceOf Error to body, I think we’re mostly done with https://www.w3.org/Bugs/Public/show_bug.cgi?id=24338 but I’d like to define some of how filesystem: URLs behave next.

[08:43:51.0000] <arunranga>
(which may bring up similar constraints, but filesystem URLs don’t get revoked; they just return network errors when the underlying resource goes way, so they *should* be simpler)

[08:47:24.0000] <annevk>
arunranga: shall I add an "error flag" to body for now?

[08:48:42.0000] <annevk>
arunranga: yeah, for filesystem URLs we mostly need to figure out how we want host-less relative URLs to work

[08:48:51.0000] <arunranga>
annevk, that’s sufficient; it depends on how much error you can eat, really. Do you care about type of error (better for DOMException). Do you care about messages? If not, flag is probably ok.

[08:49:19.0000] <annevk>
arunranga: I don't know

[08:49:41.0000] <arunranga>
annevk, then let’s start eating the bare minimum. A flag will do the trick.

[08:50:12.0000] <annevk>
sgtm

[08:51:02.0000] <arunranga>
annevk, right now, the filesystem URL generator function takes a File as an argument, and appends “path from root” to the scheme and host components. They’ll not really be relative.

[08:51:45.0000] <arunranga>
In fact, relative URLs (in the form of strings of the sort “../../foo.txt”) aren’t usable.

[08:52:31.0000] <annevk>
oh, I think we should try to make those work

[08:52:43.0000] <arunranga>
annevk, I’m not so sure actually

[08:52:57.0000] <Ms2ger>
        // Opera tries to allocate a canvas with the given width and height, so

[08:52:58.0000] <Ms2ger>
        // it OOMs when given excessive sizes, so cut out those checks.

[08:53:02.0000] <Ms2ger>
Can we kill that already?

[08:53:15.0000] <annevk>
arunranga: okay, I guess I need to study the proposal at some point

[08:53:44.0000] <annevk>
Ms2ger: not sure where that is from, but file a bug?

[08:53:45.0000] <arunranga>
annevk, I’ll also need to flesh it out some more before the Fetch part needs to be worried about.

[08:53:57.0000] <Ms2ger>
annevk, Aryeh's reflection tests

[08:53:59.0000] <annevk>
arunranga: yeah, though this is mostly URL parsing

[08:56:57.0000] <annevk>
arunranga: added an error flag

[09:05:25.0000] <BasicLogic>
Hi guys, I'm fairly new to this but want to start coding like it should be done, trying to get things straight.. Does someone has some advice where to start?

[09:06:47.0000] <BasicLogic>
*not new to coding but build my website with every working answer found on google, so it a big mess now

[09:11:54.0000] <BasicLogic>
Not the channel for such  questions? sorry for the inconvenience ;)

[09:16:28.0000] <Ms2ger>
BasicLogic, not really

[09:16:53.0000] <Ms2ger>
BasicLogic, we can suggest reading the specification; MDN is often a good resource too

[09:22:33.0000] <arunranga>
/me looks at the flag on annevk’s new body (an admitedly strange sentence to type)

[09:22:44.0000] <arunranga>
OK, read operation will set the error flag

[09:23:06.0000] <annevk>
arunranga: and length/transmitted?

[09:23:30.0000] <arunranga>
annevk, yes. It seems that length should be set initially, and transmitted as bytes are pushed to body

[09:23:37.0000] <annevk>
arunranga: yup

[09:27:00.0000] <BasicLogic>
Ms2ger, reading the specification is what i'm doing right now ;). on w3school I got my most info but I see a lot of: Not supported in HTML5 descriptions

[09:27:07.0000] <rubys>
annevk: I'm back from lunch.  Waiting before replying is completely understandable.  From my perspective, you have identified valid issues that have to be worked on the W3C side.  Whether I, too, fail to get the W3C to address them is yet to be determined.

[09:27:31.0000] <Ms2ger>
BasicLogic, I'd definitely advise against reading anything on w3schools :)

[09:28:51.0000] <BasicLogic>
Ms2ger, I noticed, that's why I started looking for something that has correct information

[09:29:05.0000] <Domenic>
wat http://www.w3fools.com/ is gutted

[09:29:25.0000] <rubys>
annevk: my one remaining concern is that you've (unnecessarily, in my opinion) stated these concerns as a road block to collaborating with the WHATWG: http://lists.w3.org/Archives/Public/www-archive/2014Nov/0029.html  I'm going to continue to pursue this on the W3C side, but I would appreciate a bit more than "years ago, Jeff said something that I interpreted in this way".

[09:31:05.0000] <annevk>
rubys: well it would help to have a public statement from Jeff that IBM is not in violation of its private copy of the W3C Member Agreement (Jeff didn't actually say that in any reply as far as I could tell)

[09:31:30.0000] <rubys>
annevk: I'll work on getting that

[09:31:45.0000] <annevk>
rubys: and this is not just years ago, I spoke with Jeff and others from W3C management a year ago too

[09:31:56.0000] <annevk>
rubys: 2012 was just the first time this topic came up

[09:32:16.0000] <rubys>
annevk: hopefully we can tag team this issue and drive it to a successful conclusion.

[09:35:46.0000] <annevk>
rubys: I don't want to throw up roadblocks, but I rather avoid legal issues and given that the actual Member Agreement is private combined with what I'm told about it, this seems to be one

[09:36:14.0000] <Domenic>
Hixie: you should read https://www.w3.org/Bugs/Public/show_bug.cgi?id=27420 (not sure if adding you to CC is the best way)

[09:36:57.0000] <Domenic>
(it is about custom elements stuff)

[09:39:34.0000] <rubys>
annevk: cool.  I'm going to continue to push on both sides: I'm going to encourage the W3C to go on record; and continue to push back that nothing in the Member Agreement seems to support your claim.  Meanwhile, I'm proceeding slowly in terms of actual merging.

[09:40:07.0000] <annevk>
rubys: but we don't know the contents of the Member Agreement

[09:40:32.0000] <annevk>
rubys: what's published doesn't necessarily match what IBM signed

[09:40:46.0000] <annevk>
rubys: the W3C only hosts a draft

[09:41:36.0000] <rubys>
annevk: I'll note that that is equally true for the Opera and Mozilla Member Agreements.  I sincerely doubt that I will get any traction with IBM legal to solve a non-problem.  Particularly given that the only evidence provided is a disputed recollection.

[09:41:37.0000] <annevk>
rubys: (what I mentioned so it's unclear to me what you use for your claim)

[09:43:07.0000] <rubys>
Oh, and it is equally true for Apple, Google, and many others who participate at the WHATWG.

[09:43:32.0000] <rubys>
Given this, I think it is entirely unnecessary to single IBM out.

[09:44:27.0000] <annevk>
Domenic: you want to read https://www.w3.org/Bugs/Public/show_bug.cgi?id=20567 and https://www.w3.org/Bugs/Public/show_bug.cgi?id=25529

[09:44:47.0000] <Domenic>
Sounds like I've stumbled into something fun.

[09:46:57.0000] <Domenic>
Ah hmm so the problem is we might want to delay clonedCallback but not delay the cloning steps for HTMLInputElement.

[09:47:04.0000] <annevk>
rubys: hmm, I suppose that's true; if a Mozillian contributes to XMLHttpRequest in the W3C, does that affect what I write elsewhere... bah

[09:47:27.0000] <annevk>
Domenic: perhaps, unless you can prove it'll work either way

[09:47:43.0000] <annevk>
Domenic: we have to delay the callbacks at least a bit btw

[09:47:51.0000] <annevk>
Domenic: otherwise it's mutation events all over again

[09:48:22.0000] <Domenic>
annevk: hmm unsure i see exactly why, but i imagine you're right.

[09:48:34.0000] <rubys>
annevk: that's the beauty of doing the work in the open.  If the W3C and $employer know of the work and do not object, that will diminish their ability to make claims.

[09:49:29.0000] <annevk>
rubys: that they could make claims at all about such a situation is rather scary

[09:49:59.0000] <Domenic>
oh man employers can own everything

[09:50:05.0000] <annevk>
rubys: although I guess that depends on how the legal situation between me and Mozilla is

[09:50:30.0000] <Domenic>
my last employer owned everything i did in my free time, it was fun, i had to get documents signed for all my spec work.

[09:50:31.0000] <annevk>
which is rather good

[09:50:36.0000] <rubys>
annevk: advice, don't worry about it.  Somebody who is not involved at all can claim to have a patent.  Doing the work in public is the best strategy.

[09:51:12.0000] <annevk>
rubys: I'm mostly concerned with standards being in the public domain

[09:51:20.0000] <rubys>
Domenic: your last employer *claimed" to own everything you did in your free time, depending on the jurisdiction in which you worked, that claim may not be valid.

[09:51:29.0000] <Domenic>
in NYC I think it is :(

[09:51:36.0000] <Domenic>
In CA it is not

[09:52:43.0000] <rubys>
I've sometimes wondered what I signed >> in 1981 << when I joined IBM, and whether or not it anticipated the internet.

[09:52:44.0000] <annevk>
Domenic: e.g. a bunch of Range algorithms invoke clone

[09:53:01.0000] <Domenic>
rubys: haha

[09:53:03.0000] <annevk>
Domenic: if JavaScript could suddenly run while those algorithms run, there's definitely going to be crashes

[09:53:11.0000] <Domenic>
annevk: yeah that's a good clear example, thanks.

[09:53:46.0000] <annevk>
rubys: you never got a new contract?

[09:54:22.0000] <rubys>
no

[09:54:32.0000] <annevk>
wow, cool

[09:54:45.0000] <annevk>
At Opera there was some new paperwork every so often

[09:55:24.0000] <annevk>
Not long enough with Mozilla to know and my current legal setup is rather involved anyway since I'm not officially employed by them

[09:55:40.0000] <rubys>
Annually, I need to re-certify that I've read http://www.ibm.com/investor/governance/business-conduct-guidelines.html

[09:56:02.0000] <rubys>
mostly that covers topics like "don't bribe public officials"

[09:57:44.0000] <Domenic>
drat, there goes our best plan for getting Spain to adopt the URL Standard.

[09:57:54.0000] <rubys>
:-)

[09:59:04.0000] <rubys>
In any case, I do believe that having WebApps "sponsor" the URL Standard in the way I describe would go a long way to resolving IP concerns.

[10:02:48.0000] <rubys>
Dominic: did you see that I updated https://url.spec.whatwg.org/interop/browser-results/ ?

[10:07:32.0000] <Domenic>
rubys: yeah ... still confused ... e.g. many rows are red but there are no user agents with differences?

[10:08:13.0000] <rubys>
"Red means that there isn't consensus.  I'm no longer showing which user  agents differ." -- http://lists.w3.org/Archives/Public/public-whatwg-archive/2014Nov/0142.html

[10:10:33.0000] <Domenic>
Oh I see.

[10:11:28.0000] <Domenic>
wtf firefox https://url.spec.whatwg.org/interop/browser-results/4ef836f0aa "# e" for .hash but #%20e in .href

[10:12:07.0000] <rubys>
Per the spec, percent encoding rules differ for different pieces.

[10:12:24.0000] <Domenic>
oh...

[10:12:47.0000] <rubys>
In this case, firefox actually is consistently percent encoding space characters.

[10:13:31.0000] <rubys>
Other's differ based on which property is being handled, and the spec matches the majority of implementations in this (rather peculiar) behavior.

[10:14:06.0000] <Domenic>
/me reminds himself of the topic again

[10:14:12.0000] <rubys>
lol

[10:15:08.0000] <rubys>
the situation is even more bizarre with setters (i.e., doing things like x = new URL('...'). x.hash = '...').

[10:21:42.0000] <Hixie>
Domenic: wow, i didn't realise that the callbacks weren't just regular "virtual method" lookups

[10:49:27.0000] <Domenic>
Hixie: yeah, it surprised me quite a bit.

[10:51:05.0000] <Domenic>
dang, i searched for clone, should have searched for cloneNode.

[10:56:43.0000] <Hixie>
man, don't we have bigger fish to fry than whatever resulted in https://www.w3.org/Bugs/Public/show_bug.cgi?id=27408 ?

[10:56:56.0000] <Hixie>
if y'all are running out of things to spec, i've plenty to give you

[11:27:08.0000] <SimonSapin>
Anyone has a Unicode test suite lying around? Specifically for case folding, NFKD, NFD. (HTML requires "compatibility caseless matching" for radio buttons, which is NFKD(toCasefold(NFKD(toCasefold(NFD(X))))) = NFKD(toCasefold(NFKD(toCasefold(NFD(Y))))))

[12:25:00.0000] <Domenic>
mathiasbynens ^

[12:33:31.0000] <zcorpan_>
SimonSapin: i think there is a test case for that for radio buttons in wpt

[12:34:04.0000] <zcorpan_>
SimonSapin: but iirc browsers don't really match the spec

[12:52:45.0000] <mathiasbynens>
SimonSapin: http://www.unicode.org/Public/UNIDATA/NormalizationTest.txt for normalization (NFD/NFC/NFKD/NFKC)

[13:12:24.0000] <SimonSapin>
thanks zcorpan_, mathiasbynens

[13:20:42.0000] <annevk>
SimonSapin: I think we want to change that to just be ASCII case-insensitive if we can

[13:20:59.0000] <annevk>
Hixie: everyone has some time for necessary refactoring every now and then

[13:21:09.0000] <SimonSapin>
oh, good

[13:21:14.0000] <Hixie>
it seems to be all we're doing these days

[13:21:19.0000] <Hixie>
and i don't have the time for it :-)

[13:21:26.0000] <Hixie>
got too many real bugs to fix :-)

[13:21:44.0000] <Ms2ger>
Hurry up, then :)

[13:21:57.0000] <annevk>
Hixie: well maybe I didn't have time for it five years ago and it just happens to be done now; we're not all on the same schedule ;-)

[13:23:46.0000] <annevk>
Hixie: and refactoring has positive benefits, e.g. the way I rewrote HTML's fetch has made introducing several APIs a lot easier

[13:24:01.0000] <Hixie>
how about bugs like https://www.w3.org/Bugs/Public/show_bug.cgi?id=18780 then :-P

[13:24:35.0000] <Ms2ger>
Oh, lovely, the shadow dom craphole

[13:24:40.0000] <annevk>
Hixie: no implementer seemed interested :/

[13:26:11.0000] <Hixie>
anyway i'm not complaining abotu refactoring, i'm complaining about pure editorial changes that require other editors (me) to make apparently pointless changes

[13:29:21.0000] <Hixie>
(especially those done without warning or consultation)

[13:31:07.0000] <annevk>
I wish I had a bit more time to chat. But e.g. with Fetch you were opposed to the refactoring initially. And I wasn't quite sure what the uplift was going to be either other than a feeling that I was heading in the right direction... It's not real easy...

[13:31:09.0000] <Domenic>
See, if HTML was on GitHub and the tooling was open-source, we could just submit pull requests to fix them...

[13:31:35.0000] <Hixie>
with fetch i still haven't had time to fix html, so the concerns i had were valid

[13:31:36.0000] <annevk>
Will probably have some more time tomorrow evening

[13:32:00.0000] <Hixie>
Domenic: my experience is that when people submit patches to html, they _always_ screw it up

[13:32:07.0000] <Hixie>
Domenic: so...

[13:32:18.0000] <Hixie>
Domenic: (you're welcomet to submit pull requests to html-mirror)

[13:32:36.0000] <Domenic>
interesting

[13:44:39.0000] <zcorpan_>
i thought html-mirror was read-only

[13:45:14.0000] <zcorpan_>
but maybe that was the point

[13:45:17.0000] <Hixie>
it is, i wouldn't apply the pull requests directly

[13:45:44.0000] <zcorpan_>
"HTML Standard (SVN mirror only; no pull requests)"

[13:46:40.0000] <Hixie>
but if someone wants to send a patch and they prefer doing it with github than the svn repo, i don't mind

[13:47:49.0000] <zcorpan_>
ok so should it say so instead of "no pull requests"?

[13:48:20.0000] <Hixie>
i'd much rather people filed bugs saying what they want than submit patches

[13:48:23.0000] <Hixie>
patches are way more work

[13:48:26.0000] <Hixie>
for me

[13:48:47.0000] <Hixie>
because i first have to work out what the person was trying to do, then i have to actually do it the right way

[13:51:03.0000] <Domenic>
For cases like these patches make more sense

[13:51:12.0000] <Domenic>
(Agree/disagree?)

[13:51:22.0000] <Hixie>
which cases?

[13:51:48.0000] <Domenic>
Where another author updates their spec and needs you to update some link anchors or references

[13:52:24.0000] <Hixie>
depends, but in principle there can be such cases where a patch would be fine, sure


2014-11-25
[16:12:09.0000] <JonathanNeal>
Any way I’m able to read the November 2014 TC39 meeting notes?

[16:15:00.0000] <TabAtkins>
JonathanNeal: When they come out (they're posted on github)

[16:15:12.0000] <TabAtkins>
alex sexton takes them, I believe

[16:15:59.0000] <JonathanNeal>
I’ll ask him about it. Just saw Array|String#contains was renamed #includes https://github.com/tc39/Array.prototype.includes

[16:55:16.0000] <Domenic>
rwaldron is the note-taker actually

[16:55:40.0000] <Domenic>
For a list of ES6 changes at the last meeting follow Allen: https://twitter.com/awbjs

[17:57:18.0000] <rwaldron>
JonathanNeal they will be published tomorrow

[19:45:02.0000] <JonathanNeal>
rwaldron: swell, i wil file an issue with our polyfill repo at that time, and on any other repos who got in early

[00:01:09.0000] <hgl>
i was reading the es6 spec, and found out that how a y module is resolved in "import x from 'y';" is actually implementation defined. I wonder if a spec exists to define such resolution?

[00:10:02.0000] <Ms2ger>
jorendorff, ^

[01:21:43.0000] <zcorpan>
are there specs using "serializer" in idl?

[01:27:51.0000] <annevk>
zcorpan: web performance maybe?

[01:28:35.0000] <Ms2ger>
zcorpan, that's toJSON, right? Webperf should have used it, but I don't know if they ever bothered

[01:28:48.0000] <annevk>
hgl: there's https://github.com/whatwg/loader

[01:31:08.0000] <zcorpan>
annevk: Ms2ger: i can't find "serializer" in any of these http://www.w3.org/wiki/Web_Performance/Publications

[01:31:52.0000] <hgl>
annevk, thanks. reading it right now.

[01:32:14.0000] <annevk>
zcorpan: http://w3c.github.io/navigation-error-logging/#sec-navigationerrorentry needs it

[01:32:34.0000] <annevk>
zcorpan: search for JSON in that document

[01:33:03.0000] <annevk>
oh they standardized on "ssl"? ugh

[01:46:12.0000] <zcorpan>
does an [ArrayClass] interface need a serializer?

[01:46:43.0000] <foolip>
Hixie, zcorpan, I wrote "SVN mirror only; no pull requests" on the assumption that pull requests would not be welcome. Feel free to change that.

[01:47:37.0000] <foolip>
just make sure to never accidentally merge a pull request, it'd require manual intervention to get the mirroring working again

[01:51:13.0000] <MikeSmith>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=27378#c9b-sides

[01:51:21.0000] <MikeSmith>
oops

[01:51:29.0000] <MikeSmith>
https://www.w3.org/Bugs/Public/show_bug.cgi?id=27378#c9

[01:52:10.0000] <MikeSmith>
the "effective script origin" document.domain thing

[01:52:43.0000] <MikeSmith>
We really don't have any tests for this?

[01:54:42.0000] <zcorpan>
we don't need tests, the web has shown that it is interoperable

[01:55:53.0000] <Ms2ger>
MikeSmith, you're surprised?

[01:56:45.0000] <MikeSmith>
heh

[01:57:20.0000] <MikeSmith>
I'm reading more of that comment thread now

[01:57:28.0000] <MikeSmith>
depressing

[02:16:07.0000] <annevk>
zcorpan: [ArrayClass] is ideally removed

[02:16:47.0000] <zcorpan>
annevk: yes but that doesn't help me :-)

[02:16:47.0000] <annevk>
MikeSmith: you can change that!

[02:17:15.0000] <annevk>
zcorpan: an interface with [ArrayClass] could also have a serializer, it doesn't need one though

[02:19:20.0000] <jgraham>
MikeSmith: You are forgetting the first law of testsuite dynamics. "A useful testsuite for feature X will not exist unless a browser vendor has attempted an implementation of that feature from the spec"

[02:19:40.0000] <zcorpan>
http://software.hixie.ch/utilities/js/live-dom-viewer/saved/3315

[02:19:49.0000] <Ms2ger>
Note that it's only one direction of implication :)

[02:20:20.0000] <zcorpan>
maybe webidl could serialize [ArrayClass] as arrays by default?

[02:20:57.0000] <annevk>
zcorpan: getClientRects() should really use iterable<>

[02:21:21.0000] <zcorpan>
annevk: is that compatible?

[02:21:49.0000] <annevk>
zcorpan: the plan is to try that for NodeList too

[02:21:57.0000] <annevk>
zcorpan: hopefully

[02:22:01.0000] <zcorpan>
cool

[02:22:31.0000] <jgraham>
(The second law is "When a browser vendor has implemented a feature the chance of a useful testsuite for that feature decreases with the number of preexisting behaviours of that feature", and the third law is "the more useful a testsuite is, the more likely it is to be stuck in a review queue")

[02:22:34.0000] <zcorpan>
if that works out i guess we can kill [ArrayClass] ?

[02:25:07.0000] <zcorpan>
annevk: i don't see item() in iterable<>

[02:25:25.0000] <annevk>
zcorpan: you'll still need to define the class

[02:25:42.0000] <annevk>
zcorpan: it just gives you Symbol.iterator and some extras

[02:25:44.0000] <zcorpan>
oh

[02:34:38.0000] <zcorpan>
annevk: so it's not a replacement for [ArrayClass] then

[02:35:02.0000] <annevk>
zcorpan: euhm, [ArrayClass] doesn't define item() for you either

[02:35:28.0000] <zcorpan>
i know

[02:39:22.0000] <zcorpan>
filed https://www.w3.org/Bugs/Public/show_bug.cgi?id=27427

[04:03:56.0000] <smaug____>
has anyone reviewed web animations spec?

[04:06:14.0000] <smaug____>
there is AnimationTimeline  is bound to a document, AnimationPlayers are created using a ctor, and AnimationTimeline refers to AnimationPlayer instances... how is this all supposed to work in case of window.open() or document.open() (which break window<->document 1-1)

[04:06:29.0000] <smaug____>
TabAtkins: you might know

[04:12:02.0000] <smaug____>
oh, timeline is passed as a param..

[04:12:04.0000] <smaug____>
nm then

[04:44:41.0000] <WesleyCrushed_>
hi. is the generic behavior of the "download" attribute of <a> defined somewhere? it looks to be a boolean attribute that is also a value attribute

[04:46:33.0000] <ondras>
https://html.spec.whatwg.org/multipage/semantics.html#the-a-element

[04:46:41.0000] <ondras>
The download attribute, if present, indicates that the author intends the hyperlink to be used for downloading a resource. The attribute may have a value; the value, if any, specifies the default file name that the author recommends for use in labeling the resource in a local file system.

[04:48:10.0000] <WesleyCrushed_>
so say i'm using xhtml5. how do i write it without specifying a filename? it looks that writing download="download" would make me download a file named "download"

[04:48:21.0000] <WesleyCrushed_>
maybe download="" ?

[04:51:32.0000] <ondras>
I would definitely try that

[04:52:42.0000] <Ms2ger>
download="" is correct

[04:52:49.0000] <Ms2ger>
See the section on boolean attributes

[05:21:24.0000] <darobin>
Domenic: I'm running the discourse update now, I reckon we can switch it to the beta channel too to get weekly upgrade

[05:21:28.0000] <darobin>
*upgrades

[05:22:04.0000] <darobin>
Domenic: also, since you're admin and all you should probably send me your public key so I can allow you to break the server too :)

[06:21:32.0000] <MikeSmith>
Ms2ger: download isn't defined as a boolean attribute, right?

[06:22:06.0000] <Ms2ger>
MikeSmith, I think that section is the only one that explains that `foo` and `foo=''` are equivalent

[06:22:11.0000] <darobin>
MikeSmith: it takes a file name

[06:22:16.0000] <Ms2ger>
(Except the parser, obviously)

[06:23:28.0000] <MikeSmith>
darobin: yeah but in the case where no value for it is specified, it behaves like a boolean

[06:24:34.0000] <darobin>
MikeSmith: ah, sorry, hadn't looked far enough upscroll

[06:27:03.0000] <annevk>
I think it behaves as a boolean is misleading

[06:27:30.0000] <annevk>
It just has special meaning for an empty string value

[06:28:15.0000] <annevk>
A boolean attribute can have its own attribute name as value, as in disabled=DISablED

[06:29:43.0000] <MikeSmith>
right, true, it's not a matter of "behave as a boolean"

[06:30:59.0000] <annevk>
E.g. if you want to specify a title with empty string you can do <var title>; doesn't make it a boolean attribute

[06:43:10.0000] <MikeSmith>
well that's not a great comparison, because title on var has no effect on UA behavior while the download attribute does, but I see your point

[06:46:57.0000] <annevk>
MikeSmith: <p title=test>test <var title=>test</var> test

[06:47:31.0000] <annevk>
MikeSmith: though that's not really cross-browser...

[06:50:59.0000] <MikeSmith>
oh

[07:04:20.0000] <iliakan>
Where is the most up2date version of DOM standard? http://w3c.github.io/dom/ ?

[07:04:33.0000] <iliakan>
or https://dom.spec.whatwg.org/ ?

[07:04:56.0000] <Ms2ger>
https://dom.spec.whatwg.org/

[07:05:08.0000] <iliakan>
I got somewhat confused, why 2 places?

[07:05:16.0000] <iliakan>
the documents are quite different.

[07:05:32.0000] <Ms2ger>
Politics

[07:05:43.0000] <Ms2ger>
I don't want to talk about it

[07:05:57.0000] <iliakan>
sorry didn't want to hurt anyone's feelings.

[07:06:11.0000] <Ms2ger>
Oh, it not you that hurt them :)

[07:08:54.0000] <annevk>
iliakan: there's a bit of a thing going on with W3C copying WHATWG documents

[07:09:12.0000] <annevk>
iliakan: TL;DR is that if there's WHATWG document, it's more up to date

[07:09:43.0000] <iliakan>
is there any place to read about it? maybe a thread in a mailing list?

[07:10:08.0000] <iliakan>
just to get a glipse of knowing what's going on

[07:10:26.0000] <gsnedders>
if you want to read thousands of emails, there's plenty :)

[07:10:28.0000] <MikeSmith>
iliakan: you probably don't want to read those threads :)

[07:10:57.0000] <iliakan>
eh, I teach people JS/DOM stuff and I want to tell them

[07:11:16.0000] <annevk>
There's nothing really canonical on this

[07:11:33.0000] <annevk>
http://lists.w3.org/Archives/Public/www-archive/ has some http://lists.w3.org/Archives/Public/public-w3process/ has some too

[07:12:10.0000] <annevk>
comes up on http://lists.w3.org/Archives/Public/public-webapps/ now and then

[07:12:46.0000] <rubys>
 iliakan: my summary is here: http://lists.w3.org/Archives/Public/www-archive/2014Nov/0039.html

[07:13:07.0000] <rubys>
my summary is specific to URL, but some of the points apply elsewhere

[07:13:35.0000] <rubys>
also relevant: http://lists.w3.org/Archives/Public/public-w3process/2014Nov/0169.html

[07:14:49.0000] <iliakan>
okay thanks, at least I'll have something to respond on their "why look here not there?" question

[07:16:22.0000] <annevk>
iliakan: https://github.com/servo/servo/wiki/Relevant-spec-links is pretty canonical I guess, though no "why"

[07:16:28.0000] <MikeSmith>
iliakan: if you're teaching people about where to look for information, arguably you don't want to tell them to be reading the specs directly but instead just using MDN, which is generally kept pretty well up to date and presents the information in much more web-developer-friendly way

[07:16:58.0000] <iliakan>
MikeSmith: consider Element.prototype.remove() as an example

[07:17:12.0000] <iliakan>
the method is convenient and is easily polifilled

[07:17:39.0000] <iliakan>
if it's going to be used in all browsers (be part of the standard) I should recommend to use it

[07:17:45.0000] <iliakan>
and no it's not on MDN

[07:18:53.0000] <MikeSmith>
what is that?

[07:19:20.0000] <MikeSmith>
I mean, where did it come from?

[07:19:23.0000] <iliakan>
https://dom.spec.whatwg.org/#dom-childnode-remove

[07:19:38.0000] <MikeSmith>
oh

[07:20:38.0000] <rubys>
If it is not on MDN, it probably isn't widely implemented yet; and possibly may change before the browser coalesce around an agreement.

[07:21:18.0000] <annevk>
it's in Firefox and Chrome

[07:21:28.0000] <annevk>
(at least)

[07:21:39.0000] <MikeSmith>
Ms2ger: do we even have test for that?

[07:22:47.0000] <Ms2ger>
Dunno

[07:23:03.0000] <darobin>
it's a bug that remove() isn't in MDN

[07:23:04.0000] <darobin>
it shoudl be

[07:23:14.0000] <darobin>
and yes there's a test for it, it even passes!

[07:23:35.0000] <MikeSmith>
I probably even reviewed it!

[07:23:35.0000] <Ms2ger>
Yep

[07:23:37.0000] <Ms2ger>
ChildNode-remove.js

[07:23:42.0000] <MikeSmith>
yeah I see it now

[07:24:51.0000] <MikeSmith>
now my faith in MDN is shaken

[07:25:06.0000] <caitp>
:O!

[07:25:25.0000] <rubys>
Does MDN take bug reports?

[07:25:44.0000] <darobin>
rubys: I think you just go ahead and edit the wiki :)

[07:26:43.0000] <rubys>
ah, so it is a case of community developed documentation sometimes lags implementations.

[07:26:45.0000] <darobin>
MikeSmith: don't let it shake your faith, even when wrong it is *still* better than going to anyone's specs, so your advice to iliakan was good

[07:26:57.0000] <darobin>
rubys: sometimes, but usually, as MikeSmith says, it's really good

[07:27:22.0000] <rubys>
/me nods

[07:27:30.0000] <annevk>
Usually bugs against Firefox get tagged "dev-doc-needed" to ensure MDN is updated

[07:27:41.0000] <annevk>
Perhaps that's still pending or someone forgot to tag the bug

[07:27:59.0000] <darobin>
rubys: so, MDN does take bug reports (https://bugzilla.mozilla.org/enter_bug.cgi?format=guided#h=dupes|Developer%20Documentation|) but the preferred option is to edit

[07:29:37.0000] <MikeSmith>
iliakan: to get back to your original question, remove() isn't in the W3C-publishe DOM spec version? (given the above about it being in Firefox and Chrome I'd be really surprised if it weren'T)

[07:30:45.0000] <iliakan>
it's there, under ChildNode interface as I see, but replace is not

[07:30:46.0000] <darobin>
MikeSmith: remove() is in, but (s)he was referring to the fact that the github version is woefully out of date

[07:30:57.0000] <MikeSmith>
ah ok

[07:31:02.0000] <darobin>
iliakan: replace() is not because it's not implemented (or wasn't back then)

[07:31:17.0000] <iliakan>
yeah, but it's going to be?

[07:31:37.0000] <Ms2ger>
I haven't heard objections yet

[07:31:37.0000] <MikeSmith>
iliakan: fwiw I guess one of the best things you could teach people is to tell them about #whatwg and suggest they come here to ask questions when they have them

[07:31:42.0000] <darobin>
the github version was supposed to be quite simply destroyed with the next udpate to the TR version, but that didn't happen

[07:31:46.0000] <Ms2ger>
Try if Gecko takes a patch :)

[07:31:51.0000] <Ms2ger>
Or write tests for it

[07:32:02.0000] <iliakan>
MikeSmith: let them learn something from the docs first :) and come here educated enough :)

[07:32:03.0000] <Ms2ger>
darobin, ha. haha. hahaha.

[07:32:14.0000] <MikeSmith>
iliakan: fair enough

[07:32:34.0000] <darobin>
actually, remove() is in MDN... https://bugzilla.mozilla.org/enter_bug.cgi?format=guided#h=dupes|Developer%20Documentation|

[07:33:13.0000] <iliakan>
umm sorry indeed so, I just didn't find it fast

[07:33:26.0000] <iliakan>
guess they may have problems w/ it too

[07:33:30.0000] <darobin>
iliakan: I find your lack of faith in MDN... disturbing

[07:33:43.0000] <darobin>
sorry, that was the wrong link

[07:33:45.0000] <darobin>
https://developer.mozilla.org/en-US/docs/Web/API/ChildNode.remove

[07:34:02.0000] <iliakan>
darobin: please consider that to be a lack of faith in my/their finding skills

[07:34:18.0000] <iliakan>
when I know there's a single "most recent" document, it's the 1st place to go for modern stuff

[07:34:40.0000] <darobin>
iliakan: no worries, but in general if it's for teaching MDN is better because it tells you about stuff that actually works

[07:34:47.0000] <darobin>
whereas pretty much all specs are fiction

[07:34:50.0000] <darobin>
to a point

[07:34:56.0000] <Ms2ger>
"pretty much"?

[07:38:06.0000] <darobin>
Ms2ger: I added that because I'm sure someone can find an old spec that is actually implemented :)

[07:38:16.0000] <Domenic>
iliakan: https://github.com/servo/servo/wiki/Relevant-spec-links is a good resource for spec links

[07:38:37.0000] <Domenic>
I personally am not a fan of MDN these days because I am used to reading specs and also MDN is often way outdated or inaccurate.

[07:39:01.0000] <Ms2ger>
Woo, Servo :)

[07:39:02.0000] <iliakan>
Domenic: thanks, and tend to agree about MDN. There should be only 1 source of truth.

[07:39:04.0000] <Domenic>
e.g. what is this stuff https://developer.mozilla.org/en-US/docs/Web/API/Window.frames "DOM Level 0. Not part of any standard."

[07:39:20.0000] <Domenic>
it's right there in html

[07:39:31.0000] <Ms2ger>
And we have always been at war wit Eurasia

[07:40:18.0000] <darobin>
Domenic: who cares about that? it tells you how it works which is what's needed

[07:40:57.0000] <annevk>
darobin: it means you might end up getting into bullshit arguments when using it

[07:41:41.0000] <Domenic>
darobin: it's not terribly accurate about that either

[07:41:57.0000] <Domenic>
and also that, people telling me window.frames is nonstandard and i shouldn't be using it

[07:41:58.0000] <darobin>
bullshit arguments?

[07:42:05.0000] <darobin>
Domenic: beats working from specs most of the time

[07:42:27.0000] <MikeSmith>
I'm sad for myself that I didn't even know there was a remove() for me to use. I've always just used removeChild and complained about how stupidly redundant/verbose it makes things. (assuming that remove() is the thing that cuts out that and expresses it the right way)

[07:42:31.0000] <darobin>
well, if people wish to make an argument from standards, they should look at standards

[07:42:49.0000] <darobin>
MikeSmith: you still need to use removeChild() for IE at this point

[07:42:56.0000] <MikeSmith>
OK

[07:43:06.0000] <aleray>
hi, does one know if there is a video format/codecs supported by all major modern browsers?

[07:43:15.0000] <darobin>
but if people need developer docs, they should use developer docs

[07:43:25.0000] <darobin>
GIF89a?

[07:43:27.0000] <darobin>
/me hides

[07:43:46.0000] <annevk>
darobin: I don't think it works to argue that one part of the docs are relevant and another should be ignored

[07:45:00.0000] <darobin>
annevk: actually it does, it's a pretty usual way of referring to documents...

[07:46:05.0000] <Domenic>
H.264 is everywhere now that Firefox fixed itself on Mac, right?

[07:46:10.0000] <MikeSmith>
Domenic: I think it's sad if your message to webdevs is that web-developer documentation sucks, so, sorry, you have to read the specs. Because the specs aren't generally super-approachable for a lot of devs, and regardless are generally written for UA implementors and not optimized for reading by normal people

[07:47:32.0000] <MikeSmith>
http://caniuse.com/#search=mpeg-4

[07:48:14.0000] <Domenic>
MikeSmith: generally agreed. I guess I wouldn't say that's my message to devs in general ... but it's my message to most people who ask me directly, or people I work with.

[07:48:35.0000] <Domenic>
Oh interesting, a substantial difference between Chrome and Opera.

[07:48:52.0000] <MikeSmith>
Domenic: yeah, point taken (on that message)

[07:48:58.0000] <rubys>
It is almost as if there are as many opinions as there are people on this channel.

[07:49:06.0000] <MikeSmith>
heh

[07:49:34.0000] <Domenic>
"Browsers have trouble with more than one audio track in a video (for multi-language support): IE 11 supports it, Firefox plays the last track, Chrome plays the first track." bahahaha *cries*

[07:50:33.0000] <darobin>
that's an interesting use of the word "trouble"

[07:51:09.0000] <gsnedders>
darobin: well, it's a different sort of trouble to you

[07:52:43.0000] <annevk>
jgraham: anything on testing permission APIs yet?

[07:52:47.0000] <annevk>
jgraham: did I miss a reply?

[07:53:21.0000] <annevk>
oh you did reply

[07:53:31.0000] <annevk>
:-(

[07:54:08.0000] <annevk>
jgraham: note that I not just care about bypassing the dialog, I also want to know what that dialog ends up storing

[07:54:20.0000] <annevk>
jgraham: to make tests around document.domain / origins

[07:54:50.0000] <annevk>
but I'm not too enthusiastic about trying to pioneer this...

[07:57:40.0000] <aleray>
MikeSmith, thanks

[08:13:46.0000] <jgraham>
annevk: Neither is anyone else

[08:15:31.0000] <MikeSmith>
"pioneer this" = write soem test cases?

[08:16:01.0000] <annevk>
MikeSmith: setting up the supporting framework

[08:16:03.0000] <Ms2ger>
Automated

[08:16:25.0000] <MikeSmith>
gsnedders has no open PRs right now

[08:16:25.0000] <annevk>
MikeSmith: I think I'll end up writing some non-automated tests

[08:17:13.0000] <MikeSmith>
any tests at all would be nice at this point

[08:18:10.0000] <annevk>
The other problematic bit is that we don't really seem to have agreement on what is desirable behavior

[08:54:19.0000] <mathiasbynens>
Domenic: kudos for https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-11/nov-20.md#54-io-streams-as-part-of-the-es-standard-library

[08:54:39.0000] <Domenic>
mathiasbynens: meh, that was a disappointing conversation :-/

[08:56:27.0000] <annevk>
The last line from Mark Miller is somewhat divisive and not really a fair summary

[09:00:50.0000] <annevk>
smaug____: what's the story with event listeners and microtasks again?

[09:02:46.0000] <Domenic>
Still kicking myself I forgot to say "CC0" in the meeting

[09:03:03.0000] <smaug____>
annevk: what about them?

[09:03:35.0000] <annevk>
Domenic: at some point someone asked about that on the mailing list, I wonder where they are with that now

[09:03:40.0000] <annevk>
Domenic: Ecma licensing is terrible

[09:03:46.0000] <smaug____>
microtask ends when the outermost event listener has been called in normal cases

[09:03:57.0000] <Domenic>
Yeah, unfortunately the person who asked was weird/rude, so they were easy to dismiss.

[09:04:24.0000] <annevk>
smaug____: "normal" being non-synchronous cases?

[09:04:33.0000] <annevk>
smaug____: as in it's not any different from end-of-task?

[09:04:47.0000] <smaug____>
I mean case like "users clicks and a click event is dispatched"

[09:05:01.0000] <annevk>
I see, so there's no relationship then

[09:05:03.0000] <smaug____>
but not cases like "timer runs and its callback dispatches click"

[09:05:22.0000] <annevk>
great, it's simpler than I thought then, good good

[09:06:25.0000] <annevk>
Domenic: how dare you break Allen's invariants

[09:06:32.0000] <Domenic>
^_^

[09:06:36.0000] <annevk>
Domenic: now ES6 can't explain HTML

[09:06:36.0000] <annevk>
:p

[09:06:40.0000] <Domenic>
I really didn't know what would happen with that test case actually

[09:07:32.0000] <annevk>
I wonder if this is in part due to the WindowProxy setup that ES6 still does not acknowledge

[09:07:36.0000] <gsnedders>
annevk, Domenic: the big problem with the licensing is it has to go all the way up to the Ecma general council :(

[09:07:59.0000] <annevk>
gsnedders: that's not the big problem

[09:08:08.0000] <Domenic>
annevk: yeah, the way in which self.x changed seems very WindowProxy-like... I wasn't sure that document.open and WindowProxy interacted though...

[09:08:36.0000] <gsnedders>
annevk: it means it's a hellish amount of work and fighting pushback to get it to happen

[09:08:42.0000] <Domenic>
the thing ES6 does not acknowledge is related to `this` though, right? So you sidestepped that by using `self`

[09:09:07.0000] <annevk>
Domenic: yeah I guess

[09:09:22.0000] <annevk>
Domenic: but self might return a WindowProxy

[09:09:26.0000] <annevk>
Domenic: not sure

[09:09:31.0000] <Domenic>
I think it does, right?

[09:09:37.0000] <Domenic>
self === window is a WindowProxy

[09:09:56.0000] <Domenic>
I don't remember what the issue was with ES6 vs. WindowProxy though

[09:10:05.0000] <annevk>
Domenic: mostly "this"

[09:10:53.0000] <annevk>
Domenic: the other problem with WindowProxy is that it's not defined in terms of ES operations (yet)

[09:11:08.0000] <annevk>
Domenic: so we don't know exactly how it proxies from the spec

[09:11:09.0000] <Domenic>
annevk: heh, yeah, I was looking at WebIDL's getter/setter/creator/deleter yesterday and thinking the same thing

[09:27:11.0000] <SteveF_>
TabAtkins: hi, need a little help with bikeshed; am trying to link to this http://www.w3.org/TR/wai-aria/host_languages#implicit_semantics from another spec, is there an automethod or do I need to use a regular link?

[09:30:56.0000] <TabAtkins>
SteveF_: At the doctor right now, I'll answer you when I get into the office.

[09:33:23.0000] <SteveF_>
TabAtknins: thanks no rush!

[10:06:53.0000] <annevk>
Domenic: I'm not sure what Allen's reply to me means

[10:46:18.0000] <JonathanNeal>
maybe we need a polyfill standards group

[10:56:16.0000] <Domenic>
rubys: I don't understand which part of my message you disagree with.

[11:26:20.0000] <wanderview>
JakeA: annevk: once cache is expanded beyond SW, do we know what it should do on data URI workers? there is no origin there, right?

[11:30:32.0000] <annevk>
wanderview: there's an origin, you can just never get same-origin with it

[11:30:56.0000] <annevk>
wanderview: what happens with localStorage?

[11:31:05.0000] <wanderview>
annevk: is the origin for data uri spec'd somewhere?

[11:31:33.0000] <annevk>
wanderview: https://url.spec.whatwg.org/#origin

[11:32:08.0000] <wanderview>
annevk: ah... globally unique identifier... thanks!

[11:41:44.0000] <annevk>
Domenic: https://esdiscuss.org/topic/realm-api-and-this-global btw

[11:41:47.0000] <annevk>
Domenic: no replies

[11:42:00.0000] <annevk>
Domenic: bug is also still open

[11:42:12.0000] <Domenic>
annevk: yeah, was too lazy to dig up the link, but i remember :-/

[11:56:11.0000] <Domenic>
annevk: ha! Movement!

[11:58:29.0000] <annevk>
I should probably not have expressed disappointment, but really, the amount of time it takes to get something fixed...

[12:00:07.0000] <annevk>
Hmm, ecmascript.org doesn't work over HTTPS

[12:12:52.0000] <iliakan>
I have a question regarding append/prepend/before/after

[12:13:04.0000] <iliakan>
these methods were in w3c version of DOM4, but were removed 12 June 2014

[12:13:17.0000] <iliakan>
they are still in WhatWG version though

[12:13:27.0000] <iliakan>
no browser implemented those yet

[12:14:00.0000] <iliakan>
are these methods going to be supported eventually? what's the current state?

[12:15:36.0000] <zcorpan>
iliakan: my guess is that they were removed from the w3c version because no browser implement them yet

[12:15:52.0000] <iliakan>
https://bugzilla.mozilla.org/show_bug.cgi?id=911477  hanging

[12:16:15.0000] <zcorpan>
iliakan: i'm haven't seen anyone saying these shouldn't exist, so they're just not implemented yet

[12:16:29.0000] <iliakan>
https://code.google.com/p/chromium/issues/detail?id=255482

[12:16:50.0000] <iliakan>
these 2 don't say "no"

[12:17:41.0000] <TabAtkins>
SteveF_: If the ARIA spec has decent metadata for its definitions, we can add it to Shepherd's system and it'll be available for anyone to autolink.  If it doesn't, you can add custom anchor definitions to your spec for Bikeshed to use, so you can still use the easy auto-linking syntax.  This is documented in the docs, but I'm about to change the syntax, so

[12:17:41.0000] <TabAtkins>
if you use it, let me know so I can give you a heads-up.  ^_^

[12:18:01.0000] <iliakan>
webkit too

[12:18:46.0000] <zcorpan>
iliakan: i guess https://code.google.com/p/chromium/issues/detail?id=255482#c3 sums up the current status

[12:19:14.0000] <iliakan>
yes

[12:19:19.0000] <iliakan>
guess, es6 still blocking

[12:19:33.0000] <iliakan>
some stuff may be still in flux

[12:20:00.0000] <iliakan>
(or just not important enough), but eventually will be supported

[12:20:35.0000] <SteveF_>
TabAtkins: thanks

[12:22:29.0000] <annevk>
iliakan: ify ou look at the open bugs against dom.spec.whatwg.org you'll find something similar

[12:24:03.0000] <annevk>
Ooh, there's been movement there: https://www.w3.org/Bugs/Public/show_bug.cgi?id=23202 Guess I should look into that tomorrow

[12:44:42.0000] <annevk>
Ended up fixing it now...

[12:46:31.0000] <iliakan>
btw where I can read more about that @unscopable? :)

[12:46:58.0000] <annevk>
iliakan: http://people.mozilla.org/~jorendorff/es6-draft.html

[12:53:23.0000] <iliakan>
annevk: thanks

[12:55:29.0000] <zcorpan>
annevk: does remove() need it?

[13:08:21.0000] <annevk>
zcorpan: we have at least one case that we broke

[13:08:35.0000] <zcorpan>
annevk: ok

[13:21:13.0000] <JonathanNeal>
rwaldron: would you link me to the published tc39 notes? not sure where to find them.

[13:22:09.0000] <Domenic>
JonathanNeal: github.com/tc39

[13:24:20.0000] <JonathanNeal>
Domenic: thanks!

[13:39:16.0000] <TabAtkins>
Domenic: What happens right now if two consumers both call .read() on a stream?

[13:39:37.0000] <Domenic>
TabAtkins: they each get a chunk (assuming two chunks are available)

[13:40:01.0000] <TabAtkins>
Oh, each .read() call consumes one chunk? Gotcha.

[13:40:11.0000] <TabAtkins>
/me is trying to bootstrap enough Streams knowledge to help out.

[13:40:47.0000] <Domenic>
^_^

[13:43:40.0000] <TabAtkins>
In that case, I'm leaning toward some form of special-casing piping being the best - piping is a fundamentally different sort of reading behavior that implicitly lays claim to all chunks until the piping stops.

[13:45:00.0000] <TabAtkins>
It changes the stream into a push model, no?

[13:45:05.0000] <Domenic>
Yeah, I was leaning toward that until 5 minutes ago when I remembered that httpRequest.json() also wants exclusive access to the body stream (i.e. httpRequest.body.read() should probably not work)

[13:45:21.0000] <TabAtkins>
Right.

[13:45:44.0000] <TabAtkins>
.json() is definitely a pipe consumer that only emits a single output chunk, once it's finished reading all the input chunks.

[13:45:59.0000] <Domenic>
Hmm just saying those words does make it sound better...

[13:46:39.0000] <Domenic>
It felt a bit awkard to say ".json() must use pipe" even though the destination stream is kinda synthetic

[13:46:49.0000] <Domenic>
But saying ".json() is a pipe consumer" is nice.

[13:47:11.0000] <TabAtkins>
Yeah, the API of JSON hides the stream-ness from you, so you don't have to call .read() yourself, but it's still there under the covers.

[13:48:19.0000] <TabAtkins>
A "spread pipe" that can be read by multiple consumers is just a pipe consumer that then acts more like a normal stream again.

[13:53:37.0000] <TabAtkins>
Is it super-important that .state/etc not be accessible to anyone but the pipe target?

[13:53:55.0000] <TabAtkins>
I presume it is, so that impls can optimize simple cases and do everything in the C++ layer?

[13:55:31.0000] <Domenic>
Yeah. I'm unsure about .state and .ready but yukata seems to think they should also be censored

[13:55:43.0000] <Domenic>
You could get away with censoring them instead of making them throw I think

[13:55:50.0000] <Domenic>
e.g. always return "waiting"

[13:56:05.0000] <TabAtkins>
Yeah. Does the pipe consumer need them?

[13:56:30.0000] <Domenic>
what do you mean?

[13:56:52.0000] <TabAtkins>
I'm implementing .json(). I need access to .read() from the pipe, but do I need .state from it?

[13:57:56.0000] <Domenic>
ah, yeah, you need all three

[13:58:12.0000] <Domenic>
the other two tell you when to call .read()

[13:58:28.0000] <TabAtkins>
Okay, so even if you censor them on the stream, you still need some way for the pipe-holder to get at it.

[13:58:33.0000] <Domenic>
right

[13:59:04.0000] <Domenic>
we could either make readableStream.pipeTo(dest) use its internal powers to access internal state

[13:59:30.0000] <Domenic>
or we could introduce a StreamReader-type object that has access to the internal state, and give that only to the consumer.

[13:59:45.0000] <Domenic>
The latter allows people to create their own pipeTo-like abstractions

[13:59:52.0000] <Domenic>
e.g. .json()

[14:00:06.0000] <Domenic>
whereas the former requires implementing .json() in terms of .pipeTo() in order to reuse its internal powers

[14:01:35.0000] <TabAtkins>
I'm actually liking the "duplicate the API on ExclusiveReadableStream".  That's basically your "crazy idea", but with convenience API on the Stream itself for when you're not doing anything fancy.

[14:01:58.0000] <Domenic>
hmm

[14:02:06.0000] <Domenic>
i guess it might be nicer for consumers

[14:02:10.0000] <Domenic>
authors, i mean

[14:02:18.0000] <Domenic>
even if it makes me uncomfortable

[14:02:24.0000] <TabAtkins>
Rephrased: Per your crazy idea, make Streams solely a piping object, with a ReadableFoo object that can consume it and manually expose the stream data. Then duplicate the ReadableFoo API back onto Stream for convenience.

[14:02:48.0000] <Domenic>
heh, yeah, that's one way to look at it

[14:03:05.0000] <TabAtkins>
The convenience API would use internal state to shut itself off if the Stream ever starts piping for real.

[14:03:14.0000] <TabAtkins>
(Including to a manually-created ReadableFoo object.)

[14:03:35.0000] <Domenic>
yepyep: https://github.com/whatwg/streams/blob/lock/reference-implementation/lib/experimental/exclusive-stream-reader.js#L132-L152

[14:03:57.0000] <TabAtkins>
Need to think about how that would affect mikeal's "I override .read() a lot" case.

[14:04:21.0000] <TabAtkins>
Maybe you'd just override .pipeTo()? Dunno.

[14:04:46.0000] <Domenic>
You'd have to override getExclusiveReader() in my current design

[14:05:06.0000] <Domenic>
I had another design that relied on weakmap and try { .. } finally { } hackery to be less code for implementers

[14:05:17.0000] <Domenic>
https://gist.github.com/domenic/d421643d95cdec9a9b5b#file-readable-stream-locks-2-md

[14:05:33.0000] <Domenic>
predates me realizing that .ready and .state were also important, but the general idea is there

[14:06:03.0000] <Domenic>
it works with anything with a .read() method (and presumably anything with .ready/.state too)

[14:07:49.0000] <TabAtkins>
Remind me how foo.pipeTo(bar) works on the bar side? How does bar respond to that?

[14:08:00.0000] <Domenic>
it doesn't right now

[14:08:11.0000] <Domenic>
pipeTo just calls bar.write(chunk) a lot

[14:08:21.0000] <Domenic>
at appropriate times which it figures out by paying attention to backpressure

[14:08:46.0000] <TabAtkins>
Oh, kk.  So I was right that piping turns the stream into a push structure rather than pull.  Cool.

[14:09:01.0000] <Domenic>
i'm not sure i would phrase it that way though

[14:09:11.0000] <Domenic>
what if foo.pipeTo(bar) just called bar.pipeFrom(foo)

[14:09:25.0000] <Domenic>
and i moved the algorithm over to WritableStream.prototype.pipeFrom

[14:09:29.0000] <Domenic>
would you then call it pull?

[14:09:34.0000] <TabAtkins>
Yeah, that's possible, and maintains the pull nature.

[14:09:44.0000] <TabAtkins>
Yeah, because "bar" is then the one dictating when things write, not "foo"

[14:10:07.0000] <TabAtkins>
Question is which end fo the pipe data pools at when you're not doing anything explicit.

[14:10:15.0000] <TabAtkins>
At the source end, it's pull.  At the target end, it's push.

[14:10:41.0000] <TabAtkins>
The target may itself then still be a pull stream, buffering all the data beign pushed into it.

[14:10:53.0000] <Domenic>
it's really neither that is dictating; it's the pipeTo algorithm. Which since it only uses public APIs (for now), could live anywhere

[14:10:56.0000] <TabAtkins>
(And using backpressure to force upstream to buffer instead.)

[14:11:25.0000] <TabAtkins>
Yeah, the algorithm matters. This isn't an intrinsic property of the producer/consumer relationship, it's a property of the exact way they communicate.

[14:11:30.0000] <Domenic>
right

[14:11:42.0000] <Domenic>
I am 90% sure the current algorithm pools at the source

[14:12:21.0000] <TabAtkins>
Well, it doesn't if foo.pipeTo(bar) calls bar.write(data) a lot (rather than bar calling foo.read() a lot)

[14:12:59.0000] <Domenic>
it calls both, sorry :P

[14:13:13.0000] <Domenic>
i was answering specifically "how it works on the bar side"

[14:13:15.0000] <TabAtkins>
man what

[14:13:32.0000] <TabAtkins>
Okay, gonna read some of this and get back to you.

[14:13:43.0000] <Domenic>
https://github.com/whatwg/streams/blob/master/reference-implementation/lib/readable-stream.js#L88-L159

[14:14:09.0000] <Domenic>
basically pipeTo is a loop that does `var chunk = source.read(); dest.write(chunk);` a lot

[14:14:24.0000] <Domenic>
except it only does that when source has stuff to read and chunk is not signalling backpressure

[14:14:30.0000] <Domenic>
and also it handles errors

[14:16:34.0000] <TabAtkins>
Yeah, I'm confused about what structures are reified here and in what way. Also: I'm hungry. Gonna grab lunch and think about this a bit.

[14:16:51.0000] <zcorpan>
http://www.w3.org/mid/BY2SR01MB608C5CB8B8C2BDE0432255F9B730⊙Bnsec seems useful


2014-11-26
[18:40:25.0000] <JonathanNeal>
Is there a native function like instanceof that works across windows?

[18:50:05.0000] <caitp>
Array.isArray comes to mind

[18:50:10.0000] <caitp>
but I can't think of anything else

[18:50:50.0000] <caitp>
unless we have Map.isMap() and friends now

[19:18:56.0000] <JonathanNeal>
caitp: I was curious because checking the class of something comes up a lot in polyfills, but writing an abstraction library for this gets tiresome and makes the scripts less readable.

[19:20:49.0000] <caitp>
well, you could use Symbol.toStringTag for a not-super-thorough test

[19:21:35.0000] <caitp>
but I think in general the goal is to avoid testing the class of objects

[19:27:40.0000] <JonathanNeal>
We have polyfills that require an argument to be a function. We want to ensure that without someOtherWindowsFn instanceof Function failing.

[19:28:32.0000] <caitp>
couldn't you just `ASSERT(typeof fn === "function")`

[19:28:36.0000] <caitp>
?

[19:29:23.0000] <JonathanNeal>
typeof /regex/ is unfortunately ‘function’ in some older browsers.

[19:30:48.0000] <caitp>
well I guess you'd need like

[19:30:58.0000] <caitp>
an old-crazy-ua-specific path for that

[19:31:08.0000] <caitp>
if you wanted to support those

[19:43:30.0000] <JonathanNeal>
ua? that would be unreliable.

[21:56:09.0000] <Hixie>
roc: hey, the case i was talking about recently where firefox has been violating the spec for years after making something up unilaterally because the previous spec was disliked is now preventing chrome from following the spec :-)

[21:59:00.0000] <roc>
HTML menus?

[21:59:04.0000] <Hixie>
yeah

[21:59:09.0000] <Hixie>
see sanjay's mail to whatwg just now

[21:59:29.0000] <Hixie>
not clear how many sites are affected. maybe we'll have to use another element

[22:01:51.0000] <roc>
looks minor to me ... but what do you want me to do about it?

[22:02:32.0000] <Hixie>
well it means we probably won't be able to use <menuitem>, which means we can't do what mozilla wanted

[22:02:51.0000] <Hixie>
i mean i only made it <menuitem> in the first place because of mozilla's feedback

[22:03:18.0000] <roc>
why can't we make it a non-void element?

[22:03:36.0000] <Hixie>
because that's a poor authoring aethestic

[22:04:03.0000] <roc>
OK, but that still sounds minor to me

[22:04:15.0000] <Hixie>
/me shrugs

[22:04:38.0000] <Hixie>
that's what i said about the things you were complaining about in that same thread too

[22:04:42.0000] <Hixie>
i guess it's all relative

[22:05:55.0000] <roc>
I do not see PNaCl + Pepper are in the same league as this

[22:06:06.0000] <Hixie>
i think this is worse, but ok

[22:06:26.0000] <roc>
"invent an entirely new execution environment and platform API" vs "make <menuitem> not void"

[22:06:42.0000] <Hixie>
this actively breaks interoperability of a published spec

[22:06:50.0000] <Hixie>
the other one is just an experimental technology

[22:06:55.0000] <Hixie>
that doesn't break anything

[22:07:09.0000] <roc>
which is shipping, on by default, and actively evangelized

[22:07:19.0000] <Hixie>
sure

[22:07:22.0000] <Hixie>
so's linux

[22:07:25.0000] <Hixie>
so what?

[22:08:44.0000] <Hixie>
all vendor-specific platforms "invent an entirely new execution environment and platform API"

[22:09:13.0000] <Hixie>
i mean, PNaCl is no worse than, say, ActiveX

[22:09:38.0000] <Hixie>
or iOS

[22:10:25.0000] <Hixie>
(indeed in many ways it's better, since it's open source)

[22:10:33.0000] <Hixie>
(and hardware-agnostic)

[22:11:08.0000] <roc>
it's available for Web pages to use.

[22:11:21.0000] <Hixie>
so was ActiveX

[22:11:30.0000] <roc>
so you think that ActiveX was a fine thing?

[22:11:31.0000] <Hixie>
so are Windows .exes or linux Elfs

[22:11:47.0000] <Hixie>
i think these are all proprietary technologies, and thus all irrelevant to the Web

[22:12:21.0000] <Hixie>
anyone who decides to target a proprietary technology deserves what they get when they find themselves with a limited market or when the vendor discontinues the product

[22:12:42.0000] <Hixie>
or at least, should expect what they get, i dunno about "deserves"

[22:13:25.0000] <Hixie>
though again, in the case of PNaCl I guess it's open source so even if the vendor abandons it it's not necessarily dead

[22:14:05.0000] <Hixie>
in contrast, <menuitem> has been shipping in violation of the spec for years and now is preventing chrome from implementing a spec

[22:14:12.0000] <Hixie>
that seems relatively worse

[22:14:25.0000] <roc>
back in the day we worked pretty hard to oppose the spread of ActiveX into the Web, in particular by not supporting it even when it would have been expedient to do so. All in the name of Web standards. I'm shocked by this revisionism coming from you.

[22:16:10.0000] <Hixie>
what revisionism? the problem with ActiveX has always been that it's a single-vendor technology stack. That's what the difference between ActiveX and Web Standards _is_

[22:17:22.0000] <Hixie>
this is consistent with e.g. what i wrote in 2007: http://lists.w3.org/Archives/Public/public-html/2007Apr/0632.html

[22:18:23.0000] <roc>
I don't think you can simultaneously agree that ActiveX was bad for the Web but PNaCl is just fine.

[22:18:35.0000] <roc>
maybe you're not even trying to do that

[22:18:49.0000] <Hixie>
i'm saying that ActiveX wasn't the Web

[22:19:07.0000] <Hixie>
it's a proprietary platform like .NET or Win32 or PNaCl or iOS

[22:19:32.0000] <roc>
it's not so easy to draw that line.

[22:19:52.0000] <Hixie>
one vendor in control of technology = proprietary

[22:19:57.0000] <Hixie>
that's a pretty easy line to draw

[22:20:32.0000] <roc>
can a vendor just add a new DOM API, say "that's proprietary" and we should all be comfortable with that?

[22:20:47.0000] <Hixie>
we shouldn't be comfortable with any proprietary platform

[22:20:51.0000] <Hixie>
are you comfortable with iOS?

[22:20:59.0000] <roc>
no

[22:21:00.0000] <roc>
hang on

[22:21:35.0000] <roc>
in our previous discussion I was arguing that asm.js was a standards-based alternative to PNaCl and therefore more desirable

[22:21:40.0000] <roc>
are you agreeing with that now?

[22:22:03.0000] <roc>
anyway, I gotta go home. If there's something specific you want Mozilla to do about <menuitem> let me know.

[22:22:50.0000] <Hixie>
well there's two questions there. There's "which technology do I think should become a standards-based multi-vendor technology", and there's some question about a standard vs a proprietary platform

[22:22:58.0000] <Hixie>
not sure exactly what the second question is

[22:23:13.0000] <Hixie>
for the first one, i think if the choices are asm.js or PNaCl, I don't have an opinion on which is better technology.

[22:23:26.0000] <Hixie>
i would be fine with PNaCl being a multi-vendor-supported standard.

[22:23:28.0000] <Hixie>
ditto asm.js.

[00:58:17.0000] <foolip>
annevk: what are your thoughts on the "WHATWG/W3C collaboration proposal" thread, given that your spec is the suggested test balloon?

[01:16:29.0000] <annevk>
foolip: I don't know, but I'm happy for rubys to try it out

[01:18:57.0000] <foolip>
ok, just curious

[02:18:40.0000] <SimonSapin>
darobin: I’m confused, is https://specs.webplatform.org/url/webspecs/develop/ a mirror, a snapshot, a fork?

[02:19:39.0000] <darobin>
SimonSapin: annevk and rubys have some agreement to try to work out something on neutral ground; that's the neutral ground

[02:20:05.0000] <SimonSapin>
hum, ok

[02:20:30.0000] <annevk>
afaik rubys uses that because he thinks Microsoft might review that

[02:20:37.0000] <annevk>
I don't have anything to do with it

[02:20:41.0000] <SimonSapin>
seems very meta-xkcd-927 at first

[02:20:50.0000] <annevk>
yeah I'm not a fan

[02:21:35.0000] <annevk>
but rubys seems to believe in hosting it in as many places as possible... and there's nothing really preventing that from happening

[02:23:59.0000] <darobin>
SimonSapin: see 927 in https://specs.webplatform.org/docs/

[02:25:11.0000] <SimonSapin>
darobin: reading. I landed on https://specs.webplatform.org/ from Twitter, and didn’t find /docs/ at first

[02:25:32.0000] <darobin>
SimonSapin: yeah, I need to make the link far more prominent

[02:26:20.0000] <SimonSapin>
I’m curious how rubys thinks that publishing in many places helps

[02:26:41.0000] <darobin>
I think annevk may have been exaggerating the "as many places as possible"

[02:27:11.0000] <SimonSapin>
I’m still curious how rubys thinks that publishing in more than one place helps

[02:27:51.0000] <annevk>
darobin: well his personal site, WHATWG, webplatform.org, w3.org, presumably some github.w3.org, ...

[02:28:06.0000] <caitp>
ubiquity is its own reward

[02:28:18.0000] <SimonSapin>
darobin: what does "transversality theorem me" mean?

[02:28:56.0000] <darobin>
annevk: you'll have to see with him, but I don't think there's anything on a GH site or on w3.org, and I'm guessing it's getting off his personal site

[02:29:01.0000] <darobin>
SimonSapin: huwah?

[02:29:32.0000] <SimonSapin>
darobin: or "pitchfork me", to take the Unicode name

[02:29:37.0000] <darobin>
oooooooh

[02:29:41.0000] <darobin>
"fork me" :)

[02:29:54.0000] <darobin>
yeah, that amused me but it should probably go

[02:29:58.0000] <SimonSapin>
https://en.wikipedia.org/wiki/⋔ redirects to https://en.wikipedia.org/wiki/Transversality_theorem

[02:30:02.0000] <darobin>
though I like your reading

[02:30:07.0000] <darobin>
yes yes, I had seen that initially

[02:30:21.0000] <SimonSapin>
though I have no idea what that is

[02:30:41.0000] <SimonSapin>
“Let f:X\rightarrow Y be a smooth map between manifolds […]”

[02:31:57.0000] <jgraham>
SimonSapin: Isn't that just an explaination of the Git data model? ;)

[02:32:08.0000] <SimonSapin>
probably :)

[02:35:45.0000] <darobin>
lol

[04:06:47.0000] <Ms2ger>
jgraham++

[04:18:42.0000] <rubys>
annevk: please let me know if you disagree with (or feel that anything important is missing) from my recent email to public-w3process (which oddly hasn't shown up in the web archives yet).

[04:27:08.0000] <annevk>
rubys: not the email from 18min ago to www-archive?

[04:31:53.0000] <rubys>
ah, that would explain why it didn't show up in w3-process :-)

[04:32:09.0000] <rubys>
yes: http://lists.w3.org/Archives/Public/www-archive/2014Nov/0056.html

[04:33:09.0000] <annevk>
yeah seems fine

[04:33:29.0000] <rubys>
cool

[04:37:29.0000] <rubys>
TBH, I don't plan to work on it for a few days, as process/politics wears me down and I need a few days of coding to recharge my batteries. :-)

[04:42:18.0000] <annevk>
I wonder what https://github.com/domokit/mojo is

[04:42:46.0000] <annevk>
rubys: tell me about it :-(

[04:42:57.0000] <annevk>
rubys: I hope the next time we can discuss something technical

[04:43:43.0000] <rubys>
I should have a draft merge done in the next few days.  I'm sure that there will be a lot broken in the process.

[04:44:06.0000] <rubys>
In fact, I plan to have it today, unless my wife has other plans for me :-)

[04:44:31.0000] <annevk>
rubys: there's still a couple of outstanding bikeshed regressions too

[04:44:50.0000] <rubys>
Perhaps it would be a good idea to open some tracking bugs on these?

[04:45:05.0000] <annevk>
rubys: people did

[04:45:16.0000] <rubys>
/me checking

[04:45:31.0000] <annevk>
rubys: https://www.w3.org/Bugs/Public/show_bug.cgi?id=27383 and https://www.w3.org/Bugs/Public/show_bug.cgi?id=27368

[04:46:11.0000] <rubys>
Thanks!  I'll fix both.

[04:49:24.0000] <annevk>
What password manager do people use? Is LastPass any good?

[04:53:44.0000] <iuuso>
i'm using lastpass currently, and its usability is certainly great but i'm planning on switching over to KeePass.

[04:55:33.0000] <iuuso>
if you want to store your passwords in a cloud where you have no control over them then lastpass is fairly good for you :)

[04:57:58.0000] <iuuso>
but i would suggest to take a glance at keepass. from the security perspective it's considered (as far as i know) safer than most common alternatives.

[05:47:47.0000] <foolip>
annevk: I use http://www.passwordstore.org which is backed by GnuPG and Git

[05:49:13.0000] <foolip>
storing the Git repo in public would reveal which passwords you have but not what they are, but to avoid both I just keep it all out of the "cloud"

[06:30:00.0000] <hsivonen>
is there no search for the current WebKit source tree (as opposed to searching the changesets?)

[06:30:47.0000] <annevk>
hsivonen: perhaps through https://github.com/WebKit/webkit

[06:32:20.0000] <caitp>
github's search tools are a bit lacking

[06:32:39.0000] <caitp>
iirc they have a source browser online, but without search utilities

[06:32:54.0000] <caitp>
so you can often make use of mxr or similar for blink and try to dig up stuff in webkit

[06:33:50.0000] <annevk>
hsivonen: https://github.com/WebKit/webkit/blob/master/Source/WebCore/platform/text/TextEncoding.cpp#L105

[06:42:13.0000] <hsivonen>
annevk: a quick look suggests that WebKit agrees with IANA case and Gecko agrees with IANA case except for gbk and gb18030

[06:48:58.0000] <hsivonen>
annevk: I fail to see value in changing the case where Gecko, WebKit and Blink agree even if Trident doesn't

[06:49:03.0000] <annevk>
I can't find the issue where this was originally discussed

[06:49:36.0000] <annevk>
hsivonen: does this mean we should have inconsistent results for TextEncoder.prototype.encoding and characterSet?

[06:50:03.0000] <annevk>
hsivonen: I guess I can add some mapping table to DOM for characterSet

[07:09:37.0000] <annevk>
hsivonen: if you could give feedback on https://www.w3.org/Bugs/Public/show_bug.cgi?id=27190 that'd be great btw

[07:14:05.0000] <Domenic>
annevk: I <3 LastPass

[07:42:02.0000] <wanderview>
JakeA: fyi, TrainedToThrill is mostly working on our SW project branch as of today... still some issues to sort out before we can get it into nightly behind a pref, though

[08:04:25.0000] <Domenic>
wanderview: \o/

[08:04:30.0000] <JakeA>
whoa that's really cool

[08:05:57.0000] <wanderview>
and our nightly builds for the branch are broken, but I'm trying to fix

[08:07:10.0000] <Domenic>
annevk: thoughts on https://github.com/whatwg/resources.whatwg.org/issues/4#issuecomment-64668094 ? I'm not a big fan of inlining CSS into my JS files but will do it if you think it's best.

[08:09:59.0000] <annevk>
Domenic: let's inline until everyone does bikeshed

[08:10:06.0000] <Domenic>
sgtm

[08:22:41.0000] <Domenic>
annevk: it works on https://notifications.spec.whatwg.org/ \o/

[08:49:22.0000] <annevk>
Hmm, does ArrayBuffer require new or not?

[08:49:45.0000] <annevk>
Throws in Chrome, does not throw in Firefox or IE

[08:50:19.0000] <annevk>
Or perhaps only Uint8Array throws

[08:51:53.0000] <Hunter14895>
I hope I am not outta my realm here (newbie) have some rather general questions.

[08:52:41.0000] <Hunter14895>
Is a grid absolutely necessary as I attempt my hand as responsive web designs?

[08:54:35.0000] <hemanth>
annevk, it can be with or without new

[08:55:31.0000] <hemanth>
new ArrayBuffer( ...argumentsList ) or ArrayBuffer( length )

[08:56:42.0000] <annevk>
hemanth: seems to throw in Safari/Chrome

[08:57:28.0000] <hemanth>
hmm, not yet implemented fully?

[09:00:02.0000] <Hixie>
ooh, i like zcorpan's ideo

[09:07:56.0000] <SteveF_>
Hunter14895: suggest asking on irc://irc.freenode.net/html5

[09:08:32.0000] <Domenic>
annevk: hemanth: per spec it should throw.

[09:08:54.0000] <Hunter14895>
@SteveF_ thanks bud

[09:13:14.0000] <annevk>
Domenic: hmm, I thought we recently changed our ArrayBuffer behavior, weird that it would still not align with the spec

[09:13:31.0000] <annevk>
/me prepares a fix for web-platform-tests

[09:16:19.0000] <annevk>
MikeSmith: https://github.com/w3c/web-platform-tests/pull/1419

[09:16:41.0000] <MikeSmith>
/me looks

[09:20:33.0000] <MikeSmith>
annevk: I see now that test as already not executing as expected in Chrome, for that very reason

[09:20:49.0000] <MikeSmith>
Uncaught TypeError: Constructor ArrayBuffer requires 'new'

[09:20:57.0000] <annevk>
MikeSmith: yes

[09:21:21.0000] <annevk>
MikeSmith: I wonder if this changed recently

[09:21:29.0000] <MikeSmith>
maybe so

[09:22:01.0000] <MikeSmith>
I also wonder who now reviewed this initially..

[09:22:28.0000] <annevk>
zcorpan I think

[09:22:52.0000] <annevk>
thought it was you for a second

[09:22:55.0000] <annevk>
zcorpan: ^^

[09:23:34.0000] <annevk>
whoa, I wonder how https://github.com/w3c/web-platform-tests/graphs/contributors happened

[09:23:34.0000] <MikeSmith>
oh man I get some crazy behavior in chrome now when it does run

[09:23:50.0000] <annevk>
what did I do between 2010 and 2012

[09:24:29.0000] <MikeSmith>
my chrome is trying to download dozens of single-byte-raw.py files to my machine

[09:24:55.0000] <MikeSmith>
annevk: that must because you updated your e-mail settings in github

[09:25:19.0000] <annevk>
MikeSmith: I did yeah, was curious what that would do

[09:25:40.0000] <annevk>
MikeSmith: heh

[09:26:15.0000] <Ms2ger>
Oh, I missed my 1000th commit

[09:26:44.0000] <MikeSmith>
annevk: looks like you made tons of changes to an Overview.src.html file

[09:27:05.0000] <MikeSmith>
oh, the dom spec

[09:27:15.0000] <annevk>
MikeSmith: maybe the old ranges repository?

[09:27:21.0000] <MikeSmith>
must be

[09:27:33.0000] <Ms2ger>
I imported the entire DOM history at one point

[09:27:37.0000] <MikeSmith>
ah

[09:29:10.0000] <MikeSmith>
if somebody else can try http://w3c-test.org/submissions/1419/encoding/single-byte-decoder.html to confirm I'm not insane, that'd be great

[09:30:41.0000] <MikeSmith>
christ

[09:30:45.0000] <Ms2ger>
262 Pass

[09:30:46.0000] <Ms2ger>
95 Fail

[09:30:46.0000] <Ms2ger>
144 Timeout

[09:31:07.0000] <MikeSmith>
Safari is doing the download thing too

[09:32:58.0000] <MikeSmith>
Ms2ger: yeah I don't see that. I see instead "This site is attempting to download multiple files. Do you want to allow this?"

[09:33:11.0000] <MikeSmith>
and if I say yes all hell breaks loose

[09:33:14.0000] <Ms2ger>
Not here

[09:33:35.0000] <MikeSmith>
I wonder if it's some OS X thing

[09:33:53.0000] <MikeSmith>
Ms2ger: you not running on a mac?

[09:34:08.0000] <Ms2ger>
Nope, fortunately not :)

[09:35:11.0000] <MikeSmith>
heh

[09:36:30.0000] <MikeSmith>
webkit doesn't even prompt me it just downloads 237 "Unconfirmed NNNNNNN.crdownload" files

[09:39:32.0000] <Hixie>
man, the threads that anne are on about the w3c process are just more evidence of one of my least favourite parts about the w3c: the existence of process

[09:39:50.0000] <MikeSmith>
r+ed that change and merged it because clearly it's the right thing but overall the behavior of the test is whacked in chrome and webkit on OS X

[09:43:52.0000] <annevk>
Hixie: :-(

[09:45:27.0000] <Hixie>
annevk: you should have listed the existence of process in your list of things that should change ;-)

[09:46:12.0000] <annevk>
Hixie: in the list of things I was unhappy with, W3C Process was the first if I remember correctly

[09:46:36.0000] <Hixie>
aah. i read it as just it being the precise process you didn't like, not any process at all

[09:46:58.0000] <annevk>
Hixie: there's always some kind of process

[09:47:21.0000] <annevk>
Hixie: e.g. I have to file bugs and make sure I'm not too brief if I want to change HTML :p

[09:51:38.0000] <Hixie>
annevk: that's not a process. i mean, you and i could come up with a better way to do it if you wanted. like, e-mail, or github issues, or whatever we found more effective.

[09:51:56.0000] <Hixie>
annevk: a process is something that is expensive to change that isn't just what people want to do.

[09:52:07.0000] <Ms2ger>
Okay, I'd like a process

[09:52:15.0000] <Ms2ger>
One that stopped people from using github issues

[09:52:23.0000] <annevk>
Hixie: it's true that things are easily changed

[09:52:42.0000] <annevk>
Hixie: I wasn't aware of that constraint on usage of the term

[09:53:33.0000] <Hixie>
"process" in this kind of context usually implies some sort of fixed set of steps or rules that are non-trivial to change

[09:53:43.0000] <Hixie>
as opposed to "personal preference"

[09:54:11.0000] <Hixie>
i mean, anyone can have their own personal process, sure, but it's not a Formal Process if everyone else can just ignore it :-)

[10:14:35.0000] <hsivonen>
annevk: yeah, if we don't want to require changes to characterSet in WebKit, Blink and Gecko, the result would have to be inconsistent with TextDecoder returning in lower case

[10:17:00.0000] <wanderview>
JakeA: do we have a spec issue for supporting Cache on main thread and other workers?  I want to add a note

[10:18:27.0000] <annevk>
hsivonen: I don't really care either way, but I guess I can make such a change for characterSet, it does seem safer

[10:18:59.0000] <annevk>
hsivonen: but I guess Gecko should still change gbk / gb18030 then, if we want to make the compatibility names consistent

[10:19:26.0000] <wanderview>
we won't be able to support Cache in workers based on data:uris or created from a sandboxed iframe... although maybe those are gecko specific things

[10:22:34.0000] <JakeA>
wanderview: https://github.com/slightlyoff/ServiceWorker/issues/535 https://github.com/slightlyoff/ServiceWorker/issues/297

[10:22:43.0000] <Ms2ger>
gsnedders, so is being named after a fish a requirement for Scottish first ministers?

[10:23:08.0000] <wanderview>
thanks... I searched but couldn't find them for some reason

[10:23:33.0000] <wanderview>
JakeA: ah... the second one there does not have the cache github issue tag

[10:34:52.0000] <JakeA>
wanderview: fixed, cheers!

[10:34:59.0000] <wanderview>
thanks!

[11:53:30.0000] <rubys>
TabAtkins: did something change recently in bikeshed?  Building the whatwg URL spec, I'm now getting:

[11:53:35.0000] <rubys>
FATAL ERROR: The selector '#hosts-(domains-and-ip-addresses)' returned an error:

[11:53:35.0000] <rubys>
Expected selector, got <DELIM '(' at 7>

[11:53:55.0000] <rubys>
The input line in question is:

[11:53:57.0000] <rubys>
<h2 id="hosts-(domains-and-ip-addresses)">Hosts (domains and IP addresses)</h2>

[11:54:27.0000] <TabAtkins>
Interesting.  This wasn't a problem before, with that same ID?

[11:54:39.0000] <rubys>
no

[11:54:45.0000] <TabAtkins>
(the issue is that I'm not doing sufficient escaping to make all IDs valid id selectors)

[11:55:19.0000] <rubys>
https://url.spec.whatwg.org/#hosts-%28domains-and-ip-addresses%29

[11:56:01.0000] <rubys>
workaround: change the source to do the percent encoding?

[11:56:17.0000] <TabAtkins>
Hm, I must have made some change. Let me bisect.

[11:56:22.0000] <TabAtkins>
Don't workaround, just gimme a sec.

[11:56:31.0000] <rubys>
k

[11:58:23.0000] <gsnedders>
Ms2ger: nah, only SNP leaders. I'm not aware of any for the first three. :)

[11:58:25.0000] <TabAtkins>
Hm, the bad commit just changes the timing of the section-link generator.

[12:02:34.0000] <Domenic>
probably changed where it happens in the pipeline in relation to encoding stuff?

[12:05:40.0000] <TabAtkins>
No, encoding stuff is already long-since done, or still a long ways away.

[12:08:08.0000] <TabAtkins>
Oh! It's triggering on the ToC.  Interesting.

[12:08:14.0000] <TabAtkins>
That shouldn't be happening anyway, obvs.

[12:09:04.0000] <TabAtkins>
But now the error makes sense.

[12:10:10.0000] <Hixie>
annevk: you around?

[12:25:51.0000] <Hixie>
annevk: when i sent a URLUtils object's input to null, is it supposed to keep its old state?

[12:27:46.0000] <Hixie>
oh nm i misread the spec

[12:39:15.0000] <TabAtkins>
rubys: Fixed.  The new position, though, reveals some markup errors - you've got two spots like `<a title=foo><a>foo</a>`.

[12:44:27.0000] <trevnorris>
is there a standardized test for something like https://url.spec.whatwg.org/#host-parsing ?

[12:45:38.0000] <Ms2ger>
github/w3c/web-platform-tests/ probably has some

[13:03:18.0000] <trevnorris>
Ms2ger: thanks

[13:05:47.0000] <Hixie>
ok dreamhost have informed me that they are updating ubuntu (and openssl) with an ETA of Q1 2015

[13:28:05.0000] <rubys>
TabAtkins: thanks!

[13:33:32.0000] <Domenic>
I just sent a mail to public-script-coord and got back "******* About the W3C Mailing Lists *******" in response

[13:33:35.0000] <Domenic>
It's not in the archives

[13:33:53.0000] <Domenic>
ohhh

[13:33:59.0000] <Domenic>
i sent it to public-script-coord-request

[13:34:02.0000] <Domenic>
good times!

[13:41:05.0000] <TabAtkins>
Domenic: "spike"?

[13:41:33.0000] <Domenic>
TabAtkins: http://www.extremeprogramming.org/rules/spike.html

[13:42:02.0000] <TabAtkins>
ah, kk

[13:43:15.0000] <TabAtkins>
I understand the stream/pipe model better now. I assumed that piping was done directly by either the source or the target; instead, it's done by a transient (not fully reified) pipe function that handles both ends.

[13:43:51.0000] <Domenic>
yeah :)

[13:44:21.0000] <Domenic>
it lives on the source for convenience of syntax + the fact that we don't have anywhere (like, say, a module) to put it in

[13:48:36.0000] <TabAtkins>
And it does look like pipes are "push-like" - they aggressively pull data from the source and write it to the target, rather than waiting for someone to pull on the target first.

[13:55:43.0000] <Domenic>
well, you can't pull on generic targets, is the thing

[13:55:53.0000] <Domenic>
I guess the OS can

[13:57:21.0000] <TabAtkins>
Right.

[13:57:42.0000] <TabAtkins>
Purely-writable streams are just transform streams that only the OS has the readable side of. ^_^

[13:58:16.0000] <TabAtkins>
All streams are transform streams in theory, since you can't produce information from nothing, and piping to /dev/null isn't very useful.

[14:02:52.0000] <Hixie>
foolip: ping

[14:04:15.0000] <Hixie>
TabAtkins: random question... what emotion is your ^_^ smiley supposed to convey? is it equivalent to :-), :-|, >:-(, -_- ?

[14:04:59.0000] <TabAtkins>
:)

[14:06:09.0000] <Hixie>
k, thanks

[14:09:10.0000] <Domenic>
TabAtkins: yeah, I spent a few days trying to make that explicitly the case in the API, but it ended up falling down in some pragmatic ways. i agree it is a nice conceptual model though.

[14:19:43.0000] <Domenic>
TabAtkins: if I make changes to my Bikeshed repo then type "bikeshed" somewhere else will it use my local copy?

[14:25:15.0000] <TabAtkins>
If you install it in the recommended way, yes. Otherwise, dunno

[14:28:53.0000] <Domenic>
we'll find out!!

[14:34:33.0000] <Hixie>
annevk: looks like your url spec allows scheme data to be encoded including "?", even though it defines "?" as the delimiter for the next component when parsing

[14:42:31.0000] <Hixie>
annevk: (or maybe the bug is allowing a query component on those urls? e.g. consider data:,? )

[15:21:55.0000] <Mathuin>
Searching for cairocffi and IRC brought up a hit on this channel -- is this the right place to ask cairocffi-related questions?

[15:27:45.0000] <Ms2ger>
Not quite

[15:28:20.0000] <Mathuin>
can you recommend another one?

[15:43:17.0000] <MikeSmith>
SimonSapin: ↑

[15:44:31.0000] <SimonSapin>
Hi Mathuin. Let’s try #cairo

[15:44:49.0000] <SimonSapin>
(What lead you to this channel?)

[15:46:48.0000] <Mathuin>
Actually something you mentioned in the channel about it got logged and searchable on google. :-)  heading to #cairo now... :-)

[15:58:59.0000] <jamesr_>
Hixie: ^_^ ==> http://fc06.deviantart.net/fs45/i/2009/068/1/8/Emoticon_WP___04_by_elusive.jpg

[15:59:24.0000] <TabAtkins>
Its actual source is anime, where the "triangle eyes" indicate happiness.

[15:59:45.0000] <Hixie>
wouldn't that be ^u^ or something

[15:59:51.0000] <Hixie>
i thought it was supposed to be a cat :-P


2014-11-27
[16:00:33.0000] <jamesr_>
http://www.clipartbest.com/cliparts/RiA/yyX/RiAyyXeoT.jpeg mebbe?

[16:01:20.0000] <jamesr_>
i am shocked at how hard it is to find the happy anime face i want on the internet

[16:02:05.0000] <jamesr_>
http://keikakudoori.files.wordpress.com/2009/09/happy-face.jpg ?

[16:02:08.0000] <jamesr_>
even bing isn't helping here

[16:02:40.0000] <Hixie>
anime is weird

[16:02:52.0000] <zewt_>
window.is_mobile = (function (a) {

[16:02:52.0000] <zewt_>
return (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er

[16:02:56.0000] <Hixie>
these people look like something between being cross and being asleep

[16:02:58.0000] <zewt_>
|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|

[16:03:01.0000] <zewt_>
avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|iko

[16:03:11.0000] <zewt_>
^ that being 50% of one line of code makes me sad for the internet

[16:04:32.0000] <TabAtkins>
=^_^= is a cat, due to the whiskers.

[16:04:54.0000] <TabAtkins>
zewt_: Looks like someone did some regex golfing on it?

[16:05:30.0000] <zewt_>
ψ(｀∇´)ψ is the double-bird

[16:05:43.0000] <TabAtkins>
It's a bird giving the double bird, making it a triple bird.

[16:05:48.0000] <zewt_>
which makes me wonder why it's an ios built-in

[16:06:46.0000] <zewt_>
for *･゜ﾟ･*:.｡..｡.:*･'(*ﾟ▽ﾟ*)'･*:.｡. .｡.:*･゜ﾟ･* you'll have to draw your own conclusions

[16:07:02.0000] <jamesr_>
zewt_: ¯\_(ツ)_/¯

[16:09:13.0000] <Hixie>
surely >^_^< is more catlike than =^_^=

[16:09:35.0000] <TabAtkins>
Man, don't argue with idioms.

[16:09:44.0000] <Hixie>
>^o^<

[16:20:13.0000] <jamesr_>
/^_^\

[16:21:13.0000] <astearns_>
^ↀᴥↀ^

[16:21:48.0000] <jamesr_>
woah, bustin' out the big codepoints

[16:22:44.0000] <TabAtkins>
^̸̈́_̵̊^̷̀

[16:23:07.0000] <Hixie>
☺

[17:04:41.0000] <MikeSmith>
Hixie: what's the status on landing the loading stuff in the HTML spec

[17:04:48.0000] <MikeSmith>
Hixie: blocked on TC39?

[17:12:49.0000] <Hixie>
MikeSmith: abandoned, as far as i'm aware.

[17:13:07.0000] <MikeSmith>
wha

[17:13:30.0000] <MikeSmith>
I guess I missed that memo

[17:14:17.0000] <Hixie>
nobody showed any interest :-(

[17:14:26.0000] <MikeSmith>
well that sucks

[17:14:54.0000] <Hixie>
i'm still up for speccing it if it's something people want

[18:45:02.0000] <MikeSmith>
for anybody here who might be interested, I just set up an TLS-enabled instance of the web-platform-tests runner, at https://w3c-test.org:9443

[18:45:32.0000] <MikeSmith>
based on code from a pending PR from jgraham https://github.com/w3c/web-platform-tests/pull/1302

[18:47:49.0000] <MikeSmith>
at this point the TLS support is intended just for tests that specifically require, not in general for the overall testsuite

[18:49:15.0000] <MikeSmith>
first thing I realize is that we if we were to want to TLS-enable the running of the whole testsuite, we've got tons of mixed-content cases in there we'd need to fix

[00:06:33.0000] <MikeSmith>
how come in gecko MessageChannel is still under a flag

[00:10:12.0000] <MikeSmith>
just blocked on getting it enabled in workers?

[00:10:17.0000] <MikeSmith>
https://bugzilla.mozilla.org/showdependencytree.cgi?id=952139&hide_resolved=1

[00:19:33.0000] <foolip>
Hixie: pong

[00:24:29.0000] <foolip>
I saw https://www.w3.org/Bugs/Public/show_bug.cgi?id=27102 and will update WebVTT to match

[00:40:53.0000] <annevk_>
MikeSmith: hmm, BroadcastChannel is due to blobs

[00:42:17.0000] <MikeSmith>
annevk_: seems like smaug is on it

[00:42:35.0000] <MikeSmith>
(based on bugzilla comments)

[00:42:47.0000] <MikeSmith>
I mean just as far as knowing what the status isu

[00:44:53.0000] <MikeSmith>
fyi for anybody interested, I move the TLS-enabled instance of the web-platform-tests runner to port 443, so https://w3c-test.org works now (and https://w3c-test.org:9443 no longer does)

[00:47:52.0000] <annevk_>
Hmm

[00:48:06.0000] <annevk>
It seems when running https://w3c-test.org/encoding/single-byte-decoder.html online a bunch of tests timeout

[00:48:20.0000] <MikeSmith>
annevk: yeah

[00:48:48.0000] <MikeSmith>
but they also timeout at http://w3c-test.org/encoding/single-byte-decoder.html

[00:49:07.0000] <MikeSmith>
annevk: I was telling you this myself here yesterday :)

[00:49:53.0000] <annevk>
MikeSmith: apparently I can't actually read

[00:50:06.0000] <annevk>
MikeSmith: should we fix that somehow?

[00:50:46.0000] <MikeSmith>
sure

[00:50:50.0000] <MikeSmith>
question is, how

[00:51:08.0000] <MikeSmith>
I don't know why it's timing out

[00:51:24.0000] <MikeSmith>
haven't even looked at the console output yet

[00:53:47.0000] <annevk>
MikeSmith: I think all the fetches just take too long and the harness decides to call it a day

[00:53:52.0000] <MikeSmith>
annevk: nothing at all logged to console in firefox as far as I can see

[00:53:55.0000] <MikeSmith>
ah ok

[00:54:02.0000] <annevk>
MikeSmith: so we need to signal to the harness it takes longer I guess

[00:54:56.0000] <MikeSmith>
yeah the harness provides some option for doing exactly like that but I forget what it is

[00:55:51.0000] <annevk>
the downloading of those files btw violates mimesniff

[00:56:08.0000] <annevk>
I have no sympathy for that

[00:57:13.0000] <zcorpan_>
Hixie: i know some web developers want the "lazyload" aspect for images at least

[00:57:46.0000] <MikeSmith>
annevk: I have no sympathy or whatever engineer decided to make it do that

[00:59:16.0000] <zcorpan_>
MikeSmith: jgraham: about tls, do we have a way to indicate that a test should be run as https?

[01:02:11.0000] <MikeSmith>
zcorpan_: nope

[01:02:16.0000] <MikeSmith>
not as far as I know

[01:02:46.0000] <MikeSmith>
but I think we don't yet have many tests in that category, do we?

[01:05:15.0000] <zcorpan_>
some websocket tests at least iirc

[01:07:05.0000] <MikeSmith>
yeah

[01:07:27.0000] <MikeSmith>
those are the only ones I remember specifically

[01:10:41.0000] <MikeSmith>
zcorpan_: but I think we do probably have quite a few tests that are coded in way that assumes they're being served over normal http

[01:11:03.0000] <MikeSmith>
the webmessaging tests do at least

[01:11:24.0000] <foolip>
zcorpan_: do you have tools for grepping a large body of real Web content?

[01:12:13.0000] <zcorpan_>
foolip: 100,000 pages from last year not including external resources

[01:12:48.0000] <foolip>
zcorpan_: can you check how createCDATASection is typically used?

[01:13:36.0000] <zcorpan_>
sure

[01:14:49.0000] <foolip>
and can I get the data myself somehow?

[01:15:20.0000] <zcorpan_>
also see https://github.com/search?l=javascript&o=desc&q=createcdatasection&s=&type=Code&utf8=✓

[01:15:39.0000] <zcorpan_>
yep, http://webdevdata.org (data set 2013-09-01 102,000 pages is the one i have)

[01:16:01.0000] <foolip>
GitHub search usually finds mostly WebKit/Blink test cases, but sometimes it works, sure

[01:16:28.0000] <Ms2ger>
And Gecko test cases

[01:16:38.0000] <zcorpan_>
httparchive+bigquery is supposedly kickass but i haven't tried to use that yet

[01:17:21.0000] <foolip>
I'm trying to figure out if httparchive actually has the response body

[01:18:03.0000] <zcorpan_>
it does somewhere, but i think you want to use bigquery to interact with it instead of downloading it

[01:18:51.0000] <zcorpan_>
/me finds https://www.igvita.com/2013/06/20/http-archive-bigquery-web-performance-answers/ - not sure if it's still accurate

[01:19:11.0000] <foolip>
I've read that before, but the example looks like it's polling the URL only

[01:19:34.0000] <foolip>
"all you need to do is download and import ~400GB of raw SQL/CSV data" actually seems like not a problem, if I could just find where to download it :)

[01:19:48.0000] <zcorpan_>
./4b/charter97.org_4bb84556534ed2034958e8fd4799058f.html.txt:targetNode.appendChild(document.createCDATASection(elementsObject[key]));

[01:19:49.0000] <zcorpan_>
./57/awaytravel.ru_57db32e4f1d4a1b51b513efd9913fd14.c++:targetNode.appendChild(document.createCDATASection(elementsObject[key]));

[01:19:49.0000] <zcorpan_>
./8f/16fan.com_8fe9894282996630af7e47dc04f1d27f.html.txt:									targetNode.appendChild(document.createCDATASection(elementsObject[key]));

[01:19:50.0000] <zcorpan_>
./cb/italia-ru.com_cb56b23a7ef834095755d9c071b7fd69.c++:targetNode.appendChild(document.createCDATASection(elementsObject[key]));

[01:19:52.0000] <zcorpan_>
./d4/pegipegi.com_d43dca92b28b3ea685371ef18a89b7d6.html.txt:targetNode.appendChild(document.createCDATASection(elementsObject[key]));

[01:20:17.0000] <Ms2ger>
Looks like a library

[01:20:46.0000] <foolip>
yep, and that case would work fine if createCDATASection were aliased to createTextNode

[01:24:03.0000] <zcorpan_>
foolip: https://github.com/HTTPArchive/httparchive/issues/6#issuecomment-32502849

[01:25:36.0000] <foolip>
zcorpan_: interesting!

[01:37:00.0000] <jgraham>
zcorpan_: The websockets tests don't rely on th etop level html file being served over https, do they?

[01:39:26.0000] <foolip>
zcorpan_: http://httparchive.webpagetest.org/habodies.php?run=20141015 is the most recent with complete data it seems

[01:41:31.0000] <jgraham>
annevk: <meta name=timeout content=long> or whatever <meta> syntax is

[01:41:57.0000] <jgraham>
(before the <script> elements)

[01:42:33.0000] <jgraham>
Running the whole testsuite over https seems like a non-goal

[01:45:09.0000] <annevk>
jgraham: will add

[01:45:45.0000] <MikeSmith>
jgraham: wouldbe nice at least if any new tests didn't be hardcoded with assumptions that they're being run over normal http

[01:46:14.0000] <MikeSmith>
plus, TLS is more fun

[01:46:29.0000] <foolip>
zcorpan_: well actually, I'm not finding the actualy bodies, just a large number of identical .har files in the end

[01:47:19.0000] <darobin>
foolip: it hid the bodies, looked at you, then went ".har .har .har!"? RUN!

[01:47:22.0000] <zcorpan_>
foolip: weird. ask in the bug

[01:47:24.0000] <darobin>
/me gets his coat

[01:50:26.0000] <annevk>
MikeSmith: jgraham: https://github.com/w3c/web-platform-tests/pull/1421

[01:51:09.0000] <annevk>
jgraham: actually, running the test suite over TLS should be a goal

[01:51:36.0000] <annevk>
jgraham: e.g. if HTTP/2 ends up requiring HTTPS

[01:54:38.0000] <jgraham>
AFAICT the only effect of running the testsuite over TLS is that debugging gets harder because e.g. Wireshark no longer works

[01:55:19.0000] <jgraham>
This is a testsuite that is primarilly designed to be run on your local computer so there is no integrity concern

[01:56:38.0000] <jgraham>
And in cases where you *are* testing HTTPS/cross protocol forcing the top level file to be protocol agnostic makes writing tests much harder because you need to detect whether you're doing http->https or viceversa

[01:56:55.0000] <jgraham>
HTTP/2 is a whole different kettle of fish

[01:57:24.0000] <jgraham>
We will need a seperate HTTP/2 server and… I don't know what, exactly

[01:58:06.0000] <annevk>
It seems useful to run all these tests over HTTP/2, especially network-sensitive tests

[02:00:57.0000] <jgraham>
In practice it seems unlikely that we are going to run all 200,000 tests over two different protocols

[02:01:27.0000] <jgraham>
But this might be a thing to worry about when we actually have a HTTP/2 server

[02:02:42.0000] <MikeSmith>
annevk: nice, now 501 passes

[02:05:00.0000] <MikeSmith>
annevk: tested and reviewed and merged your PR all from Firefox Nightly running on my phone, on a train

[02:05:07.0000] <annevk>
heh

[02:06:20.0000] <MikeSmith>
I tried it in Chrome on my phone but here also it does the download thing

[02:11:01.0000] <zcorpan_>
MikeSmith: while you're at it, can you write a testsuite for dir="" rendering rules on your phone?

[02:11:41.0000] <jgraham>
MikeSmith: I think that's zcorpan_ for "Fuck You"

[02:12:01.0000] <jgraham>
;)

[02:12:03.0000] <zcorpan_>
heh

[02:14:07.0000] <MikeSmith>
zcorpan_: in the words of my idol Doug Crockford, Don't harsh my mellow

[02:14:47.0000] <zcorpan_>
(i'm not looking forward to testing dir="" but i have it on my todo)

[02:17:04.0000] <annevk>
zcorpan_: can't you use some of Hixie's work?

[02:18:00.0000] <zcorpan_>
annevk: possibly, i'm not aware of his work

[02:21:01.0000] <Ms2ger>
annevk, btw, we should run all tests with application/xhtml+xml too

[02:21:56.0000] <annevk>
Ms2ger: why?

[02:23:50.0000] <jgraham>
Well some of them certainly depend on xhtmlness

[02:23:58.0000] <jgraham>
Or htmlness, rather

[02:24:37.0000] <jgraham>
So having all tests run in both document types ensures that you test those cases

[02:25:24.0000] <jgraham>
ofc having everything run in 2 document formats over 2 protocols starts to balloon your runtime enormously for relatively small benefit

[02:27:31.0000] <annevk>
It seems like a strange comparison

[02:28:27.0000] <jgraham>
Well it's actually a thing that CSS does today

[02:32:00.0000] <annevk>
They still do that? wow

[02:32:17.0000] <annevk>
When was the last time we found a bug that way?

[02:32:31.0000] <jgraham>
No idea

[02:38:07.0000] <zcorpan_>
also quirks mode, almost standards mode

[02:38:15.0000] <zcorpan_>
different encodings

[02:48:40.0000] <zcorpan_>
i think it makes more sense to use a single version of a test for the bulk of the tests, and have opt-in to several versions for specific tests somehow

[02:49:21.0000] <zcorpan_>
so far the opt-in is in the test itself or having several files for a test

[02:51:04.0000] <zcorpan_>
possibly the opt-in should be different for tests that should run over several protocols

[02:57:44.0000] <jgraham>
A long time ago the plan was to have per-directory manifest overrides mapping files to tests

[02:58:13.0000] <jgraham>
e.g. {foo.html: [foo.html?bar=baz]}

[02:58:52.0000] <jgraham>
You can imagine adapting that idea to get top-level files served over https or http/2, although it becomes cumbersome if that becomes the default

[02:59:02.0000] <jgraham>
Or s/default/very common/

[03:02:02.0000] <zcorpan_>
i guess it's possible at some point in the future that http/2 is more interesting than http

[03:17:14.0000] <annevk>
That's certainly the goal

[03:17:45.0000] <annevk>
And unlike XHTML it has the incentives

[03:46:43.0000] <zcorpan_>
annevk: https://dom.spec.whatwg.org/#dom-document-characterset is there a reason to do it this way instead of making the right column the canonical case in the encoding spec?

[03:47:39.0000] <zcorpan_>
having different case for different APIs seems annoying

[03:49:08.0000] <gsnedders>
the ones in DOM are required for compat… I'd rather we just changed the canonical cases in the encoding spec to match what is used elsewhere…

[04:00:14.0000] <zcorpan_>
seems like there's big overlap between /dom/nodes/Document-characterSet-normalization.html and /encoding/single-byte-decoder.html	

[04:02:18.0000] <gsnedders>
well yeah, annevk changed it all in the encoding spec to have a predictable case

[04:02:24.0000] <jgraham>
I think seitching the default to http/2 is more plausible than running everything over both, and can be dealt with once it becomes clear it's the right thing to do

[04:19:43.0000] <annevk>
zcorpan_: I don't want any new APIs to expose the weird legacy casing

[04:19:48.0000] <annevk>
zcorpan_: e.g. TextDecoder

[04:20:08.0000] <zcorpan_>
annevk: why?

[04:20:45.0000] <annevk>
zcorpan_: so you don't have to know the casing rules

[04:22:20.0000] <zcorpan_>
annevk: having the case be different between APIs means i can't compare the output without lowercasing or uppercasing both first

[04:22:52.0000] <annevk>
zcorpan_: there's no reason to use characterSet so I don't think that's a problem

[04:24:00.0000] <foolip>
how sure are we that making characterSet return lowercase isn't Web compatible?

[04:24:32.0000] <annevk>
foolip: hsivonen argued that Chrome + Safari + Firefox > IE

[04:24:59.0000] <annevk>
foolip: bz said that inputEncoding should return "UTF-8"

[04:25:17.0000] <zcorpan_>
does IE return lowercase?

[04:25:18.0000] <annevk>
foolip: I don't have actual data, only a lot of scars from things we thought we could change

[04:25:35.0000] <annevk>
zcorpan_: I'm not actually sure

[04:25:50.0000] <annevk>
zcorpan_: I have a vague recollection that IE and old Opera did that

[04:26:45.0000] <foolip>
IE11 returns lowercase "utf-8" for both characterSet and charset

[04:27:30.0000] <foolip>
but it sure seems like a change that would cause some breakage for whoever makes a change

[04:28:17.0000] <foolip>
honestly it seems like changing the canonical case in the Encoding Standard might be less weird long-term

[04:28:53.0000] <foolip>
but I don't plan to fiddle with this myself any time soon, so... yeah.

[04:29:13.0000] <Ms2ger>
zcorpan, you managed to fix the tests before I even got around to adding it to my todo list :)

[04:30:01.0000] <zcorpan_>
Ms2ger: :-)

[04:30:30.0000] <zcorpan_>
presto returns lowercase for window-1252 at least for characterSet (inputEncoding is undefined)

[04:42:45.0000] <annevk>
foolip: why put it in the Encoding Standard? I don't really want this to leak beyond characterSet & friends

[04:47:28.0000] <foolip>
annevk: it just that there's currently no big list of special-cased labels in the characterSet getter, and I expect some frowning if some other API is added where the capitalization must be different

[04:48:41.0000] <foolip>
unless those APIs only ever return lowercase strings, in which case one could have the characterSet-compatible labels as the canonical names internally, not bothering with the canonical names of the Encoding Standard

[04:51:42.0000] <foolip>
annevk: yep, I see that TextDecoder.encoding getter actually lowercases the returned string in Blink

[04:52:09.0000] <foolip>
so it's already the way I thought it would end up :)

[04:52:12.0000] <foolip>
I'm clairvoyant

[05:19:31.0000] <annevk>
foolip: yeah, makes sense for a legacy impl

[05:19:44.0000] <annevk>
foolip: I would expect a saner setup in say, Servo

[05:21:07.0000] <annevk>
rubys: when I run make I get a very different url.html from you again

[05:21:44.0000] <annevk>
rubys: e.g. mine removes bikeshed.css, but adds <script async src=//resources.whatwg.org/file-bug.js></script>

[05:22:10.0000] <annevk>
rubys: mine adds title attributes all over

[05:22:38.0000] <annevk>
rubys: references www.whatwg.org over whatwg.org

[06:04:05.0000] <rubys>
annevk: did you update bikeshed?  We might need TabAtkin's help

[06:09:40.0000] <zcorpan_>
what is the "context object" for things on Window? is it the Window or WindowProxy?

[06:12:44.0000] <annevk>
rubys: yes I ran bikeshed update

[06:13:35.0000] <zcorpan_>
hmm http://software.hixie.ch/utilities/js/live-dom-viewer/saved/3317

[06:16:12.0000] <annevk>
rubys: I also updated the repository, apparently that doesn't go automatically

[06:16:16.0000] <annevk>
rubys: still minor differences

[06:16:42.0000] <rubys>
These are the commands I use:

[06:16:43.0000] <rubys>
cd ~/git/bikeshed

[06:16:43.0000] <rubys>
git checkout .

[06:16:43.0000] <rubys>
git pull --rebase

[06:16:43.0000] <rubys>
bikeshed update

[06:17:08.0000] <annevk>
yeah

[06:17:22.0000] <rubys>
annevk: you are on mac

[06:17:25.0000] <rubys>
?

[06:18:29.0000] <rubys>
/me is down to 5 errors and 1 warning on the first-cut rough merge of my peg.js work and the url standard

[06:18:43.0000] <annevk>
rubys: yes

[06:18:56.0000] <rubys>
annevk: ok, I'll try on mac later today

[06:20:49.0000] <zcorpan_>
seems like blink associates the active document with the MediaQueryList while gecko associates the WindowProxy

[06:24:13.0000] <zcorpan_>
i think i prefer associating with the document so the object stops working while the frame is navigated to a different document

[06:52:05.0000] <annevk>
zcorpan_: WindowProxy most likely

[06:52:58.0000] <rubys>
darobin: I pushed to https://github.com/webspecs/url and https://specs.webplatform.org/url/webspecs/develop/ didn't update

[06:54:17.0000] <rubys>
darobin: just a guess, but bikeshed needed to make a fix for this to work

[07:01:47.0000] <darobin>
rubys: looking at the logs

[07:02:17.0000] <annevk>
"update several hundred billion users of Chrome" horse-blink-dev

[07:02:40.0000] <zcorpan_>
annevk: yeah that jumped out at me also :-)

[07:03:08.0000] <zcorpan_>
chrome must be really successful with so many users

[07:04:42.0000] <darobin>
rubys: ah, I found an interesting bug

[07:04:52.0000] <darobin>
/me slaps himself for supporting caching at this stage

[07:06:37.0000] <zcorpan_>
maybe some ants are using chrome?

[07:26:22.0000] <darobin>
rubys: should be updated now, lmk

[07:29:33.0000] <darobin>
rubys: also, about an hour ago it looks like you pull in a looooong list of commits from annevk

[07:30:16.0000] <darobin>
the resulting JSON payload from the hook is so large that it was rejected by the server's security policy :)

[07:30:58.0000] <darobin>
but I just retriggered more recent hook calls and they worked fine

[07:34:40.0000] <rubys>
darobin: indeed I did.  Started the merge :-)

[07:36:14.0000] <darobin>
rubys: yeah, I figured :) So, just in case you do a megamerge again don't be surprised if it doesn't work (I don't want to remove the protection, we shouldn't be getting megabytes of JSON all the time), just trigger a small change afterwards and it'll just work

[07:36:35.0000] <darobin>
I'm eventually going to replace the clunky GH hooks with something simpler from Travis that just sends the repo and branch

[07:36:45.0000] <rubys>
there must have been another problem as I did trigger a small change afterwards

[07:36:56.0000] <darobin>
rubys: oh yes, the two issues are unrelated

[07:37:02.0000] <darobin>
the other one is fixed

[07:37:11.0000] <rubys>
I'm planning to use Travis for regression testing

[07:37:22.0000] <darobin>
I shot myself in the face with caching basically

[07:38:35.0000] <rubys>
in any case: thanks!  And merges from here on out should be smaller

[11:18:08.0000] <zewt_>
heh well here's a nasty one: http://download.autodesk.com/us/support/report_a_bug.html?SelProduct=Maya autodesk's bug reporting form has ... no submit button in Chrome

[11:18:33.0000] <zewt_>
(it's outside of the iframe, for me at least)

[11:19:19.0000] <zewt_>
"i hope you didn't expect to be able to actually send that detailed bug report you just put together"

[11:38:46.0000] <caitp>
web development is hard zewt_

[11:38:50.0000] <caitp>
why is it so hard

[12:11:07.0000] <Ms2ger>
Hixie, around?

[12:14:04.0000] <Hixie>
vaguely

[12:16:23.0000] <Hixie>
sup?

[12:19:09.0000] <Ms2ger>
Hixie, I found the bit of spec I was looking for myself, thanks anyway :)

[12:19:23.0000] <Hixie>
cool

[12:19:49.0000] <Ms2ger>
For future reference, the "all attributes are in no namespace" requirement is in the XML section

[12:22:09.0000] <Hixie>
which attributes?

[12:27:38.0000] <Ms2ger>
Content attributes

[12:27:48.0000] <Ms2ger>
I was looking at .dataset in this case

[12:34:54.0000] <Hixie>
k

[12:35:02.0000] <Hixie>
not really sure what you mean but whatever :-)

[12:35:07.0000] <Hixie>
so long as you're happy :-)


2014-11-28
[17:42:21.0000] <hgl>
the undomanager spec hasn't been updated in two years, and not many browsers implement it. i wonder why? browsers don't like the idea?

[17:44:24.0000] <caitp>
*googles this thing*

[17:45:19.0000] <caitp>
it probably got forgotten or dismissed in bugmail, or maybe it's forgotten or dismissed in one of the zillions of meaningless working groups

[17:46:08.0000] <caitp>
or maybe it's not forgotten or dismissed =0

[17:47:01.0000] <caitp>
but if we're honest it probably is, because almost everything is

[17:48:01.0000] <hgl>
i hope it could pick some momentum... very useful api.

[17:49:15.0000] <hgl>
every wysiwyg editor implements their own version of undomanager, and it breaks when user undo via the browser menu. total mess.

[17:49:33.0000] <roc>
Firefox supports it

[17:49:43.0000] <hgl>
behind a flag i believe

[17:50:00.0000] <caitp>
sucky IHG wifi and i'm not even able to load up blink-dev or anything to see if there's been any talk of implementing

[17:50:00.0000] <caitp>
you might have better luck poking around to see

[17:50:08.0000] <roc>
hmm, that's true

[17:51:14.0000] <caitp>
I see nothing in blink-dev, maybe webkit?

[17:51:35.0000] <hgl>
https://bugs.webkit.org/show_bug.cgi?id=77562

[17:51:49.0000] <hgl>
webkit implemented it and then removed it. o_O

[17:52:51.0000] <caitp>
yeah, pre-fork so I guess blink never picked up on it

[17:54:24.0000] <roc>
hgl: I have sent a query to our relevant people

[17:54:31.0000] <hgl>
thank you.

[21:18:39.0000] <MikeSmith>
hgl: that's another spec rniwa was working on

[21:19:50.0000] <MikeSmith>
my recollection is that he never got it to a point of completion, despite putting a lot of work into it

[21:21:20.0000] <hgl>
MikeSmith, I guess the spec is indeed very hard to design.

[21:21:26.0000] <MikeSmith>
yeah I think maybe because he just ran into too many issues with figuring out how to spec it out to work interoperably across browsers

[21:21:41.0000] <MikeSmith>
but I dunno for sure

[21:21:56.0000] <MikeSmith>
you should ask him next time you're both around here at the same time

[21:22:07.0000] <hgl>
sure, will do that.

[21:22:55.0000] <hgl>
i'm currently designing a js version of undomanager, my brain hurts...

[22:51:15.0000] <hsivonen>
/me only now discovers MikeSmith's minibio on http://www.w3.org/People/ . :-)

[22:56:40.0000] <MikeSmith>
hsivonen: yeah I've been waiting to be told to change that but I guess the fact that I've not been told yet is either and indication that my superiors have a good sense of humor, or that they've not actually noticed it yet

[23:37:28.0000] <hsivonen>
MikeSmith: I like your title, too

[23:38:37.0000] <MikeSmith>
hsivonen: I liked my old title better

[23:38:41.0000] <MikeSmith>
Special Missions Subsection Junior Interim Floor Manager

[01:02:10.0000] <Ms2ger>
hgl, I believe Gecko implemented it

[01:29:47.0000] <annevk>
preffed off

[01:30:12.0000] <annevk>
dom.undo_manager.enabled

[01:31:27.0000] <zcorpan>
tobie: what's up with the label spam? https://github.com/w3c/web-platform-tests/pull/1417

[01:32:36.0000] <darobin>
zcorpan: I think that the's autolabel bot

[01:33:06.0000] <MikeSmith>
yeah

[01:33:12.0000] <zcorpan>
darobin: yeah but why does it add the same labels after each commit?

[01:33:42.0000] <MikeSmith>
ah yeah that seems unnecessary

[01:33:53.0000] <MikeSmith>
I guess it must not keep state info

[01:34:31.0000] <MikeSmith>
and it doesn't know if the commit might be to another directory that'd require another lable

[02:02:19.0000] <jgraham>
MikeSmith: Surely it doesn't have to keep state, it just has to read the state that GH keeps

[02:16:14.0000] <zcorpan>
Ms2ger: https://www.w3.org/Bugs/Public/show_bug.cgi?id=27459

[02:24:55.0000] <zcorpan>
hmmmm. does `return false` in an event handler cancel the event?

[02:36:27.0000] <jgraham>
I suggets you ask zcorpan, he always knows things like… oh wait

[02:37:24.0000] <tobie>
zcorpan: oh boy, that's terrible indeed. Something must have changed in the way GitHub displays the data.

[02:38:06.0000] <zcorpan>
Ms2ger: possibly the spec regressed the semantic of the return value when switching to events for onerror. https://www.w3.org/Bugs/Public/show_bug.cgi?id=27460 but i might be missing something

[02:42:52.0000] <tobie>
zcorpan: looking to see if there an easy fix. Repo is here, btw: https://github.com/tobie/ganesh

[02:43:43.0000] <zcorpan>
tobie: thx

[02:44:02.0000] <tobie>
zcorpan: has this been goign on for a while?

[02:44:14.0000] <zcorpan>
tobie: don't know. noticed it now

[02:44:20.0000] <tobie>
k

[02:52:56.0000] <jgraham>
It has been going for a while

[02:57:31.0000] <tobie>
jgraham: I imagine it's related to the UI change for issues GitHub made a while back.

[02:57:55.0000] <tobie>
Next time, please let me know before you all hate me.

[02:58:14.0000] <darobin>
too late for that...

[03:03:09.0000] <jgraham>
It didn't bother me that much…

[03:03:52.0000] <tobie>
darobin: good point. Might as well make the most of it now.

[03:03:57.0000] <darobin>
:)

[03:04:28.0000] <tobie>
/me modifies his patch to randomly mixup the labels, close pull requests and the like.

[03:06:22.0000] <jgraham>
r- :p

[03:07:06.0000] <zcorpan>
if (Math.random() > 0.9) { closePR(); deleteBranch(); } else { sendViagraSpam("@jgraham") }

[03:10:08.0000] <Ms2ger>
if (false) { addLabels() }

[03:16:30.0000] <tobie>
zcorpan: I even have a mail server setup. That's actually a few minutes to organize.

[03:27:43.0000] <jgraham>
At this point I would try to get you to play nice by threatening to withhold the nice things I'm working on. But I'm really not that sure the things I'm working on are nice

[03:30:56.0000] <tobie>
I can relate to that.

[04:06:28.0000] <tobie>
zcorpan: pushed and deployed a tentative fix. LMK if it's better

[04:07:37.0000] <zcorpan>
tobie: thanks!

[04:08:54.0000] <tobie>
np

[05:27:29.0000] <rubys>
annevk: ping?

[05:44:06.0000] <rubys>
annevk: I'm heading out for a bit, I posted my questions on the whatwg mailing list: http://lists.w3.org/Archives/Public/public-whatwg-archive/2014Nov/0149.html

[05:57:55.0000] <annevk>
rubys: I used I in that email when referring to URLHost, but I'm happy for someone else to come up with something coherent too

[06:10:48.0000] <rubys>
annevk: ok (It turns out that I have another hour before I leave; looking to pick up a U-Haul trailer to deliver a mattress my daughter purchased)

[06:11:13.0000] <rubys>
annevk: the merge is nearly ready for review.  The last big item is host parsing.

[06:11:57.0000] <annevk>
rubys: I can review second week of Dec

[06:12:30.0000] <rubys>
annevk: it should be ready by then.


2014-11-29
[23:58:05.0000] <estellevw>
is the content elerment still under discussion or has it been permanently killed?

[10:26:24.0000] <linuxmint>
Hello, is this the channel for W3C HTML help?

[11:15:44.0000] <Hixie>
espadrine`: content element?

[11:15:57.0000] <Hixie>
linuxmint: you can try :-)

[11:16:41.0000] <espadrine`>
not sure; what's the context?


2014-11-30
[19:02:15.0000] <Manishearth>
Any help with building the specs myself?

[19:02:21.0000] <Manishearth>
I get SyntaxError: Terms not defined: [[u'api referrer source', 'html'], [u'api referrer source', 'html'], [u'api referrer source', 'html']].

[19:02:25.0000] <Manishearth>
for xhr

[19:02:56.0000] <Manishearth>
and for fetch there is no CSS/js

[19:03:55.0000] <MikeSmith>
Manishearth: with bikeshed?

[19:04:28.0000] <MikeSmith>
espadrine`: I think Hixie was replying to a question from estellevw here earlier

[19:04:43.0000] <Manishearth>
MikeSmith: how?

[19:05:02.0000] <Manishearth>
I'm using anolis

[19:05:09.0000] <MikeSmith>
ah ok

[19:05:25.0000] <Manishearth>
I don't mind using something else

[19:05:26.0000] <MikeSmith>
(bikeshed is the new anolis)

[19:05:35.0000] <Manishearth>
Where do I find it?

[19:06:08.0000] <MikeSmith>
Manishearth: https://github.com/tabatkins/bikeshed

[19:06:45.0000] <MikeSmith>
Manishearth: but when you say "Any help with building the specs myself", you mean some other specs? Like, the Fetch spec or something?

[19:07:35.0000] <MikeSmith>
it looks like Fetch is still using anolis

[19:10:23.0000] <MikeSmith>
Manishearth: if you need to use anolis I think you need to make sure to use the version from https://bitbucket.org/ms2ger/anolis/

[19:10:39.0000] <MikeSmith>
I think that's the canonical/latest these days

[19:11:32.0000] <MikeSmith>
and I'm not sure but I don't think you could use bikeshed to process spec source that's written to expect anolis

[19:12:07.0000] <MikeSmith>
e.g., not sure they handle xrefs for <dfn>s in the same way

[19:12:55.0000] <caitp>
maybe if someone assembled a list of all the quirks and features of all of the different spec generating tools and specified them, it would improve interoperability enough that it wouldn't matter

[19:14:57.0000] <Hixie>
espadrine`: uh yeah, sorry man. meant to respond to estellevw and didn't notice autocomplete had gotten the wrong name.

[19:22:14.0000] <Manishearth>
MikeSmith: yeah, I'm using that

[19:22:58.0000] <Manishearth>
But the fetch spec doesn't have any JS/CSS when compiled with anolis

[19:23:27.0000] <MikeSmith>
weird

[19:26:03.0000] <MikeSmith>
Manishearth: will try it myself to see if I can reproduce it

[19:26:59.0000] <Manishearth>
thanks

[19:27:26.0000] <Manishearth>
MikeSmith: how do I compile the html sepc?

[19:28:28.0000] <MikeSmith>
Manishearth: I think you don't, because the tools aren't published. But ask Hixie

[19:29:14.0000] <Manishearth>
aw

[19:29:22.0000] <Manishearth>
that's kinda what I wanted to compile :p

[19:29:52.0000] <Manishearth>
(Wanted to have it offline, with xrefs)

[19:39:05.0000] <MikeSmith>
Manishearth: curl https://html.spec.whatwg.org > index.html :)

[19:39:55.0000] <MikeSmith>
or clone https://github.com/whatwg/html-mirror and used complete.html

[19:40:25.0000] <Manishearth>
MikeSmith: multipage

[19:40:32.0000] <MikeSmith>
ah

[19:41:21.0000] <MikeSmith>
Manishearth: can't help you there :(

[19:42:45.0000] <MikeSmith>
Manishearth: about the Fetch spec though, see https://github.com/whatwg/fetch/blob/master/Overview.src.html#L5

[19:42:56.0000] <MikeSmith>
<link rel=stylesheet href=//whatwg.org/style/specification>

[19:43:26.0000] <MikeSmith>
that't going to work if you're browsing the file from your filesystem

[19:43:58.0000] <MikeSmith>
for it to work, you'd need to serve it over http locally

[19:44:46.0000] <MikeSmith>
e.g., run "python -m SimpleHTTPServer" in your fetch dir

[19:44:49.0000] <Manishearth>
yeah

[19:48:20.0000] <MikeSmith>
totally urelated dumb question: are .pyc files architecture-dependent?

[19:48:36.0000] <MikeSmith>
I guess they must be

[19:50:10.0000] <MikeSmith>
trying to decide if I should just exclude them from an rysnc between a workspace on my macbook and a linux server

[20:21:38.0000] <Hixie>
Manishearth: see https://github.com/benschwarz/developers.whatwg.org/issues/90

[20:23:46.0000] <Manishearth>
Hixie: thanks

[20:25:27.0000] <Manishearth>
i think wget --recursive will work

[00:34:26.0000] <annevk>
Manishearth: sounds like you're doing everything right

[00:35:22.0000] <annevk>
Manishearth: I need to update XMLHttpRequest to use the new term "referrer source" and Fetch stylesheets likely don't load due to scheme-relative URLs

[00:35:56.0000] <Manishearth>
annevk: How do I get the CSS to work, though?

[00:36:03.0000] <Manishearth>
ah

[00:36:11.0000] <Manishearth>
so the css will be there for XHR

[00:36:14.0000] <annevk>
Manishearth: we could update the URLs to say https explicitly

[00:37:10.0000] <annevk>
MikeSmith: https://www.w3.org/Bugs/Public/show_bug.cgi?id=23646#c48 spam (not just comments, also altering URL field)

[00:37:47.0000] <annevk>
MikeSmith: due to mailing list integration that spam also reached www-international: http://lists.w3.org/Archives/Public/www-international/2014OctDec/0154.html and http://lists.w3.org/Archives/Public/www-international/2014OctDec/0155.html

[00:39:49.0000] <MikeSmith>
annevk: lookin now

[00:40:40.0000] <Manishearth>
annevk: any idea how to get internal cross-referencing to work on the html spec?

[00:40:53.0000] <Manishearth>
multipage

[00:41:03.0000] <Manishearth>
I did a recursive wget

[00:41:04.0000] <annevk>
Manishearth: from XMLHttpRequest?

[00:41:49.0000] <Manishearth>
no, html

[00:42:26.0000] <Manishearth>
aha, fragment-links.js

[00:42:57.0000] <annevk>
Manishearth: Hixie has a bunch of custom scripts

[00:43:22.0000] <annevk>
Manishearth: that is what we scrape in some manner, yes

[00:43:31.0000] <MikeSmith>
annevk: thanks for the heads-up -- marked those messages as spam and banned in bugzilla (thankfully looks like he/she only changed that one bug)

[00:44:15.0000] <annevk>
nice

[00:44:39.0000] <annevk>
Manishearth: it's not entirely clear to me what you are trying to do, but I guess you found something that works :-)

[00:46:28.0000] <Manishearth>
annevk: I'm trying to have a local copy of multipage (singlepage too slow)

[00:46:32.0000] <Manishearth>
For the flight

[00:48:30.0000] <annevk>
Manishearth: I see, I guess we should start writing a service worker script for these so going forward nobody has to resort to hacks

[00:48:52.0000] <Manishearth>
heh

[00:51:36.0000] <Manishearth>
annevk: I have a list of steps, anywhere they can go?

[01:31:11.0000] <annevk>
Manishearth: WHATWG Wiki?

[01:33:55.0000] <Manishearth>
annevk: okay, sure

[01:36:18.0000] <Manishearth>
annevk: account please? :)

[02:21:19.0000] <annevk>
Manishearth: you don't have one? Oh, email and desired username please, through /msg or here is fine

[06:14:26.0000] <MikeSmith>
in Nightly there's no user option I can set to enable MessageChannel?

[06:14:38.0000] <MikeSmith>
Firefox Nightly I mean

[06:17:02.0000] <MikeSmith>
caniuse claims there's a dom.messageChannel.enabled but I don't see it in about:config

[06:17:35.0000] <MikeSmith>
ah I guess I need to manually add it

