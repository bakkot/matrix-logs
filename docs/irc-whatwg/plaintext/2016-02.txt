2016-02-01
[22:13:23.0000] <Domenic>
philipj: are you hoping to finish up HTMLMediaElement.prototype.play() soon?

[22:19:58.0000] <philipj>
Domenic: yep, was planning to keep hammering at it today. the error handling situation is a bit of a mess, though

[22:20:47.0000] <philipj>
as in, a decode error is the reason that currentTime won't be progressing, but paused is still false, and if you seek to elsewhere, we'll start playing

[22:21:24.0000] <Domenic>
I tend to think getting something in sooner would be nice, and straighten out the problems later, but happy to leave that up to you

[22:30:55.0000] <philipj>
Domenic: I'll comment on the issue before OED

[22:30:57.0000] <philipj>
EOD

[00:09:21.0000] <botie>
Ms2ger, at 2016-01-29 22:58 UTC, miketaylr said: we have some reftests in moz-central, but no wpt yet for webkitcssmatrix -- i have plans to work on that (it's unclear if we can just port Apple's, IANAL). also on PTO until tuesday, but probably will end up on irc at some point between now and then and at

[00:09:22.0000] <botie>
2016-01-29 23:01 UTC, miketaylr said: s/reftests/mochitests/

[02:56:48.0000] <philipj>
Domenic: if you want to review https://github.com/foolip/html/commits/play-promise-tinkering that'd be nice

[04:29:53.0000] <annevk>
FWIW: https://blog.whatwg.org/github

[04:30:25.0000] <annevk>
wanderview: JakeA: any ETA on that review?

[04:34:23.0000] <JakeA>
annevk: aiming for today. First day back, got some meetings, then I can do real stuff

[04:34:32.0000] <JakeA>
Sorry it's taken so long :(

[04:35:48.0000] <annevk>
It's cool, just trying to figure out what I should work on

[06:18:02.0000] <MikeSmith>
wanderview: http://stackoverflow.com/questions/35125710/gcm-equivalent-for-firefox "Can Firefox Browser Extensions interact with service workers?"

[06:19:01.0000] <wanderview>
MikeSmith: currently, extensions cannot us service workers directly

[06:19:48.0000] <MikeSmith>
wanderview: OK, I think the same is also true of Chrome extensions

[06:20:07.0000] <wanderview>
MikeSmith: I thought they did allow them to interact in some way

[06:20:17.0000] <wanderview>
but JakeA would know better

[06:20:26.0000] <MikeSmith>
ah OK

[06:21:00.0000] <smaug____>
I'm all for https://github.com/whatwg/dom/pull/120 (note, github UI really sucks. random discussions in pull requests or in issues or elsewhere), but does anyone recall why we originally added DOMTokenList and DOMSettableTokenList

[06:22:02.0000] <nox>
smaug____: Would using Reviewable help?

[06:22:22.0000] <Ms2ger>
smaug____, I guess because className already existed?

[06:22:40.0000] <nox>
className?

[06:22:44.0000] <smaug____>
Ms2ger: but why those two interfaces ?

[06:23:25.0000] <Ms2ger>
Not sure

[06:23:44.0000] <Ms2ger>
I think Hixie was rather more fond of PutForwards than everyone else

[06:24:22.0000] <smaug____>
oh, sure, I have PutForwards. horrible horrible thing. But that doesn't still explain why we needed two interfaces

[06:24:27.0000] <smaug____>
s/have/hate/

[06:37:03.0000] <wanderview>
roc: I was just expressing a personal opinion... I don't think anyone has said sql is actually happening

[06:42:54.0000] <nox>
What's horrible about PutForwards?

[07:00:00.0000] <annevk>
nox: I think some people don't like that you can set a property to more values than it returns

[07:00:27.0000] <nox>
More values than it returns?

[07:00:54.0000] <annevk>
More value types, or really a different type I suppose in most cases

[07:01:20.0000] <nox>
Oh I see.

[07:11:56.0000] <smaug____>
no foolip

[07:12:15.0000] <smaug____>
philipj perhaps?

[07:12:31.0000] <philipj>
smaug____: yes, I'm philipj here because I'm also on #blink

[07:12:51.0000] <smaug____>
oh, nm, this is old test. I thought you had written, but no

[07:13:00.0000] <smaug____>
https://github.com/w3c/web-platform-tests/blob/master/html/semantics/embedded-content/the-canvas-element/2d.getcontext.extraargs.html#L22

[07:13:08.0000] <smaug____>
which is very much against the current spec

[07:13:39.0000] <Ms2ger>
Yeah, that'd be Philip`

[07:13:43.0000] <philipj>
smaug____: nope, I haven't written any canvas tests :)

[07:13:59.0000] <smaug____>
browser handle the params to getContext in various different ways

[07:14:28.0000] <philipj>
smaug____: yes, did you see https://github.com/whatwg/html/issues/595 ?

[07:15:05.0000] <smaug____>
I did

[07:15:44.0000] <smaug____>
oh, not the latest comments there

[07:17:14.0000] <JakeA>
MikeSmith: our plan is to move away from background pages and instead to service workers

[07:18:46.0000] <MikeSmith>
JakeA: oh, didn't actually know that background pages were still a thing. (I've never actually written a Chrome extension.)

[07:18:56.0000] <smaug____>
how do I quote someone in github comments?

[07:19:44.0000] <MikeSmith>
smaug____: select that you want to quote and type "r"

[07:20:23.0000] <MikeSmith>
or just manually copy-paste it and prefix it with ">" (as in e-mail or whatever)

[07:21:13.0000] <annevk>
play() \o/

[07:21:19.0000] <smaug____>
r

[07:21:23.0000] <smaug____>
what does that r mean

[07:21:27.0000] <ondras>
"r"eply

[07:21:32.0000] <smaug____>
ahaa

[07:21:38.0000] <ondras>
/me guesses

[07:31:54.0000] <JakeA>
annevk: While I remember, here's me explaining why scoped stylesheets aren't often useful for progressive rendering as CSS loads https://www.w3.org/Bugs/Public/show_bug.cgi?id=27303#c36

[07:33:05.0000] <annevk>
JakeA: ta, https://github.com/whatwg/html/issues/552#issuecomment-178022424

[07:33:57.0000] <JakeA>
annevk: and our intent to implement parser blocking on <link> https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/ZAPP8aTnyn0

[07:34:22.0000] <JakeA>
um, link[rel=stylesheet] specifically

[08:06:31.0000] <annevk>
Domenic: so reviewing the internal method stuff a bit closer, I think the recursive property lookup fault is in quite a few places

[08:07:08.0000] <annevk>
Domenic: so I guess the GetOwnProperty stuff needs to be more complicated

[08:08:49.0000] <annevk>
Although I guess browsers do expose them as own properties so something needs changing there somehow

[08:10:06.0000] <annevk>
*sigh*

[08:21:05.0000] <Domenic>
annevk: "recursive property lookup fault"?

[08:21:20.0000] <Domenic>
Note that GOP is *own* only so it shouldn't go up the prototype chain

[08:21:30.0000] <annevk>
Domenic: right, that's the problem

[08:21:40.0000] <annevk>
Domenic: most of the properties will be defined on the prototype

[08:22:12.0000] <annevk>
Domenic: although I think in the cross-origin case we pretend they're on the object

[08:22:26.0000] <annevk>
Domenic: but we still need to get the actual function (that we then wrap) from the prototype

[08:22:35.0000] <Domenic>
hmm i see

[08:22:48.0000] <annevk>
Domenic: that we also overwrite [[GetPRototypeOf]] and need to undo that temporarily makes this even trickier

[08:23:39.0000] <Domenic>
What is a concrete example of where this is a problem?

[08:24:02.0000] <annevk>
Domenic: crossOriginLocation.href = "x"

[08:24:30.0000] <annevk>
Domenic: I don't think we'll ever find "href" with the current set of definitions

[08:24:50.0000] <Domenic>
hmm

[08:24:52.0000] <Domenic>
tracing

[08:25:21.0000] <Domenic>
"Return CrossOriginSet(this, W, P, V, Receiver)" what is W?

[08:25:23.0000] <annevk>
And similar for window. console.log(crossOriginWindow.closed)

[08:25:33.0000] <annevk>
Domenic: the Window object

[08:25:35.0000] <Domenic>
I see, defined non-locally

[08:25:52.0000] <annevk>
I copied that from your window-proxy thing, happy to change

[08:26:04.0000] <Domenic>
Huh yeah I wonder why I did that

[08:26:12.0000] <Domenic>
Probably best to inline the step let W be ... in each

[08:26:56.0000] <annevk>
I'll file an issue, feel too tired to work on this

[08:27:07.0000] <annevk>
/me tries to write a summary of the custom elements and service workers stuff

[08:27:41.0000] <annevk>
/me ends up writing about rniwa's ability to estimate how much gas there is beyond 0

[08:27:50.0000] <Domenic>
I'm confused why CrossOriginSet step 2 looks at O

[08:27:57.0000] <Domenic>
isn't O the proxy itself?

[08:28:07.0000] <Domenic>
So that will just recurse infinitely

[08:28:30.0000] <annevk>
Domenic: it does that to take into account the limitations set by the proxy

[08:28:54.0000] <Domenic>
but it's still an infinite loop

[08:29:27.0000] <annevk>
GetOwnProperty at some point invokes the W variant, no?

[08:29:56.0000] <Domenic>
Only if IsSameOrigin

[08:30:02.0000] <Domenic>
Oh wait

[08:30:35.0000] <annevk>
Yeah, the O there is W

[08:30:36.0000] <Domenic>
I see, nevermind

[08:30:39.0000] <annevk>
little confusing I guess

[08:42:33.0000] <Krinkle>
Hm.. how is showNotification() a storage API?

[08:42:37.0000] <Krinkle>
https://storage.spec.whatwg.org/#introduction

[08:42:45.0000] <Krinkle>
/me is ready for a horrible hack

[08:43:03.0000] <Domenic>
Krinkle: notification tags can store like 640k of data I believe

[08:43:14.0000] <Krinkle>
And they can be retrieved?

[08:43:37.0000] <Domenic>
not sure... they can certainly be stored

[08:44:14.0000] <Domenic>
getNotifications

[08:44:30.0000] <Krinkle>
So one would presumably store an unshown notif with data

[08:44:31.0000] <Domenic>
maybe it's a tag => title map

[08:44:36.0000] <Krinkle>
omg

[08:44:38.0000] <Krinkle>
Neat

[08:47:43.0000] <annevk>
They have a data member that basically takes a structured cloneable

[08:47:48.0000] <annevk>
clonable?

[09:03:06.0000] <JakeA>
annevk: irccloud isn't giving me enough context, can you throw me that review link again?

[09:03:19.0000] <annevk>
Apparently https://github.com/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+bug%22+user%3Awhatwg is a 404 if you're not logged into GitHub?

[09:03:32.0000] <annevk>
JakeA: https://github.com/whatwg/fetch/pull/194

[09:03:39.0000] <JakeA>
ta

[09:04:52.0000] <Domenic>
annevk: it might be a 404 for anyone not in the org....

[09:06:31.0000] <Domenic>
i made all the labels light green

[09:07:34.0000] <annevk>
Domenic: oooh that would suck

[09:08:49.0000] <annevk>
Domenic: would https://github.com/issues?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+label%3A%22good+first+bug%22+whatwg work better?

[09:09:06.0000] <annevk>
Someone here not in the WHATWG org that could check these links?

[09:09:27.0000] <Domenic>
annevk: that loses a few bugs, i wonder why

[09:10:08.0000] <annevk>
org:whatwg seems to put them back

[09:10:22.0000] <annevk>
Anyway, we need an outsider to help

[09:14:44.0000] <nox>
annevk: Checking in another channel.

[09:15:22.0000] <nox>
annevk: Not 404.

[09:15:28.0000] <nox>
GH bug it seems.

[09:17:18.0000] <annevk>
ok

[10:59:50.0000] <JakeA>
annevk: request's redirect mode is not "manual" and response's type is "opaqueredirect" …network error - out of curiosity, why is this?

[11:02:46.0000] <wanderview>
JakeA: it used to say if request is not a navigation and response type i opaqueredirect... he changed it to reference manual so it worked for fetch() with manual mode

[11:03:45.0000] <JakeA>
wanderview: but returning a Response.redirect(…) is fine, so I'm trying to figure out why allowing an opaque response isn't

[11:04:33.0000] <wanderview>
I don't know

[11:18:29.0000] <annevk>
JakeA: unclear how that should work without revealing stuff to the SW

[11:18:55.0000] <annevk>
Very different from synthetic case

[11:21:47.0000] <JakeA>
annevk: I suppose the skip-service-worker flag could be set, but it's not clear what the benefit would be.

[11:21:50.0000] <JakeA>
Ta!

[12:02:06.0000] <Philip`_>
smaug____: If I wrote incorrect canvas tests nine years ago, please feel free to fix them :-)

[12:05:52.0000] <smaug____>
Philip`_:  (hmm, I use ` super rarely on Finnish keyboard ;))  this is about https://github.com/whatwg/html/issues/595 and https://bugzilla.mozilla.org/show_bug.cgi?id=1244480 and https://codereview.chromium.org/795833004

[12:06:06.0000] <smaug____>
trying to figure out why such test was ever added

[12:14:25.0000] <Philip`_>
smaug____: Between February 2010 and September 2010, the spec changed to say about getContext('2d'): "Any additional arguments are ignored"

[12:14:55.0000] <Philip`_>
smaug____: so I added the test for that

[12:16:38.0000] <smaug____>
Philip`_: do you happen to know why the "any additional arguments are ignored" was added?

[12:16:52.0000] <smaug____>
then then I now wonder why it was removed

[12:17:00.0000] <smaug____>
since the current spec requires different behavior

[12:21:36.0000] <Philip`_>
smaug____: I can probably find some clues in a git blame on the spec, but it's taking a while to run...

[12:21:45.0000] <Philip`_>
smaug____: That old text is still in https://www.w3.org/TR/2dcontext/ , by the way

[12:32:11.0000] <Domenic>
Is anyone else seeing wattsi-server slowdowns? Especially for the second request?

[12:32:34.0000] <Philip`_>
smaug____: https://github.com/whatwg/html/commit/5c67e57237723708e5a70e06dbf6da0d4f659600/source - hmm, not actually that helpful

[12:32:57.0000] <smaug____>
Philip`_: do you happen to recall why "Any additional arguments are ignored." was added?

[12:33:33.0000] <smaug____>
ah, that

[12:33:44.0000] <Philip`_>
smaug____: If I remember correctly, WebIDL said that extra arguments to a function without "any..." would get ignored, so that phrase was just clarifying that the behaviour would stay the same after that commit added the "any..."

[12:34:32.0000] <Philip`_>
smaug____: Maybe WebGL wanted support for extra getContext arguments, which is why the "any..." was added? (but 2d didn't need to use them)

[12:35:05.0000] <smaug____>
perhaps that

[12:35:22.0000] <smaug____>
and when 2d started to use 2nd argument too, the spec was changed

[12:35:30.0000] <smaug____>
but test wasn't updated

[12:36:29.0000] <Philip`_>
smaug____: I have very vague memories that that test always failed in Firefox because it had some proprietary extension using the second argument

[12:37:24.0000] <Philip`_>
/me could be totally wrong though, it was a long time ago :-p

[12:38:30.0000] <smaug____>
it wasn't failing until I made the Gecko to follow the spec

[12:38:44.0000] <smaug____>
perhaps it was failing long ago though

[12:40:27.0000] <smaug____>
but now I'm trying to figure out what the spec should say, or whether spec is actually just fine and some browsers need to update their implementation

[12:40:45.0000] <Philip`_>
Ah, probably more likely that I'm just totally wrong

[12:42:26.0000] <Philip`_>
/me no longer has any opinions on spec design

[13:04:35.0000] <gsnedders>
Philip`_: pff, you should go back to having opinions!

[13:10:35.0000] <Philip`_>
gsnedders: I suspect I'd first have to catch up with years of politics to even understand how many versions of specs there are to have opinions on, and that sounds like hard work

[13:23:47.0000] <gsnedders>
Philip`_: I reappeared and it went okay.

[13:51:43.0000] <jgraham>
https://tech.ebu.ch/news/2016/01/timed-text-subtitling-receives-e

[13:51:53.0000] <jgraham>
Mainly for the picture

[14:34:07.0000] <jsbell>
wanderview: can I pester you for some cache and indexeddb w-p-t reviews on critic? (not urgent but they've been lingering since december

[14:34:41.0000] <wanderview>
jsbell: yea, on my todo list... but I've been on PTO / dealing with moving my family... hope to get to it this week

[14:34:59.0000] <jsbell>
wanderview: thx!

[14:35:04.0000] <wanderview>
jsbell: one thought I had today is I should review that before switching our .add() and .addAll() to fail on !response.ok()

[14:35:11.0000] <wanderview>
since that will surely change the tests

[14:36:16.0000] <wanderview>
/me goes to dinner...

[14:39:23.0000] <zcorpan>
https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/ZAPP8aTnyn0 seems radical, and not how i had envisioned how it would work

[14:40:32.0000] <zcorpan>
i thought we would want to block the parser as little as possible

[14:41:54.0000] <zcorpan>
Does Edge really block the parser for external CSS?

[14:42:35.0000] <JakeA>
zcorpan: it blocks rendering, not sure if it blocks parsing

[14:43:38.0000] <zcorpan>
JakeA: ok. it should be possible to execute scripts with setTimeout to be able to tell the difference here

[14:44:46.0000] <zcorpan>
JakeA: and if it doesn't block parsing, would be interesting to know if it blocks layout or painting (though not sure how to test that)

[14:45:59.0000] <zcorpan>
i suppose it would need to block layout in order to not mess up earlier content (e.g. if you have a table and link to a stylesheet in the middle)

[14:46:47.0000] <zcorpan>
which is a way to test it, come to think of it

[14:47:44.0000] <JakeA>
zcorpan: doing layout seems pointless if there's a loading stylesheet which is likely to impact all of that

[14:48:03.0000] <zcorpan>
JakeA: yes

[14:48:50.0000] <JakeA>
I guess parsing could continue though. Mutation observers would be a good way to test too

[14:52:04.0000] <zcorpan>
yeah

[14:53:34.0000] <zcorpan>
it seems useful to evaluate the pros and cons of blocking parsing though. a big pro i assume is that it makes the architecture simpler, but it seems to me there may be many cases where it'll hurt perf

[14:55:12.0000] <zcorpan>
e.g. a page that has <script async><link rel=stylesheet><video src=x preload> means the video starts to load later

[14:59:24.0000] <Domenic>
Oh god why are these still up https://forums.whatwg.org/bb3/index.php

[14:59:28.0000] <Domenic>
what if someone uses them

[14:59:32.0000] <Domenic>
am i responsible for answering their questions

[15:00:43.0000] <zcorpan>
Domenic: i guess that's my responsibility, though i havne't looked at that since.... i dunno

[15:01:25.0000] <Domenic>
ok yes that is 100% your responsibility i am not sure how you came to that conclusion but i highly agree all yours yep imma go over here now

[15:01:54.0000] <zcorpan>
Domenic: haha

[15:02:27.0000] <zcorpan>
Domenic: it's really JAB Creations who deals with the forums in practice

[15:03:41.0000] <zcorpan>
i don't think it's a problem the forums exist, though i should go over it and have it point people to github instead of the mailing list etc


2016-02-02
[16:56:47.0000] <Domenic>
annevk: workers currently use "same-origin"? So they don't work cross origin at all??

[16:57:00.0000] <Domenic>
I think I'll just loosen that...

[17:11:33.0000] <Domenic>
this turns out to be something web developers are doing massive hacks to get around

[17:11:39.0000] <Domenic>
hosting .html files on a domain that postmessage back and forth

[17:11:48.0000] <Domenic>
i am happy with my decision to loosen this

[17:16:08.0000] <zcorpan>
Domenic: i would think this is something that has been discussed before. i don't recall off the top of my head but i think this is something that we'd allow at some point but there are some security things to consider, maybe for shared workers in particular

[17:16:22.0000] <Domenic>
yeah maybe i am getting overzealous here...

[17:16:36.0000] <Domenic>
i can probably manage not to for now

[19:48:17.0000] <MikeSmith>
beverloo: https://tools.ietf.org/id/draft-thomson-webpush-vapid-02.html doesn't define any requirements for UAs?

[19:51:44.0000] <MikeSmith>
beverloo: the interaction is strictly between a conforming Application Server being required to send a JWT to make use of the feature, and a conforming Push Service being required to act on that as specified?

[21:00:15.0000] <tripu>
mkwst, yt?

[22:50:20.0000] <annevk>
I think CORS workers might be fine, as long as they execute with the correct origin

[01:34:12.0000] <annevk>
So I'm guessing I need to update all the build script things to continue doing things?

[01:34:54.0000] <annevk>
Domenic: thank you for the review on cross-origin objects, much appreciated

[01:51:39.0000] <MikeSmith>
annevk: yeah, please start by pulling from the watssi repo and rebuilding it

[01:51:52.0000] <MikeSmith>
then the html-build repo

[01:54:43.0000] <MikeSmith>
though there's still a lot that needs to be done yet to eliminate the need to rebuild the cldr and entity stuff every single time

[01:55:24.0000] <MikeSmith>
But the state of master in both places is progress

[02:05:42.0000] <beverloo>
MikeSmith, there are two concepts in that draft

[02:05:51.0000] <beverloo>
(1) server authentication, which is between the application server and the push service

[02:06:17.0000] <beverloo>
and (2) subscription restriction (ne� subscription association), which uses the public key of said authentication to link a subscription to a certain application server

[02:06:34.0000] <annevk>
MikeSmith: what did you think of my suggestions in that thread?

[02:06:37.0000] <beverloo>
the UA implication of creating a subscription restriction is documented in 5.1, with the Crypto-Key header

[02:06:52.0000] <beverloo>
W3C PR is here: https://github.com/w3c/push-api/pull/182

[02:15:41.0000] <annevk>
Documented merge policy for Notifications API

[02:16:00.0000] <annevk>
Will slowly copy-and-paste that throughout repositories, it basically defers to whatwg/html TEAM

[02:21:12.0000] <JakeA>
Is it fair to say that the way <link rel="stylesheet"> blocks rendering until the sheet loads is totally undefined?

[02:23:54.0000] <beverloo>
annevk, thanks :) much more discoverable!

[02:28:06.0000] <annevk>
JakeA: rendering is mostly undefined

[02:28:18.0000] <annevk>
JakeA: we sorta defined when it can happen

[02:28:42.0000] <JakeA>
annevk: right, but I don't see anything that skips rendering if there's a pending stylesheet

[02:29:19.0000] <annevk>
Yeah I don't think that exists, stylesheet loading is also somewhat tricky due to media queries

[02:29:51.0000] <annevk>
We do define that <script>s are blocked based on stylesheets that need to load I think

[02:30:21.0000] <annevk>
Although you could implement that by halting script execution the moment script asks for something layouty, like getComputedStyle()

[02:30:41.0000] <annevk>
Script asking for something layouty is also not defined

[02:30:48.0000] <annevk>
I keep hoping zcorpan will get to that one day

[02:33:33.0000] <Ms2ger>
annevk, spec does say "feel free to stop blocking scripts at any time", though

[02:34:15.0000] <annevk>
That is not a literal quote it seems

[02:34:19.0000] <Ms2ger>
It is not :)

[02:34:41.0000] <Ms2ger>
Look for pending script-blocking stylesheet or something along those lines

[03:17:25.0000] <mounir>
heycam|away: ping

[04:20:35.0000] <annevk>
So now you can no longer annotate PDFs with signatures in Acrobat Reader unless you buy some pro option, what's a good alternative?

[04:28:12.0000] <annevk>
It seems I'm dumb and Preview can handle that perfectly fine still

[04:28:25.0000] <annevk>
So maybe I should just review Adobe software

[04:28:30.0000] <annevk>
s/review/remove/

[04:29:41.0000] <MikeSmith>
beverloo: thanksーit's interesting to finally see all the Push stuff becoming real

[05:14:05.0000] <MikeSmith>
annevk: which thread? > what did you think of my suggestions in that thread?

[05:15:12.0000] <annevk>
MikeSmith: https://github.com/whatwg/html-build/issues/62#issuecomment-177497253

[05:17:21.0000] <MikeSmith>
ah that yeah

[05:18:49.0000] <MikeSmith>
annevk: yeah I pretty much agree. It seems like we're really over-automating it all

[05:20:34.0000] <MikeSmith>
I think it makes sense to keep the existing build tooling that we have for generating the end results, but we can just periodically run it manually to see if anything's actually changed would cause a diff in the spec

[05:21:38.0000] <MikeSmith>
just eyeball it, and if we find that anything's changed, then as you said, somebody just opens a PR and somebody else reviews it, etc.

[05:22:09.0000] <annevk>
I'll see if I can make a suitable PR for the entity stuff

[05:22:15.0000] <MikeSmith>
OK

[05:22:26.0000] <annevk>
A proper fix for the CLDR stuff would involve new specification text I think

[05:22:41.0000] <MikeSmith>
yeah I guess so

[05:23:06.0000] <MikeSmith>
it's sort of moot since maybe nobody actually is even attempting to follow the spec on that

[05:23:25.0000] <MikeSmith>
but instead using whatever result they get from their own ICU integration

[05:23:32.0000] <MikeSmith>
and maybe not even that

[05:23:58.0000] <MikeSmith>
but the entities stuff is different, as you pointed out

[05:24:04.0000] <annevk>
that would be more or less what we require though

[05:24:38.0000] <MikeSmith>
so yeah I think re-wording the requirements along those lines would be an improvement

[05:24:59.0000] <MikeSmith>
and would address the "moving target" problem that philipj pointed out

[05:26:15.0000] <MikeSmith>
anyway the entities stuff more clearly has actual impact and I agree that we should not just be silently introducing changes to the spec from the build without noticing it

[05:26:56.0000] <MikeSmith>
or rather more like we should only be intentionally changing those requirements and never unintentionally

[05:27:30.0000] <MikeSmith>
well stated like that, it's true of anything in the spec of course

[05:27:35.0000] <MikeSmith>
but you know what I mean

[05:27:55.0000] <Ms2ger>
Are there other parts of the spec that change silently?

[05:28:24.0000] <MikeSmith>
good point

[05:28:29.0000] <MikeSmith>
yeah it doesn't actually happen

[05:29:16.0000] <MikeSmith>
in practice when we ran the entities build stuff and it actually resulted in a difference, we would notice

[05:30:02.0000] <MikeSmith>
and then we would decide whether to actually commit the resulting change or not

[05:42:34.0000] <beverloo>
MikeSmith, yes :) we're implementing it in both gcm and chrome

[05:42:50.0000] <beverloo>
Mozilla will adopt as well, which will bring our implementations completely in line

[05:43:19.0000] <MikeSmith>
super

[05:43:55.0000] <Ms2ger>
gcm?

[05:45:31.0000] <beverloo>
Google Cloud Messaging, our backend for the Push API

[05:54:23.0000] <annevk>
Oh my, trying to extract the entity stuff is harder than I thought

[05:54:33.0000] <annevk>
bash is not for me I think

[05:55:33.0000] <Ms2ger>
I don't think bash is for anyone

[06:00:14.0000] <MikeSmith>
sure it is

[06:00:24.0000] <MikeSmith>
that's what TimBl said at the Olympics

[06:00:29.0000] <annevk>
So it's not even clear to me what we want to do here

[06:00:33.0000] <MikeSmith>
"Bash is for everyone"

[06:00:42.0000] <annevk>
We could store unicode.xml, we could just store the output of that

[06:01:02.0000] <MikeSmith>
we just need the output of it

[06:01:19.0000] <MikeSmith>
we don't need to store unicode.xml

[06:01:35.0000] <annevk>
Yeah, I think we want some kind of build-entities.sh script

[06:01:40.0000] <annevk>
And put that in whatwg/html

[06:01:57.0000] <annevk>
And store the final entity files in whatwg/html too

[06:02:14.0000] <annevk>
And remove everything from html-build except for merging those entity files into the final output

[06:03:20.0000] <annevk>
Does that make sense? That way entities and any changes to them become version controlled and whenever someone wants to change them you just run the build-entities.inc script and create a PR for that

[06:05:08.0000] <Ms2ger>
That sounds reasonable

[06:05:32.0000] <MikeSmith>
I agree we whould put the output in whatwg/html under version control

[06:05:59.0000] <MikeSmith>
but I suspect that Domenic would say that we don't want build scripts in the html repo

[06:06:22.0000] <MikeSmith>
and I pretty much agree with that

[06:06:43.0000] <nox>
Ms2ger: Like JS? :3

[06:06:51.0000] <nox>
(That bash isn't for anyone.)

[06:07:06.0000] <Ms2ger>
No comment

[06:07:27.0000] <annevk>
MikeSmith: I guess we can put the actual script in html-build

[06:07:57.0000] <MikeSmith>
annevk: yeah, and it can write the output back to the html repo

[06:08:05.0000] <MikeSmith>
if we want to do it that way

[06:08:09.0000] <annevk>
MikeSmith: yeah

[06:10:51.0000] <annevk>
MikeSmith: you know, I'll give it a go and I'll keep asking questions here

[06:11:33.0000] <MikeSmith>
good plan

[06:13:01.0000] <nox>
Ms2ger: Hah.

[06:33:29.0000] <annevk>
MikeSmith: how does entities-dtd.url end up in the HTML standard?

[06:33:56.0000] <annevk>
MikeSmith: I have a somewhat standalone bash script now that generates all these files (though not super clean yet), but I'm not sure how to hook up the pieces

[06:40:12.0000] <annevk>
I think I found it, pre-process-main.pl does some magic

[06:40:51.0000] <annevk>
Pfff

[06:41:22.0000] <MikeSmith>
yeah that

[06:46:15.0000] <Domenic>
JakeA: what is a URI? :( :( :(

[06:46:46.0000] <nox>
Domenic: An amputated URL.

[06:46:59.0000] <JakeA>
Domenic: I went with the wording in document.baseURI

[06:47:05.0000] <jgraham>
It's a URL that says "I hang out with Roy"

[06:47:33.0000] <Domenic>
JakeA: legacy API boo

[06:48:00.0000] <annevk>
Ah, I need to consistently annotate those with [sic] just like we do with Referer

[06:48:34.0000] <annevk>
Folks keep copying from that pattern rather than something like new URL()

[06:49:15.0000] <JakeA>
Domenic: ah, had no idea it was legacy. What's the non-legacy version?

[06:50:46.0000] <Domenic>
JakeA: oh there's no replacement. Just it is a legacy name.

[07:02:49.0000] <annevk>
But yeah, the HTML standard calls this the "base URL"

[07:03:39.0000] <annevk>
I still think it would be super weird if service workers ended up with a different answer there from the rest of the platform, although that redirect case you pointed out is interesting (and probably a security bug)

[07:03:51.0000] <ondras>
hmm, is it possible to extend an ES6 class using ES5 syntax, i.e. class Parent {}; var Child = function() { Parent.call(this, throws); } ?

[07:05:49.0000] <Domenic>
ondras: no

[07:06:23.0000] <ondras>
Domenic: okay, and via Reflect.construct ?

[07:06:54.0000] <Domenic>
ondras: pretty sure still no, but maybe there is a clever hack

[07:07:14.0000] <ondras>
Domenic: okay, thanks

[07:10:22.0000] <Domenic>
annevk: @fetchstandard should retweet https://twitter.com/webkit/status/694536332941627393

[07:10:49.0000] <Domenic>
Also http://trac.webkit.org/changeset/195954 "reviewed by Darin Adler"

[07:15:36.0000] <JakeA>
annevk: I don't think it's as simple as that. Firefox may use response.url as the base for pages, but that's not in the spec, and SW is the first time it matters vs request.url

[07:16:18.0000] <JakeA>
annevk: fwiw, developers seem to be thinking of the SW as a server, so they're happy for even CSS to get the base of the request url in SW responses :/

[07:16:20.0000] <annevk>
JakeA: I suspect Firefox doesn't actually do that, I'm just saying that you can explain the entire platform today through that behavior

[07:16:47.0000] <annevk>
JakeA: that was the original argument, but we wanted fetch() to be a no-op

[07:17:34.0000] <JakeA>
annevk: yeah, surprised that devs don't seem to want that. Going to make sure those that run large SW projects chime in (eg Guardian, who rely on pass-through fetch)

[07:21:46.0000] <annevk>
I'm somewhat uncomfortable by the way we seem to go about deciding this

[07:22:09.0000] <annevk>
E.g., a proxy server cannot trigger dialogs either, should we remove the window feature?

[07:22:15.0000] <annevk>
What about mixed content?

[07:22:47.0000] <annevk>
I really wish it was a bit more principled rather than ad-hoc

[07:47:31.0000] <annevk>
MikeSmith: supplied PRs

[07:48:36.0000] <annevk>
MikeSmith: Domenic: I tested it locally and it seems to work fine

[09:34:11.0000] <annevk>
philipj: Domenic: downloading here is nearly instant... generating is what you call slooow

[09:34:42.0000] <annevk>
philipj: Domenic: maybe because of my 2012 MacBook Air, I guess you both might have a Pro?

[09:35:26.0000] <Domenic>
annevk: there are two kinds of generating... the initial "building the database" from unicode.xml, and the creation of the .inc and .xml files

[09:35:49.0000] <Domenic>
I think currently it does unicode.xml -> database -> { .inc, .json, .url }, with the first arrow being slow

[09:36:02.0000] <Domenic>
If we turned it into .json -> { .inc, url } that should be fast

[09:36:12.0000] <Domenic>
(with a precomutation of unicode.xml -> database -> .json)

[09:37:03.0000] <annevk>
Hmm, I'm not super happy on spending much more time on this, but if you both are...

[09:39:49.0000] <annevk>
I see your point of view about source of truth though, but that would mean we should check in unicode.xml rather than the output of our scripts

[09:40:01.0000] <annevk>
Otherwise you're always somewhere in the middle

[09:42:37.0000] <Domenic>
it depends... I think it would be OK to check in entities.json and then have a update-entities-json that pulls in unicode.xml. That will generate readable entities.json diffs

[10:03:22.0000] <Domenic>
All right, you guys didn't exactly thrill me with your brainstorming last time, but what's a good example of a module worker. Basically, what's a good example of a small worker that might need to call out to a library.

[10:04:50.0000] <annevk>
Domenic: some networking worker that imports a library from a service?

[10:06:04.0000] <annevk>
import starwars; starwars.findAll("rey").then(...)

[10:07:56.0000] <Domenic>
seems reasonable, i can work with that

[10:08:19.0000] <igrigorik>
annevk: would love to hear your thoughts on https://github.com/w3c/preload/issues/55 < getting lots of inbound pings from developers asking for this.

[10:09:10.0000] <annevk>
igrigorik: expose more Fetch parameters?

[10:10:07.0000] <annevk>
igrigorik: the alternative would be that "as" doesn't map to "type", but that it maps to "initiator" and we just add a bunch of stuff there

[10:10:53.0000] <annevk>
igrigorik: worker/sharedworker should be "script" though I think

[10:12:52.0000] <igrigorik>
re-reading through the spec.. I guess extending initiator would do the trick. although I'm not entirely clear on difference between initiator and type?

[10:21:37.0000] <annevk>
igrigorik: type is a category

[10:21:48.0000] <annevk>
igrigorik: initiator is ideally a single thing

[10:21:57.0000] <annevk>
igrigorik: though it's also a bit of a hack, see https://github.com/whatwg/fetch/issues/93

[10:29:05.0000] <smaug____>
Any googlers with good contacts to AdSense team?

[10:34:13.0000] <igrigorik>
annevk: ah, right.. trying to page that discussion back into my head.

[10:34:29.0000] <igrigorik>
annevk: http://output.jsbin.com/teyede < wdyt?

[10:35:57.0000] <annevk>
I think we should only have initiator

[10:36:39.0000] <annevk>
But for <object> that becomes a little weird

[10:36:49.0000] <annevk>
Is the <a> that targets it the initiator?

[10:36:56.0000] <igrigorik>
agreed, I just added new column so we can compare, we definitely don't need both

[10:37:10.0000] <annevk>
Same for <iframe> and such

[10:37:23.0000] <annevk>
That's why we added the destination column

[10:42:39.0000] <igrigorik>
yeah, except destination doesn't help the preload use case.. I'm thinking we can just split the initiator further -- e.g. break object/embed apart, and give iframe/frame their own?

[10:51:13.0000] <igrigorik>
annevk: another attempt @ https://docs.google.com/spreadsheets/d/1YXoso_Vm0tCuGjFxNmD70UlQd87PKIgGBM97DG9E2L0/edit#gid=0 (easier to iterate on it in a spreadsheet :))

[10:59:06.0000] <igrigorik>
annevk: if that looks ~reasonable, I can PR it.

[11:00:10.0000] <wanderview>
jsbell: I think I reviewed something in critic...

[11:01:10.0000] <jsbell>
That's how much confidence I have in my use of critic too

[11:07:39.0000] <wanderview>
jsbell: any thoughts on when the .add() and .addAll() changes might happen in blink?

[11:09:21.0000] <jsbell>
wanderview: which specifically? (sorry, I haven't been thinking about SW/Cache at all lately)

[11:09:42.0000] <wanderview>
jsbell: making them reject if any response.ok() returns false

[11:09:56.0000] <wanderview>
to prevent 40x and 50x responses getting cached

[11:09:57.0000] <jsbell>
ah, right. checking...

[11:17:14.0000] <jsbell>
wanderview: not even finding a tracking bug on that. :P Seems easy though. (aside; need to ensure the JakeA -> crbug pipeline is unclogged)

[11:19:37.0000] <jsbell>
wanderview: crbug.com/583407 I'll try and bash that out

[11:36:43.0000] <annevk>
igrigorik: I guess the problem is that those are not the actual initiators

[11:36:54.0000] <annevk>
igrigorik: e.g., often it would be <a> or <form>

[11:38:34.0000] <wanderview>
jsbell: I'm going to try to get it in FF45 which releases mid-March...  want to minimize chance people start using opaque responses a lot in their caches

[11:45:19.0000] <igrigorik>
annevk: current definition doesn't seem to address that either though, right?

[11:45:53.0000] <smaug____>
anyone seen rniwa?

[11:46:29.0000] <igrigorik>
annevk: or, I guess <a> would fall under "HTML's navigate algorithm" row?

[11:49:04.0000] <annevk>
igrigorik: <a> and <form> are navigate

[11:49:13.0000] <annevk>
igrigorik: as is <iframe src>

[11:49:20.0000] <annevk>
igrigorik: <object src> is ambiguous

[11:50:08.0000] <annevk>
<a> targeted at <object> is ambiguous (may or may not work, depending on what mode <object> is in)

[11:53:42.0000] <igrigorik>
right, ok. so, perhaps "initiator" is not the right tool for the job here then?

[11:54:58.0000] <annevk>
yeah, several axes might be the way to go after all

[11:55:07.0000] <annevk>
axis?

[11:58:21.0000] <igrigorik>
hmm, what if we "refined" destination? https://docs.google.com/spreadsheets/d/1YXoso_Vm0tCuGjFxNmD70UlQd87PKIgGBM97DG9E2L0/edit#gid=0 (reload)

[12:01:44.0000] <annevk>
that seems more reasonable, basically splitting subresource

[12:01:59.0000] <annevk>
well, and unknown

[12:05:29.0000] <igrigorik>
yep. should I take a run at a PR?

[12:08:13.0000] <annevk>
igrigorik: I think it would be good to start with an issue to get feedback from the people that helped design type/destination

[12:08:34.0000] <annevk>
igrigorik: I'd like to hear what ehsan and sicking think

[12:08:43.0000] <annevk>
igrigorik: issue + PR is fine too though

[12:08:52.0000] <igrigorik>
sgtm, on it.

[12:09:27.0000] <jsbell>
wanderview: merged!

[12:09:34.0000] <wanderview>
thanks!

[12:09:36.0000] <jsbell>
now AFK

[12:09:54.0000] <wanderview>
jgraham_: can you let me know when we next merge wpt to gecko?

[12:10:06.0000] <jsbell>
(the indexeddb test fixes should be much simpler)

[12:21:20.0000] <annevk>
igrigorik: quite a neat solution I think

[12:21:32.0000] <annevk>
igrigorik: hopefully that feeling remains 😃

[12:35:18.0000] <jgraham_>
wanderview: Is that a request? I can kick it off now if you like

[12:45:43.0000] <wanderview>
jgraham_: if its not too inconvenient... I have a bug I want to implement soon, but I'd like to base it on top of jsbell's test changes

[12:45:51.0000] <wanderview>
tomorrow is fine too

[12:48:55.0000] <Domenic>
worker modules \o/

[12:52:04.0000] <jsbell>
wanderview; will you fail everything in an addAll batch if any response is !ok?

[12:52:21.0000] <wanderview>
jsbell: I thought that was the intention

[12:52:34.0000] <jsbell>
wanderview: I'm still parsing the discussion

[12:52:39.0000] <wanderview>
jsbell: I guess we could clarify with JakeA (but I hear he is at the pub)

[12:54:42.0000] <jsbell>
wanderview: implication, then, is that everything is delayed until we have headers back on all of them, which is a bit of a bummer, but I suppose you can just add() in a loop instead if you want speed.

[12:55:31.0000] <wanderview>
jsbell: we already need that in order to do the "reject if an entry matches an earlier entry in the same addAll()" because matching requires vary header stuff

[12:58:15.0000] <jsbell>
wanderview: ... right. Okay, and we already do wait in our code. So ignore me, carry on. :)

[12:59:09.0000] <wanderview>
jsbell: while you are looking at it... do you guys do the "incumbent record" stuff that lets .match() read a response whose body is till being written to disk?

[12:59:17.0000] <wanderview>
my impression is no one implements that yet

[13:04:38.0000] <jsbell>
wanderview: so far as I can tell, no - we wait for the content to be fully streamed into the cache before we execute the next cache operation (e.g. match)

[13:04:55.0000] <wanderview>
ok, thanks

[13:05:01.0000] <jsbell>
its a maze of twisty callbacks all alike, so I may have missed something

[13:05:13.0000] <wanderview>
we allow matches to continue, but don't commit the .put() or .add() until the body is completely there

[13:05:39.0000] <wanderview>
jsbell: JakeA has a cache transaction proposal to fix compat on that issue

[13:05:41.0000] <jsbell>
our cache doesn't have fancy transaction semantics

[13:06:09.0000] <wanderview>
we don't have fancy transactions either... but we store the body in flat files, so we don't touch the underlying DB until its fully on disk

[13:42:58.0000] <jsbell>
wanderview: FYI, add/addAll !ok test changes: https://codereview.chromium.org/1664473002/diff/1/third_party/WebKit/LayoutTests/http/tests/cachestorage/script-tests/cache-add.js?context=10&column_width=80&tab_spaces=8

[13:43:41.0000] <wanderview>
thanks

[13:50:17.0000] <heycam>
mounir: pong

[13:55:56.0000] <jgraham_>
wanderview: It can take a while for upgrades to get the minimum of two required try runs, so if I start now it may or may not be done by tomorrow

[13:56:28.0000] <wanderview>
jgraham_: that would be fine... whatever is convenient for you... if it waits another day its not a crisis

[13:59:36.0000] <wanderview>
jsbell: what are you rejecting addAll() with for !ok()?

[14:50:01.0000] <jsbell>
wanderview: TypeError

[15:11:07.0000] <MikeSmith>
annevk: looking at build PRs now


2016-02-03
[23:06:45.0000] <MikeSmith>
well that's weird

[23:07:14.0000] <MikeSmith>
$ git fetch

[23:07:15.0000] <MikeSmith>
fatal: Cannot fetch both refs/pull/610/head and refs/heads/pr/610 to refs/remotes/origin/pr/610

[23:11:08.0000] <MikeSmith>
botie, inform Ms2ger seems like the "pr/610" branch you created conflicts with the existing name that git creates for anybody who has followed https://github.com/whatwg/html/blob/pr/610/TEAM.md#fetching-and-reviewing-pull-requests-from-forks to set up automatic fetch of branches for PRs from forks

[23:16:12.0000] <MikeSmith>
botie, inform Ms2ger seems like the "pr/610" branch you created conflicts with the existing name that git creates for anybody who has followed https://github.com/whatwg/html/blob/pr/610/TEAM.md#fetching-and-reviewing-pull-requests-from-forks to set up automatic fetch of branches for PRs from forks

[23:16:13.0000] <botie>
will do

[23:21:36.0000] <MikeSmith>
botie, inform Ms2ger if you rename that branch I think that will fix the problem

[23:21:36.0000] <botie>
will do

[00:44:52.0000] <annevk>
philipj: thanks for the review

[00:52:53.0000] <botie>
Ms2ger, at 2016-02-03 07:17 UTC, MikeSmith said: seems like the "pr/610" branch you created conflicts with the existing name that git creates for anybody who has followed https://github.com/whatwg/html/blob/pr/610/TEAM.md#fetching-and-reviewing-pull-requests-from-forks to set up automatic fetch of branches

[00:52:53.0000] <botie>
for PRs from forks and at 2016-02-03 07:22 UTC, MikeSmith said: if you rename that branch I think that will fix the problem

[00:58:01.0000] <Ms2ger>
jgraham_, r? https://critic.hoppipolla.co.uk/r/6019

[01:01:42.0000] <Ms2ger>
MikeSmith, no clue what you're on about

[01:04:52.0000] <annevk>
Ms2ger: you named a branch pr/610 which conflicts with an automatic local branching generating mechanism we use

[01:05:19.0000] <annevk>
Ms2ger: it seems that branch is already merged though so we can simply delete it

[01:05:45.0000] <annevk>
hmm or maybe you didn't do that and it was someone else

[01:05:59.0000] <annevk>
might have been Domenic who merged it

[01:07:05.0000] <Ms2ger>
In what repo?

[01:07:14.0000] <annevk>
Ms2ger: whatwg/html

[01:07:35.0000] <Ms2ger>
I don't have access there, so wasn't me :)

[01:07:53.0000] <annevk>
I see

[01:07:59.0000] <annevk>
MikeSmith: I deleted the branch

[01:22:37.0000] <MikeSmith>
annevk: thanks

[01:23:15.0000] <MikeSmith>
Ms2ger: sorry for blaming you

[01:23:40.0000] <Ms2ger>
Np

[01:38:34.0000] <annevk>
Does anyone remember why we call entities "named character references"?

[01:38:42.0000] <jgraham_>
Ms2ger: r+

[01:39:00.0000] <Ms2ger>
Ta

[01:44:13.0000] <MikeSmith>
annevk: I thought Hixie minted that

[01:45:01.0000] <MikeSmith>
"entities" was the original, what they were called from the SGML days

[01:45:19.0000] <MikeSmith>
right?

[01:46:53.0000] <annevk>
I have no idea anymore

[01:48:10.0000] <annevk>
It hasn't been quite a decade yet, but the HTML parser exists for nine years now: https://annevankesteren.nl/2006/12/html-parser

[01:49:23.0000] <JakeA>
jsbell: wanderview: so add() & addAll() should reject on response !ok or if the response is opaque (since we can't leak OK)

[01:49:25.0000] <annevk>
/me finds https://annevankesteren.nl/2006/10/html-wg

[01:51:11.0000] <Ms2ger>
> But am I just being paranoid in observing that the announcement doesn�t read as an endorsement of HTML5 but as an announcement to develop another spec that incrementally improves HTML?

[01:51:23.0000] <Ms2ger>
Well fuck

[01:51:35.0000] <annevk>
Oh look, the parser is a decade old now: https://annevankesteren.nl/2006/01/parsing

[01:51:43.0000] <annevk>
We didn't even celebrate

[01:52:08.0000] <annevk>
🎉🎂

[01:52:44.0000] <annevk>
Ms2ger: that rare time hsivonen makes an observation, pay attention

[01:54:43.0000] <annevk>
philipj: you don't like my idea of just defining an algorithm in the HTML standard for how to extract CLDR data for quotes?

[01:55:14.0000] <annevk>
philipj: if you think that's too difficult I'm willing to give that a shot

[01:55:30.0000] <annevk>
philipj: by drawing inspiration from what was done ECMAScript 402

[01:55:37.0000] <annevk>
for*

[01:57:38.0000] <philipj>
annevk: that would amount to removing the CSS block from the spec, right?

[01:57:59.0000] <philipj>
annevk: the thing is, I saw that block copied into a test in Blink, so it's been of some use at least once

[01:58:03.0000] <annevk>
philipj: yeah, can basically drop all the build code

[01:58:13.0000] <annevk>
philipj: I see

[01:58:57.0000] <annevk>
hmm

[01:59:01.0000] <philipj>
annevk: how would this ES 402 thing work? I looked at a spec someone linked to yesterday and couldn't find what I was supposed to find

[01:59:13.0000] <philipj>
someone=you I think

[02:01:15.0000] <MikeSmith>
"I would urge you to wait until the WG is actually formed and the charter and membership are apparent before assuming it means victory for the forces of good."

[02:01:49.0000] <annevk>
philipj: I haven't looked in detail, but that spec has some relation to CLDR too

[02:02:03.0000] <annevk>
philipj: though it doesn't directly depend on it since there could be alternative implementations

[02:02:46.0000] <annevk>
philipj: so you'd have some phrasing around using the locale quotation mark for locale /x/ or some such I suppose, haven't done the work yet

[02:03:08.0000] <annevk>
philipj: but if the CSS is of use, perhaps we should just bear the cost, I wonder though what the implementation does

[02:03:54.0000] <zcorpan>
DOMTokenList change was picked up pretty quickly

[02:05:30.0000] <philipj>
annevk: so are there APIs for getting the locale-dependent quotation marks?

[02:06:02.0000] <zcorpan>
getComputedStyle?

[02:06:02.0000] <annevk>
philipj: nope, it'd be inspired by

[02:06:32.0000] <philipj>
annevk: oh, ok...

[02:06:43.0000] <annevk>
philipj: although maybe quotation marks are setup wildly different from currency in which case it wouldn't help I suppose

[02:06:57.0000] <annevk>
but I was assuming that would not be the case

[02:11:04.0000] <zcorpan>
/me -> dubai -> stockholm

[02:12:00.0000] <philipj>
annevk: looks like there's not agreement about whether the computed style for the quotes property has the quotes actually used or not

[02:12:09.0000] <philipj>
Gecko does, Blink not

[02:12:55.0000] <annevk>
philipj: I don't really know how the quotes property works, let's check what CSS says

[02:14:07.0000] <annevk>
philipj: per https://drafts.csswg.org/css-content-3/#propdef-quotes it should be the specified value

[02:14:10.0000] <philipj>
annevk: in Blink, there's a table of quotes in the source code, with a comment saying "Table of quotes from http://www.whatwg.org/specs/web-apps/current-work/multipage/rendering.html#quote"

[02:14:41.0000] <annevk>
philipj: I see, so Blink doesn't use CLDR directly either

[02:14:45.0000] <annevk>
hmm

[02:15:11.0000] <philipj>
annevk: no. I would have expected to find a call to libicu, but nope, that's not how it works

[02:15:19.0000] <annevk>
seems weird from an engineering perspective to embed multiple sources of truth with your software

[02:15:24.0000] <philipj>
can we just nuke this "feature" and let people use CSS? :)

[02:15:46.0000] <philipj>
I'm not sure that libicu actually has this data, just guessing

[02:16:05.0000] <annevk>
well, if JavaScript can get CLDR data...

[02:16:16.0000] <annevk>
I guess they might exclude the quotes stuff though when shipping

[02:16:48.0000] <philipj>
well, *can* JavaScript get the quotes data? what's the API?

[02:17:19.0000] <annevk>
I don't think there's an API at the moment

[02:17:34.0000] <annevk>
We could maybe email www-international and see what they say about all this

[02:17:42.0000] <annevk>
They likely have more of a clue

[02:19:34.0000] <philipj>
yeah

[02:20:24.0000] <philipj>
In the meantime, I'd like to make it precompiled, because I keep having to redownload the cldr repo every day whenever I've changed the html-build commit

[02:23:12.0000] <annevk>
Yeah I think that's great

[02:23:24.0000] <annevk>
That way we also know when the output changes so we can file bugs on browsers

[02:28:09.0000] <annevk>
Domenic: retweeted @webkit

[02:28:46.0000] <annevk>
Domenic: do you still have trouble logging in due to needing to know the email address? If so, I'll add them all

[02:47:50.0000] <annevk>
JakeA: see https://github.com/whatwg/html/issues/552 on <style scoped>

[02:51:19.0000] <mounir>
heycam|away: any chance you can have a look at https://github.com/heycam/webidl/pull/85 ?

[02:51:38.0000] <JakeA>
annevk: I agree that out-of-order CSS loading is desirable in some cases, but isn't <link async> a simpler answer? I guess I never got the benefit of style scoping since selectors already let you scope styles

[02:52:39.0000] <JakeA>
Eg, if CSS had a way to refer to the parent of the <style> or <link>, there's your scoping

[02:53:11.0000] <JakeA>
:container .foo { ... }

[02:59:00.0000] <annevk>
JakeA: that'd be pretty cool

[02:59:10.0000] <annevk>
JakeA: <link async> doesn't exist yet

[02:59:45.0000] <annevk>
JakeA: btw, now you can PR the HTML standard for adding those promise properties, e.g., <img>.loaded, or whatever name it'll be

[03:02:37.0000] <JakeA>
annevk: yeah, hoping to find time to make an HTML PR this quarter. I thought it'd be the <link> in <body> thing but that's more contentious than I thought

[03:04:37.0000] <annevk>
JakeA: oh is it?

[03:04:52.0000] <annevk>
JakeA: removing <style scoped> seems a little contentious, but then only Gecko implements it

[03:06:01.0000] <JakeA>
annevk: https://groups.google.com/a/chromium.org/forum/m/#!topic/blink-dev/ZAPP8aTnyn0

[05:19:29.0000] <Ms2ger>
https://gregwhitworth.github.io/css-table-3/

[05:25:24.0000] <annevk>
Interesting, it says that something about the WHATWG stylesheet is wrong

[07:09:49.0000] <Domenic>
annevk: honestly I haven't tried since the one; adding the emails would be great

[07:10:23.0000] <annevk>
Domenic: do you have a little bit of time?

[07:10:33.0000] <annevk>
Domenic: I want to talk cross-origin objects

[07:10:33.0000] <Domenic>
annevk: just woke up, so not too much :)

[07:10:40.0000] <annevk>
Because I'm confusing myself

[07:10:42.0000] <Domenic>
annevk: but if this is the best timezone wise I can make it work

[07:11:02.0000] <Domenic>
In fact yeah let's do now, meeting-day kicks off in 2 hours

[07:11:05.0000] <annevk>
Basically the problem is the own property thing

[07:11:19.0000] <annevk>
So IDL sets up Location, and also a LocationPrototype

[07:11:39.0000] <annevk>
Does that mean we also need to overwrite all the internal methods of LocationPrototype somehow?

[07:13:51.0000] <Domenic>
annevk: maybe. Without overwriting them, people will be able to treat Location.prototype as an ordinary object, e.g. try to do Location.prototype.assign.call(otherLocation, ...)

[07:13:58.0000] <Domenic>
It depends on what you are trying to prevent

[07:14:24.0000] <Domenic>
Your CrossOriginGetPrototypeOf already returns null for cross origin

[07:14:38.0000] <Domenic>
So anything that proto-walks will stop before it sees Location.prototype

[07:14:45.0000] <annevk>
Yeah, but if you store Location.prototype and then set document.domain you still have it

[07:15:01.0000] <Domenic>
yeah. but i'm unclear what threat model that gives you

[07:15:09.0000] <annevk>
Though perhaps the "platform object" security check fails at that point

[07:16:46.0000] <annevk>
Note that for Location this also applies to the same-origin case

[07:17:06.0000] <annevk>
To make it appear as if things are configurable

[07:17:54.0000] <Domenic>
So it would really help to have a concrete model of what we're trying to prevent

[07:18:02.0000] <Domenic>
and then we can tell if the existing spec sufficiently does that

[07:18:46.0000] <annevk>
I think what this is instead is having some carefully crafted extensions to SOP due to compat issues

[07:19:41.0000] <annevk>
I see your point though, let me try to write something up

[07:20:00.0000] <annevk>
Of what I think we want to accomplish

[07:20:33.0000] <Domenic>
I see, you are saying that other objects just fail at step 2 of perform a security check

[07:20:41.0000] <Domenic>
Well, LocationPrototype and WindowPrototype should fail at that same step

[07:20:50.0000] <Domenic>
So I guess the question is whether that's desired

[07:21:05.0000] <Domenic>
I think it probably is

[07:21:36.0000] <Domenic>
Also "carefully crafted extensions to SOP due to compat issues" is a great way of framing this whole thing and I hope to see it in an intro paragraph at some point.

[07:22:01.0000] <annevk>
Yeah, though we do want to get to those functions in the cross-origin case to be able to pretend they are own properties instead

[07:22:14.0000] <annevk>
But I'll write it up and then maybe you can help design it

[07:46:30.0000] <annevk>
Wrote something up, time to do some other stuff for a bit

[08:28:05.0000] <JonathanNeal>
Why is it the spec https://www.w3.org/TR/css3-background/#special-backgrounds recommends authors specify the canvas background for the BODY element rather than the HTML element?

[08:32:08.0000] <wanderview>
JakeA: we're ok with Cache.addAll() failing opaqueredirect responses, right?  That won't mess up offline support for sites requiring navigation redirects?

[08:34:58.0000] <wanderview>
I guess they can just avoid the convenience methods

[09:55:04.0000] <annevk>
MikeSmith: any idea what is up with Bugzilla?

[09:55:13.0000] <MikeSmith>
nope

[09:55:17.0000] <MikeSmith>
not responding?

[09:55:20.0000] <MikeSmith>
/me checks

[09:55:40.0000] <MikeSmith>
redirect loop it seems

[09:55:55.0000] <MikeSmith>
/me alerts systems team

[10:07:55.0000] <MikeSmith>
annevk: systems team is aware of the problem but I think waiting on the particular person who maintains the bugzilla instance

[10:08:08.0000] <MikeSmith>
who likely is eating dinner or so atm

[10:09:19.0000] <tobie>
I'd like the Sensor constructor to throw when instantiated outside of the top level browsing context (for now). What should I throw, a SecurityError?

[10:10:47.0000] <tobie>
Note the constructor already throws a SecurityError if outside of https.

[10:11:48.0000] <annevk>
seems fine

[10:14:09.0000] <tobie>
ty

[10:14:13.0000] <MikeSmith>
tobie: incidentally, you writing wpt tests for that as you're writing/developing it?

[10:14:39.0000] <tobie>
MikeSmith: that's a good question.

[10:15:05.0000] <MikeSmith>
you could pioneer that and set a good example for others

[10:15:19.0000] <miketaylr>
i need to write some wpt tests...

[10:15:35.0000] <MikeSmith>
WDD (WPT Driven Development)

[10:16:02.0000] <tobie>
or WPTDD

[10:16:35.0000] <MikeSmith>
miketaylr: the lavish rewards it brings are worth the pain

[10:16:51.0000] <tobie>
MikeSmith: ^ this

[10:16:54.0000] <miketaylr>
MikeSmith: yeah i can imagine my .NET mag awards already

[10:17:09.0000] <miketaylr>
might write the acceptance speech before the test

[10:17:25.0000] <tobie>
miketaylr: these things give you Emmys nowadays.

[10:17:27.0000] <MikeSmith>
we need an award, a statuette of jgraham

[10:17:51.0000] <tobie>
^ worst nightmares

[10:18:12.0000] <miketaylr>
never needed a 3d printer before today

[10:18:18.0000] <MikeSmith>
hahah

[10:18:47.0000] <MikeSmith>
WPTSD, WPT Post Traumatic Stress Disorder

[10:19:50.0000] <MikeSmith>
annevk: bugzilla is back

[10:21:11.0000] <MikeSmith>
"might write the acceptance speech before the test" deserves an award on its own

[10:21:39.0000] <Domenic>
i think this idea actually has legs

[10:21:58.0000] <Domenic>
a 3d-printed statue of jgraham handed out each year to the best test-writer in a formal ceremony over the internet

[10:22:03.0000] <Domenic>
i would write more tests

[10:22:07.0000] <darobin>
hahahaha

[10:22:10.0000] <darobin>
that would be wonderful

[10:22:19.0000] <darobin>
I would write all the tests

[10:22:28.0000] <darobin>
especially if the statue came with lavish hair

[10:23:53.0000] <darobin>
I think there may be precedent for writing WPT tests during the spec writing

[10:24:07.0000] <darobin>
maybe AnssiK did that for Vibration?

[10:24:19.0000] <darobin>
that might have been pre-WPT, but using testharness

[10:24:25.0000] <Domenic>
i kiiiind of did it for streams, just, not in WPT format... so now I am converting them all to WPT... good job me

[10:24:40.0000] <darobin>
"just not in WPT format" pretty much sums up the story of the project

[10:25:03.0000] <miketaylr>
i have a q1 goal to write some for the compat spec, hopefully that doesn't end up as "start day before q1 ends"

[10:25:24.0000] <darobin>
does it say Q1 of any specific year?

[10:25:36.0000] <miketaylr>
oh snap, good point

[10:25:55.0000] <miketaylr>
excited to win the Q1 2020 jgraham-y

[10:27:30.0000] <jgraham>
I'd go with "test-y"

[10:27:35.0000] <darobin>
no no

[10:27:41.0000] <darobin>
jgrahammy

[10:27:52.0000] <darobin>
it has to be

[10:28:02.0000] <MikeSmith>
yep

[10:28:19.0000] <MikeSmith>
this is the most productive brainstorming we have done for years

[10:28:35.0000] <darobin>
and they say standards are slow

[10:28:40.0000] <MikeSmith>
haha

[11:52:41.0000] <nikkibee>
https://fetch.spec.whatwg.org/#cors-check I don't understand how this can ever resolve past step 2. I cannot find anywhere where `Access-Control-Allow-Origin` is set in the Fetch specification, and so far in my testing no other function I call for Response sets it

[11:53:53.0000] <nikkibee>
https://fetch.spec.whatwg.org/#http-access-control-allow-origin this says the http response can include the header, but where does that happen? I don't see where to read next

[12:01:40.0000] <annevk>
nikkibee: the server specifies it

[12:01:54.0000] <annevk>
nikkibee: the client doesn't really control the response

[12:02:00.0000] <annevk>
nikkibee: it just gets one

[12:02:47.0000] <nikkibee>
annevk: I see. what specification talks about this? I'd like to figure out what Fetch is calling that needs to handle this

[12:03:11.0000] <JakeA>
wanderview: yeah, happy for add to fail in that case

[12:03:14.0000] <annevk>
nikkibee: I don't really understand your confusion

[12:03:56.0000] <nikkibee>
annevk: I don't know when Response gets its headers set

[12:04:28.0000] <nikkibee>
so I don't know where to add this header, since it's not being set, and I need it for Cors Check to work

[12:05:07.0000] <annevk>
nikkibee: oh, step four of https://fetch.spec.whatwg.org/#http-network-fetch

[12:05:16.0000] <annevk>
nikkibee: are you implementing a server or a client?

[12:05:29.0000] <annevk>
nikkibee: a client doesn't add this header, it just receives it as part of a response

[12:05:50.0000] <nikkibee>
annevk: okay, the implementation for step 4 in Servo calls something outside of Fetch so I'll see what's going on there

[12:06:23.0000] <nikkibee>
annevk: I don't know how to answer that, sorry

[12:06:25.0000] <Domenic>
"To request an account, ask an autoconfirmed user on IRC (such as one of these permanent autoconfirmed members)"

[12:06:36.0000] <Domenic>
I am an autoconfirmed member, and someone is asking for my help signing up to the wiki. How do I do it?

[12:07:33.0000] <annevk>
Domenic: https://wiki.whatwg.org/wiki/WHATWG_Wiki:How_to_create_a_user_account (linked from the main page)

[12:07:51.0000] <Domenic>
waah waaah

[12:08:08.0000] <annevk>
nikkibee: so part of the problem here might be integration between Fetch and HTTP being not exactly ideal

[12:08:15.0000] <annevk>
nikkibee: there's a bit of handwaving

[12:08:33.0000] <annevk>
nikkibee: I don't know if I'll ever get the HTTP folks to provide adequate hooks though

[12:10:16.0000] <nikkibee>
annevk: anything outside of Fetch is kind of over my head, but I'd rather not have the Cors Check function just return success so that I can continue. I don't know what the HTTP hooks could be like or how it would help

[12:11:54.0000] <annevk>
nikkibee: well, things would be more clear

[12:12:21.0000] <annevk>
nikkibee: but anyway, the way this works is that Fetch sets up a connection, transmits a Request over it and a Response comes back

[12:12:28.0000] <annevk>
nikkibee: the Response will have headers set and such

[12:12:38.0000] <annevk>
nikkibee: which may be correct for CORS, or not

[12:13:08.0000] <nikkibee>
I'm getting a better idea of it, thanks

[12:13:18.0000] <annevk>
nikkibee: some of those details are defined by HTTP, some by Fetch, where they get close it's not as tightly defined as I would like

[12:13:21.0000] <nikkibee>
I've been focusing on the small details so the big overview is harder for me

[12:13:25.0000] <nikkibee>
I see

[12:13:51.0000] <annevk>
no worries

[12:14:02.0000] <annevk>
I guess this is the first time someone approaches this with a Fetch-first perspective

[12:14:06.0000] <nikkibee>
heh!

[12:14:08.0000] <annevk>
usually folks know the HTTP bit

[12:14:26.0000] <nikkibee>
I haven't really paid attention to headers until now, when a header is absolutely required

[12:15:00.0000] <nikkibee>
I didn't find it mentioned in the fetch spec so I figured it was handled already and went ahead with coding Cors Check, I guess that was a bit shortsighted

[12:29:13.0000] <miketaylr>
annevk: want me to open an issue against DOM?

[12:29:26.0000] <annevk>
miketaylr: PR?

[12:29:32.0000] <annevk>
miketaylr: either way is fine

[12:29:35.0000] <miketaylr>
that too

[12:29:50.0000] <annevk>
miketaylr: happy to help, but it's sleepy time here

[12:30:08.0000] <annevk>
miketaylr: that's pretty horrid though, much worse than webkitMatchesSelector

[12:30:21.0000] <miketaylr>
annevk: go to bed, i'll file an issue and try to have a PR tomorrow-ish (and you can tell me all the ways i did it wrong in review)

[12:30:38.0000] <annevk>
good times

[12:30:45.0000] <miketaylr>
welcome to the jungle

[12:32:10.0000] <miketaylr>
*jongel https://www.w3.org/Bugs/Public/show_bug.cgi?id=13898

[12:37:26.0000] <Domenic>
this is the worst https://github.com/whatwg/compat/issues/24

[12:43:23.0000] <tobie>
Looking at the automotive stuff and TAG feedback of their pub/sub pattern (rough e.g. vehicle.subscribe ("speed", callback))…

[12:43:34.0000] <tobie>
and curious about folk's thoughts here.

[12:44:28.0000] <tobie>
I'd imagine this would be best designed as an EventTarget…

[12:45:12.0000] <tobie>
But feedback seems to consider this a matter of taste.

[12:45:43.0000] <tobie>
And points to MutationObservers as a good example of callback based observing.

[12:46:10.0000] <Domenic>
I think it ... does not reflect well ... that the TAG is spending time on this API.

[12:46:53.0000] <tobie>
Well… that's another story altogether, really. :)

[12:47:44.0000] <tobie>
I don't disagree, but I could reformulate the question without mentioning the AM spec at all.

[12:48:15.0000] <tobie>
I'm interested in the long term view for events on the Web…

[12:48:40.0000] <Domenic>
fair

[12:48:51.0000] <tobie>
…and the possibility of a convergence with node EventEmitters.

[12:48:59.0000] <Domenic>
I think the story is "use addEventListener" and maybe one day observables will become a thing

[12:49:12.0000] <tobie>
OK, so this is my understanding too.

[12:49:39.0000] <caitp>
I thought that netflix dude was really committed to making that happen

[12:49:46.0000] <tobie>
Which is why I'm utterly confused when I hear the TAG (or members of the TAG) say: just create your own pus/sub system, it's cool.

[12:50:10.0000] <Domenic>
as long as nobody does it on specs that are actually going to be implemented...

[12:51:20.0000] <tobie>
heh

[13:05:41.0000] <tobie>
What's blocking observables?

[13:14:19.0000] <Domenic>
it's unclear whether they're a good primitive at all.

[14:14:10.0000] <tobie>
Domenic: Is there agreement that some form of event dispatcher thingy is a good primitive to have, though?

[14:14:26.0000] <Domenic>
tobie: unclear it needs to be in the language, I guess.

[14:14:43.0000] <Domenic>
each ecosystem already has one; inventing a third is of unclear benefit

[14:16:12.0000] <tobie>
Domenic: what's the stroy with streams, there?

[14:16:52.0000] <tobie>
Can I use some of the node.js stream stuff inside of service workers?

[14:18:27.0000] <tobie>
e.g. a zip lib to store zipped filed in the cache storage?

[14:19:08.0000] <tobie>
(arguably contrived example)

[14:26:17.0000] <Domenic>
tobie: yeah working toward that (although the API surface is a bit different than Node streams)

[14:26:44.0000] <Domenic>
right now behind experimental web platform features we allow you to compose streaming responses fed from a service worker to the main page

[14:27:16.0000] <tobie>
sorry, my question was badly formulated:

[14:28:17.0000] <tobie>
In the future, can I grab a nodejs module that does zipping and use it in a service worker?

[14:28:54.0000] <tobie>
Or will the streams APIs be incompatible?

[14:32:40.0000] <Domenic>
they will be incompatible: https://github.com/whatwg/streams/blob/master/FAQ.md#what-are-the-main-differences-between-these-streams-and-nodejs-streams

[14:37:56.0000] <tobie>
Domenic: is there a path to convergence? Or is this just: these are two incompatible platforms; live with it.

[14:38:27.0000] <Domenic>
tobie: node streams is in active discussions right now about addressing their shortcomings, and one of their primary champions is a fan of whatwg streams, so i anticipate some gradual movement over time.

[14:38:47.0000] <tobie>
\o/

[14:41:20.0000] <tobie>
Is convergence an end goal, though?

[14:42:31.0000] <tobie>
Basically, is someone actively looking at the pieces that are missing to make a large chunk of node.js code runnable in the browser?

[14:45:07.0000] <Domenic>
i don't think that's really a goal, no

[14:45:36.0000] <Domenic>
node made its own weird or ahead-of-the-curve choices which most implementers find absurd

[14:45:44.0000] <Domenic>
shims suffice pretty much

[14:53:05.0000] <tobie>
So there are shims that let me transparently do that?

[14:55:15.0000] <Domenic>
yeah, browserify bundles a bunch

[14:57:58.0000] <tobie>
Right but they're shims for basic things like the file system, no?

[14:59:37.0000] <tobie>
Also implies nodejs => Web, not nodejs <=> Web, plus their a transpiling step, etc.

[15:01:22.0000] <tobie>
Anyway, misspelling "there are" that badly seems to indicate it is time to go to sleep.


2016-02-04
[16:21:33.0000] <Domenic>
tobie: they're shims for most everything.... streams, buffer (their alternative to typed arrays), etc.

[16:45:57.0000] <heycam>
mounir: hey. I'm busy this week but will look at it next week, if that's ok.

[00:21:54.0000] <annevk>
ritsyy (and everyone else): make sure to update whatwg/html-build

[00:22:08.0000] <annevk>
we landed some changes that require updating it

[00:30:33.0000] <ritsyy>
annevk: okay, ta

[00:30:47.0000] <annevk>
ritsyy: maybe also wattsi

[00:31:07.0000] <annevk>
ritsyy: the upshot is that everything should go a little faster

[00:33:03.0000] <ritsyy>
annevk: okay, is the script updated to work offline?

[00:38:02.0000] <annevk>
ritsyy: still requires two downloads if you don't set -n, but they are relatively small

[00:39:45.0000] <ritsyy>
annevk: oh okay, great!

[01:55:50.0000] <skender>
how make a fetch post request with content-type json/application? when i put json.stringify(json) in the body, the content-type is set to text/plain..

[02:38:18.0000] <Ms2ger>
hallvors, ping

[02:39:51.0000] <hallvors>
Ms2ger: here :)

[02:40:21.0000] <Ms2ger>
hallvors, do you know if there's a test that readystatechange is dispatched sync from xhr.open()?

[02:41:27.0000] <hallvors>
Hm.. I'll look. I think so but can't say for sure

[02:43:55.0000] <hallvors>
Ms2ger: I guess https://github.com/w3c/web-platform-tests/blob/master/XMLHttpRequest/open-open-sync-send.htm might do?

[02:44:39.0000] <Ms2ger>
Seems like it does, yes

[02:44:43.0000] <Ms2ger>
Thanks :)

[02:45:02.0000] <hallvors>
it's not explictly about that (it's a bit weirder) but covers it

[02:45:15.0000] <hallvors>
perhaps we should have an explicit non-weird test too ..

[02:45:18.0000] <annevk>
it doesn't cover the synchronous bit though

[02:45:39.0000] <annevk>
it just checks that a transition happened, not when

[02:46:03.0000] <Ms2ger>
But it does that check before the event loop spins

[02:46:18.0000] <annevk>
I think I had written some tests where I also added logging before and after the open call

[02:46:36.0000] <Ms2ger>
But something more explicit would of course be nice :)

[02:47:08.0000] <Ms2ger>
Oh wait, I guess the xhr might spin the event loop

[02:47:19.0000] <hallvors>
we can always add a couple more asserts to that test..

[02:47:24.0000] <annevk>
Ms2ger: not per spec

[02:47:38.0000] <hallvors>
like one before send()

[02:48:07.0000] <hallvors>
I also think we have some that do more detailed logging, just need to find them..

[02:48:52.0000] <Ms2ger>
(I haven't found any bugs here, btw, but it seems like something worth testing)

[03:11:05.0000] <hallvors>
annevk, Ms2ger: I'll just add a specific test..

[03:11:43.0000] <Ms2ger>
Thanks

[03:23:40.0000] <Ms2ger>
Do we not yet have a better way to write "If parsing mime analogously to the value of the `Content-Type` header fails..."?

[03:27:35.0000] <hallvors>
Ms2ger: https://critic.hoppipolla.co.uk/r/6166

[03:28:00.0000] <Ms2ger>
Thanks, will look in a bit

[03:28:12.0000] <hallvors>
Pardon the mess with the first PR being mistakenly branched off a branch full of clipboard stuff..

[03:28:25.0000] <hallvors>
/me wishes those clipboard tests get merged soon..

[03:29:10.0000] <hallvors>
/me wants git to ask "are you sure" when doing checkout -b newbranch and not on master

[03:30:06.0000] <hallvors>
no haste, but also a veeeery simple review, won't take you long ;)

[03:39:12.0000] <Ms2ger>
hallvors, reviewed, and want one more test :)

[03:39:19.0000] <Ms2ger>
Now, lunch

[03:39:39.0000] <hallvors>
your wish is my command, Sir :)

[04:14:35.0000] <Ms2ger>
hallvors, I probably would have stuck it in the same file, but eh :)

[04:16:21.0000] <Ms2ger>
hallvors, I also want all the XHR tests to run in workers too :)

[04:16:56.0000] <hallvors>
hm.. most of them don't, seems like a bit of work to fix that..

[04:17:15.0000] <hallvors>
:/

[04:17:34.0000] <Ms2ger>
Yeah

[04:18:39.0000] <Ms2ger>
I really want a fix for https://github.com/w3c/web-platform-tests/issues/2558

[04:21:59.0000] <hallvors>
Ms2ger: wouldn't be that much work if we wrote a script that would extract all the code from the XHR tests into .js files

[04:22:48.0000] <Ms2ger>
The one thing we'd lose is the spec links, I guess

[04:22:56.0000] <Ms2ger>
Though that seems fixable

[04:23:00.0000] <jgraham>
Ms2ger: Presumably you could do the same as the .worker.js files but with a .global.js or something with something to tell the test what context it is running in (a boolean doesn't seem ideal)

[04:23:11.0000] <Ms2ger>
Yeah, agreed

[04:23:37.0000] <Ms2ger>
Then the question is what to do with shared/service workers

[04:23:55.0000] <Ms2ger>
Maybe if (type === "service worker") return

[04:25:07.0000] <jgraham>
Or have some mechanism to define what kind of tests should be run

[04:25:10.0000] <jgraham>
Like

[04:25:32.0000] <jgraham>
 //test contexts(worker, window)

[04:25:48.0000] <jgraham>
and run a regexp in the manifest parser

[04:26:46.0000] <Ms2ger>
That seems like the least wasteful approach

[04:32:44.0000] <hallvors>
/me wants the spec links and the xpaths preserved..

[04:56:25.0000] <hallvors>
Here's another one for you, Ms2ger :) https://github.com/w3c/web-platform-tests/pull/2563

[04:57:58.0000] <Ms2ger>
Woo, <details> landed in Gecko

[05:00:05.0000] <Domenic>
\o/!!!

[05:00:22.0000] <Domenic>
just when i was thinking esprehn had me convinced to remove it from the spec

[05:02:39.0000] <annevk>
Domenic: I don't understand https://github.com/annevk/html-cross-origin-objects/issues/32

[05:02:48.0000] <annevk>
Domenic: I think you're making some assumptions that might be false

[05:04:11.0000] <annevk>
Domenic: while you are correct that Location is exotic and Window will not be, the behavior implemented by Location and Window*Proxy* will be nearly identical

[05:06:44.0000] <annevk>
Domenic: I'd much rather have an answer to https://github.com/annevk/html-cross-origin-objects/issues/32#issuecomment-179817893

[05:06:56.0000] <annevk>
Domenic: other than that the specification works as-is, afaict

[05:07:17.0000] <Domenic>
annevk: if the behavior implemented will be nearly identical, then I think the spec needs to be a lot more identical

[05:07:37.0000] <annevk>
Domenic: that is why they all use shared abstract operations

[05:08:02.0000] <Domenic>
annevk: they shouldn't, since WIndowProxy needs to delegate to its target, instead of calling defaultinternalmethod. That is my answer to the linked comment.

[05:08:10.0000] <Domenic>
("In general I think CrossOriginGetOwnProperty should probably be removed in favor of explicit different algorithms for each of the two objects.")

[05:08:21.0000] <Domenic>
If you want them to be identical then you should make Location a proxy too

[05:08:32.0000] <annevk>
Domenic: why can't they use shared abstract operations that operate on different objects?

[05:08:38.0000] <annevk>
Domenic: show me how that fails

[05:09:06.0000] <Domenic>
annevk: it doesn't fail right now, assuming you redefine window named properties. It's just bad software engineering practice to rely on the internal implementation details of the object you're proxying

[05:09:25.0000] <annevk>
Domenic: this is part of the definition of that object though

[05:09:50.0000] <Domenic>
annevk: WindowProxy should be a proxy. So it should delegate to its target. I'm not sure how to make that any clearer.

[05:09:55.0000] <annevk>
Domenic: this is kind of the whole point

[05:10:09.0000] <annevk>
Domenic: that we know about the details of Window and can therefore do things on WindowProxy

[05:10:17.0000] <annevk>
to make them work well together

[05:10:25.0000] <Domenic>
How is that the whole point? They should be layered, not intertwingled.

[05:10:39.0000] <annevk>
they are intertwingled in impls too

[05:10:45.0000] <Domenic>
that's not true in chrome

[05:11:04.0000] <Domenic>
and I doubt that bz would use this kind of defaultinternalmethod stuff, but we can ask him

[05:11:16.0000] <Domenic>
This is not a hard change to make

[05:11:19.0000] <annevk>
oh, I want to reply DefaultInternalMethod with Ordinary*

[05:11:21.0000] <Domenic>
I am unclear why you are pushing back on it

[05:11:23.0000] <Domenic>
sure whatever

[05:11:28.0000] <Domenic>
same bad practice, different name

[05:11:33.0000] <annevk>
I don't understand what change you are proposing

[05:11:43.0000] <annevk>
It sounds like you want to duplicate all these abstract operations

[05:11:46.0000] <annevk>
While they do exactly the same

[05:11:50.0000] <Domenic>
use W.[[GetOwnProperty]](...), not OrdinaryGetOwnProperty(W, ...)

[05:11:54.0000] <Domenic>
that is the important higher-order bit

[05:13:16.0000] <annevk>
Yeah, that would require duplicating all the text with much more chance for divergence

[05:13:17.0000] <Domenic>
I can't think of an easy way to do that without either: (a) creating separate algorithms for window and location, or (b) making Location a proxy too.

[05:13:52.0000] <annevk>
That seems extremely silly

[05:14:04.0000] <Domenic>
but I think it will match impls better, be more maintainable longer-run due to the decoupling, and either be clearer about the fact that both are proxies, or be clearer about the fact that both are very different types of objects

[05:14:56.0000] <annevk>
Given that this is all legacy and we'll never make these objects even worse I doubt any of that is really true

[05:15:08.0000] <Domenic>
OK I think I found a (c)

[05:15:12.0000] <annevk>
The main problem that gives us that reviewing will be much harder

[05:15:29.0000] <Domenic>
Instead of step 1 of CrossOriginX(...) being "if is same origin, use defaultinternalmethod"

[05:15:30.0000] <annevk>
To ensure that the security properties are indeed identical

[05:15:37.0000] <Domenic>
move that step into the caller

[05:15:45.0000] <Domenic>
and leave CrossOriginX(...) to be only for the cross origin case

[05:16:01.0000] <Domenic>
then that step can use either DefaultInternalMethod for Location, or delegation for WindowProxy

[05:16:13.0000] <Domenic>
There, that's pretty easy.

[05:17:31.0000] <annevk>
I still don't really see what that buys us. If we ever change Window to be exotic we could do this rewrite then

[05:17:39.0000] <annevk>
In any event, that doesn't solve https://github.com/annevk/html-cross-origin-objects/issues/32#issuecomment-179817893

[05:17:44.0000] <Domenic>
Remembering that we have to is a problem.

[05:17:46.0000] <Ms2ger>
zcorpan, https://github.com/w3c/web-platform-tests/pull/2513

[05:18:03.0000] <annevk>
I don't think so

[05:18:50.0000] <annevk>
I mean, I don't think we ever want to make platform objects more exotic and if we did we'd have to review it for Window/Location carefully anyway

[05:18:57.0000] <Domenic>
Re https://github.com/annevk/html-cross-origin-objects/issues/32#issuecomment-179817893 I think in general the CrossOriginXs should not branch on their input, so I guess the "remove step 4" thing

[05:19:22.0000] <annevk>
Domenic: if an abstract operation doesn't return anything, is the return value undefined?

[05:19:40.0000] <Domenic>
It's just ... gah ... I can't really explain this as anything more than best practices. Proxies should act like an actual proxy, and be decoupled from internal knowledge of their target.

[05:19:49.0000] <Domenic>
annevk: I'll check, not sure

[05:20:32.0000] <annevk>
Domenic: is there a way to pass the correct thing to call into the CrossOrigin operations?

[05:21:08.0000] <Domenic>
annevk: you could invent notation for it but it'd not be much shorter than just passing in the spec line that you would plan to write anyway.

[05:21:10.0000] <annevk>
Domenic: that would avoid a bunch of duplication and make it a little more explicit what the difference actually is

[05:21:24.0000] <Domenic>
I don't understand, with what I've described there's almost no duplication

[05:22:09.0000] <annevk>
okay, let me ponder a bit

[05:23:35.0000] <Domenic>
annevk: I actually can't find any no-return abstract ops in ES... most of them return a completion value.

[05:23:58.0000] <annevk>
Domenic: I guess I could just return undefined as a new final step that the caller can branch on

[05:24:08.0000] <Domenic>
annevk: what is this for?

[05:24:59.0000] <annevk>
Domenic: the named property checkup only needs to happen in the cross-origin case for Window

[05:25:53.0000] <Domenic>
sure, what does undefined have to do with it?

[05:25:56.0000] <annevk>
Domenic: so this would be a way to make CrossOriginGetOwnProperty reusable without branching inside the abstract operation on _O_

[05:26:05.0000] <Domenic>
Hmm

[05:26:38.0000] <annevk>
Domenic: rather than throwing in the end it would return undefined, the caller would then be responsible for throwing

[05:26:42.0000] <Domenic>
You could just branch on the return value being an exception

[05:27:18.0000] <Domenic>
Nah I guess that doesn't work

[05:27:28.0000] <Domenic>
if there's e.g. a cross-origin getter that throws a TypeError

[05:28:28.0000] <Domenic>
Yeah returning undefined seems OK. But I'd rename it to CrossOriginGetOwnPropertyHelper since it no longer has the same semantics as GetOwnProperty.

[05:30:07.0000] <Domenic>
Well... it kind of does... GOP returns undefined on missing property... but I'd think CrossOriginGOP would throw... I dunno, could go either way.

[05:30:52.0000] <Domenic>
Probably needs a NOTE though at the top of CrossOriginGOP explaining that the caller is expected to eventually throw

[05:34:34.0000] <annevk>
happy to name it helper

[05:38:10.0000] <hallvors>
BTW - two more pending XHR test PRs here: https://github.com/w3c/web-platform-tests/pull/2505 https://github.com/w3c/web-platform-tests/pull/2509

[05:38:19.0000] <hallvors>
in case somebody wants to review :)

[05:55:12.0000] <Ms2ger>
hallvors, did you check if the errorFunc think worked in 2505?

[05:58:23.0000] <hallvors>
Ms2ger: likely not

[05:58:28.0000] <hallvors>
/me whistles

[05:58:52.0000] <Ms2ger>
(think?)

[05:59:02.0000] <Ms2ger>
/me needs autocorrect in his brain

[06:00:38.0000] <hallvors>
/me would be very, very worried about a built-in autocorrect in his brain :-p

[06:11:07.0000] <ritsyy>
philipj: would like to know more for this one  https://www.w3.org/Bugs/Public/show_bug.cgi?id=28829 , the wearable should also be mentioned?

[06:12:20.0000] <MikeSmith>
annevk: @fetchstandard may want to note that Microsoft has announced they will be implementing the Fetch API in Edge

[06:12:46.0000] <MikeSmith>
annevk: https://twitter.com/jacobrossi/status/694944666827886592 and https://dev.windows.com/en-us/microsoft-edge/platform/status/fetchapi

[06:14:14.0000] <MikeSmith>
they have moved it to Under Development there in their Platform Status page

[06:15:48.0000] <MikeSmith>
same for Notifications

[06:17:38.0000] <MikeSmith>
https://dev.windows.com/en-us/microsoft-edge/platform/status/webnotifications

[06:17:46.0000] <MikeSmith>
though they link to the old spec, I think we can be confident they'll eventually get on board with the current Notifications spec

[06:18:36.0000] <MikeSmith>
especially since they have service workers Under Consideration at "Roadmap Priority: High — We intend to begin development soon."

[06:18:41.0000] <MikeSmith>
https://dev.windows.com/en-us/microsoft-edge/platform/status/serviceworker

[06:48:38.0000] <MikeSmith>
Ms2ger: what Firefox version will <details> ship in?

[06:49:37.0000] <annevk>
MikeSmith: done

[06:49:57.0000] <Ms2ger>
MikeSmith, it hasn't made it to mozilla-central yet, so now +16 weeks or so?

[06:50:27.0000] <ritsyy>
was referring this issue https://www.w3.org/Bugs/Public/show_bug.cgi?id=27451 and in the spec https://html.spec.whatwg.org/multipage/semantics.html#the-wbr-element i think wbr usage should be explained more thoroughly as it adds the line break in the way user wants when the browser window is resized

[06:51:48.0000] <Ms2ger>
I think we're in general happy to have more explanatory prose

[07:01:08.0000] <annevk>
Domenic: what's JS for "is a function"?

[07:02:12.0000] <Ms2ger>
IsCallable()?

[07:02:46.0000] <annevk>
ah yeah

[07:03:14.0000] <JakeA>
annevk: arf https://github.com/ljharb/is-callable/blob/master/index.js

[07:03:47.0000] <MikeSmith>
Ms2ger: thanks (for release estimate)

[07:03:58.0000] <Ms2ger>
Np

[07:04:00.0000] <JakeA>
There should really be Object.isCallable()

[07:05:40.0000] <annevk>
heh

[07:29:36.0000] <wanderview>
JakeA: does chrome spin up service workers in incognito mode?

[07:29:59.0000] <JakeA>
wanderview: yep

[07:30:08.0000] <JakeA>
wanderview: although I'm not sure push works

[07:30:21.0000] <wanderview>
JakeA: so it stores the registration and then throws it away at the end of the session?

[07:30:55.0000] <JakeA>
wanderview: yeah, incognito is pretty much an in-memory profile that disappears with the final incognito tab

[07:31:59.0000] <wanderview>
JakeA: in FF we disable serviceWorker.register() in private browsing... was thinking its a possible solution for that twitter person's "concerns"

[07:32:10.0000] <wanderview>
(even though SW is kind of beside the point, etc)

[07:32:44.0000] <wanderview>
JakeA: from what jsbell told me previously, I think incognito mode in chrome goes to a temp folder on disk... so not pure in-memory

[07:34:41.0000] <wanderview>
JakeA: another thought I had was, it would be nice if we had a bit in IP or TCP header indicating "metered"... then the part of the network charging by the byte could flip it and browsers could tell even if they are a few steps downstream

[07:34:49.0000] <wanderview>
but I imagine smarter people have already discussed all that

[07:42:51.0000] <MikeSmith>
hi ritsyy!

[07:43:09.0000] <MikeSmith>
agreed that wbr usage should be explained more thoroughly

[07:51:27.0000] <JakeA>
wanderview: agreed, dunno if it's already a thing

[07:51:48.0000] <JakeA>
wanderview: the problem with failing .register is it makes private browsing observable, which might be a concern

[07:52:09.0000] <wanderview>
JakeA: we already fail IDB in private browsing... so yea

[07:52:21.0000] <JakeA>
ah fair enough, failing for SW is consistent then

[07:52:33.0000] <wanderview>
JakeA: but we try very hard not to write to disk... so doing pure memory everything is both harder and OOMy

[07:52:37.0000] <annevk>
Domenic: apart from https://github.com/annevk/html-cross-origin-objects/issues/32 I'm not aware of any issues

[07:52:46.0000] <wanderview>
in private browsing mode, I mean

[07:52:52.0000] <annevk>
Domenic: would still be quite some work to put it in HTML of course

[07:57:23.0000] <Domenic>
JakeA: there should not be; it is redundant with typeof. That repo is overcomplicated for no reason; IsCallable(x) <=> typeof x === "function"

[07:58:38.0000] <JakeA>
Domenic: hah, good point

[08:01:22.0000] <Domenic>
annevk: I don't understand https://github.com/annevk/html-cross-origin-objects/issues/32#issuecomment-179912391. COGOPH doesn't need any customizations as written.

[08:01:52.0000] <annevk>
Domenic: "Let originalDesc be OrdinaryGetOwnProperty(O, P)."

[08:02:27.0000] <Domenic>
I see

[08:04:43.0000] <Domenic>
annevk: why does it call OrdinaryGetOwnProperty(O, P) once for each e? That's observable, which seems bad.

[08:05:49.0000] <annevk>
Domenic: it doesn't?

[08:06:04.0000] <annevk>
Domenic: it only does it if something is SameValue, which can only happen once

[08:06:11.0000] <Domenic>
ah right -_-

[08:06:14.0000] <annevk>
Domenic: how would it be observable though?

[08:06:17.0000] <Domenic>
maybe i should get some caffeine...

[08:06:36.0000] <annevk>
Domenic: in the hypothetical case where we have no idea what Window does?

[08:07:01.0000] <Domenic>
I guess it would not be, I was thinking triggering getters or installing a proxy, but that doesn't make sense

[08:07:33.0000] <Domenic>
On the other hand, since it's *un*observable, then here's a solution, I think: factor out getting originalDesc into the caller. The caller already has to do so anyway.

[08:08:23.0000] <annevk>
Hmm, that seems potentially leaky

[08:08:34.0000] <annevk>
We should only get it I think if it's actually on the safelist

[08:09:02.0000] <Domenic>
So instead of "3. If IsWindowOrLocationSameOrigin(W), then return OrdinaryGetOwnProperty(W, P). 4. Let property be CrossOriginGetOwnPropertyHelper(W, P)."

[08:09:05.0000] <Domenic>
it becomes "3. Let property be W.[[GetOwnProperty]](P). 4. If IsWindowOrLocationSameOrigin(W), return property. 5. Set property to CrossOriginGetOwnPropertyHelper(W, P, property)."

[08:09:15.0000] <Domenic>
hmm why?

[08:09:27.0000] <Domenic>
I thought we just convinced ourselves it's unobservable...

[08:10:09.0000] <Domenic>
I guess it does not convey intent great though.

[08:10:09.0000] <annevk>
I guess what I'm saying is that it makes the setup more fragile

[08:11:43.0000] <Domenic>
Well, the only thing I can think of is either two algorithms that get inlined into the two [[GOP]]s, which seems fine personally since [[GOP]] has so much variation anyway and the shared code is minor; or, figure out some spec convention for passing "() => W.[[GetOwnProperty(P)]]" and "() => OrdinaryGetOwnProperty(this, P)" to the algorithm...

[08:13:11.0000] <Domenic>
I guess you could define a helper like you were suggesting, like having DefaultInternalMethod switch on the object type and just keep using that.

[08:14:08.0000] <annevk>
I was wondering if something like Call([[GetOwnProperty]], W, P) / Call(OrdinaryGetOwnProperty, this, P) would work

[08:14:48.0000] <Domenic>
Doesn't really work, since [[GOP]] is a method with one argument and OGOP is a function with two arguments

[08:16:34.0000] <Domenic>
You could maybe just pass a flag as the last parameter to COGOPH

[08:17:02.0000] <Domenic>
COGOPH(W, P, "delegate") vs. COGOPH(this, P, "use ordinary")

[08:18:28.0000] <annevk>
Seems reasonable, I might ask bz what he thinks about this

[08:18:46.0000] <annevk>
But yeah, this seems solvable, so tomorrow the big HTML PR then maybe

[08:18:55.0000] <Domenic>
\o/

[08:28:34.0000] <annevk>
So bz doesn't care since it's not observable, but Gecko does just call the internal method, not the ordinary default internal method

[08:28:53.0000] <annevk>
So... Meh

[08:29:16.0000] <annevk>
Oh right, also need TC39 to get back to me on the Ordinary* refactoring stuff I suppose

[08:40:35.0000] <Domenic>
bterlson ^

[08:40:44.0000] <Domenic>
(spec builds are so fast now... whee)

[08:41:14.0000] <Domenic>
(and I can do just ../build.sh instead of cding up a directory)

[08:41:43.0000] <annevk>
Domenic: heh

[08:42:01.0000] <annevk>
Domenic: so the other thing we could do is add some asserts about W not being an exotic object

[08:42:46.0000] <Domenic>
annevk: I'm starting to feel less strong about all this, and that would help, but I still think it's weird for a proxy not to delegate to its target.

[08:43:42.0000] <annevk>
Domenic: about the Call() thing earlier, both have the same amount of arguments there; the question is more whether you can rearrange things like that

[08:44:28.0000] <Domenic>
annevk: they don't... OGOP has two arguments, W.[[GOP]] has one

[08:45:25.0000] <annevk>
location.assign() has one argument too but you can also do Location.prototype.assign.call(location, argument) iirc

[08:45:57.0000] <Domenic>
sure but then you can't use the same .call() on a two-argument function and only pass two arguments

[08:46:12.0000] <Domenic>
you can't do setTimeout.call(fn, time)

[08:46:57.0000] <annevk>
I think I understand now

[08:50:17.0000] <Domenic>
time ./build.sh -n 10.6 seconds

[08:51:19.0000] <Domenic>
and that's on my puny laptop

[08:54:02.0000] <annevk>
Oh, the other thing aside from JS that needs updating is IDL

[08:54:41.0000] <annevk>
But I guess we don't have to wait on IDL or even JS, necessarily

[08:56:02.0000] <Domenic>
both of them accept PRs, although IDL has that super-great spec tooling...

[08:56:33.0000] <annevk>
I submitted a PR to JS already, and opened an issue with a question on whether another PR would be accepted that went a bit further than cleanup

[08:57:23.0000] <Domenic>
yeah just waiting for bterlson to get working today I guess

[08:57:54.0000] <bterlson>
I will be back at ecmascript stuff around 12:00pst for the record :-P

[09:02:36.0000] <bterlson>
wasn't there another PR on a similar thing just recently?

[09:03:41.0000] <bterlson>
oh yes, found it, and also see I missed annevk

[09:03:46.0000] <bterlson>
's post at the bottom, sorry

[09:07:23.0000] <annevk>
bterlson: there was another issue, https://github.com/tc39/ecma262/issues/343#issuecomment-178450008

[09:07:41.0000] <bterlson>
rgr, sorry aboutnot replying to you

[09:15:16.0000] <bterlson>
tell me more about perf advancements?

[09:15:16.0000] <botie>
will do

[09:15:27.0000] <bterlson>
I want 10s build for ecma262 :-P

[09:16:15.0000] <bterlson>
probably need to jettison the DOM and have a 1-pass build process

[09:25:18.0000] <Domenic>
bterlson: well in this case most of the perf improvements were from eliminating downloads and compilation of entities and quote data from CLDR and Unicode. Those things change rarely enough there's no need to update them.

[09:25:51.0000] <Domenic>
bterlson: the actual build still uses a HTML parser (one hand-crafted by Hixie_ in FreePascal, admittedly) and I am pretty sure it outputs something DOM-like

[09:25:52.0000] <bterlson>
oh lol

[09:25:54.0000] <ritsyy>
MikeSmith: hello :) , yeah so i think i could give it a try to add some more points to wbr spec

[09:25:57.0000] <Domenic>
bterlson: I think you should just work to make jsdom faster :)

[09:26:22.0000] <bterlson>
Domenic: I would have much fun doing that :-D maybe when I'm not under water 24/7 :-P

[09:26:50.0000] <Domenic>
^_^

[09:28:03.0000] <Sebmaster>
Domenic: have you tried using jsdom for generating that dom structure?

[09:28:54.0000] <Domenic>
Sebmaster: which one? bterlson uses it already for the ES spec.

[09:29:04.0000] <Domenic>
Haven't tried it on the HTML spec though

[09:29:23.0000] <Sebmaster>
Huh, sweet

[09:31:26.0000] <Domenic>
Sebmaster: he is why we need to make URL parsing lazy :P

[09:31:42.0000] <Domenic>
ES spec has lots of <a>s... I am hoping 8.0.0 speeds it up a lot.

[09:32:43.0000] <Sebmaster>
Oh huh, I wonder how the parser rewrite will impact speed :S

[09:33:40.0000] <Domenic>
i would guess not much... it removes a small layer of indirection

[09:39:06.0000] <MikeSmith>
bterlson: Domenic: I'm not sure about the context for what you were discussing about build process and "10s build for ecma262" and the HTML parser for the HTML spec build, but Hixie's HTML does expose a subset of the standard DOM APIs, as well as some custom convenience methods https://github.com/whatwg/wattsi/blob/master/src/html/dom.pas

[09:42:00.0000] <MikeSmith>
bterlson: and as far as the "10s build" part, I would be surprised if you could end up finding something that would do anything faster than Hixie's parser can. In my environment, it takes less than 4s for it to process the entire 5.8MB HTML spec sourceーto parse it and run all the processing it does to generate the actual fully-formatted spec

[09:42:47.0000] <MikeSmith>
*Hixie's HTML does *parser* expose a subset of the standard DOM APIs

[09:46:31.0000] <MikeSmith>
oofs still off by one word there but you know what I mean

[09:52:51.0000] <bterlson>
MikeSmith: I suspect BS build process is also much less involved than ecma262 so probably 10s is impossible :-P

[09:59:10.0000] <MikeSmith>
bterlson: yeah I think I fear learning the details of the ecma262 spec :) The output on its own scares me enough already 😆

[10:00:58.0000] <MikeSmith>
but if by “BS build process” you mean Bikeshed: For the HTML spec we're not using Bikeshed but instead a custom tool that Hixie wrote that's better :)

[10:01:07.0000] <MikeSmith>
it's certainly faster

[10:02:03.0000] <MikeSmith>
Bikeshed would take about 80s at least to process the same source

[10:03:00.0000] <MikeSmith>
*fear learning the details of the ecma262 spec *build*

[10:05:06.0000] <caitp>
look on the bright side, at least you don't have to author these things in LaTeX or anything

[10:28:13.0000] <ritsyy>
how the dfn are defined in the spec, i mean as to add a id https://www.w3.org/Bugs/Public/show_bug.cgi?id=27503 should it not be <dfn data-x="origin-opaque-identifier"> ?

[10:29:33.0000] <Domenic>
ritsyy: that sounds about right

[10:30:22.0000] <ritsyy>
Domenic: okay actually i got confused with the concept-origin , you mentioned in the comment

[10:30:42.0000] <Domenic>
ritsyy: oh. Well, we usually start IDs for things like that with a "concept-" prefix, so yeah, maybe include that.

[10:31:47.0000] <ritsyy>
Domenic: okay could you explain a bit, i mean why "concept-" is used

[10:32:28.0000] <Domenic>
ritsyy: it's not followed everywhere, but it seems like the idea is to use "concept-" for things that are conceptual, "dom-" for APIs, and there are a few others... I think there was a document on the wiki somewhere...

[10:33:52.0000] <ritsyy>
Domenic: oh okay, thanks got your point

[10:35:34.0000] <Domenic>
ritsyy: here is the list https://wiki.whatwg.org/wiki/Specs/howto#Definitions we should maybe put that in the readme or something...

[10:37:34.0000] <ritsyy>
Domenic: yeah mentioning some heading for these points and their wiki links would be helpful in the readme

[12:24:40.0000] <bterlson>
MikeSmith: is this the wattsi tool that you're using?

[12:25:11.0000] <bterlson>
MikeSmith: you must not have too much generation going from source doc --> output doc I guess?

[12:25:20.0000] <bterlson>
MikeSmith: just curious how it's so fast :-P

[12:32:06.0000] <Domenic>
bterlson: there's a lot of generation...

[12:32:17.0000] <Domenic>
bterlson: it's an AOT language I guess

[12:32:42.0000] <Domenic>
and an optimized DOM instead of a general purpose one, I presume

[12:33:01.0000] <Domenic>
philipj: in https://github.com/whatwg/html-build/pull/75, what do you mean about those being removed? Is that bad? Or is it more, they should never have been linked in the first place?


2016-02-05
[16:01:30.0000] <MikeSmith>
bterlson: yeah it's wattsi and regarding the speed, as Domenic pointed out it doesn't attempt to provide a general-purpose DOM and it's all AOT; and on top of that, I think Hixie coded it carefully for very high performance, and the FreePascal fpc compiler itself apparently has some pretty nice optimization tricks and overall Hixie took good advantage of some of the smarter features the language+compiler

[16:01:36.0000] <MikeSmith>
 provide

[16:03:24.0000] <MikeSmith>
bterlson: as far as what source --> output generation tasks it's doing, it's the same as Bikeshed or other (previous) spec-gen tools, plus probably a little more for some more arcane things that are specific to the HTML spec source and not just general

[16:03:42.0000] <MikeSmith>
see https://github.com/whatwg/wattsi#features but that's not a complete list I think

[16:05:32.0000] <MikeSmith>
Number the sections · Create Table of Contents · Cross-reference <span> and <code> to <dfn> · Create small TOC · Cross-reference back (<dfn> menu) · Strip out unused references · Spec splitting

[16:13:56.0000] <MikeSmith>
Domenic: bterlson btw I wonder if y’all have put consideration yet into doing a mult-page version of the ES spec

[16:15:16.0000] <MikeSmith>
I don't know how big the output ES spec is at that point, but back when I did https://es5.github.io/ I remember it being big enough that it was useful to have a multi-page version https://es5.github.io/multi.html

[16:15:54.0000] <bterlson>
MikeSmith: under consideration (it'd be trivial for emu to emit a multi-page spec). But everyone around here prefers the full spec.

[16:16:13.0000] <bterlson>
arguably with my nifty search box, multi-page becomes much easier as search isn't broken

[16:21:09.0000] <MikeSmith>
ok

[16:22:04.0000] <MikeSmith>
well in some places people on slower connections might like having a smaller document to have to load

[16:22:36.0000] <MikeSmith>
and I am pretty sure there are enough crazy other people like me who also attempt to read specs on smartphones

[16:23:35.0000] <MikeSmith>
in which case scrolling and some other things are a bit less pleasant with big single documents

[16:25:13.0000] <MikeSmith>
Domenic: I'm noticing/recalling that the HTML spec dfn popup thing doesn't work cross-file in the multipage output

[16:25:26.0000] <MikeSmith>
can't remember if we have an issue open for that

[16:25:29.0000] <MikeSmith>
/me checks

[16:26:22.0000] <Domenic>
MikeSmith: we definitely do

[16:26:37.0000] <Domenic>
It's a high work, high reward wattsi task

[16:26:47.0000] <Domenic>
You have to generate the pop-ups ahead of time

[16:27:45.0000] <Domenic>
bterlson: I prefer multipage specs for other specs to link to

[16:27:57.0000] <Domenic>
I hate clicking a link and hanging Firefox for ten minutes

[16:28:12.0000] <bterlson>
Firefox needs to fix their ecma262 rendering speed, it's the worst of the bunch

[16:28:20.0000] <Domenic>
While implementing or speccing, singlepage is great

[16:28:36.0000] <Domenic>
Yeah Firefox is not good at large documents

[16:28:41.0000] <bterlson>
chrome loads on my crappy laptop in 2 seconds or so.

[16:28:46.0000] <bterlson>
seems fine ;)

[16:29:13.0000] <bterlson>
so we got a chakra dev that uses chrome, a chrome dev that uses firefox, all we need to find is a firefox dev that uses edge and the circle is complete

[16:29:34.0000] <Domenic>
Except, nobody but us uses Windows, waaaa waaaaaaa

[16:37:20.0000] <bterlson>
Domenic: Not since you moved off :(

[16:38:23.0000] <MikeSmith>
haha

[16:38:57.0000] <MikeSmith>
A chakra dev that uses chrome, a chrome dev that uses firefox, and a firefox dev that uses edge walk into a bar...

[16:40:52.0000] <Domenic>
bterlson: that's just my Google laptop, still rocking two Windows desktops and a Surface Pro 4 :D

[16:45:59.0000] <bterlson>
I just got the SP4 myself for home

[16:46:08.0000] <bterlson>
pretty nice machine except my pen stops working sometimes :(

[16:48:36.0000] <Domenic>
I used the pen once

[16:48:40.0000] <Domenic>
It was kind of cool

[16:49:28.0000] <Domenic>
I'm still angry they haven't fixed the bug where you lock your screen sideways then plug in a keyboard and your screen stays locked sideways and can't be unlocked until you unplug the keyboard

[16:50:12.0000] <bterlson>
Domenic: get the NYT crossword app

[16:50:37.0000] <bterlson>
pen makes crosswords on computer actually fun

[18:46:36.0000] <roc>
Domenic: you mean this? http://www.ecma-international.org/ecma-262/6.0/index.html loads in Firefox in a few seconds for me

[20:18:58.0000] <MikeSmith>
roc: I think instead https://tc39.github.io/ecma262/ (though that also loads quickly for me in Firefox)

[20:19:28.0000] <roc>
yeah, that loads even faster for me :-)

[20:40:47.0000] <annevk>
Domenic: I noticed yesterday that Streams has some <emu-alg> and <emu-val> in the output, bug?

[21:12:31.0000] <annevk>
Domenic: the weird thing is that sometimes <emu-val> is used and sometimes <b>

[21:12:36.0000] <Domenic>
annevk: nah, feature

[21:12:44.0000] <Domenic>
annevk: emu-val should be used for all ecmascript values, hmm

[21:13:17.0000] <annevk>
Domenic: maybe it's just some legacy <b> stuff

[21:13:18.0000] <Domenic>
roc: it loads in 2s ish, but locks up the entire browser while doing so

[21:14:00.0000] <Domenic>
annevk: ah I see, the stuff I authored by hand uses <b>, the stuff output uses <emu-val>. Yeah those should be <emu-val>s...

[21:14:32.0000] <annevk>
I was looking yesterday for what I wanted to use for HTML

[21:14:36.0000] <annevk>
I was thinking just <b> for now

[21:15:09.0000] <Domenic>
yeah

[21:15:15.0000] <Domenic>
HTML is weird because it doesn't bold the stuff ES bolds

[21:15:17.0000] <Domenic>
like null

[21:15:21.0000] <Domenic>
and I think true and false too

[21:15:30.0000] <annevk>
Also, my plan is to just have a big fat warning about Window not being able to become exotic and explain the whole thing, since it's not observable

[21:15:45.0000] <Domenic>
:( :( :(

[21:16:00.0000] <annevk>
Yeah, I'm not sure how the two styles will go together

[21:16:10.0000] <Domenic>
I am sad that the proxy is not acting as a proxy, and am sad that CrossOriginX() will actually do both cross origin and same origin behavior.

[21:16:22.0000] <annevk>
I'm hoping that once we get to refactoring IDL we'll be able to set some kind of algorithm styleguide

[21:16:55.0000] <annevk>
Had not considered that second concern

[21:17:24.0000] <annevk>
Though again, that would bring us back to that Helper abstract operation

[21:17:25.0000] <annevk>
Meh

[21:34:26.0000] <MikeSmith>
Domenic: philipj about those lint greps, one minor refinement to consider is that we catch-fire-and-fail on the first one

[21:34:51.0000] <MikeSmith>
stop and don't bother to check any further if we find a problem

[21:35:26.0000] <MikeSmith>
in the normal (no errors) case it doesn't make anything faster of course, so maybe there's no point

[21:48:55.0000] <annevk>
Being able to PR ECMAScript is so nice

[22:31:31.0000] <annevk>
Many +s to philipj for filing all ideas as issues

[22:42:03.0000] <philipj>
MikeSmith: I guess you're tempted because that makes it easier to return 1 on failure? :P

[22:42:32.0000] <philipj>
MikeSmith: which would be fine I guess, it just wouldn't speed up successful builds

[22:50:13.0000] <philipj>
annevk: https://github.com/whatwg/html/issues/620#issuecomment-180218755 looks promising

[23:36:57.0000] <annevk>
MikeSmith: would be more annoying if you are on the end of having to fix those errors

[23:48:02.0000] <MikeSmith>
ok I'll just have it continue

[00:20:48.0000] <ritsyy>
should this bug be closed https://www.w3.org/Bugs/Public/show_bug.cgi?id=28709 , is it mentioned somewhere that the panel could be closed with the upper right corner handle or should it be?

[00:35:01.0000] <philipj>
ritsyy: yeah, it seems to work for me

[00:36:11.0000] <philipj>
ritsyy: will comment on bug

[01:46:12.0000] <annevk>
wanderview: https://github.com/whatwg/fetch/pull/200/files#r51456507

[01:47:01.0000] <annevk>
JakeA: what's the conclusion on https://github.com/whatwg/fetch/pull/194? Shall I merge it and open some issues?

[01:52:48.0000] <annevk>
Minor announcement: I deleted the "html team" from GitHub, but everyone is still part of the repository

[01:54:20.0000] <JakeA>
annevk: yeah I'm happy with it apart from what I already commented

[01:55:10.0000] <annevk>
JakeA: yeah, but you commented on the text in the current draft mostly, not on the refactoring

[01:55:24.0000] <annevk>
that made it a little hard to figure out what I should be doing

[01:58:07.0000] <JakeA>
annevk: huh, I though the "HTTP redirect fetch" section was what we were reviewing?

[01:58:51.0000] <annevk>
JakeA: all that text already exists, this is just that text in its own section so it can be reused by HTML's navigate

[01:59:12.0000] <annevk>
JakeA: but it's great to have it reviewed too

[02:01:43.0000] <JakeA>
annevk: I reviewed it from the point of view of navigate calling out to it, but also a normal "follow" redirect. Seems fine. Might want tweaks following the resolution of the base uri thing.

[02:03:03.0000] <annevk>
JakeA: well, https://github.com/whatwg/fetch/pull/194#discussion_r51465810 will need tweaking either way, that's a serious issue

[02:03:10.0000] <JakeA>
Agreed

[02:04:34.0000] <annevk>
JakeA: see also https://github.com/whatwg/html/issues/613 btw, everything sorta uses the response URL for base these days, but the initial request URL

[02:05:14.0000] <annevk>
JakeA: we forgot about module scripts having subresources in the same way that CSS does

[02:05:46.0000] <JakeA>
annevk: I didn't realise they had their own base

[02:06:15.0000] <annevk>
only for the static bits

[02:06:33.0000] <JakeA>
annevk: as in the imports?

[02:06:39.0000] <annevk>
yeah

[02:10:47.0000] <JakeA>
annevk: as I'm coming around to using response URL as base everywhere, most developers are saying request URL is intuitive :(

[02:11:18.0000] <JakeA>
That would break CSS redirects from the SW of course, which I'm not keen on

[02:14:10.0000] <annevk>
https://github.com/whatwg/fetch/issues/212

[02:14:18.0000] <annevk>
And module script redirects

[02:15:31.0000] <annevk>
And URLs in workers

[02:16:46.0000] <annevk>
Did we consider workers? Today if I do new Worker("/x") and the server redirects to /bar/x and all the links inside the worker are relative, that works

[02:16:58.0000] <annevk>
Once you use a service worker that eats the redirects, all those links would break

[02:20:36.0000] <JakeA>
Agreed. And although I think of pages differently because of URL bar visibility, I guess I'll get over it :D

[02:33:51.0000] <tobie>
If I have an interface attribute of type Foo, can it hold a value of type FooChild if FooChild inherits from Foo?

[02:35:49.0000] <annevk>
Yes

[02:36:02.0000] <annevk>
See: all of DOM

[02:36:43.0000] <tobie>
Yeah, I assumed that was the case, didn't really know where to look for confirmation in the spec.

[02:37:08.0000] <tobie>
annevk: thanks, btw :)

[02:38:36.0000] <ritsyy>
philipj: there is one more bug related to the user-interface https://www.w3.org/Bugs/Public/show_bug.cgi?id=28829

[02:39:10.0000] <tobie>
annevk: is there a place in the spec where that's explicit?

[02:39:35.0000] <annevk>
tobie: must be in IDL somewhere

[02:39:49.0000] <tobie>
:D

[02:41:04.0000] <annevk>
tobie: in https://heycam.github.io/webidl/#idl-interfaces I guess, but I can't find it quickly

[02:41:15.0000] <Ms2ger>
"An identifier that identifies an interface is used to refer to a type that corresponds to the set of all possible non-null references to objects that implement that interface."

[02:42:06.0000] <tobie>
Ms2ger: Thank you. I could have read this 10 times without figuring it was the answer to my question.

[02:42:39.0000] <Ms2ger>
:D

[02:42:56.0000] <ritsyy>
philipj: i didn't get that what would be the possible solution for  https://www.w3.org/Bugs/Public/show_bug.cgi?id=28709  as you mentioned in the comment should the UI be altered for this?

[02:43:22.0000] <tobie>
annevk: thanks again (didn't mean to make you peruse the WebIDL spec, btw; apologies)

[02:46:55.0000] <annevk>
heh, no worries

[02:55:56.0000] <Ms2ger>
philipj, I disclaim all knowledge about menuitem, try wchen :)

[03:41:21.0000] <ritsyy>
annevk: in this https://www.w3.org/Bugs/Public/show_bug.cgi?id=27274 should those event handlers(beforecopy event and more) be added , am i getting it right?

[04:44:23.0000] <jochen__>
about https://github.com/whatwg/html/issues/632

[04:44:48.0000] <jochen__>
anybody has a good definition to offer for "browsing context responsible for starting the navigation"?

[04:55:11.0000] <annevk>
ritsyy: sorry, got distracted

[04:56:03.0000] <annevk>
ritsyy: I think we might end up removing the before* events mentioned there so those should probably not be added

[06:03:31.0000] <ritsyy>
annevk:  sorry was afk, then adding onpaste in the list seems fine?

[06:03:41.0000] <annevk>
yeah

[06:04:42.0000] <annevk>
ritsyy: also oncut/oncopy

[06:05:00.0000] <annevk>
ritsyy: and only to elements per Hixie_'s comment there

[06:05:42.0000] <ritsyy>
annevk: ok yeah, got that

[06:57:26.0000] <wanderview>
annevk: JakeA: since I suck and never reviewed the PR... can either of you summarize any functional changes to manual redirects from this? https://github.com/whatwg/fetch/pull/194

[06:57:38.0000] <wanderview>
or should it work the same way, but with just different spec language

[06:57:55.0000] <wanderview>
/me sucks at reading html diffs.

[06:58:46.0000] <JakeA>
I think the idea is for it to work the same way

[06:59:01.0000] <JakeA>
wanderview: I cloned the repo, switch to the pr branch & read in a browser

[06:59:13.0000] <JakeA>
I only used the diff to work out which sections were new

[07:00:19.0000] <wanderview>
yea... that works I guess

[07:00:50.0000] <wanderview>
thanks for the clarification the function probably shouldn't change

[07:00:54.0000] <annevk>
wanderview: basically we return early now for manual redirects

[07:01:06.0000] <wanderview>
not writing a gecko bug to update for new behavior

[07:01:09.0000] <annevk>
wanderview: rather than do some checks before

[07:01:23.0000] <wanderview>
we don't implement manual redirects exactly like fetch spec anymore anyway

[07:01:57.0000] <annevk>
is that something we won't fix?

[07:02:31.0000] <wanderview>
we fixed it not to be special case for fetch() any more... its now done down in the nsIChannel

[07:03:16.0000] <wanderview>
which we needed in order to properly allow manual redirects to work without triggering failures when redirect from https-to-http

[07:15:11.0000] <JakeA>
Domenic: You're a JS expert, help settle a bet (if you've got time). In ye olde es5 days a for loop could be transformed into a while loop pretty easily http://jsbin.com/suyuqi/edit?js, but that isn't possible anymore, right?

[07:17:16.0000] <ondras>
JakeA: shouldn't the "if (C){}" line be "C;" instead?

[07:17:42.0000] <JakeA>
ondras: no, it needs to throw if C isn't a simple expression, the 'if' enforces that

[07:18:15.0000] <JakeA>
for (;false;var foo = 'bar') throws

[07:18:44.0000] <JakeA>
well, it's a syntax error

[07:19:02.0000] <ondras>
I see.

[07:23:21.0000] <annevk>
Domenic: typing out the whole cross-origin objects thing is taking longer than expected

[08:05:07.0000] <JonathanNeal>
Thanks alrra .

[08:43:14.0000] <JakeA>
Domenic: this is as far as we got trying to represent a for loop as a while http://jsbin.com/labezor/edit?js,console

[08:46:25.0000] <Domenic>
JakeA: I'm... really not sure why you're trying to do this?

[08:47:12.0000] <JakeA>
Domenic: the goal is to understand how for() works in terms of its scoping

[08:47:54.0000] <JakeA>
Babel gets it wrong, so we're trying to figure out what's right

[10:12:56.0000] <nikkibee>
what does it mean for the request redirect mode to be `manual`? https://fetch.spec.whatwg.org/#concept-request-redirect-mode

[10:13:39.0000] <nikkibee>
I ask because of step 10, on a redirect status, under step 5 of http fetch https://fetch.spec.whatwg.org/#http-fetch

[10:14:17.0000] <nikkibee>
my assumption is that a redirect mode is set to `manual` meaning, the user clicked on something themselves? should that be so, I don't know how I could recreate this inside a test case

[12:17:31.0000] <miketaylr>
rbyers: will dig thru old bugs and reply to that thread in a bit (just finishing up some stuff right now)

[12:17:56.0000] <nikkibee>
nvm on what I was asking earlier, I realized I actually just need to set the redirect mode when I'm making the request- not in the middle of the fetch function

[12:19:30.0000] <rbyers>
miketaylr: Ok, no rush (but I'm on vacation starting in 2 hours <grin>).  I'm just trying to figure out where this change lies on the spectrum of wishful thinking but not really practical for advancing the web and really valuable to push the last remaining sites (including GMail) off of.

[12:20:21.0000] <miketaylr>
heh

[12:21:00.0000] <miketaylr>
i get the hunch we saw this quite a bit in japanese sites, but need to hunt down a spreadsheet

[12:21:12.0000] <miketaylr>
you know, the best place to keep a record of bugs >_>

[12:28:09.0000] <annevk>
nikkibee: fetch() can set the redirect mode

[12:28:30.0000] <nikkibee>
annevk: do you mean the javascript api?

[12:28:48.0000] <annevk>
nikkibee: you can also observe it in service workers for navigation (manual)

[12:28:54.0000] <annevk>
nikkibee: yup

[12:29:14.0000] <nikkibee>
annevk: heh, I got the idea about what was wrong in my logic when somebody linked me the part of the JS api that sets redirect mode

[12:29:22.0000] <nikkibee>
I don't deal with JS or the fetch JS api at all


2016-02-06
[05:03:43.0000] <annevk>
Domenic: since I can't do much on Monday, I posted a big patch just now


2016-02-07
[08:10:53.0000] <mathiasbynens>
https://twitter.com/0x6D6172696F/status/696365072336216064

[10:13:58.0000] <annevk>
mathiasbynens: the answer is no

[10:14:28.0000] <annevk>
mathiasbynens: unfortunately it seems the platform lacks the resources and/or interest to specify SVG

[12:38:20.0000] <annevk>
wanderview: if you could comment on https://github.com/whatwg/fetch/pull/200 (search for your own name) that'd be greatly appreciated


2016-02-08
[22:15:55.0000] <sscollege>
Hi This is from SS COllege Baran

[22:16:16.0000] <sscollege>
can you provide me some resources for HTML5 Canvas tools

[22:19:21.0000] <sscollege_>
Hi

[23:03:32.0000] <annevk>
yhirano_: did you see https://github.com/whatwg/fetch/pull/200#discussion-diff-51456507?

[23:03:49.0000] <annevk>
yhirano_: hoping to get wanderview to look at that too today

[23:04:03.0000] <annevk>
yhirano_: seems other than that we should be able to land this

[02:26:32.0000] <ritsyy>
the https://html.spec.whatwg.org/multipage/webappapis.html#handler-onreadystatechange "readystatechange" event seems not be supported on Documents http://software.hixie.ch/utilities/js/live-dom-viewer/?saved=3870

[03:25:56.0000] <MikeSmith>
TabAtkins: FYI https://twitter.com/schammy/status/696488094317486080 (though given his negativity, not sure if you want to try to bother to find out what he's raging about; they’re might not be a constructive conversation to be had with him)

[03:26:20.0000] <MikeSmith>
oofs

[03:26:25.0000] <MikeSmith>
*there might not be

[03:27:44.0000] <MikeSmith>
I somehow got infected with the same there/they’re misspelling bug that tobie had the other day

[03:35:36.0000] <MikeSmith>
interesting "Oslo Børs and The Financial Supervisory Authority of Norway have decided to suspend the shares (and derivatives) in Opera Software ASA in anticipation of an announcement from the company." http://www.newsweb.no/newsweb/search.do?messageId=394295

[03:35:55.0000] <MikeSmith>
(by way of Anssi https://twitter.com/anssik/status/696655364176089088)

[03:49:52.0000] <Ms2ger>
> Browser vendors should start their own consortium & tell the @W3C to piss off.

[03:49:52.0000] <Ms2ger>
Lol

[03:52:10.0000] <jgraham>
I know, imagine that

[03:56:21.0000] <annevk>
Where is that from?

[03:56:25.0000] <Ms2ger>
https://twitter.com/schammy/status/696488094317486080

[03:58:43.0000] <annevk>
ritsyy: that test only tests window and the root element, no?

[05:35:35.0000] <Ms2ger>
annevk, is an "environment settings object" 1:1 to a global object?

[05:45:48.0000] <annevk>
Should be, but check with Domenic

[05:46:18.0000] <Ms2ger>
Domenic, checking in :)

[05:55:58.0000] <Ms2ger>
/me tries to figure out how window.top's spec works

[05:56:23.0000] <Ms2ger>
The top IDL attribute on the Window object of a Document in a browsing context b...

[06:18:52.0000] <wanderview>
annevk: yhirano_: so, I suck at reading html diffs... where does it normatively require a single chunk in the stream?  all I see is it says to enqueue a UInt8Array

[06:19:48.0000] <annevk>
wanderview: for all of the contents of the blob

[06:20:13.0000] <beverloo>
annevk, notifications.spec.whatwg.org doesn't reflect the latest commit yet

[06:20:54.0000] <wanderview>
annevk: oh... for the blob case

[06:20:57.0000] <wanderview>
yes, that seems crazy

[06:21:15.0000] <wanderview>
I'll comment

[06:21:20.0000] <annevk>
beverloo: weird, fixed manually

[06:21:25.0000] <beverloo>
ta

[06:22:39.0000] <annevk>
wanderview: not yhirano_'s fault btw, it was already phrased as such, but now it would become observable

[06:52:15.0000] <wanderview>
annevk: a flash <object> in a page generating network requests to load a video should go through the controlling service worker fetch event, right?

[07:01:59.0000] <annevk>
wanderview: I think Chrome doesn't do this

[07:02:10.0000] <annevk>
wanderview: in theory, this depends on how the plugin is defined to work

[07:02:40.0000] <wanderview>
JakeA: do you know what chrome does here? ^^^

[07:03:09.0000] <JakeA>
wanderview: we skip <object> requests and all plugin requests

[07:03:27.0000] <wanderview>
this isn't spec'd yet, though... right?

[07:03:33.0000] <wanderview>
or did I miss it

[07:04:09.0000] <JakeA>
hm, yeah, I guess plugin behaviour isn't spec'd. It should be at least a note.

[07:04:18.0000] <annevk>
We might have it specified that if destination is unknown, the service worker is not invoked

[07:04:22.0000] <wanderview>
I mean, should <object> set the skip-service-worker flag?

[07:04:42.0000] <JakeA>
wanderview: that's already spec'd

[07:04:50.0000] <annevk>
wanderview: I think that probably follows from <object> setting destination to "unknown"

[07:05:36.0000] <wanderview>
JakeA: annevk: is it in html spec or fetch spec that sets the flag for unknown destination?

[07:06:20.0000] <JakeA>
hmm, I can't find it, maybe it was missed when the html spec was updated for fetch?

[07:06:50.0000] <JakeA>
wanderview: https://fetch.spec.whatwg.org/#potential-navigation-or-subresource-request is defined, but there's no reference

[07:07:07.0000] <wanderview>
yea, I saw that

[07:07:38.0000] <JakeA>
But we should also have a note explaining that additional requests triggered by <object>/<embed> should skip sw

[07:08:02.0000] <annevk>
wanderview: I think service workers uses that

[07:08:07.0000] <annevk>
wanderview: or that was the plan anyway

[07:08:42.0000] <wanderview>
ah, there is a note in the service worker spec

[08:26:09.0000] <Domenic>
Ms2ger: annevk: yep, global <-> environment settings object

[08:26:48.0000] <annevk>
Domenic: jungkee thought for some reason that we changed the setup btw and let an environment settings object survive navigation

[08:26:56.0000] <annevk>
Domenic: but I haven't checked in with him recently...

[08:27:05.0000] <annevk>
I wish he'd hang out here more often

[08:27:11.0000] <Ms2ger>
Okay

[08:27:12.0000] <Domenic>
annevk: I could believe that service workers have exotic desires here but I don't think that's quite the right way to do whatever they need...

[08:27:26.0000] <Ms2ger>
/me goes back to looking at how he got here

[08:27:39.0000] <annevk>
I think they want the same, he thought we somehow changed the setup

[08:29:22.0000] <Ms2ger>
So is the "responsible document" of a "browsing context environment settings object" the same thing as getting window.document?

[08:30:36.0000] <Ms2ger>
Domenic, there also is no Window.prototype.frameElement :)

[08:30:50.0000] <Domenic>
/me looks harder at what's going on

[08:30:55.0000] <Domenic>
oh right

[08:30:56.0000] <Domenic>
because window

[08:30:59.0000] <Ms2ger>
Yep

[08:31:07.0000] <Ms2ger>
But will fix to use 'window'

[08:32:09.0000] <Domenic>
Ms2ger: "The document IDL attribute must return the Window object's newest Document object." hmmm

[08:32:43.0000] <Ms2ger>
Yeah, nothing is particularly well-defined here

[08:32:53.0000] <Domenic>
Ms2ger: yes, they are the same, per https://html.spec.whatwg.org/#script-settings-for-browsing-contexts:responsible-document

[08:33:13.0000] <Ms2ger>
I got confused about what "currently" means there

[08:33:35.0000] <Ms2ger>
Not sure if I have better wording

[08:34:41.0000] <Domenic>
Ms2ger: it makes sense to update it to say newest

[08:34:44.0000] <Domenic>
to be consistent

[08:35:04.0000] <Domenic>
if you wanted to get fancy you could make one of them a dfn and the other link to it

[08:36:36.0000] <Ms2ger>
I think we'd want Window to have a Document field that's updated when loading the initial document, and then this should all fall out, hopefully

[08:37:41.0000] <Ms2ger>
Fixed the 'window'

[08:38:28.0000] <annevk>
Domenic: specially for you: https://github.com/whatwg/html/pull/652

[08:38:43.0000] <Domenic>
Agreed

[08:38:51.0000] <Domenic>
annevk: woohoo

[08:38:58.0000] <Ms2ger>
And data-x pushes this over 100 columns, yay

[08:40:08.0000] <Ms2ger>
Domenic, done

[08:40:31.0000] <Domenic>
Ms2ger: good stuff as always, thanks

[08:41:07.0000] <Ms2ger>
annevk, nice

[08:45:42.0000] <Ms2ger>
annevk, it might make sense to parse relative to either an element or a settings object

[08:47:29.0000] <annevk>
Ms2ger: yeah, maybe

[08:48:03.0000] <annevk>
Ms2ger: it's really against a document mostly, but I left the current setup since that would be too many changes and if we ever want to get baseURI back to do element-level things we'd have to revert all the things

[08:48:47.0000] <Ms2ger>
I think the only callers that don't pass either of those are WebSocket and appcache, and those can use the url parser directly

[08:49:50.0000] <annevk>
I really wish AppCache fate was a little clearer

[08:50:02.0000] <annevk>
Because if we need to keep it, a lot of it needs to move to Fetch

[08:54:32.0000] <Ms2ger>
Domenic, glad I don't have to do the auditing :)

[08:54:54.0000] <Domenic>
Ms2ger: haha it's not so bad...

[08:55:15.0000] <Domenic>
annevk: haven't we pretty conclusively moved baseURI to document?

[08:55:51.0000] <annevk>
Domenic: well baseURI exists everywhere still, but it looks to the document

[08:55:59.0000] <Domenic>
annevk: right yeah that's what I meant

[08:56:05.0000] <Domenic>
annevk: I don't see us reverting that anytime soon

[08:56:47.0000] <annevk>
yeah, we might never I suppose

[08:57:32.0000] <annevk>
Another question here is whether it's worth changing all the callers to say relative to element's node document

[08:57:54.0000] <Domenic>
annevk: I would find that clearer

[08:58:29.0000] <annevk>
Domenic: there's about 70 callsites though and a lot of rewrapping :-/

[08:58:52.0000] <annevk>
Perhaps the bigger problem is that TextWrangler is just not very quick at making changes to such a large document

[08:59:36.0000] <Domenic>
sublime is pretty good

[08:59:48.0000] <Domenic>
it would be nice if we had an autoformat tool though

[09:06:20.0000] <annevk>
Domenic: I'll give Sublime a try

[09:06:28.0000] <annevk>
Domenic: https://www.sublimetext.com/ I take it?

[09:06:37.0000] <Domenic>
annevk: yep

[09:08:34.0000] <annevk>
Domenic: that does seem much quicker

[09:08:48.0000] <annevk>
Domenic: I should have checked out alternatives sooner I guess

[09:09:00.0000] <annevk>
😟

[09:49:02.0000] <ritsyy>
Ms2ger: this one is resolved now https://www.w3.org/Bugs/Public/show_bug.cgi?id=28925 right?

[09:50:34.0000] <Ms2ger>
Doesn't seem like it is?

[09:52:29.0000] <ritsyy>
Ms2ger: okay then i got confused with your comment sorry, is this one you pointed "If there is a hyperlink suffix, append it to URL."

[09:52:33.0000] <annevk>
The other tricky thing with that issue is what if the original URL specifies a fragment

[09:52:43.0000] <annevk>
so maybe it's not quite a "good first bug"

[09:53:30.0000] <Ms2ger>
I think existing browsers do indeed do the weird thing there

[09:53:37.0000] <Ms2ger>
At least Gecko does

[09:54:22.0000] <Ms2ger>
ritsyy, yeah, and at that point (step 7), URL is a "URL record", as the URL spec calls it

[09:54:24.0000] <ritsyy>
annevk: oh okay, then it's something i didn't figured out

[09:54:35.0000] <Ms2ger>
Oh wait, no

[09:55:12.0000] <Ms2ger>
I guess technically it's correct, because nobody really knows what the argument to "navigate" is

[09:56:34.0000] <annevk>
well, we sorta know, but refactoring that is hard

[09:56:51.0000] <annevk>
but maybe with Domenic's Sublime Text it's a little less daunting

[09:57:40.0000] <annevk>
but I shouldn't over promise since there's a bunch of things needing to be done and there's only finite time

[09:58:31.0000] <ritsyy>
Ms2ger: yes it's not clear about the argument "navigate" here, or it is not to me(i think)

[09:59:10.0000] <Domenic>
annevk: called away to lunch in the middle of reviewing, will be back soon

[10:05:31.0000] <annevk>
Domenic: no worries, I'm about to stop for 13-14h

[10:06:28.0000] <annevk>
Domenic: though if you're done by then that'll greatly increase the chances of me working on fixing the issues tomorrow 😊

[10:10:13.0000] <Domenic>
Yeah just wanted to make sure you didn't fix the things I pointed out thinking then it was ready to merge :)

[10:15:01.0000] <annevk>
Domenic: hmm so I didn't exactly get through the whole browsing context thing, but generally that seems like a solid improvement

[10:15:31.0000] <annevk>
Domenic: so a soft LGTM without looking from me, gotta go

[10:33:08.0000] <TabAtkins>
MikeSmith: Thanks, I've gone in and commented a bit in the HN thread at least. No reason to engage douchebags on Twitter who are just venting their ignorance.

[10:39:06.0000] <TabAtkins>
MikeSmith: nm, couldn't resist, still replied to his implicit statement that the spec was created by "the W3C" rather than browser vendors. ^_^

[11:22:26.0000] <roc>
too many people think that the W3C is a thing that does work

[11:23:36.0000] <TabAtkins>
To be fair, *some* WGs *are* dominated by "non-implementing" people; referring to them as "the W3C" isn't *too* inaccurate, if you're assuming the divide is between "browsers" and "W3C".

[14:59:26.0000] <smaug____>
annevk: does fullscreen spec define somewhere that if an element is removed from document, cancel fullscreen mode?

[15:00:18.0000] <smaug____>
ah, nm, I think I found it

[15:01:42.0000] <smaug____>
but I'm not sure about the case when a node hasn't entered fullscreen mode yet

[15:07:19.0000] <smaug____>
annevk: so, if one requests fullscreen, and then immediately after that moves the element to some other document, what should happen

[15:13:22.0000] <Domenic>
Can someone with a Mac test what `window.console = "foo"; foo;`returns in Safari? robertkowalski terinjokes

[15:13:35.0000] <terinjokes>
trying

[15:14:55.0000] <terinjokes>
Domenic: https://twitter.com/terinjokes/status/696834797742600193

[15:14:57.0000] <Domenic>
hmm it's a value descriptor in Chrome, that's special....

[15:15:18.0000] <Domenic>
terinjokes: ok cool

[15:16:03.0000] <Domenic>
terinjokes: Object.getOwnPropertyDescriptor(window, "console") ? in a fresh window, not one that's been foo-ed.

[15:16:22.0000] <terinjokes>
don't have my usual screenshot utility setup on this computer yet, apologies for using twitter in the meantime :P

[15:16:57.0000] <Domenic>
you can also just tell me the answer :P

[15:17:34.0000] <terinjokes>
Domenic: {value: Console, writable: true, enumerable: false, configurable: true}

[15:17:41.0000] <Domenic>
aweeeesome.....

[15:18:02.0000] <terinjokes>
Safari 9.0.3, if the UI wasn't a giveaway

[15:18:05.0000] <MikeSmith>
I think using twitter for screenshot sharing is kind of ingenious actually. Never thought of doing that before.

[15:18:41.0000] <terinjokes>
MikeSmith: not all my screenshots are exactly meant for the entire world, and I really like to "own" where my data lives. :)

[15:19:30.0000] <MikeSmith>
If you love something, set it free

[15:20:11.0000] <MikeSmith>
anyway yeah I know what you mean

[15:20:26.0000] <MikeSmith>
myself I actually just have a gist where I dump stuff

[15:20:33.0000] <MikeSmith>
https://gist.github.com/sideshowbarker/8284404

[15:20:44.0000] <MikeSmith>
including images

[15:21:02.0000] <terinjokes>
i've been trying to move off of using gist except for actual code snippets

[15:21:12.0000] <gsnedders>
Hixie_: of *course* you'd have the SBB logo as your flair on /r/trains. I shouldn't even be surprised.

[15:46:34.0000] <smaug____>
Domenic: curious, why attribute any console? Why not [Replaceable] readonly attribute Console console; ?

[15:50:02.0000] <tantek>
does anyone here have any experience with anything OASIS? like working with, developing specs with, using specs from, implementing specs from etc.? https://www.oasis-open.org/


2016-02-09
[16:00:00.0000] <Domenic>
smaug____: I didn't know about Replaceable! I'll go look it up.

[16:02:29.0000] <Domenic>
smaug____: looks like that's what Gecko does, cool. Let's do that instead

[16:08:15.0000] <smaug____>
Domenic: I assume that part of Gecko's webidl was reviewed by bz, so it probably should be sane

[16:09:51.0000] <MikeSmith>
tantek: I have experience with OASIS, years ago, working on the technical committee that created RelaxNG and also on the DocBook technical committee

[16:29:13.0000] <robertkowalski>
Domenic: sure

[16:29:42.0000] <robertkowalski>
Domenic: still a topic? sorry just reading through the highlights and using lastlog

[16:30:54.0000] <robertkowalski>
ah cool! found the conversation :)

[20:40:34.0000] <MikeSmith>
TabAtkins: another (nicer) FYI (in case you’re not already following the ServiceWorker repo) https://github.com/slightlyoff/ServiceWorker/issues/489#issuecomment-181654310

[21:44:02.0000] <MikeSmith>
https://github.com/cure53/DOMPurify looks interesting

[23:09:35.0000] <TabAtkins>
MikeSmith: Thanks, I wasn't following it.

[00:31:31.0000] <MikeSmith>
annevk: about HTML Imports, I realize it seems like there’s no agreement to move ahead with it, but it’s worth remembering that it's actually one of the highest-votec “wants” at the Edge uservoice thing https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer/filters/top

[00:32:10.0000] <MikeSmith>
of course that doesn’t really mean that web devs necessarily really want HTML Imports as currently specced

[00:32:30.0000] <MikeSmith>
but it seems clear they still really want *something*

[00:32:58.0000] <annevk>
The question is whether they still want it a decade from now

[00:33:14.0000] <MikeSmith>
dunno

[00:33:36.0000] <MikeSmith>
but also note that the Edge team has HTML Imports marked as ON THE BACKLOG https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer/suggestions/6261318-html-imports

[00:35:04.0000] <MikeSmith>
I think it’s also interesting that 3 of the 5 top-voted wants there are Web Components things

[00:35:48.0000] <annevk>
/me unsubscribes from all mailing lists that enable GitHub mirroring

[00:36:14.0000] <annevk>
public-media-capture did this experiment, asked for feedback, I tried to give feedback, but I didn't even get a reply on that

[00:36:33.0000] <annevk>
and now public-geolocation is doing the same thing...

[00:48:07.0000] <Ms2ger>
bterlson, so will [1, 2, 3].flatMap(i => [["a", i], ["b", -i]]) == ["a", 1, ..., "b", -3] or [["a", 1], ..., ["b", -3]]?

[01:47:53.0000] <MikeSmith>
annevk: the other problem with mirroring of GitHub issues to a mailing list is pretty much just like the problem with old-fashioned mailing-list cross-posting, in that if somebody replies with a substantive comment on the mailing list, the people following the issue in GitHub will never see that comment

[01:48:12.0000] <MikeSmith>
tobie remarked about this somewhere recently

[01:48:33.0000] <annevk>
Make ssense, that definitely seems to happen

[01:49:08.0000] <annevk>
Sublime Text not being able to highlight HTML without tweaks is funny

[01:49:16.0000] <annevk>
Definitely will take some getting used to

[01:51:20.0000] <MikeSmith>
https://lists.w3.org/Archives/Public/public-device-apis/2016Feb/0030.html tobie speaks

[02:44:50.0000] <Ms2ger>
/me curses

[02:45:08.0000] <Ms2ger>
Can we find someone to fix UIEvents already?

[02:46:24.0000] <annevk>
In a W3C meeting this is the moment where the chair laughs and you're it and then nothing happens

[02:47:53.0000] <annevk>
But I also, we shouldn't think of them as a unit. There's hit testing on top of which mouse events, various APIs, touch events, pointer events, and :hover flow. And there's keyboard events which are totally separate. Scroll events are somewhat coupled with layout and hit testing, etc.

[02:49:38.0000] <Ms2ger>
This probably would not be a good Outreachy project :)

[03:22:15.0000] <annevk>
hsivonen: I just found that in the HTML standard, both application/x-www-form-urlencoded and multipart/form-data can use the utf-16 encoder

[03:22:24.0000] <annevk>
hsivonen: I have no idea whether that is actually implemented that way though

[03:23:04.0000] <hsivonen>
annevk: whoa. How?

[03:23:52.0000] <annevk>
hsivonen: actually I'm wrong

[03:24:13.0000] <hsivonen>
annevk: ok. :-)

[03:24:33.0000] <annevk>
hsivonen: "pick an encoding for a form" has a flag that is always unset although not each caller says that explicitly, only text/plain does

[03:24:58.0000] <annevk>
hsivonen: I will clarify that to make it less ambiguous by removing the flag

[03:32:12.0000] <hsivonen>
annevk: thanks

[04:20:42.0000] <cyberixae>
Is the URL standard going to cover handling of relative URLs for use in internal links?

[04:24:13.0000] <cyberixae>
I wish to use the URL standard instead of doing '/some_api/' + some_id

[04:24:59.0000] <cyberixae>
Just to be sure some_id gets encoded appropriately

[04:40:51.0000] <annevk>
cyberixae: you could create a fictional base URL and then set and extract the path

[04:44:46.0000] <cyberixae>
Correct me if I am wrong but I believe reading the path would give it to me without URL encoding, so I would then need to serialize the URL and invent a parser to extract the relevant part from the serialized URL.

[04:45:52.0000] <cyberixae>
So basically I need url.getRelativeTo(url2) and this is not part of the URL standard

[04:46:10.0000] <cyberixae>
So I need to implement this myself even if I use a fictional base URL

[04:48:21.0000] <annevk>
cyberixae: that sounds incorrect

[04:48:43.0000] <annevk>
cyberixae: e.g. if you set url.pathname to † or some such it will definitely percent-encode that

[04:51:23.0000] <cyberixae>
I see

[04:56:24.0000] <annevk>
hsivonen: have we changed the HTML parser in implementation to the point where determining the encoding is deterministic?

[04:56:50.0000] <annevk>
hsivonen: the specification still pretends it can change

[05:00:44.0000] <hsivonen>
annevk: IIRC, it's deterministic in Gecko

[05:01:48.0000] <hsivonen>
annevk: but Gecko can reload if it finds a late <meta>

[05:02:02.0000] <annevk>
ok

[05:02:11.0000] <hsivonen>
annevk: I'm not aware of the late meta reload being necessary for a successful browser

[05:02:17.0000] <hsivonen>
annevk: IIRC, Safari doesn't do that

[05:02:24.0000] <hsivonen>
annevk: IIRC, Chrome, neither

[05:02:32.0000] <hsivonen>
annevk: but I haven't checked in a long time

[05:03:08.0000] <hsivonen>
annevk: IIRC, our lack of a timeout for scanning the 1024 bytes has confused a couple of Web authors

[05:03:21.0000] <hsivonen>
annevk: but we've still gone with determinism over timeouts

[05:03:44.0000] <annevk>
I like it, I'd like to change the specification to require that

[05:04:05.0000] <annevk>
But maybe I'll first change it to use the decode algorithm from Encoding rather than the custom setup it has now

[05:10:48.0000] <hsivonen>
(aside: after writing some trivial code that calls the encoding-rs API, I figured I want to [optionally] bake BOM sniffing directly into the behavior of encoding-rs's Decoder objects)

[05:11:27.0000] <hsivonen>
(aside aside: luckily the Web doesn't sniff for GB18030 BOM even though such a thing could logically exist)

[05:12:25.0000] <hsivonen>
hmm. maybe I should shut up and not give anyone ideas about that

[05:20:44.0000] <annevk>
I think I did test for that once

[06:24:28.0000] <annevk>
Domenic: thanks again for recommending Sublime Text, much much much faster

[06:24:50.0000] <annevk>
Domenic: bit of a pain to learn the new configuration of all things, but well worth it thus far

[06:45:55.0000] <Domenic>
\o/

[06:46:28.0000] <jgraham>
By Friday annevk will refuse to use anything other than straight-up vi

[06:48:35.0000] <wanderview>
annevk: what were you using before sublime?

[06:48:35.0000] <Ms2ger>
nano ain't so bad...

[06:54:04.0000] <zcorpan>
https://whatwg.org/mailing-list#commits needs updating...

[06:54:20.0000] <zcorpan>
Hixie_: ^

[07:09:42.0000] <jgraham>
mkwst: Do we already have tests for the secure contexts spec?

[07:22:03.0000] <annevk>
wanderview: TextWrangler

[07:22:44.0000] <wanderview>
interesting

[07:22:50.0000] <annevk>
Ms2ger: I use nano over ssh mostly, although maybe I should learn the terminal to open Sublime Text... like I taught git

[07:23:28.0000] <annevk>
wanderview: it was pretty much perfect until I had to regularly edit a 100k-line document

[07:23:47.0000] <jgraham>
nano is properly horrible

[07:23:59.0000] <jgraham>
By which I mean "really upsets my emacs-fingers"

[07:59:49.0000] <zcorpan>
could https://github.com/whatwg/html/issues/626#issuecomment-181370157 be a symptom of switching to https?

[08:02:34.0000] <TabAtkins>
Ms2ger: The second ([["a", 1], ..., ["b", -3]]). Your flatMap callback has to return an array, which is merged into the result; the *contents* of the array are left as they are.

[08:07:43.0000] <annevk>
I am again surprised how few folks complained thus far about the two application/x-www-form-urlencoded algorithms and their divergence

[08:14:12.0000] <annevk>
TabAtkins: for URL bikeshed still cannot distinguish between encode and encoding?

[08:14:56.0000] <TabAtkins>
annevk: It's the problem that I fixed in the wrong way a few weeks back, and need to fix properly now.

[08:15:12.0000] <annevk>
I see

[08:15:24.0000] <TabAtkins>
Bikeshed's too eager to "correct" your term into all its variations, and needs to do so only when the exact term fails.

[08:16:13.0000] <TabAtkins>
(I "fixed" it by doing so only when the exact term has zero results, but that breaks if the exact term has a result that won't be chosen, like an unexported term, and you need the variants to get a correct link. So I had to revert.)

[08:16:38.0000] <TabAtkins>
(It's not hard to fix, I just couldn't spend time on it last month due to spec-hacking with fantasai the entire time.  But February is Bikeshed Month.)

[08:17:04.0000] <annevk>
TabAtkins: I also found that several WHATWG standards are still not imported

[08:17:33.0000] <TabAtkins>
I'll fix that this morning.

[08:17:51.0000] <annevk>
TabAtkins: I guess I should convert more to bikeshed at some point

[08:17:52.0000] <TabAtkins>
I presume https://spec.whatwg.org/ is a fully updated list of specs, so I can just check which are Bikeshedded?

[08:18:13.0000] <annevk>
TabAtkins: https://resources.whatwg.org/biblio.json is better

[08:18:24.0000] <TabAtkins>
kk

[08:18:26.0000] <annevk>
I don't think Hixie_ updated spec.whatwg.org with the latest stuff yet

[08:18:45.0000] <annevk>
Interesting how Firefox has a native JSON view these days

[08:41:45.0000] <annevk>
hsivonen: so there was actually a comment in the HTML standard to the effect that text/plain would support ASCII-incompatible encodings (meaning utf-16), but implementations don't support that so I think we're all good

[08:48:37.0000] <bterlson>
Ms2ger: the former, flatten recursively flattens, flatMap is like map().flatten()

[08:49:08.0000] <Ms2ger>
TabAtkins, ha

[08:58:00.0000] <hsivonen>
annevk: having UTF-16 encode just for text/plain submissions would be very sad

[08:58:16.0000] <hsivonen>
so yay for implementations not supporting

[09:01:30.0000] <TabAtkins>
Ms2ger: Did you mean "ta"? Or was my answer funny for reasons that aren't clear from context?

[09:02:00.0000] <Ms2ger>
TabAtkins, the fact that the two of you gave opposite answers

[09:02:15.0000] <TabAtkins>
Does... does he know what flatmap does.

[09:03:24.0000] <TabAtkins>
Unless you're talking about a jank-ass "just flatten everything lol who cares" version of flatMap, it's a .map() followed by *one* level of flattening.

[09:03:34.0000] <TabAtkins>
(Or the algebraic equivalent of such.)

[09:04:13.0000] <annevk>
Where is this flatMap thingie defined?

[09:04:28.0000] <TabAtkins>
Haskell/Scala/everything that uses monads in some way.

[09:04:53.0000] <annevk>
Yeah, I'm vaguely familiar with that thanks to you, but I wonder what the context was for the question

[09:05:07.0000] <Ms2ger>
bterlson wrote a spec that was mentioned on twitter

[09:05:23.0000] <Ms2ger>
I agree that TabAtkins's answer makes sense, but I don't think it agrees with the spec

[09:05:26.0000] <Ms2ger>
/me poofs

[09:05:31.0000] <TabAtkins>
Ah, I was wondering why I didn't see a prelude to your question in IRC. ^_^

[09:05:59.0000] <TabAtkins>
I mean, the Promise spec settled on a "lol just flatten everything nothing matters" version of near-monadic behavior.

[09:06:08.0000] <TabAtkins>
But that's no reason to poison the well for everyone else.

[09:06:30.0000] <TabAtkins>
(And anyway, it uses .then() for its near-monad operation, not .flatMap(). Some behavior differences can thus be allowed.)

[09:13:40.0000] <bterlson>
Ms2ger: TabAtkins: I think not flattening nested arrays for flatMap is a good idea. Just didn't have time to do it last night

[09:14:06.0000] <bterlson>
I want flatten to take a parameter that says how many levels to flatten, once I have that flatMap can easily reuse the same machinery!

[09:37:59.0000] <TabAtkins>
bterlson: Unless you're planning something really off-beat for flatMap, it's not just a good idea, it's a requirement. ^_^

[09:38:30.0000] <TabAtkins>
Is this meant solely for arrays, or are you planning to propose it generically?

[09:39:04.0000] <TabAtkins>
(If it's just for arrays, I'd rather not squat on a well-accepted name for the monad action unless it's going to act like the monad action.)

[10:25:15.0000] <Domenic>
annevk: how can a blob URL be relative?

[10:25:20.0000] <bterlson>
TabAtkins, just for arrays considering it's on Array.prototype.

[10:25:51.0000] <TabAtkins>
Okay. (I don't follow you on Twitter and haven't seen the spec.)

[10:26:35.0000] <TabAtkins>
But yeah, let's get flatMap (single level flattening) into Array.prototype, then we propose making it generic via double-dispatch. ^_^

[10:26:36.0000] <Domenic>
Everyone should follow bterlson on twitter

[10:27:11.0000] <TabAtkins>
Yeah, looks legit. Followed. ^_^

[10:29:19.0000] <jsbell>
I'll follow anyone that tweets about -0.

[10:31:20.0000] <TabAtkins>
That was, in fact, the tweet that convinced me.

[10:32:06.0000] <TabAtkins>
On that note, what's the context of "A use strict directive in a function whose outer context is already strict is not a no-op! Such functions cannot use default or rest params." - "use strict" disables those features???

[10:32:26.0000] <TabAtkins>
Oh, I read replies. nm

[10:32:55.0000] <bterlson>
jsbell: I loved that tweet too, but oddly it got few impressions. People generally don't share our love of -0 arcana. :-P


2016-02-10
[18:35:24.0000] <bterlson>
TabAtkins: your wish is my command: http://bterlson.github.io/proposal-flatMap/ flatmap only flattens one level.

[19:30:43.0000] <MikeSmith>
TabAtkins: is that solely a convenience thing?

[19:30:59.0000] <MikeSmith>
I guess I shold actually take time to read it

[19:32:03.0000] <MikeSmith>
oofs meant that question more for bterlson anyway

[19:41:22.0000] <TabAtkins>
MikeSmith: "flatmap" is a common name for the monad operation (also known as "bind" or "chain"). It would be annoying if [].flatMap() didn't act like a flatmap "should", and the monad operation merges a single level.

[19:41:33.0000] <TabAtkins>
Or are you asking if flatmap itself is a convenience thing?

[19:41:42.0000] <MikeSmith>
yeah the latter

[19:42:39.0000] <TabAtkins>
Ah, no, it's useful stuff.  map is great when you're gonna process an array into a result, transforming each input into a single output, but it doesn't let you "drop" any values or insert multiple values into the result.

[19:43:04.0000] <TabAtkins>
flatmap does - your callback has to return an array, and it merges the values into the result.

[19:43:25.0000] <TabAtkins>
So if you want to skip something, just return []. If you want to add two values to the output, return [a,b]. etc.

[19:44:26.0000] <MikeSmith>
OK yeah that’s pretty nice

[19:45:07.0000] <MikeSmith>
my knowledge these days is way out of date

[19:45:31.0000] <MikeSmith>
as far as what’s going into the language and what the needs are

[19:46:05.0000] <MikeSmith>
and assumign this is actually about EcmaScript (since it was bterlson that mentioned it)

[19:46:46.0000] <TabAtkins>
yeah

[19:47:23.0000] <MikeSmith>
I found it a lot of work to even try to get a solid understanding of all of ES 5.1 back in the day

[19:47:24.0000] <TabAtkins>
bterlson: I can't really read ES spec-ese, but from the abstract it sounds like returning a non-array from the callback would be okay?

[19:49:49.0000] <bterlson>
TabAtkins: yep, same as array of length 1

[19:52:34.0000] <TabAtkins>
Hm, that feels error-prone. Easy to not understand what flatMap does, and accidentally return an array intending it to be an item in the result (probably accidentally, as the return value of something else).

[20:20:43.0000] <MikeSmith>
does anybody know offhand if Edge supports navigator.mediaDevices.getUserMedia() yet?

[20:21:18.0000] <MikeSmith>
that is, the new more recent getUserMedia() that returns a Promise

[20:21:46.0000] <MikeSmith>
as opposed to the old navigator.getUserMedia(constraints, successCallback, errorCallback) one

[21:22:01.0000] <annevk>
I like the idea of supporting transfer semantics for more APIs

[21:22:14.0000] <annevk>
Audio does that today

[21:22:34.0000] <annevk>
Would be neat for fetch() too

[21:56:20.0000] <MikeSmith>
annevk: what does “transfer semantics” mean?

[21:56:52.0000] <annevk>
MikeSmith: detach the passed in buffer

[21:57:42.0000] <annevk>
MikeSmith: so the browser can reuse the memory block rather than copy it

[21:59:01.0000] <MikeSmith>
ah OK

[22:02:50.0000] <MikeSmith>
annevk: btw about fetch() http://stackoverflow.com/questions/35296664/can-fetch-get-object-as-headers in particular the part about “What I am also interested is what the different implementations actually accept right now.” (if you might know)

[22:05:02.0000] <annevk>
Dunno, but I doubt that is implemented properly since the standard is still vague

[22:05:17.0000] <annevk>
I should really attempt to fix that

[22:06:57.0000] <MikeSmith>
yes it sounds like in the current state of things, it’s otherwise potentially somewhat confusing/frustrating for developers

[22:48:58.0000] <MikeSmith>
so FYI for anybody who hasn’t tried Let’s Encrypt yet: I just ran it from scratch for my sideshowbarker.net and it literally only took me 30 minutes to get it working (including troubleshooting)

[22:50:11.0000] <MikeSmith>
if I’d understood it just slightly better before running it probably wouldn’t have taken me more than 10 minutes

[22:52:17.0000] <MikeSmith>
if you just want a cert and don’t care to have it automatically configure your web server as well, it takes just a few minutes to auto-install some dependencies and generate a cert

[22:52:47.0000] <MikeSmith>
and then you can manually edit your web-server config on your own to point it to the new cert

[22:53:21.0000] <MikeSmith>
it seems like by default it tries to set up your apache server

[22:54:10.0000] <MikeSmith>
but I’m running nginx and I guess it doesn’t try to update the nginx config automatically

[22:57:15.0000] <MikeSmith>
but I already had an (expired) StarCom cert, and had my nginx config already set up to use that, so for me it amounted to just changing the pathnames of the nginx ssl_certificate, ssl_certificate_key, and ssl_trusted_certificate options to point to the letsencrypt .pem files instead of the StarCom ones

[23:49:39.0000] <annevk>
MikeSmith: not automatically renewing Let's Encrypt seems painful though, since the certificates last three months

[23:50:36.0000] <hendry>
annevk: some tools like https://caddyserver.com/ automatically renew Let's Encrypt certs IIUC

[23:52:24.0000] <annevk>
hendry: it's not a problem for me, DreamHost has set this up now

[23:52:44.0000] <annevk>
hendry: although migration from my current HSTS preload setup is not as easy as I'd like

[23:53:19.0000] <annevk>
hendry: and I haven't really given it much priority, have had more fun fixing bugs in standards and my current certificates don't expire until September

[23:55:02.0000] <MikeSmith>
annevk: yeah as hendry mentions there are off-the-shelf 3rd-party things intended to make automating the renewal easier for people who want that

[23:55:53.0000] <MikeSmith>
I don’t know what letsencrypt themselves don’t provide somethingーat least something for people using Debian

[23:56:47.0000] <MikeSmith>
but even in the worst case you just manually re-run the setup command once every 2 months or so

[23:57:14.0000] <MikeSmith>
which literally takes just seconds or a minute or two to run

[00:01:20.0000] <annevk>
As long as you remember it, I believe that's one of the big problems with HTTPS, folks forgetting about this

[00:01:34.0000] <annevk>
Seems to happen to large organizations more frequently than you'd think

[00:02:08.0000] <hendry>
i found the nginx/apache Lets Encrypt modules way too painful. that's why i moving my play things to https://caddyserver.com/ for sanity.

[00:09:40.0000] <Ms2ger>
Should HTML spec focusin/focusout along with focus/blur?

[00:10:21.0000] <Ms2ger>
s//the/

[00:55:34.0000] <annevk>
Ms2ger: there's a bug on that somewhere

[00:55:48.0000] <Ms2ger>
Oh good

[00:55:54.0000] <Ms2ger>
I was just filing another :)

[00:56:24.0000] <annevk>
Ms2ger: https://www.w3.org/Bugs/Public/show_bug.cgi?id=25897

[00:56:28.0000] <annevk>
Ms2ger: PRs appreciated

[00:57:06.0000] <Ms2ger>
That'd require me knowing what's going on exactly :)

[00:58:20.0000] <annevk>
Never too old to learn

[00:58:31.0000] <Ms2ger>
Hm, but Gecko doesn't support it?

[00:59:32.0000] <annevk>
I guess not

[00:59:50.0000] <annevk>
But WebKit probably ends up being the deciding factor for those

[01:03:08.0000] <roc>
ask Mike Taylor whether it's an issue

[01:03:52.0000] <Ms2ger>
miketaylr, asking :)

[01:04:49.0000] <annevk>
So what's a good way to search for multiple words that have arbitrary amounts of whitespace between them in Sublime Text?

[04:09:49.0000] <JakeA>
https://drafts.csswg.org/css-grid/ is down

[04:15:52.0000] <jgraham>
As is test.csswg.org/shepherd

[04:16:40.0000] <jgraham>
(these are probably linked)

[04:17:05.0000] <jgraham>
(seems to be MySQL that's actually down, and I bet the spec is trying to pull in test data from the db or something)

[04:58:52.0000] <MikeSmith>
most likely that won’t be fixed til plinss wakes up on the west coast

[05:00:12.0000] <caitp>
i woke up on the west coast, I could do it

[05:00:16.0000] <caitp>
maybe not

[05:05:02.0000] <Domenic>
 annevk RegExp search with \s* I believe is how I do it

[05:10:05.0000] <annevk>
Domenic: how do you start one?

[05:10:31.0000] <annevk>
Domenic: also, I often have the problem where I find something, want to start correcting, but focus is in the wrong spot, is there an easy way to fix that?

[05:13:37.0000] <annevk>
A Git question, does rebasing often makes it less likely you'll need to deal with merge conflicts? It seems like the answer should be no, but who knows

[05:15:43.0000] <Domenic>
annevk: there are checkboxes to the left of the search box

[05:15:56.0000] <Domenic>
annevk: haven't had the latter problem

[05:17:09.0000] <annevk>
Domenic: you don't press cmd+g and then the focus is still in the search box? Maybe they fixed that in Sublime Text 3?

[05:18:03.0000] <Domenic>
annevk: hmm yeah maybe.

[05:18:23.0000] <Domenic>
ST3 is pretty darn stable, it's like Gmail beta

[05:18:46.0000] <annevk>
I see, that's what the person who gave me the license key at Mozilla said too

[05:19:02.0000] <annevk>
Oh well, next week

[05:19:56.0000] <annevk>
Domenic: btw, we're stuck with the UTF-8 way of casing after all: https://github.com/whatwg/encoding/issues/32

[05:20:37.0000] <annevk>
Domenic: going to fix that now and then I'll align all encoding names mentioned in the HTML standard with the "new canonical way"

[05:39:47.0000] <jgraham>
annevk: rebasing more often means that the conflicts on average should be smaller and more manageable

[05:49:29.0000] <annevk>
jgraham: ah, I guess when you rebase it doesn't rebase against each individual commit until it reaches master

[05:56:46.0000] <smaug____>
https://github.com/whatwg/html/issues/668 reminds me. Is the plan to incorporate roc's spec for innerText to HTML spec?

[05:58:14.0000] <annevk>
smaug____: that or DOM seems reasonable

[05:58:15.0000] <smaug____>
ah, there is https://github.com/whatwg/html/issues/465

[05:58:29.0000] <annevk>
smaug____: has it been implemented by other browsers yet?

[05:58:41.0000] <smaug____>
roc's innerText? no

[05:58:53.0000] <smaug____>
afaik

[05:59:37.0000] <smaug____>
Domenic: do you know if blink would be interested in to implement innerText based on roc's spec?

[06:00:09.0000] <smaug____>
currently innerText is pretty much ad hoc in non-Gecko

[06:00:42.0000] <Domenic>
smaug____: I can ask around. I'd kind of guess no but that's just a guess.

[06:02:09.0000] <smaug____>
Domenic: well, if no, could someone write a counter spec ?

[06:03:21.0000] <Domenic>
smaug____: my guess is based on assuming there's no need to devote engineering resources to changing something that works well enough, so no, throwing more people at it wouldn't be the alternative.

[06:06:04.0000] <zcorpan>
should i merge https://github.com/whatwg/html/pull/669 without fiddling with the commit message? or do we always want PR: in there? (it doesn't need rebasing)

[06:06:44.0000] <Domenic>
If no rebasing then it should be fine

[06:07:04.0000] <Domenic>
GitHub will track the link and auto close for us

[06:08:33.0000] <zcorpan>
ok done

[06:09:00.0000] <zcorpan>
also: No new notifications. \o/

[06:11:21.0000] <smaug____>
/me mumbles something to answer to Domenic, but stays quiet

[06:11:36.0000] <Domenic>
maybe i shouldn't be guessing before asking around

[06:23:38.0000] <annevk>
Wow, that took an hour

[07:04:35.0000] <annevk>
hsivonen: would it be acceptable if "output encoding" was instead "get an output encoding"?

[07:05:23.0000] <annevk>
hsivonen: takes an encoding, returns that encoding or utf-8 if that encoding was utf-16be, utf16le, or replacement

[07:08:09.0000] <annevk>
hsivonen: I'll create a PR you can look at

[07:11:04.0000] <annevk>
/me enjoys cleaning up all the things

[07:15:58.0000] <annevk>
/me hopes Domenic still finds time to review while working on his new hobby

[07:16:13.0000] <Ms2ger>
annevk, glad someone enjoys cleaning things up :)

[07:16:56.0000] <annevk>
Ms2ger: with my new super fast editor even doing it for HTML is no sweat

[07:17:16.0000] <wanderview>
/me wonders what Domenic's new hobby is...

[07:17:52.0000] <jgraham>
annevk: OK, not need to go all TV Evangelist on us

[07:17:56.0000] <jgraham>
*no need

[07:18:25.0000] <jgraham>
Although to be honest that sounded more like something from QVC

[07:18:36.0000] <annevk>
jgraham: I'm sure emacs (or was it vim?) is thrice as good

[07:19:19.0000] <annevk>
QVC?

[07:20:19.0000] <wanderview>
home shopping channel

[07:21:21.0000] <annevk>
hehe

[07:21:55.0000] <Ms2ger>
/me sells wanderview a Trusty Cane

[07:37:53.0000] <hsivonen>
annevk: so the difference is that it's a freestanding algorithm instead of a property of each encodin spec-wise?

[07:38:09.0000] <hsivonen>
probably won't change anything implementation-wise

[07:38:13.0000] <annevk>
hsivonen: yeah

[07:38:32.0000] <annevk>
hsivonen: makes it easier to ignore if you don't do HTML

[07:39:24.0000] <annevk>
I created a PR for it, also drops the replacement encoder

[07:39:43.0000] <hsivonen>
annevk: LGTM

[07:41:20.0000] <annevk>
ta

[07:46:31.0000] <miketaylr>
Ms2ger: i'm not aware of any big compat issues around focusin/out

[07:46:44.0000] <miketaylr>
but chrome use counters put it around 1.7% https://www.chromestatus.com/metrics/feature/timeline/popularity/433 (and slowly dropping)

[07:46:49.0000] <miketaylr>
jquery does ship a polyfill for firefox

[07:46:57.0000] <miketaylr>
and there's others out there

[07:47:22.0000] <miketaylr>
but it seems like it's too high for blink to want to remove it, i think

[07:49:26.0000] <Ms2ger>
Bah

[08:05:59.0000] <Ms2ger>
http://blog.innerht.ml/cross-origin-css-attacks-revisited-feat-utf-16/

[08:38:42.0000] <annevk>
Okay, so Blink and WebKit now match the HTML standard, good for them

[08:38:59.0000] <annevk>
I wonder why CSP encouraged Blink and WebKit's behavior for so long, despite it contradicting the HTML standard

[08:39:07.0000] <annevk>
mkwst: ^^

[08:53:13.0000] <ritsyy>
what would be the best way to revert the commit(change is done on the master but not pushed till now)

[08:55:26.0000] <annevk>
ritsyy: git reset --hard origin

[08:55:41.0000] <annevk>
ritsyy: I believe

[08:55:59.0000] <MikeSmith>
maybe needs to be origin/master there

[08:56:08.0000] <annevk>
yeah, that depends on your setup indeed

[08:57:32.0000] <ritsyy>
annevk: MikeSmith yeah done with git reset --hard origin, thank you

[09:23:27.0000] <miketaylr>
https://drafts.csswg.org/ seems to be down :(

[09:25:23.0000] <tantek>
hmm - better alert plinss

[09:25:38.0000] <tantek>
I'm seeing WARNING: mysqli_connect(): (08004/1040): Too many connections

[09:26:17.0000] <jgraham>
Yes, it has been like that all day

[09:26:33.0000] <miketaylr>
oh ok, i'll assume someone has notified the right people because i have to run to lunch

[09:26:38.0000] <jgraham>
I doubt it

[09:36:30.0000] <annevk>
Domenic: should have just said platinum, it's a joke with respect to record

[09:45:30.0000] <annevk>
GPHemsley: are you around? https://github.com/whatwg/mimesniff/pull/2 could use review

[09:45:56.0000] <annevk>
GPHemsley: not sure I'm the best person, though I could probably do it

[11:47:29.0000] <annevk>
Domenic: maybe "no-base-URL flag"?

[12:31:26.0000] <Domenic>
annevk: can-be-base-URL flag?

[12:32:02.0000] <annevk>
Domenic: instead of non-relative flag

[12:32:14.0000] <annevk>
Oh sorry

[12:32:22.0000] <Domenic>
annevk: I guess cannot-be-base-URL flag

[12:32:38.0000] <annevk>
Yeah, something like that seems feasible

[12:33:12.0000] <annevk>
Preferably not inverting the meaning since boolean logic is hard

[12:33:49.0000] <annevk>
I'll figure out what it takes

[14:55:29.0000] <Domenic>
SimonSapin: do you not have push for web-platform-tests?

[15:00:15.0000] <SimonSapin>
Domenic: I don’t know

[15:00:27.0000] <Domenic>
SimonSapin: I guess I'm responsible for merging then, OK

[15:00:44.0000] <Domenic>
I kept saying "LGTM with one thing" hoping you would merge after fixing the one thing :)

[15:00:55.0000] <SimonSapin>
ah, I see :)

[15:01:33.0000] <SimonSapin>
ERROR: Permission to w3c/web-platform-tests.git denied to SimonSapin.


2016-02-11
[16:48:43.0000] <MikeSmith>
SimonSapin: try again now

[16:49:36.0000] <SimonSapin>
I haz access now

[16:49:59.0000] <MikeSmith>
super

[16:53:41.0000] <SimonSapin>
https://github.com/w3c/test-results looks nice

[17:08:13.0000] <MikeSmith>
SimonSapin: yeah, that’s another product of Robin Berjon Labs

[17:08:20.0000] <MikeSmith>
the tools behind that

[22:33:04.0000] <cvrebert>
So what magic causes events to propagate to the Window object despite document.parentNode==null ?

[22:36:32.0000] <annevk>
cvrebert: https://html.spec.whatwg.org/multipage/webappapis.html#events-and-the-window-object

[22:37:14.0000] <annevk>
cvrebert: we should probably integrate that section directly into DOM, in some kind of event path computation algorithm which Shadow DOM will modify

[22:37:48.0000] <cvrebert>
Yes, that monkeypatch is not easy to locate

[22:38:33.0000] <cvrebert>
annevk: Thanks

[23:19:04.0000] <annevk>
cvrebert: filed https://github.com/whatwg/dom/issues/165

[23:19:29.0000] <cvrebert>
annevk: Erm, I filed https://github.com/whatwg/dom/issues/164

[23:26:26.0000] <annevk>
cvrebert: oh, I guess I should have checked

[23:26:46.0000] <annevk>
cvrebert: your issue seems like a subset so I guess it's fine

[23:46:11.0000] <cvrebert>
Assuming the webpage just loaded, given <body><input type=text></body> and a script that does input.focus(), would the old-focus-chain be [<body>, document] and the new-focus-chain be [<input>, document] ?  https://html.spec.whatwg.org/#focus-chain

[23:51:36.0000] <annevk>
/me isn't sure, still needs to learn focus

[00:47:11.0000] <cvrebert>
Anyone see a flaw in my reading/logic/testcase?: https://gist.github.com/cvrebert/441d88975c39662a2bd2

[01:05:11.0000] <annevk>
cvrebert: I think the confusing thing with your testcase is that you are capturing events

[01:05:36.0000] <annevk>
cvrebert: it should show up on window due to the capturing listener, but maybe I'm missing something

[01:06:40.0000] <cvrebert>
annevk: I'm listening at the window level, but I'm recording the targets. Capture shouldn't change the targets.

[01:13:50.0000] <cvrebert>
annevk: Same result if capturing isn't used: http://jsbin.com/qoyitu/edit?html,js,output

[01:24:23.0000] <annevk>
cvrebert: hmm, I guess I should actually study what's going on then, almost done with a PR, will look then

[01:29:18.0000] <cvrebert>
Hmm.

[01:29:47.0000] <cvrebert>
Apparently viewing it outside of the editor changes the result. Fun.

[01:36:20.0000] <cvrebert>
In Chrome/Safari anyway; then they'e just [input], per spec. Firefox doesn't change.

[01:48:09.0000] <annevk>
cvrebert: sounds like a bug in Firefox then

[01:48:45.0000] <annevk>
cvrebert: are you writing tests or work on implementing this somewhere?

[01:51:17.0000] <cvrebert>
annevk: Just opened https://github.com/w3c/web-platform-tests/pull/2571

[01:52:28.0000] <annevk>
\o/

[01:52:43.0000] <cvrebert>
annevk: Results are less weird with revised testcase: https://gist.github.com/cvrebert/441d88975c39662a2bd2

[04:10:14.0000] <ritsyy>
where this error is "Parse Error: (120773,9) unexpected body end tag" , i mean the line number, other than this build script didn't showed anything and there is no line at 120773

[05:02:23.0000] <annevk>
ritsyy: yeah, there's a bug

[05:02:45.0000] <annevk>
ritsyy: https://github.com/whatwg/html-build/issues/83

[05:03:12.0000] <annevk>
ritsyy: the way I fixed this for myself was by changing the build script

[05:03:58.0000] <annevk>
ritsyy: by removing "if [ "$WATTSI_RESULT" == "65" ]; then" and the corresponding "fi" statement and leaving the lines inbetween alone

[05:04:22.0000] <annevk>
Hopefully MikeSmith and Domenic can look into this

[05:06:06.0000] <ritsyy>
annevk: oh okay, i will also try to fix like this, thanks

[05:09:01.0000] <annevk>
It's not great, but it does the job until someone sorts this out

[05:21:05.0000] <ritsyy>
annevk: i had to do some changes in the PR and then when i ran the script it parsed so i didn't get to correct the script, but for future will keep in mind

[07:38:20.0000] <miketaylr>
annevk: oops. do you think it's better to also set event type back to the original here https://github.com/whatwg/dom/pull/158#discussion-diff-52565536R1217 (in addition to the last step in the invoke algo), or go for the fancy column flipping?

[07:40:17.0000] <annevk>
miketaylr: only there is not enough

[07:40:50.0000] <annevk>
miketaylr: if you look at https://dom.spec.whatwg.org/#concept-event-listener-invoke everywhere it says "terminate these substeps" is affected

[07:41:16.0000] <miketaylr>
ahh

[07:41:28.0000] <annevk>
/me tries to think it through again

[07:42:09.0000] <miketaylr>
i guess it seems goofy to add "and set the event type back, etc." to each of those steps

[07:43:22.0000] <annevk>
we could and we could abstract that further, but then we'll always have to think about it

[07:43:27.0000] <annevk>
ideally there's something a little nicer

[07:44:26.0000] <annevk>
miketaylr: I guess the flip thing doesn't really work since we want to test for the non-prefixed version first, always, right?

[07:44:31.0000] <miketaylr>
yeah

[07:44:37.0000] <miketaylr>
we'd have to flip back too

[07:44:59.0000] <miketaylr>
is it too magical to define "terminate the invoke substeps" which always resets type?

[07:45:43.0000] <annevk>
and if you're actually dispatching a synthetic webkitXXX event, then we shouldn't flip?

[07:46:08.0000] <annevk>
this is such a hack

[07:46:11.0000] <miketaylr>
haha

[07:46:18.0000] <miketaylr>
actually, let me go look at gecko and blink again

[07:46:49.0000] <miketaylr>
i dont know if listeners on a node are "sorted"

[07:47:01.0000] <miketaylr>
or if it's possible to have "unprefixed, prefixed, unprefixed"

[07:47:07.0000] <miketaylr>
(maybe that's already defined...)

[07:47:26.0000] <miketaylr>
because if they're sorted, once you got to webkitFoo you wouldn't need to flip back

[07:47:33.0000] <miketaylr>
(right?)

[07:48:41.0000] <annevk>
What about the next node though?

[07:48:43.0000] <miketaylr>
addEventListener as defined just appends tho

[07:49:18.0000] <miketaylr>
i guess you would have to match again for the next node, so yeah

[07:50:57.0000] <annevk>
miketaylr: is there a flag on the event so we know whether it participates in this hack

[07:51:05.0000] <miketaylr>
annevk: isnt invoke just concerned with a single node though?

[07:51:23.0000] <miketaylr>
dispatch traverses nodes and calls invoke on them?

[07:51:29.0000] <annevk>
miketaylr: or is it basically any event that starts out with a name in the left most column of the table?

[07:51:38.0000] <miketaylr>
looking

[07:51:44.0000] <annevk>
miketaylr: yes, but you mutate the event object so it affects everything

[07:51:54.0000] <miketaylr>
ah

[07:53:44.0000] <annevk>
miketaylr: we could maybe create an "previous type" slot on the event object itself and store the other value there

[07:53:49.0000] <miketaylr>
looks like gecko uses a usingLegacyMessage flag: https://mxr.mozilla.org/mozilla-central/source/dom/events/EventListenerManager.cpp#1286 (in EventListenerManager::HandleEventInternal)

[07:54:17.0000] <annevk>
miketaylr: and then at the beginning of invoke, if that slot is non-empty, set event's type to previous type and clear previous type

[07:54:56.0000] <annevk>
so that you always start invoke with the normal name

[07:55:08.0000] <annevk>
and then once you get to the table, you can always look in the leftmost column

[07:55:17.0000] <Ms2ger>
I wonder if anyone tried just not changing .type

[07:55:22.0000] <annevk>
which also means that a synthetic webkitAnimationevent never hits the table

[07:59:44.0000] <wanderview>
JakeA: do you know what chrome does if you have an old entry in Cache API, then match it for a recent request, but the cert associated with the response has expired between caching it and responding with it in the service worker?

[08:00:02.0000] <wanderview>
JakeA: does chrome fail the request for an out-of-date cert?

[08:00:08.0000] <annevk>
miketaylr: another bug seems to be is that Gecko first loops through all listeners and only afterwards goes through them again with a new type

[08:00:28.0000] <annevk>
miketaylr: so you want to structure this differently basically

[08:01:12.0000] <annevk>
miketaylr: basically "For each listener in listeners," needs to run twice in case the first time around nothing got called, is my impression from reading that code

[08:01:23.0000] <annevk>
miketaylr: the second time with the new event type

[08:01:28.0000] <annevk>
legacy event type*

[08:01:39.0000] <miketaylr>
ok, looking at what blink does now

[08:01:58.0000] <miketaylr>
(https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/events/EventTarget.cpp&sq=package:chromium&l=351&dr=C&rcl=1452688339)

[08:04:55.0000] <miketaylr>
seems like it does: find all the unprefixed listeners, and if there are any, fire those. if there weren't any, see if the prefixed legacyListenersVector is non-empty and fire those

[08:08:46.0000] <miketaylr>
ok, thanks for helping me think through this annevk

[08:09:19.0000] <miketaylr>
will work on revisions later today or tomorrow, time to "work"

[08:09:31.0000] <annevk>
miketaylr: I also realized that "If event’s stop immediate propagation flag is set, terminate the invoke algorithm." should be step 1 in invoke, I'll fix that now

[08:09:43.0000] <miketaylr>
kk

[08:11:47.0000] <Ms2ger>
miketaylr, if you wanna "work", writing tests is work ;)

[08:12:26.0000] <miketaylr>
Ms2ger: yeah, it's on my TODO list tooooo

[08:12:38.0000] <miketaylr>
/me burning conscience

[08:13:53.0000] <Ms2ger>
miketaylr, best way to make sure your research doesn't go to waste in five uninteroperable implementations :)

[08:14:06.0000] <miketaylr>
^_^

[08:47:51.0000] <JakeA>
wanderview: I *think* so, but don't know for sure. We certainly fail self-signed cert responses

[08:56:56.0000] <wanderview>
JakeA: doesn't that create a problem where the main page index.html starts perma-failing after a certain date?

[08:57:12.0000] <wanderview>
JakeA: until a new service worker script is published to trigger an update

[09:10:32.0000] <JakeA>
wanderview: ohhhhhh, I understand the question now

[09:11:18.0000] <JakeA>
wanderview: yeah, it should only fail at fetch() time, not at cache.match time

[09:11:39.0000] <wanderview>
JakeA: well, I'm more concerned about if failing in the evt.respondWith() processing

[09:13:03.0000] <JakeA>
wanderview: agreed, trying to find where certs are handled in the fetch spec

[09:13:27.0000] <wanderview>
JakeA: I don't think they are really... in some ways they are handled at the TLS transport layer

[09:14:01.0000] <JakeA>
wanderview: if that only happens during network interaction, the spec is fine as it is

[09:14:25.0000] <wanderview>
JakeA: sure... I guess I was more asking about chrome impl.. for example some people are surprised we don't re-validate cert coming out of http cache

[13:39:01.0000] <smaug____>
hmm, which uri is used for referrer

[13:39:06.0000] <smaug____>
per spec

[13:42:33.0000] <smaug____>
oh, if does take pushState into account

[13:42:38.0000] <smaug____>
surprising

[13:42:44.0000] <smaug____>
or not


2016-02-12
[18:12:14.0000] <MikeSmith>
botie, inform ritsyy I’m looking into the wattsi problem right now that you are annevk were discussing yesterday

[18:12:15.0000] <botie>
will do

[18:20:53.0000] <gsnedders>
uh, why do we need image-orientation? isn't it just a subset of transform behaviour?

[21:35:11.0000] <botie>
ritsyy, at 2016-02-12 02:13 UTC, MikeSmith said: I’m looking into the wattsi problem right now that you are annevk were discussing yesterday

[21:36:39.0000] <ritsyy>
botie: okay great

[21:36:39.0000] <botie>
ritsyy: excuse me?

[21:36:44.0000] <MikeSmith>
ritsyy: I see from the logs that you’re not having the problem now but to prevent it in the future I think you need to make sure you pull the latest wattsi sources and re-build wattsi

[21:37:27.0000] <ritsyy>
MikeSmith: okay will keep in mind, thanks

[21:39:57.0000] <ritsyy>
botie: sorry, were you telling something else too?

[21:39:57.0000] <botie>
ritsyy: no idea

[21:40:22.0000] <ritsyy>
botie: is a bot, i had no idea oh

[21:48:59.0000] <MikeSmith>
ritsyy: heh yeah 😆  sorry, I thought you knew it was a bot and you were just messing around with it

[21:49:29.0000] <MikeSmith>
ritsyy: it’s a bot I run so that we can leave messages for each other here

[21:50:02.0000] <MikeSmith>
so if somebody isn’t on the channel but you want to ask/tell them something, you can use botie to do that

[21:50:20.0000] <MikeSmith>
like this:

[21:51:09.0000] <MikeSmith>
botie, inform foo that I was to ask about bar

[21:51:10.0000] <botie>
will do

[21:52:11.0000] <MikeSmith>
then the next time "foo" joins the channel, botie will repeat "that I was to ask about bar"

[21:53:45.0000] <ritsyy>
MikeSmith: hehe now i know :-D

[22:03:58.0000] <annevk>
MikeSmith: hmm, I had a fresh Wattsi pretty sure

[22:04:39.0000] <annevk>
MikeSmith: unless running build doesn't always overwrite

[22:09:54.0000] <MikeSmith>
annevk: yeah it’s odd

[22:12:53.0000] <MikeSmith>
annevk: if you run `wattsi ../html/source .temp/wattsi-raw-source-output .cache/caniuse.json .cache/w3cbugs.csv || echo $?` from a fresh Wattsi on a source file with a missing end tag or misspelled tag name or whatever and it doesn’t return 65 in your environment then that would be especially odd

[22:16:17.0000] <annevk>
MikeSmith: I get 1

[22:16:28.0000] <annevk>
*sigh*

[22:16:49.0000] <MikeSmith>
sorry for the PITA of this stuff

[22:16:57.0000] <MikeSmith>
I thought we had it right

[22:17:52.0000] <MikeSmith>
from examining the wattsi source, I can’t see that it would be possible for it to return 1 there

[22:17:55.0000] <annevk>
Nah, I'm guessing Wattsi is not overwritten then, would be nice if it could print a version number somewhere

[22:17:57.0000] <MikeSmith>
teh latest sources I mean

[22:18:09.0000] <MikeSmith>
yeah I will definitely add a version number

[22:18:19.0000] <MikeSmith>
will make an issue for that now

[22:19:20.0000] <MikeSmith>
I guess checking `which wattsi` is the next step, and see if that is actually the same wattsi as the one in your clone

[22:19:46.0000] <MikeSmith>
perhaps we also should add an install step to the wattsi build

[22:19:58.0000] <MikeSmith>
to install it in a common place

[22:20:25.0000] <MikeSmith>
for example, just ~/wattsi

[01:05:45.0000] <annevk>
And the Encoding Standard is back to being almost perfect

[01:07:39.0000] <annevk>
Things left to do: 1) Remove the UTF-16 encoders if indeed that is web-compatible. 2) Integrate with the Streams API once a TransformStream trait/protocol of sorts has been defined. 3) Add more labels to the "replacement" encoding.

[01:10:23.0000] <zcorpan>
we need an IDL validator

[01:10:28.0000] <zcorpan>
:-)

[01:10:53.0000] <zcorpan>
(as part of building or linting, i mean)

[01:11:23.0000] <Ms2ger>
You want to keep it up to date? :)

[01:13:09.0000] <annevk>
zcorpan: I guess you saw the last two commits to whatwg/html? I clearly messed up reviewing a single character change.

[01:13:32.0000] <zcorpan>
i think i'd use the same idl parser as bikeshed uses, and sure i could help maintain it whenever i hit something that's not up to date

[01:14:18.0000] <zcorpan>
annevk: my context here was https://github.com/whatwg/html/pull/680/files#r52718393

[01:15:37.0000] <zcorpan>
annevk: the ? should be outside the span?

[01:20:39.0000] <annevk>
zcorpan: yeah, it's not part of the term

[01:21:13.0000] <zcorpan>
annevk: right. i guess an idl validator wouldn't catch that, but making wattsi whine about non-xreffed <span>s would

[01:21:51.0000] <annevk>
zcorpan: any chance you're going to patch Wattsi to move from <span data-x> to <a lt> anytime soon?

[01:23:34.0000] <zcorpan>
annevk: yeah maybe i can look into that next week or so

[01:54:16.0000] <ondras>
so, crossdomain iframe is unable to detect top.location.href, right?

[01:56:15.0000] <annevk>
ondras: "detect"?

[01:56:25.0000] <ondras>
annevk: "read"

[01:56:38.0000] <annevk>
The getter throws, yes

[01:57:08.0000] <ondras>
annevk: okay. and "parent.location.href" can be retrieved via "document.referrer", but in the case of multiple iframes inside, this is not suitable

[01:57:24.0000] <ondras>
am I correct?

[01:57:48.0000] <ondras>
(assuming no navigation occured within the iframe)

[02:05:35.0000] <annevk>
ondras: only if parent navigated the iframe

[02:06:27.0000] <annevk>
ondras: and that will not include any subsequent replaceState() navigation of parent, and various other exceptions

[03:13:16.0000] <yoav_>
zcorpan: around?

[03:13:48.0000] <yoav>
Is the following test still valid now that we added PutForwards=value to classlist?

[03:13:49.0000] <yoav>
https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/LayoutTests/fast/dom/HTMLElement/script-tests/class-list.js&l=18

[03:13:53.0000] <zcorpan>
yoav: here

[03:14:20.0000] <yoav>
I think the test is now wrong but want to make sure

[03:14:27.0000] <yoav>
hey! :)

[03:14:56.0000] <zcorpan>
yoav: it's wrong. it shouldn't throw and it should be equivalent to classList.value = 'y'

[03:15:06.0000] <yoav>
cool, that's what I thought

[03:15:21.0000] <yoav>
I'll change/drop the test

[03:21:13.0000] <zcorpan>
if you do a new import of web-platform-test there should be an equivalent test (don't remember if it was for classList or relList or something else though)

[03:21:45.0000] <zcorpan>
i guess it would be good to test that PutForwards is implemented for all attributes

[03:35:11.0000] <yoav>
zcorpan: I imported some tests that seemed relevant, but not everything (as there are a bunch of unrelated tests that don't pass)

[03:35:26.0000] <yoav>
CL is at https://codereview.chromium.org/1629403003/ if you feel like reviewing

[03:54:46.0000] <annevk>
Domenic: thank you for the review, it's great

[04:30:59.0000] <zcorpan>
i wonder what this does... https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/html/ClassList.cpp&q=classnamesforquirksmode&sq=package:chromium&type=cs&l=67

[04:48:07.0000] <Ms2ger>
zcorpan, something to do with case-insensitive class names in quirks?

[04:49:49.0000] <zcorpan>
Ms2ger: yeah, i figured that also. maybe classNames() is case folded in quirks mode so it needs this to return a case-preserved string

[04:52:01.0000] <zcorpan>
/me finds -webkit-text .... http://software.hixie.ch/utilities/js/live-dom-viewer/saved/3883

[05:06:53.0000] <zcorpan>
/me filed bugs

[05:22:28.0000] <annevk>
zcorpan: you merged ritsyy's patch but it seems to have build errors?

[05:22:58.0000] <annevk>
zcorpan: I get 'Multiple definitions for term "canvasdirection"' and similar such errors

[05:23:34.0000] <zcorpan>
crap, i thought i had built it

[05:23:43.0000] <annevk>
zcorpan: ritsyy: it seems the IDL section used <dfn> rather than <span>

[05:23:59.0000] <annevk>
ritsyy: is building not working on your side or had you forgotten?

[05:28:29.0000] <zcorpan>
ok i have a fix, can PR

[05:30:37.0000] <annevk>
cool

[05:34:43.0000] <zcorpan>
https://github.com/whatwg/html/pull/687

[05:37:45.0000] <annevk>
Already merged it seems

[06:32:55.0000] <smaug____>
is there some option to make github less spammy

[06:36:32.0000] <smaug____>
looks like not really

[06:41:04.0000] <zcorpan>
smaug____: i have turned off email and visit https://github.com/notifications instead

[06:42:07.0000] <smaug____>
then I would probably miss useful stuff

[06:46:44.0000] <annevk>
If you check that every now and then it's quite nice, and you can easily clear a bunch of topics you're not interested in

[06:47:09.0000] <annevk>
I'd like it a little better if it indicated more clearly which threads you are watching vs those you're involved in, but it's reasonable

[06:49:10.0000] <zcorpan>
there is https://github.com/notifications/participating

[06:53:22.0000] <annevk>
Yeah, just wish that was merged in or something

[06:53:32.0000] <annevk>
Not sure how to explain it, haven't really thought it through

[07:03:45.0000] <SimonSapin>
I think there’s a bug in https://github.com/w3c/web-platform-tests/commit/796cbbc8d5e987bd28b11147acec9c47c0f51c3f#diff-5c347507d8b764f277afcc811f3b728c . Was there a PR or review for it?

[07:04:37.0000] <SimonSapin>
(Turkish İ should not match AFAIU)

[07:06:04.0000] <ritsyy>
zcorpan: annevk: sorry was afk, in the last commit forgot to build it, sorry for creating a mess

[07:07:35.0000] <annevk>
SimonSapin: I think it might actually per spec, but we should try changing that to be ASCII instead

[07:08:11.0000] <SimonSapin>
ok, found https://github.com/w3c/web-platform-tests/pull/773 though https://critic.hoppipolla.co.uk/search

[07:11:16.0000] <SimonSapin>
git log --graph --oneline https://i.imgur.com/yER6Sic.png

[07:16:41.0000] <zcorpan>
SimonSapin: critic says it's good enough!

[07:18:59.0000] <zcorpan>
changing it to ascii case-insensitive would be nice, not sure if that's web compatible

[07:19:03.0000] <SimonSapin>
annevk: I means "should" per my reading of the spec, I don’t have an opinion on changing the spec

[07:19:14.0000] <SimonSapin>
I meant*

[07:19:39.0000] <zcorpan>
/me gotta go

[07:49:46.0000] <nox>
annevk: Isn't that mapping to be ignored if you don't do language-specific tailorings?

[07:50:28.0000] <annevk>
Maybe, but that makes it even weirder

[07:50:39.0000] <nox>
How?

[07:50:47.0000] <annevk>
I remember someone telling me we could fix this

[09:03:47.0000] <annevk>
It's great how IDL does not define how it mutates [[OwnPropertyKeys]

[09:03:51.0000] <annevk>
(It's not)

[09:04:22.0000] <annevk>
https://heycam.github.io/webidl/#property-enumeration ...

[09:40:47.0000] <annevk>
Domenic: you introduced the phrase "List of errors" twice

[09:40:56.0000] <annevk>
Domenic: should I xref "List" to the List specification type?

[09:58:15.0000] <Domenic>
annevk: ah yeah that would be nice, thank you

[09:58:40.0000] <Domenic>
As for [[OPKs]], part of the general ES6 fixes. I don't think [[OPKs]] existed in ES5.

[10:09:05.0000] <annevk>
Yeah, I can forgive IDL

[10:10:05.0000] <annevk>
Domenic: don't tell anyone, but inlining same-origin checks isn't that bad at all

[10:10:46.0000] <Domenic>
haha ok :)

[10:29:14.0000] <TabAtkins>
gsnedders: No, image-orientation also changes the layout size.  Also: it can auto-rotate based on exif data.

[10:29:45.0000] <annevk>
Domenic: I basically ended up removing some sections because of it...

[11:10:58.0000] <ritsyy>
this issue https://github.com/whatwg/html/issues/31 needs placeholder attribute to be mentioned in textarea too but then content attributes are not mentioned in TOC, should it be closed?

[11:12:25.0000] <Domenic>
ritsyy: yeah I think that can probably be closed...

[11:13:01.0000] <ritsyy>
Domenic: cool :)

[13:08:09.0000] <annevk>
Domenic: made a couple of extra cleanup commits for cross-origin-objects

[15:13:09.0000] <MikeSmith>
annevk: https://twitter.com/watersNYC/status/698276953724489729 “Whoever is part of the group that created and implemented #CORS - I owe you a beverage”

[15:13:28.0000] <MikeSmith>
sounds like he’s probably one of those naive people who are overly focused on solving real problems

[15:14:14.0000] <MikeSmith>
he needs to spend some time in w3c discussions so that we can beat that out of him


2016-02-13
[19:54:17.0000] <annevk>
MikeSmith: he clearly does not respect the universal URI [sic] function

[19:55:08.0000] <Domenic>
that thread.... *groan*


2016-02-14
[14:11:40.0000] <nox>
Shouldn't WebSocket's constructor's argument `protocols` be ByteString instead of DOMString?

[14:12:23.0000] <nox>
It maps to the token production in the IETF RFCs, like XHR's open()'s argument method.

[14:12:40.0000] <nox>
annevk: ^


2016-02-15
[19:59:07.0000] <GPHemsley>
annevk: r- from me, per my comment. But I've actually been meaning to talk you about mimesniff ownership.

[20:32:03.0000] <MikeSmith>
howdy GPHemsley

[21:48:56.0000] <annevk>
nox: maybe, what do browsers do?

[21:49:18.0000] <annevk>
GPHemsley: anytime

[00:13:08.0000] <annevk>
TabAtkins: I want a custom <dt> at the top, called !Translation(s), but I cannot seem to include markup there

[00:13:37.0000] <annevk>
TabAtkins: my idea was "!Translation <small>(non-normative and can be out-of-date)</small>:"

[00:13:45.0000] <annevk>
TabAtkins: but bikeshed ends up escaping the <

[00:13:54.0000] <annevk>
TabAtkins: I guess I'll leave out the <small> for now

[00:14:34.0000] <TabAtkins>
Right, except in a few places, I use nice safe DOM methods, so text stays text. ^_^

[00:15:07.0000] <TabAtkins>
But I can of course add a Translation header officially, and have it display such a warning in a <small> (which would be well-warranted and should be on more links to translations imo)

[00:15:40.0000] <annevk>
Maybe I should even add "likely" given how often we update

[00:21:55.0000] <annevk>
TabAtkins: https://notifications.spec.whatwg.org/ has an example now

[00:22:03.0000] <annevk>
TabAtkins: without <small> though

[00:22:30.0000] <TabAtkins>
Cool. File an issue on me so I"ll remember to get on it on Tuesday when I get back to work?

[00:22:38.0000] <annevk>
sure

[00:39:05.0000] <annevk>
TabAtkins: that reference system picked up https://html.spec.whatwg.org/multipage/infrastructure.html#concept-request-origin despite it having data-noexport

[00:39:09.0000] <annevk>
TabAtkins: what is going on?

[00:39:23.0000] <annevk>
/me can't update URL because of this now

[01:03:18.0000] <TabAtkins>
What, precisely, is happening with your request? All four of the "origin" dfns in HTML are indeed unexported.

[01:05:03.0000] <annevk>
TabAtkins: see the PR against URL

[01:05:38.0000] <annevk>
TabAtkins: for some reason "origin" starts linking to the URL above, rather than the one definition of origin in HTML that does not have data-noexport

[01:06:30.0000] <TabAtkins>
All four of the HTML dfns are unexported, tho. (And I just pulled fresh datafiles.)

[01:07:56.0000] <annevk>
TabAtkins: https://html.spec.whatwg.org/multipage/browsers.html#origin-2 does not have data-noexport

[01:09:07.0000] <TabAtkins>
Right, but "dfn" type definitions are unexported by default.

[01:09:27.0000] <TabAtkins>
You can explicitly export it with data-export.

[01:09:40.0000] <annevk>
TabAtkins: last time you told us to annotate things with data-noexport

[01:09:47.0000] <TabAtkins>
Yes, for selectors. ^_^

[01:09:49.0000] <annevk>
TabAtkins: if that's the default that advice wouldn't have made much sense

[01:10:02.0000] <TabAtkins>
(All other types export by default, but specs often define local terms for all sorts of things that they don't want to expose.)

[01:10:04.0000] <annevk>
TabAtkins: no also for this and other things

[01:10:41.0000] <annevk>
Why would we have to annotate selectors with the default? Why would they have a different default?

[01:11:07.0000] <TabAtkins>
You're misreading.  "dfn" types are not exported by default.  All other types are exported by default.

[01:11:37.0000] <TabAtkins>
You had some selector dfns in HTML that were interfering with Selectors, so I asked you to annotate them.

[01:12:31.0000] <TabAtkins>
(The spider has some intelligence that lets it give types to some things based on text contents or IDs, which is how it knew those were selectors in the HTML spec despite lacking annotations.)

[01:12:57.0000] <annevk>
TabAtkins: I'm pretty sure you also said this about origin somewhere

[01:13:15.0000] <TabAtkins>
Seems unlikely, but it's possible I wasn't thinking clearly at the time.  Shrug.

[01:13:44.0000] <TabAtkins>
Anyway, what's the problem you're having, and what's the effect you wanted?

[01:15:05.0000] <annevk>
TabAtkins: see how https://github.com/whatwg/url/pull/92 changes the link of origin

[01:17:13.0000] <TabAtkins>
Hm, are you now getting a warning saying that there are two possible anchors, and it's arbitrarily choosing one?

[01:17:53.0000] <annevk>
TabAtkins: it says "Arbitrarily chose the one in html."

[01:18:30.0000] <TabAtkins>
Yup, not the most helpful message in this circumstance, I need to spend more effort on detecting exactly what error situation you're in and reporting better.

[01:18:37.0000] <TabAtkins>
Anyway, the one you want (#origin-2) is apparently for=origin

[01:19:02.0000] <annevk>
I don't understand how it can even link to the other one given that it has explicitly opted out of this scheme

[01:19:29.0000] <annevk>
data-noexport shouldn't mean that you can still link to it, that kinda defeats the purpose

[01:19:44.0000] <TabAtkins>
Because you specified a spec.  That is the explicit signal for "fuck it, I really do mean to link the term from this spec".

[01:19:58.0000] <TabAtkins>
Unexported terms aren't put into the big bag of global refs, but they're still linkable.

[01:20:20.0000] <TabAtkins>
(If you don't want them to be a ref at all, there's a way to do that.)

[01:20:35.0000] <annevk>
That is not what I mean when I say spec=html... I would never really mean that

[01:20:48.0000] <TabAtkins>
And again, note that *all four* of the html "origin" dfns are unexported.

[01:21:15.0000] <TabAtkins>
It generally is.  It's very rare for a spec to both define a term locally and want to link to another spec's definitino of the same term.

[01:21:17.0000] <annevk>
If I added data-export="" to <dfn>origin</dfn> it'd be okay?

[01:21:47.0000] <annevk>
Specifications sharing terms seems likely to be quite common

[01:22:07.0000] <annevk>
I thought that's why we had spec= in the first place, as a namespace

[01:22:28.0000] <TabAtkins>
Different specs using the same word for different defs, yes.  Specs using a word for a local ref *and* linking into another spec's ref for that word (meaning something different), that's rare.

[01:23:04.0000] <TabAtkins>
The spec='' attribute lets you specify which of the several sources for a given term you want, if they're identical in all other respects.

[01:23:37.0000] <TabAtkins>
What you want is to change the for=/ (which is wrong for the term you want) to for=origin.

[01:23:59.0000] <TabAtkins>
Run `bikeshed refs --text=origin --type=dfn --spec=html` to see all the refs and their attributes.

[01:25:05.0000] <TabAtkins>
And if you want HTML to actually be the definitive reference for one or more of those terms, put data-export on their <dfn> so they'll show up in the global ref set.

[01:28:00.0000] <annevk>
I see

[01:28:20.0000] <annevk>
I guess we should do that and stop doing the no-export thing where it doesn't matter anyway

[01:29:17.0000] <TabAtkins>
For any "dfn" type terms (god DAMN i wish i'd come up with a different name for that category), yeah, no need to write noexport on them.

[01:29:39.0000] <TabAtkins>
Unless you just like being explicit, which isn't bad. I do that sometimes just to be clear about what I intended to export and what I didn't.

[01:58:47.0000] <JakeA>
TabAtkins: http://jsbin.com/nomega/edit?css,output - I can't decide if this custom property behaviour is a bug or not

[01:59:08.0000] <JakeA>
Firefox & Chrome agree on the output, but I can't see why this would happen in the spec

[01:59:30.0000] <JakeA>
I thought in var(--bar, green) the value would be green if --bar was initial

[02:00:31.0000] <TabAtkins>
--bar is *the keyword initial*. It's not the initial value of a custom property.

[02:00:56.0000] <TabAtkins>
So it successfully substitutes in var(--bar), giving background-color the value "initial", which gives you the result you want.

[02:01:21.0000] <TabAtkins>
This is honesty an unanticipated scenario, but sure, it makes sense and I'm glad browsers agree.

[02:04:10.0000] <JakeA>
TabAtkins: so, why isn't the keyword "initial" carried through here? http://jsbin.com/nomega/edit?css,output

[02:04:42.0000] <TabAtkins>
Because there's a line in the spec defining that situation, and it says that the global keywords work normally on custom properties. ^_^

[02:05:04.0000] <JakeA>
Hah, gotcha. Fair enough.

[02:05:29.0000] <TabAtkins>
(I thought this meant that I lost the ability for a custom prop to carry a global keyword, but evidently that's not true! If I remember, I'll add a note to the spec talking about that.)

[02:06:18.0000] <JakeA>
I guess there's no reason to do var(--foo, initial), but through some stupidity I'd ended up with it and got confused by the behaviour, but if this is a way to set a custom property to the value "initial", then I guess that's potentially useful

[02:06:48.0000] <TabAtkins>
On second thought, maybe that behavior doesn't actually make sense, but browsers do it, so ehhhhh.

[02:07:08.0000] <TabAtkins>
Wait, do your first example again, but with "inherit", and put a background on a parent.

[02:07:17.0000] <TabAtkins>
Just to make sure it's actually carrying the keyword around.

[02:09:06.0000] <JakeA>
TabAtkins: http://jsbin.com/nomega/edit?css,output

[02:09:20.0000] <TabAtkins>
sweet, confirmed

[02:09:33.0000] <TabAtkins>
so yeah: doesn't actually make a ton of sense, but eh

[02:10:06.0000] <JakeA>
Ohh, I didn't realise "inherit" was an 'unsetter' too

[02:10:06.0000] <TabAtkins>
it just means browsers are special-casing custom properties to only look for global keywords in their original, unsubstituted values.

[02:10:14.0000] <TabAtkins>
wait DUH that makes sense

[02:10:34.0000] <TabAtkins>
no wait nm

[02:10:40.0000] <TabAtkins>
i'll think about this later when it's not 2am

[02:10:50.0000] <TabAtkins>
what's this about "unsetter"?

[02:11:46.0000] <JakeA>
As in, if I have a custom property that has a value, and I later want it to be "unset", as in it'd use the fallback in var()

[02:12:17.0000] <JakeA>
I guess "inherit" will become "initial"

[02:12:22.0000] <TabAtkins>
no...

[02:12:37.0000] <TabAtkins>
inherit means inherit

[02:12:56.0000] <TabAtkins>
(tho the root element inherits the initial value

[02:12:57.0000] <TabAtkins>
)

[02:13:19.0000] <JakeA>
yeah, sorry, that's what I meant by becomes "initial"

[02:13:50.0000] <JakeA>
for the purposes of var(--foo, fallback) it sees --foo as initial and falls back

[02:14:22.0000] <TabAtkins>
yeah.

[02:14:51.0000] <TabAtkins>
the easiest way to unset a custom prop, btw, is to set it to itself. --foo: var(--foo); immeidately unset it

[02:15:09.0000] <TabAtkins>
well hey tho, --foo: initial does too

[02:15:12.0000] <TabAtkins>
so whatever

[02:15:14.0000] <TabAtkins>
it's 2am

[02:15:23.0000] <TabAtkins>
(i'm archive-binging a comic and almost done)

[02:15:55.0000] <JakeA>
hah GET SOME SLEEP. Oh wait, it's a holiday over there isn't it? Meh, stay up all night!

[02:16:39.0000] <TabAtkins>
YUP

[02:18:59.0000] <JakeA>
Well, thanks for helping me through that. I'm using custom properties to build a rendering dependency tree when async-loading CSS

[02:19:06.0000] <JakeA>
It works

[03:10:22.0000] <yoav>
What's the best way to get some discussion around https://www.w3.org/Bugs/Public/show_bug.cgi?id=29078 going? Copy it over to GH?

[03:12:27.0000] <MikeSmith>
yoav: yeah I think that would get it more visibility

[03:24:51.0000] <TabAtkins>
JakeA: I'd love to see it when I'm more rested. And now that I'm done archive-binging, to bed I go.

[03:25:18.0000] <JakeA>
Goodnight!

[03:47:30.0000] <yoav>
https://github.com/whatwg/dom/issues/167

[04:04:44.0000] <MikeSmith>
yoav: super

[04:04:48.0000] <annevk>
That was an HTML bug

[04:04:52.0000] <MikeSmith>
yoav: but why is it a DOM

[04:05:03.0000] <MikeSmith>
yeah

[04:05:11.0000] <yoav>
oops :/

[04:05:16.0000] <yoav>
Will move it

[04:05:20.0000] <MikeSmith>
hai

[04:07:25.0000] <yoav>
https://github.com/whatwg/html/issues/694

[04:15:56.0000] <ritsyy>
this bug https://www.w3.org/Bugs/Public/show_bug.cgi?id=26942 has a pretty cool researches :)

[04:32:23.0000] <zcorpan>
yay the gradient is now smooth! (maybe it has been a while, but noticed now)

[06:48:22.0000] <JakeA>
annevk: can't work it out from the spec… why can't you create a request of mode "navigate"?

[06:49:41.0000] <wanderview>
JakeA: I think because navigations have special rules we don't want to expose to fetch()

[06:49:46.0000] <wanderview>
fetch() in the window

[06:49:53.0000] <JakeA>
ah ok

[06:49:55.0000] <JakeA>
ta!

[06:50:05.0000] <JakeA>
I figured it'd be something security-like

[06:50:13.0000] <wanderview>
JakeA: if we could get rid of all "if navigation" special cases, maybe it would be safe... but navigations are still a bit hand-wavy I think

[06:50:33.0000] <annevk>
Maybe we could open it up, but I'd like to make sure we understand navigate a lot better first

[06:50:41.0000] <annevk>
What wanderview said

[06:51:16.0000] <annevk>
wanderview: do you happen to know if Gecko supports any argument to new Headers()?

[06:51:27.0000] <wanderview>
I guess it makes you wonder about the differences between fetch() and a function wrapping iframe+onload

[06:52:09.0000] <annevk>
Seems like we do

[06:52:13.0000] <wanderview>
annevk: our webidl says we optionally take HeadersInit: https://dxr.mozilla.org/mozilla-central/source/dom/webidl/Headers.webidl#21

[06:59:31.0000] <annevk>
wanderview: https://github.com/whatwg/fetch/issues/165

[06:59:38.0000] <annevk>
wanderview: (and thanks for the IDL pointer)

[07:01:32.0000] <wanderview>
annevk: not sure what your last comment is saying

[07:03:11.0000] <wanderview>
annevk: I was trying to say that for no-cache I'd like to remove this part of the current spec text: "and the response in the HTTP cache for httpRequest does require revalidation"

[07:03:29.0000] <wanderview>
annevk: so the revalidation headers are added regardless of the age of the entry in the http cache

[07:05:42.0000] <annevk>
wanderview: if you have a response in the cache that doesn't require revalidation, how'd you go about adding headers for that?

[07:06:18.0000] <wanderview>
annevk: the revalidation headers go on the request, no?

[07:06:35.0000] <annevk>
wanderview: sure, but they're based on the response in the cache

[07:07:04.0000] <wanderview>
annevk: what information is needed from the response in the http cache?

[07:07:18.0000] <annevk>
wanderview: the etag?

[07:07:24.0000] <annevk>
wanderview: or a date?

[07:07:53.0000] <wanderview>
annevk: which date?  date stored or current age?  I'm saying, use the info from the http cache, but don't make that depend on the http cache entry being aged

[07:08:12.0000] <wanderview>
if there is no http cache entry at all, then don't set revalidation headers

[07:08:14.0000] <annevk>
wanderview: stored, but more common is etags

[07:09:03.0000] <wanderview>
all I'm trying to say is skip the age check part of "response in the HTTP cache for httpRequest does require revalidation" if no-cache is set

[07:09:12.0000] <annevk>
wanderview: "does require revalidation" will almost always be true, fwiw

[07:09:35.0000] <annevk>
hmm

[07:09:43.0000] <wanderview>
annevk: where is "does require revalidation" defined?

[07:09:57.0000] <annevk>
yeah it's not, integration is hand-wavy

[07:10:13.0000] <annevk>
HTTP does not define this in detail either because they don't really require things from caches

[07:12:02.0000] <wanderview>
well, that makes it hard to define a primitive to skip these undefined behaviors

[07:12:42.0000] <annevk>
Yeah, perhaps we added the cache modes to early or we added too many of them

[07:13:17.0000] <wanderview>
annevk: but I think this type of behavior is something you really want to use in service worker install event handlers

[07:14:23.0000] <annevk>
wanderview: so no-cache basically means that Fetch has to create a conditional request, I guess we'll just have to refine its definition over time to make sure it meets expectations

[08:29:31.0000] <Krinkle>
Hm.. we're running into some unexpected measures when retroactively comparing SPDY to HTTP/1 performance. Wikipedia's been SPDY for a few months now, but in a recent webpagetest with chrome and disabled spdy support, we see a minor improvement, correlated to the size of the html payload. Our suspicion is that this is due to how html is prioritised over css.

[08:29:31.0000] <Krinkle>
Previously HTML and CSS loaded in separate connections more or less sharing bandwidth equally. Meaning when the CSS is finished and the first section of html, Blink can paint.

[08:29:53.0000] <Krinkle>
But with SPDY, it is blocked on downloading all of the html  before css stream gets any breathing room.

[08:30:03.0000] <Krinkle>
This is in a 2G bandwidth emulation though

[08:30:25.0000] <Krinkle>
JakeA: ^ any thoughts? Was just reading your css loading article.

[08:31:40.0000] <annevk>
Krinkle: I guess you can force separate connections by hosting the CSS on a distinct hostname and not share the TLS connection

[08:32:00.0000] <Krinkle>
maybe chrome (or nginx on our side) is too naive in its interpretation of prioties. Not sure if the SPDY spec means priority to be absolute or relative (e.g. less bandwidth or no bandwidth)

[08:32:04.0000] <annevk>
Krinkle: note that SPDY is about to be disabled, but I guess you mean HTTP/2

[08:32:10.0000] <Krinkle>
This is SPDY

[08:32:15.0000] <JakeA>
Krinkle: is the server controlling the priority here?

[08:32:16.0000] <Krinkle>
But yeah, I'm aware of it sunsetting very soon

[08:32:25.0000] <Krinkle>
JakeA: Afaik it's Chrome (html = highest, css= high)

[08:32:41.0000] <Krinkle>
I'm hoping this'll be better in H2

[08:33:28.0000] <Krinkle>
Basically start render for large articles is significantly worse with SPDY than without

[08:33:47.0000] <Krinkle>
Not the joy we usually get from streaming

[08:33:48.0000] <JakeA>
Krinkle: can you share the wpt links?

[08:33:55.0000] <JakeA>
I'd like to make a bug for this

[08:34:01.0000] <Krinkle>
I'll pull it up. Thx

[08:35:30.0000] <Krinkle>
JakeA: Our issues are https://phabricator.wikimedia.org/T125979 - https://phabricator.wikimedia.org/T125208 ; TL:DR; As for median nav timing, SPDY is still a win overall. So the SPDY-off experiment will be terminated soon. It's mostly affected large articles which is a minority. (large for us, that is)

[08:37:49.0000] <Krinkle>
Last I checked, we're blocked on nginx support for spdy3+h2 rather than just spd3 or h2 (for which we currently pick spd3 due to higher coverage). Chrome switching will improve that balance though, so I hope we'll switch soon.

[08:39:40.0000] <JakeA>
Krinkle: https://code.google.com/p/chromium/issues/detail?id=586938

[08:39:48.0000] <Krinkle>
annevk: Yeah, but we actually just finished last year folding our static domain into the main content domain (under a /static path)

[08:40:07.0000] <Krinkle>
saving the extra connection proved quite improving on the timing metrics.

[08:41:52.0000] <annevk>
Krinkle: it sound like under certain conditions having extra connections is more beneficial

[08:41:56.0000] <Krinkle>
JakeA: I suspect either 1) Chrome should use priority "Highest" for html + css (given that it blocks render on css arriving), or 2) if SPDY spec is intending for Highest and High to run along side (with relative preference, not absolute preference) to the higher one - then maybe our nginx is being too naive about the priorities.

[08:41:59.0000] <Krinkle>
I'm not sure.

[08:42:06.0000] <Krinkle>
annevk: Yeah

[08:42:19.0000] <annevk>
Krinkle: that is, I'm assuming that for HTTP/1.1 you actually get multiple connections here

[08:42:35.0000] <Krinkle>
Yep.

[08:42:54.0000] <Krinkle>
on H1 it does the typical N connections per origin.

[08:42:56.0000] <JakeA>
Krinkle: agreed, but no idea if it's Chrome or Nginx getting it wrong

[08:43:04.0000] <Krinkle>
Yeah

[08:43:25.0000] <Krinkle>
I wouldn't be surprised if its Nginx. I hear the implementation  may've been a bit rushed/minimal.

[08:43:44.0000] <Krinkle>
Or it could be abiguity in the SPDY spec, which might be better in H2

[08:48:41.0000] <Krinkle>
annevk: Hm.. interesting point though. Maybe there is a balance to be made with regards to hostname coalesce

[08:49:20.0000] <Krinkle>
We were actually considering folding the SSL connection for our static thumbnail host (upload.wikimedia.org) into the main wikipedia domains as well. Not literally the same origin, but it would use the same connection, again.

[08:49:48.0000] <Krinkle>
That's currently the last remaining hostname that isn't sharing connection.

[08:51:00.0000] <annevk>
Krinkle: I don't really know how those things play out today, but given how efficient torrents seem to be multiple connections might not be all bad

[08:51:26.0000] <annevk>
Krinkle: I haven't really seen much on multiple connections in a H2 world though

[08:55:24.0000] <Krinkle>
annevk: It's also not bug free. Last quarter we had a major issue in Firefox due to it re-using the same connection for different domains when (arguably) it shouldn't have re-used the connection. One domain had IPv4-only, the other v4 and v6. The main connection was Ipv6, and it re-used the connection for the Ipv4-only domain.

[08:55:26.0000] <Krinkle>
https://phabricator.wikimedia.org/T121922

[08:55:55.0000] <Krinkle>
It became part of a cascading failure eventually resulting in fundraising banners not showing up in FIrefox for Ipv6 users due to geolocation depending on the ipv4-only domain (now fixed).

[08:56:59.0000] <Krinkle>
upstreamed at https://bugzilla.mozilla.org/show_bug.cgi?id=1235068

[08:57:07.0000] <Krinkle>
it's no longer relevant today, but was a fun adventure

[08:59:53.0000] <annevk>
Interesting

[10:06:53.0000] <annevk>
You can really tell when the US is on holiday

[10:14:50.0000] <wanderview>
annevk: everyone busy dressing up as their favorite american president

[10:20:12.0000] <annevk>
smaug____: I might look into integrating some of the Shadow DOM stuff into HTML

[10:20:26.0000] <annevk>
smaug____: such as the "in a document" vs "in a composed document" stuff

[10:20:41.0000] <annevk>
smaug____: do you think that's worthwhile to do now, or should we wait longer?

[10:20:49.0000] <annevk>
hayato: ^^

[10:21:10.0000] <smaug____>
hmm, not sure what waiting could give us

[10:21:14.0000] <annevk>
(not today, but soonish)

[10:21:26.0000] <smaug____>
it has been an issue since...2012 or 2013

[10:21:47.0000] <smaug____>
major issue even, so would be good to get it finally fixed

[10:22:17.0000] <smaug____>
and great, thanks for doing it whenever you end up doing it!

[10:24:32.0000] <annevk>
/me finds https://www.w3.org/Bugs/Public/show_bug.cgi?id=24379, https://www.w3.org/Bugs/Public/show_bug.cgi?id=28748, and https://www.w3.org/Bugs/Public/show_bug.cgi?id=27406

[10:25:56.0000] <annevk>
I remember Hixie also writing down a proposed solution somewhere, maybe that was in the Shadow DOM collection of bugs

[10:31:52.0000] <smaug____>
annevk: I think in the w3c bugzilla bug about is in doc

[10:32:17.0000] <smaug____>
or perhaps you mean some other proposal

[10:35:35.0000] <GPHemsley>
oh no, I pushed the green button

[10:51:27.0000] <GPHemsley>
annevk: It appears I don't have push rights to xref

[11:00:04.0000] <GPHemsley>
annevk: Oh shoot, I totally obliterated your Makefile commit.

[11:00:10.0000] <GPHemsley>
s/Makefile/README/

[11:00:15.0000] <GPHemsley>
/me is gonna back away now

[11:58:07.0000] <annevk>
GPHemsley: can you fix it?

[11:58:59.0000] <annevk>
GPHemsley: oh, you force pushed?

[11:59:13.0000] <annevk>
/me wonders how to fix that

[11:59:53.0000] <wanderview>
annevk: can you sanity check me here?  are importScripts() in a service worker supposed to be restricted to same origin?

[12:00:14.0000] <annevk>
wanderview: I don't know, doubt it?

[12:00:27.0000] <annevk>
/me opens https://slightlyoff.github.io/ServiceWorker/spec/service_worker/

[12:01:07.0000] <annevk>
wanderview: nope

[12:01:24.0000] <wanderview>
ok, thanks

[12:04:42.0000] <annevk>
GPHemsley: I enabled master branch protection

[12:04:47.0000] <annevk>
GPHemsley: I also restored my commit

[12:08:59.0000] <annevk>
GPHemsley: I don't really have time right now to talk about things like you wanted unfortunately, would email be okay for you?

[12:10:07.0000] <annevk>
GPHemsley: if not, let me know what time works for you, but keep in mind my timezone is A'dam/Zurich

[12:11:48.0000] <annevk>
GPHemsley: also, someone from Mozilla might be providing some more PRs for sniffing things we implemented

[13:28:29.0000] <Domenic>
"

[13:43:25.0000] <wanderview>
SyntaxError: unterminated string literal

[14:18:40.0000] <mawkgawk>
is there an event  that fires when fetch completes xhr? I want to hook into all completed requests

[14:23:44.0000] <boogyman>
mawkgawk: research promise.all

[15:08:26.0000] <smaug____>
Hmm, how is 'strictly split a string' supposed to work if there are several delimiters next to each others

[15:09:35.0000] <smaug____>
per algorithm we get empty strings in the array


2016-02-16
[22:55:10.0000] <tso>
OI STOP BREAKING THE WEB YOU WANKERS

[22:56:14.0000] <boogyman>
tell us how you really feel

[23:09:26.0000] <annevk>
So https://www.w3.org/Bugs/Public/show_bug.cgi?id=26365#c53 is the bug comment I was looking for where Hixie proposed a solution

[00:49:10.0000] <zcorpan>
anyone with Edge care to check http://software.hixie.ch/utilities/js/live-dom-viewer/saved/3887 for me?

[00:54:25.0000] <annevk>
What is the latest approach to get Edge running on a MacBook? I should probably get on that

[01:05:25.0000] <annevk>
mathiasbynens: I was wondering if you could help me with an Apache .htaccess question

[01:05:42.0000] <mathiasbynens>
annevk: I can try

[01:06:11.0000] <annevk>
mathiasbynens: I have a shared directory for several domains, therein I have an .htaccess that has RewriteCond %{HTTPS} !=on\nRewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]

[01:06:29.0000] <annevk>
mathiasbynens: now for some domains that have their own rewriterules, this ends up not being executed

[01:07:07.0000] <annevk>
mathiasbynens: e.g., curl --HEAD http://annevk.nl/test gives a 404 rather than a redirect to the https equivalent

[01:07:52.0000] <annevk>
mathiasbynens: annevk.nl has RewriteCond %{REQUEST_URI} ^/$\nRewriterule ^(.*)$ https://annevankesteren.nl/ [L,R=302], fwiw

[01:08:06.0000] <mathiasbynens>
annevk: what is `ServerName` set to? I guess it’s just `ServerName annevk.nl` — in that case, try `ServerName https://annevk.nl` and restart Apache

[01:08:07.0000] <annevk>
mathiasbynens: (both also have RewriteEngine on)

[01:08:28.0000] <annevk>
mathiasbynens: I cannot control Apache

[01:08:55.0000] <annevk>
(If I could I'd probably not run Apache)

[01:09:19.0000] <mathiasbynens>
annevk: so no access to mod_rewrite logs either?

[01:09:39.0000] <annevk>
mathiasbynens: probably do have access to logs

[01:11:23.0000] <ritsyy>
would this be wrong formatting https://paste.kde.org/prbc0g35f , that was whole in a single line

[01:11:46.0000] <annevk>
mathiasbynens: actually, so no

[01:11:47.0000] <mathiasbynens>
annevk: I hope logging is enabled, since you can only enable it from <VirtualHost> which you cannot control

[01:11:56.0000] <annevk>
mathiasbynens: just normal HTTP logs

[01:12:27.0000] <annevk>
ritsyy: "Secure Connection Failed"

[01:13:09.0000] <annevk>
ritsyy: hmm, seems to work in another browser, I guess Nightly is doing some HTTPS experiment

[01:13:22.0000] <annevk>
ritsyy: IDL should remain on a single line

[01:13:32.0000] <annevk>
ritsyy: since it's inside <pre> we cannot do wrapping there

[01:13:49.0000] <ritsyy>
annevk: oh yeah

[01:17:21.0000] <mathiasbynens>
annevk: not sure how to help, then :( I think it might be the `ServerName` thing. This can be confirmed by placing a test directory at `https://annevk.nl/foo/`, then checking what happens for `curl -I http://annevk.nl/foo`

[01:17:59.0000] <mathiasbynens>
(that’s `mod_dir`’s `DirectorySlash On` kicking in, which uses the `ServerName` scheme)

[01:19:06.0000] <annevk>
mathiasbynens: Location: http://annevk.nl/foo/

[01:19:51.0000] <mathiasbynens>
annevk: then `ServerName` is just `annevk.nl` or `http://annevk.nl/`, but should be `https://annevk.nl`

[01:20:35.0000] <annevk>
mathiasbynens: I guess the question is whether there is another workaround apart from just copying the rewriterule from the top-level dir into the annevk.nl dir

[01:20:52.0000] <mathiasbynens>
annevk: iirc things like mod_dir’s DirectorySlash On and `ErrorHandler`-stuff might take precedence over custom rewrite rules

[01:21:24.0000] <mathiasbynens>
annevk: if you can’t change the Apache config: not that I know of

[01:21:28.0000] <annevk>
mathiasbynens: to be clear, if I copy the rewriterule from the top-level dir into the annevk.nl dir it works

[01:22:10.0000] <mathiasbynens>
annevk: cool, but you’d still have the `Location: http://annevk.nl/foo/` problem I guess

[01:22:35.0000] <annevk>
mathiasbynens: no

[01:22:59.0000] <annevk>
mathiasbynens: although it will take two redirects

[01:24:15.0000] <annevk>
mathiasbynens: the problem seems to be mostly about how rewriterules are combined across directories

[01:26:47.0000] <mathiasbynens>
annevk: could `RewriteBase` have anything to do with this? are you setting that explicitly for each `.htaccess` file?

[01:27:09.0000] <annevk>
It sounds like I want http://httpd.apache.org/docs/current/mod/mod_rewrite.html#rewriteoptions Inherit

[01:27:26.0000] <annevk>
/me goes to try that

[01:28:17.0000] <annevk>
that works

[01:28:18.0000] <annevk>
great

[01:28:35.0000] <mathiasbynens>
TIL

[01:28:47.0000] <mathiasbynens>
hmm, wouldn’t this potentially mess things up? “Rules inherited from the parent scope are applied after rules specified in the child scope.”

[01:28:48.0000] <annevk>
happy to help :p

[01:29:07.0000] <annevk>
oh

[01:29:09.0000] <annevk>
TIL

[01:29:56.0000] <annevk>
mathiasbynens: I guess I should do InheritDownBefore

[01:30:22.0000] <annevk>
mathiasbynens: that will cause duplicate redirects but that's fine, since that initial redirect is really only for those not privy to HSTS

[01:31:05.0000] <mathiasbynens>
👍🏻

[01:31:44.0000] <annevk>
HTTP/1.1 500 Internal Server Error nice

[01:33:18.0000] <annevk>
Oh great, DreamHost only supports Inherit since it's still stuck on 2.2

[01:35:04.0000] <annevk>
So I guess the answer is duplication for each host that wants to use mod_rewrite

[01:35:07.0000] <annevk>
Okay...

[02:08:00.0000] <ritsyy>
annevk: https://github.com/whatwg/html/pull/699, thinking where should the attributes be placed then? (supported on documents and elements)

[02:09:24.0000] <annevk>
ritsyy: and they're not exposed on Window?

[02:09:35.0000] <ritsyy>
annevk: no

[02:10:46.0000] <annevk>
I would have assumed browsers to just put them on GlobalEventHandlers

[02:11:03.0000] <annevk>
hallvors: did you look into this?

[02:18:18.0000] <hallvors>
annevk: without looking up GlobalEventHandlers those are also available on window, right? per http://software.hixie.ch/utilities/js/live-dom-viewer/?saved=3888 clipboard ones are on document, elements but not window

[02:18:31.0000] <ritsyy>
annevk: amm so putting them it in GlobalEventHandlers list (https://html.spec.whatwg.org/multipage/webappapis.html#globaleventhandlers), but it has to be defined in this list right?  https://html.spec.whatwg.org/multipage/webappapis.html#event-handler-attributes sorry for the confusion

[02:19:25.0000] <annevk>
hallvors: yeah, so I guess these are special then

[02:19:33.0000] <hallvors>
I suppose it wouldn't be a problem adding them to GlobalEventHandlers but it doesn't seem to be what browsers do right now

[02:20:22.0000] <hallvors>
(and perhaps adding them would conflict with scripts doing function oncopy(){} or var oncopy = ... in global scope..?)

[02:20:28.0000] <annevk>
ritsyy: I guess what needs to be done is have something called DocumentAndElementEventHandlers that is almost like GlobalEventHandlers but is not implemented by Window

[02:20:49.0000] <annevk>
hallvors: yeah, let's not even try it, too much compat fallout each time we do something like that

[02:20:55.0000] <hallvors>
The web platform is full of special sauce :-]

[02:22:31.0000] <ritsyy>
annevk: okay so i should add by making a different list for it in https://html.spec.whatwg.org/multipage/webappapis.html#event-handler-attributes

[02:23:31.0000] <annevk>
ritsyy: yeah, I would put a new section before "Event handlers on elements, Document objects, and Window objects" that is almost like it, but doesn't include Window objects

[02:23:57.0000] <annevk>
ritsyy: and then in the IDL definitions section later on, add a new interface before GlobalEventHandlers

[02:24:28.0000] <annevk>
ritsyy: and then we need to make sure Document and Element implement that new interface you define, similar to how they implement GlobalEventHandlers today

[02:24:54.0000] <annevk>
ritsyy: thank you for sorting this out, this is really useful

[02:25:11.0000] <ritsyy>
annevk: okay the interface be added as  DocumentEventHandler?

[02:25:34.0000] <annevk>
ritsyy: I would say DocumentAndElementEventHandlers since it's also for Elements

[02:27:30.0000] <ritsyy>
annevk: yes, will complete this change first then this step needs more of understanding for me " Document and Element implement that new interface you define, similar to how they implement GlobalEventHandlers today", how should i do this

[02:28:03.0000] <ritsyy>
annevk: happy to work on it :)

[02:28:31.0000] <annevk>
ritsyy: so you'll see that document has "Document implements GlobalEventHandlers;" in its IDL and elements have something similar

[02:28:48.0000] <annevk>
ritsyy: that is the magic line that makes an interface implement another interface

[02:29:11.0000] <annevk>
ritsyy: so we want to add a line there for this new interface

[02:30:28.0000] <ritsyy>
annevk: okay yes now i got that, great

[02:30:44.0000] <ritsyy>
annevk: will do it now, thanks a lot!

[02:44:40.0000] <zcorpan>
annevk: /img/daddy probably needs to have the font as a data: URL, since SVG's from 'content' can't reference external resources, right?

[02:45:10.0000] <annevk>
zcorpan: aah, sounds likely

[02:47:50.0000] <annevk>
zcorpan: seems like the data URI kitchen doesn't support HTTPS properly, I guess maybe it fails on SNI

[02:52:49.0000] <zcorpan>
annevk: ok, but you could do a file upload

[02:54:40.0000] <annevk>
zcorpan: already done and seems to work

[02:55:13.0000] <zcorpan>
annevk: ah ok. yep works here also

[02:57:09.0000] <annevk>
thank you for noticing

[02:57:19.0000] <annevk>
I always thought it looked ugly, but I was assuming it was just a bug

[02:57:23.0000] <annevk>
(in the browser)

[02:58:51.0000] <zcorpan>
np. i think the font did work in some browser before. at least sometimes.

[03:44:13.0000] <nox>
annevk, heycam|away, Ms2ger: https://github.com/heycam/webidl/pull/91

[03:45:28.0000] <nox>
06:49 <annevk> nox: maybe, what do browsers do? <- I'm not sure I understand that question (re ByteString vs DOMString in WebSocket), should there be observable difference about this in UAs?

[03:52:32.0000] <Ms2ger>
nox, pointer?

[03:53:25.0000] <nox>
Ms2ger: Pointer?

[03:53:44.0000] <Ms2ger>
About the WebSocket question

[03:54:55.0000] <nox>
Ms2ger: http://logs.glob.uno/?c=freenode%23whatwg&s=14+Feb+2016&e=14+Feb+2016&h=protocols#c985140

[03:57:17.0000] <Ms2ger>
Ah

[04:05:01.0000] <annevk>
nox: yeah, ByteString throws for a lot more input iirc

[04:05:10.0000] <nox>
annevk: Ah?

[04:05:35.0000] <annevk>
nox: I think it only accepts code points in the 00-FF range

[04:07:21.0000] <annevk>
nox: nice PR, heycam|away and bz should probably review it

[04:07:32.0000] <nox>
annevk: Cool. :)

[05:31:30.0000] <zcorpan>
<meta http-equiv=default-style> is implemented in webkit/blink/gecko. default-style HTTP header only in gecko. :-|

[08:14:08.0000] <ritsyy>
i am not able to find this section https://html.spec.whatwg.org/multipage/indices.html#all-interfaces :-/

[08:15:48.0000] <annevk>
ritsyy: I think that is generated

[08:16:21.0000] <annevk>
ritsyy: so if you add an interface that will go there automatically

[08:17:06.0000] <ritsyy>
annevk: yeah i thought that too, but was not sure :)

[08:35:11.0000] <ritsyy>
build-script is still giving the same errors as "Parsing...

[08:35:12.0000] <ritsyy>
Parse Error: (117129,9) unexpected body end tag

[08:35:12.0000] <ritsyy>
"

[08:36:21.0000] <ritsyy>
i did change the script as annevk suggested that day but everytime different error comes up

[08:40:31.0000] <annevk>
ritsyy: you shouldn't have to modify the script

[08:40:43.0000] <annevk>
ritsyy: you might have to update wattsi

[08:40:57.0000] <annevk>
ritsyy: for both wattsi and html-build you should run "git pull"

[08:41:04.0000] <annevk>
ritsyy: and build both in the same way you did before

[08:41:21.0000] <annevk>
I suspect you may not have the latest version

[08:41:35.0000] <ritsyy>
ritsyy: i did git fetch upstream

[08:41:42.0000] <annevk>
ok

[08:41:48.0000] <ritsyy>
then git merge upstream/master

[08:42:00.0000] <ritsyy>
but it says already up-todate

[08:42:43.0000] <annevk>
okay

[08:43:37.0000] <annevk>
did you build wattsi again and make sure PATH points to this new version?

[08:44:14.0000] <ritsyy>
annevk: amm how to check wattsi's version

[08:44:33.0000] <annevk>
ritsyy: there isn't a way yet

[08:45:06.0000] <annevk>
ritsyy: however, when you run build you know where it ends up, so if you point PATH to that and remove other versions you may have, you should be good

[08:45:43.0000] <ritsyy>
annevk: okay i am doing this

[08:47:33.0000] <ritsyy>
annevk: this error is their in wattsi https://paste.kde.org/pri9rrymc

[08:49:06.0000] <annevk>
ritsyy: did you create it with sudo the last time?

[08:49:24.0000] <annevk>
ritsyy: you may have to empty the bin directory with sudo first

[08:49:35.0000] <annevk>
ritsyy: and then run the build script without sudo

[08:50:09.0000] <ritsyy>
annevk: might be, oh okay doing it

[09:15:13.0000] <nox>
annevk: What's the state of DOMException in the Web? Does only Firefox implement a constructor for these?

[09:28:16.0000] <annevk>
nox: perhaps, but that should be stable

[09:28:33.0000] <nox>
annevk: What do you mean?

[09:32:35.0000] <annevk>
nox: that DOMException as specified is unlikely to change

[09:34:58.0000] <nox>
So Firefox should drop its constructor?

[09:37:08.0000] <annevk>
nox: isn't the constructor specified?

[09:37:40.0000] <nox>
annevk: Where?

[09:38:16.0000] <annevk>
nox: https://heycam.github.io/webidl/#es-DOMException-constructor-object

[09:39:18.0000] <nox>
annevk: I can't navigate that spec. -_-

[09:39:22.0000] <nox>
Never mind me. :)

[09:39:44.0000] <annevk>
nox: you basically want to always look for what section 4 says about a particular thing

[09:39:58.0000] <nox>
annevk: Ok. I am taking note of this.

[09:40:39.0000] <annevk>
nox: at some point Domenic will have time and section 3 will disappear; the distinction between IDL types and ECMAScript types is not super helpful

[09:41:06.0000] <Domenic>
nox: Chrome implements the constructor now

[09:42:34.0000] <nox>
Domenic: Oh ok.

[10:34:37.0000] <nox>
Couldn't DOMException be defined with a proper interface and a new extended attribute [LegacyErrorClass]?

[10:37:32.0000] <annevk>
nox: I don't think that would buy us much, would just make things more complicated

[10:38:01.0000] <nox>
annevk: It would eliminate prose and make it clear that it can piggyback IDL's stuff in UAs.

[10:38:37.0000] <nox>
AFAICT, it has both the usual interface object an interface prototype object that interfaces have, and the codes can just be consts.

[10:40:59.0000] <annevk>
no it doesn't

[10:41:03.0000] <annevk>
it inherits from Error

[10:43:12.0000] <nox>
annevk: Hence LegacyErrorClass, like LegacyArrayClass.

[10:45:14.0000] <annevk>
I doubt that is going to help much

[10:46:16.0000] <nox>
annevk: http://heycam.github.io/webidl/#es-DOMException-call I guess that's a special snowflake too?

[10:46:40.0000] <nox>
annevk: I think I'm at least going to implement LegacyErrorClass in Servo anyway because I think it can help implementation there. I will report back about it then.

[10:46:41.0000] <annevk>
not sure

[10:47:10.0000] <caitp>
can you imagine if you could get away with just discarding all of the special snowflakes in the platform?

[10:47:40.0000] <nox>
caitp: But what would we do then?!

[10:47:50.0000] <caitp>
go on vacation

[10:48:08.0000] <nox>
Don't you do that already?

[10:48:48.0000] <caitp>
sure but getting rid of all the nonsense from the platform would probably be grounds for a good long one

[11:24:51.0000] <TabAtkins>
Domenic: <https://www.w3.org/2001/tag/doc/promises-guide#example-environment-ready> uses "in parallel" in exactly the way I keep saying I read it (the following substeps are independent and run parallel with each other), which is *not* the way it's defined (these substeps are a serial algorithm which is run in parallel with the rest of the steps in the outer

[11:24:52.0000] <TabAtkins>
algorithm), *despite linking to the definition of "in parallel"*.  This is why I keep saying that "in parallel" is *not* a good phrase to use for this behavior.

[11:25:46.0000] <TabAtkins>
It has two natural ways of reading it which are not equivalent, and people will continue to make these kinds of mistakes. :/

[12:10:48.0000] <annevk>
TabAtkins: it's an ordered set of steps though...

[12:11:05.0000] <annevk>
TabAtkins: anyway, you could write a PR against HTML and all the dependencies...

[12:11:25.0000] <annevk>
TabAtkins: I think everyone else is fine with this term though

[12:11:38.0000] <annevk>
TabAtkins: that is, I've only seen you make that interpretation

[12:14:45.0000] <TabAtkins>
annevk: No, in that example the two substeps are *not* ordered. They're two independent conditions that get run in parallel with each other.

[12:16:11.0000] <annevk>
Oh I see, it shouldn't use numbered steps then

[12:16:39.0000] <annevk>
One of is always <ul>

[12:24:06.0000] <TabAtkins>
Yeah, but regardless of the markup, the prose is clearly applying the "in parallel" to those substeps, not to the subalgorithm+outer algorithm

[12:24:29.0000] <TabAtkins>
(Because there's nothing returned by the previous step, nor is there any following steps in the outer algo.)

[12:25:46.0000] <annevk>
TabAtkins: it's not multiple substeps though, it's a "pick one of these" which uses <li> for clarity

[12:26:45.0000] <annevk>
Also, that definition seems wonky, since it'll return a new promise each time

[12:27:22.0000] <annevk>
I don't really understand how that text can work as-is, best not copy that

[12:29:12.0000] <TabAtkins>
I'm not copying it, I was looking at it for other reasons.  Domenic, ^^

[12:29:57.0000] <TabAtkins>
The algo doesn't return anything, so yeah, I also agree the text is wonky and doesnt' wrok well as an example.

[13:07:45.0000] <Domenic>
annevk: nox: IMO we do need some IDL for defining exception subclasses. A few people have wanted that for media errors with extra properties etc.

[13:08:22.0000] <Domenic>
TabAtkins: there the work is done by "when/if", not "in parallel"

[13:08:29.0000] <nox>
Domenic: Could you explain to me how is WebIDL's current DOMException's constructor a special snowflake, compared to an plain old interface constructor?

[13:08:38.0000] <Domenic>
TabAtkins: as well as "wait for one of the following to become true"

[13:08:48.0000] <Domenic>
TabAtkins: I can see that the subset formulation is not great; they should probably be bullets

[13:09:04.0000] <Domenic>
TabAtkins: the only actual thing that happens in parallel is "wait for one of the following to become true"

[13:09:39.0000] <Domenic>
nox: it is meant to emulate ES Error subclasses

[13:10:10.0000] <Domenic>
nox: which e.g. can be called, not just constructed

[13:10:17.0000] <Domenic>
nox: also ideally it defines data properties

[13:10:31.0000] <nox>
In which UA can it be called?

[13:10:45.0000] <Domenic>
nox: https://github.com/heycam/webidl/issues/55

[13:12:18.0000] <nox>
Domenic: What do you think of [LegacyErrorClass]?

[13:12:58.0000] <Domenic>
nox: it seems reasonable, see my last comment in that thread. I'd prefer it be spelled [ErrorClass] or s/interface/exception though.

[13:13:13.0000] <Domenic>
nox: there seem to be a lot of non-legacy use cases for it

[13:13:13.0000] <nox>
Domenic: Do we want that to be used in specs and whatnot?

[13:13:16.0000] <nox>
Ok.

[13:13:24.0000] <Domenic>
It should be used sparingly and rarely

[13:13:27.0000] <Domenic>
but it's not legacy

[13:13:51.0000] <nox>
Fair enough.

[13:14:49.0000] <nox>
Domenic: Should it stay in WebIDL afterwards, or move back to DOM?

[13:15:01.0000] <nox>
(DOMException that is, not [ErrorClass].)

[13:15:17.0000] <Domenic>
nox: hmm, I'd still say Web IDL. It's "foundational".

[13:15:34.0000] <Domenic>
doesn't have much to do with trees of nodes

[13:15:51.0000] <Domenic>
If we were naming it today I'd say "WebException" (and also fix a lot of other things about it, but sigh)

[13:16:21.0000] <nox>
Ah ah.

[13:16:44.0000] <nox>
Domenic: You can disguise and present it as some sort of tradition.

[13:16:49.0000] <nox>
WebIDL got DOMException,

[13:16:54.0000] <nox>
DOM got HTMLCollection.

[13:18:01.0000] <Domenic>
:P

[13:26:50.0000] <Domenic>
TabAtkins: how do I debug "could not find 'ready' in bibliography data". It doesn't give me a line number that I can see.

[13:27:06.0000] <Domenic>
TabAtkins: ah it's my use of [[ready]] nevermind

[13:27:34.0000] <TabAtkins>
Sorry about no line numbers, it's somewhere between "very hard" and "impossible" to fix with lxml.

[13:28:48.0000] <Domenic>
TabAtkins: could you do the surrounding text node contents?

[13:29:05.0000] <Domenic>
Just didn't know what to Ctrl+F for

[13:36:17.0000] <gsnedders>
TabAtkins: why is line numbers hard to fix with lxml?

[13:36:30.0000] <TabAtkins>
Becasue lxml drops the line numbers on a fucking whim.

[13:36:34.0000] <gsnedders>
TabAtkins: el.sourceline?

[13:36:43.0000] <TabAtkins>
Nope, that's null for everything but <html>.

[13:36:47.0000] <TabAtkins>
Common problem if you look it up.

[13:36:54.0000] <gsnedders>
oh, with lxml.html?

[13:37:41.0000] <TabAtkins>
Yeah.

[13:39:33.0000] <gsnedders>
/me wonders if that's an libxml2 or lxml bug

[15:00:06.0000] <MikeSmith>
TabAtkins: It seems like you may have also run into the the problem that the lxml html5parser ignores the “namespaceHTMLElements=False” option

[15:00:14.0000] <MikeSmith>
http://stackoverflow.com/questions/32731479/lxml-html5parser-ignores-namespacehtmlelements-false-option

[15:01:32.0000] <TabAtkins>
I use a custom serializer anyway, so that's unimportant luckily.

[15:02:07.0000] <MikeSmith>
ah ok

[15:06:06.0000] <TabAtkins>
(But if I recall correctly, I added that argument originally because it *was* printing namespaces on all the html elements, and adding it made it stop, so apparently it did work in the past, or does work for some printing methods, or something.)

[15:11:07.0000] <MikeSmith>
interesting

[15:11:47.0000] <MikeSmith>
I don’t know how else I could call it differently. I was just testing with a simple toString call

[15:12:08.0000] <MikeSmith>
tostring(h5.parse(stdin, h5.HTMLParser(namespaceHTMLElements=False)))

[15:12:25.0000] <MikeSmith>
where h5 is html5parser

[15:24:38.0000] <TabAtkins>
Actually, I still use html.tostring(0

[15:24:57.0000] <TabAtkins>
I only use my custom serializer for outputting the final document.

[15:30:19.0000] <TabAtkins>
MikeSmith: Yeah, namespaceHTMLElements definitely makes a difference for me.

[15:31:04.0000] <TabAtkins>
https://www.irccloud.com/pastebin/SeFw0lLC/

[15:34:10.0000] <TabAtkins>
I'm calling html5lib directly, tho, not relying on anything built into lxml.

[15:34:13.0000] <MikeSmith>
/me looks

[15:34:18.0000] <MikeSmith>
ah yeah


2016-02-17
[16:21:21.0000] <nox>
Domenic: Seems like Gecko's WebIDL parser got ExceptionClass already.

[17:44:07.0000] <MikeSmith>
TabAtkins: html5lib is still not part of the standard Python library, right?

[17:44:23.0000] <MikeSmith>
it needs to be installed separately?

[17:44:30.0000] <TabAtkins>
Dunno if it is or not, but yeah, I install it separately.

[17:44:35.0000] <MikeSmith>
k

[17:45:30.0000] <MikeSmith>
the default lxml.html parser seems to be more conforming than it was in the past

[17:46:17.0000] <MikeSmith>
TabAtkins: have you run into any specific problems just using the lxml.html parser rather than html5lib?

[17:46:59.0000] <TabAtkins>
Haven't tried.

[17:47:04.0000] <MikeSmith>
ok

[17:48:32.0000] <MikeSmith>
well the main reason I use html5lib is not because I’ve had any specific problems with the lxml.html parser but instead because I don’t trust it without being able to know what it’s actually doing

[18:01:26.0000] <MikeSmith>
TabAtkins: OK fwiw, some quick testing reveals that the lxml.html parser fails to conform in some very basic ways; for example, if the input lacks a <head> start tag, it doesn’t put a `head` element into the tree

[18:05:34.0000] <TabAtkins>
 Heh, cool.

[01:43:57.0000] <annevk>
Ugh, UI Events apparently still tries to redefine the event architecture

[01:45:24.0000] <ritsyy>
annevk: after resolving some more errors i am getting this as the output to wattsi https://paste.kde.org/pqrs9qnvj is this correct?

[01:45:55.0000] <ritsyy>
annevk: because the build script works the same as not giving the line numbers

[01:51:17.0000] <annevk>
ritsyy: that seems like you successfully compiled wattsi yes

[01:55:05.0000] <annevk>
ritsyy: and there's no error on that line?

[01:56:14.0000] <ritsyy>
annevk: no it doesn't show up the line, the error is given like this https://paste.kde.org/pnwe0pi5f

[01:57:49.0000] <annevk>
ritsyy: oh that looks correct

[01:57:59.0000] <annevk>
ritsyy: you missed an end tag somewhere

[01:58:38.0000] <ritsyy>
annevk: oh didn't it shows up the line number?

[01:59:07.0000] <ritsyy>
annevk: oh then i will look into the changes

[01:59:18.0000] <annevk>
it cannot really tell until it sees </body> that you didn't close your tag

[01:59:30.0000] <annevk>
I'm assuming the line that it gives you is </body>

[02:01:23.0000] <ritsyy>
annevk: oh okay, i am looking into it, thanks

[05:43:40.0000] <Ms2ger>
Unprefixed fullscreen api in Firefox 47, finally

[07:48:57.0000] <annevk>
smaug____: so conceptually we'd have "dispatch" invoke something like while(target = target.getParent(event)) path.append(target) and node and document implement this getParent function slightly differently

[07:49:23.0000] <annevk>
smaug____: as would IDB objects

[07:49:41.0000] <annevk>
smaug____: and then when Shadow DOM gets integrated properly we'd change the implementation of nodes a bit further

[07:49:48.0000] <annevk>
hayato: ^^

[08:12:33.0000] <smaug____>
annevk: yeah

[08:13:06.0000] <smaug____>
I think that should be quite clear for the spec

[08:14:40.0000] <smaug____>
I think in new Shadow DOM the propagation would be close to XBL: http://mxr.mozilla.org/mozilla-central/source/dom/base/FragmentOrElement.cpp#890

[08:19:24.0000] <annevk>
smaug____: it's somewhat shitty that getParent needs that event argument for the Window case, but what can you do...

[08:19:59.0000] <smaug____>
'load' is horrible special case

[08:20:41.0000] <annevk>
This new webkit stuff is pretty horrible too though, geez

[08:22:09.0000] <annevk>
smaug____: any reason Gecko passes the whole event to getParent and not just the type?

[08:22:26.0000] <annevk>
smaug____: or even just a boolean whether it's a load or not

[08:25:26.0000] <smaug____>
well, Gecko passes a visitor object. And that has pointers to various things. And event.type is used also in HTMLInputElement for example when click event on checkbox before dispatch needs to switch the state, and if event is cancelled, the state is reverted back

[08:25:58.0000] <smaug____>
this is because there is then PostHandleEvent on each event target called

[08:26:12.0000] <smaug____>
after the normal DOM event handling

[08:27:15.0000] <smaug____>
visitor object has also a pointer to the eventtarget in case there is retargetting happening (this is XBL stuff mostly)

[08:27:55.0000] <annevk>
aah, this is how the <input> stuff works

[08:28:06.0000] <annevk>
so we could finally define that more clearly if I add these hooks

[08:28:10.0000] <annevk>
great

[08:28:20.0000] <smaug____>
http://mxr.mozilla.org/mozilla-central/source/dom/events/EventDispatcher.h#50 There is the generic visitor which is then extended by pre and post visitors

[08:29:08.0000] <smaug____>
annevk: well, the setup is against the current spec

[08:29:16.0000] <annevk>
smaug____: oh, after event dispatch we need to cycle through the parents too?

[08:29:47.0000] <smaug____>
like, dispatching mouseevent 'click' manually needs to trigger links per web compatibility, but IIRC per spec it shouldn't

[08:30:13.0000] <smaug____>
and click() just dispatches event, and if the event wasn't cancelled, then trigger link

[08:30:24.0000] <annevk>
smaug____: ah yes, but that is different from click on checkbox stuff iirc

[08:30:46.0000] <smaug____>
annevk: yes, this setup does iterate the chain again for post phase

[08:32:13.0000] <annevk>
okay, so I'll first define this setup purely for getting the event path and then we can go from there

[08:32:58.0000] <annevk>
thanks, this is really helpful

[08:34:52.0000] <smaug____>
I'm rather subjective here, but the setup Gecko has (has had since 2006), has proved to be very flexible and still fast.  That IDB case for example was trivial to implement.

[08:43:01.0000] <smaug____>
annevk: something else: do you recall if we have cases where some property or interface is hidden based on some state

[08:43:55.0000] <annevk>
smaug____: I don't think we do that

[08:44:05.0000] <annevk>
smaug____: at least, not that I'm aware of

[08:44:14.0000] <smaug____>
not even with this all secure context stuff

[08:44:25.0000] <annevk>
smaug____: there's a proposal to hide APIs for insecure contexts, yes

[08:44:39.0000] <annevk>
smaug____: but in that case the state would be immutable

[08:44:51.0000] <annevk>
Not sure if I like that though

[08:45:09.0000] <smaug____>
just commented in the bug, but I was just thinking the possibility to hide .history and History in shadow-iframes

[08:45:14.0000] <smaug____>
could be a silly idea

[08:49:34.0000] <annevk>
I'd think pages end up throwing on that too

[12:38:15.0000] <nox_>
annevk: I can do DOM if you want but HTML scares me.

[13:25:58.0000] <Domenic>
nox_: dive right in, HTML loves you and just wants to give you a big, big ... big ... hug

[13:42:29.0000] <zcorpan>
TabAtkins: how should i xref a global attribute in html in another spec with bikeshed? e.g. title="" attribute

[13:43:17.0000] <TabAtkins>
The same way you'd ref anything else, based on whatever linking data HTML's definition exposes.  `bikeshed refs` can help.

[13:44:25.0000] <zcorpan>
TabAtkins: what i did in webvtt stopped working recently. see https://github.com/w3c/webvtt/commit/37cfd8bdb67972221aa6434b77bcf8a09a2177cf

[13:44:43.0000] <TabAtkins>
It doesn't look like HTML provides a global title definition, at least from a quick look at `bikeshed refs --spec=html --text=title`?

[13:46:18.0000] <TabAtkins>
Ah, I see what's happening.

[13:47:57.0000] <TabAtkins>
So I can explain both what went wrong, and what the correct thing to do is.

[13:48:03.0000] <TabAtkins>
First, correct thing:

[13:48:22.0000] <TabAtkins>
The global dfn *is* actually in the linking db, I just missed it.

[13:48:34.0000] <TabAtkins>
<a element-attr for=/>title</a> will grab it.

[13:49:35.0000] <TabAtkins>
Run `bikeshed refs --spec=html --text=title --type=element-attr` to find it - it's the first one.

[13:50:02.0000] <TabAtkins>
Second, what went wrong:

[13:50:43.0000] <TabAtkins>
You have title defined in your anchors block, so your autolinks were picking it up from there.

[13:51:46.0000] <TabAtkins>
But I recently changed things, at Anne's request (and because it made sense) so that if you specify `spec` on an autolink, it ignores any local links, because you're *very explicitly* indicating that you want a foreign link.

[13:52:23.0000] <TabAtkins>
And things specified in the anchors block count as "local", so now they're skipped. ^_^

[13:53:55.0000] <TabAtkins>
So another way you could fix this is just to remove the `spec` attribute from your title autolinks so they can grab from your anchors block again, but that's not the best method. Do what I said above.

[13:54:51.0000] <zcorpan>
TabAtkins: ok, i removed these from the block and removed spec=html and added for=/, which seems to work (though it says there are multiple possibilities for lang, but only lists one)... but class gives a fatal error

[13:55:07.0000] <TabAtkins>
Interesting!

[13:55:33.0000] <TabAtkins>
Oh wait, not a crash, just an error. What's it giving?

[13:55:44.0000] <zcorpan>
FATAL ERROR: No 'element-attr' refs found for 'class' with for='/'.

[13:56:23.0000] <zcorpan>
for <a element-attr for=/>class</a>

[13:56:38.0000] <TabAtkins>
Yeah, run `bikeshed refs --spec=html --text=class --type=element-attr` and you'll see Bikeshed doesn't see anything like that.

[13:57:29.0000] <TabAtkins>
Mang where the hell is it defined? I spot only one definition of "class" of any type in HTML, and it's for microdata.

[13:57:59.0000] <zcorpan>
https://html.spec.whatwg.org/multipage/dom.html#classes

[13:59:23.0000] <zcorpan>
the id doesn't follow the same pattern as the other attributes... is that the problem?

[14:00:29.0000] <zcorpan>
if so, could fix it in html

[14:00:37.0000] <zcorpan>
but need to sleep now

[14:00:44.0000] <zcorpan>
will read #whatwg logs tomorrow

[14:02:14.0000] <smaug____>
igrigorik: ping

[14:02:45.0000] <smaug____>
igrigorik: are prefetch etc really supposed to work in any document

[14:03:05.0000] <smaug____>
and not only in documents which have browsing context

[14:04:14.0000] <TabAtkins>
zcorpan: Yeah, the <dfn>class</dfn> doesn't have an ID on it, so it's not an anchor, and the heading doesn't have the right ID pattern for Shepherd to auto-detect what it's about either.

[14:04:35.0000] <TabAtkins>
zcorpan: Just add id="attr-class" to the <dfn>class</dfn>.

[14:05:34.0000] <TabAtkins>
Doing the same to "style", in the next section, would be great too.


2016-02-18
[20:35:16.0000] <jsx>
In the xhr docs on MDN, it says that "Note: Any event listeners you wish to set must be set before calling send()", but I couldn't find anything related being said in the spec.

[20:35:40.0000] <jsx>
So I was wondering if it is more of a best practice than a rule.

[22:21:42.0000] <MikeSmith>
annevk: ⬆

[22:23:19.0000] <annevk>
jsx: iirc that is used for cross-origin fetches, and probably only for "upload".

[22:44:43.0000] <jsx>
annevk: thanks!

[00:46:54.0000] <yoav>
annevk: thoughts on https://github.com/w3c/preload/issues/36#issuecomment-185270277 ?

[01:45:16.0000] <zcorpan>
TabAtkins: ok, https://github.com/whatwg/wattsi/pull/21 should fix it

[02:04:03.0000] <MikeSmith>
zcorpan: on the train atm but will take a look at the PR in a couple hours

[02:04:28.0000] <zcorpan>
MikeSmith: ok thx

[03:50:19.0000] <MikeSmith>
zcorpan: IMHO it’s fine for that change to generate more automated IDs

[03:50:30.0000] <MikeSmith>
it would not be the first time that happened

[03:51:45.0000] <MikeSmith>
I don’t think we should do it cavilierly, but if there’s something else it buys us then we shouldn’t jump through hoops to avoid it

[03:52:20.0000] <MikeSmith>
that said, I kinda don’t like making changes just to make Shephard happy

[03:52:50.0000] <MikeSmith>
would rather Shephard changed to accommodate HTML

[06:20:24.0000] <iminUI>
Hello everyone. I recently joined a company as a Jr.UI developer. Excited to be a part of the community :)

[06:22:33.0000] <annevk>
hi iminUI, welcome

[06:28:18.0000] <iminUI>
thank you annevk

[06:45:30.0000] <zcorpan>
MikeSmith: how should Shepherd know that <h5 id="classes">The <dfn><code>class</code></dfn> attribute</h5> is a global attribute? This doesn't follow any pattern and there's basically nothing it can pick up on here, afaict

[06:46:18.0000] <zcorpan>
MikeSmith: i guess it could analyse the "source" file instead and implement the same dfn->ID mapping as wattsi does, but that also seems a bit insane

[06:52:45.0000] <zcorpan>
idea for httparchive fans: compare total image size for pages that use picturefill vs. pages that don't. (assuming here that using picturefill is a rough approximation for "using <picture> or srcset")

[07:55:59.0000] <rbyers>
birtles: Hey, in Sydney you said you thought we should still be trying to ship the Event.timestamp HighResTimeStamp change, still feel that way?  Care to comment on https://github.com/whatwg/dom/issues/23 ?

[09:07:36.0000] <Ms2ger>
GPHemsley, hey, you got plans to move / objections to moving mimesniff to bikeshed?

[09:07:55.0000] <Ms2ger>
(After paul's patches land)

[10:53:59.0000] <TabAtkins>
MikeSmith: Shepherd is already bending over backwards trying to guess as accurately as possible what all of HTML's definitions are. ^_^  Some things are just impossible, like this one - there is absolutely no way a machine can tell that header is a dfn for the class attribute without just adding an explicit thing saying "this is the anchor for the class

[10:53:59.0000] <TabAtkins>
attribute".

[12:48:33.0000] <zcorpan>
should we have a label for authoring conformance/validators?

[12:50:57.0000] <Domenic>
seems like a good idea, yeah

[12:58:24.0000] <zcorpan>
"topic: validators"?

[13:44:50.0000] <Domenic>
I'd say more of a cross cutting "authoring conformance" tag. Topics IMO should be things that show up in the TOC.

[15:28:04.0000] <MikeSmith>
I much prefer “conformance checkers” rather than “validators”

[15:28:47.0000] <MikeSmith>
and “document conformance” rather than “authoring conformance”

[15:30:22.0000] <MikeSmith>
because a document needs to be evaluated in isolation from whoever authored it

[15:31:35.0000] <MikeSmith>
TabAtkins: yeah zcorpan already clarified that for me a bit, about the problem case

[15:32:35.0000] <MikeSmith>
but IMHO the right way to solve it would be to just put the IDs in the source rather than having wattsi generate them

[15:33:03.0000] <MikeSmith>
or rather than letting wattsi munge them

[15:35:19.0000] <MikeSmith>
the latest comment I saw from Domenic on the wattsi issue seems to make it clear that the problem we have is with wattsi doing that ends up with not the right markup in the output even if we have the right IDs in the source

[15:36:16.0000] <MikeSmith>
so I would prefer that we fix that rather than trying to further tweak wattsi’s behavior for generating IDs


2016-02-19
[00:29:46.0000] <annevk>
davve: philipj: we should put Media Session on the clean Git history train, less useless tweets

[00:31:49.0000] <philipj>
annevk: ahem, yeah the tweets for Media Session have been pretty useless

[00:32:31.0000] <philipj>
ok, new deal is to be like html: create branches in the same repo and always rebase those, no merges

[00:33:06.0000] <philipj>
would need to get mediasession.html out of the repo to avoid certain kinds of ugly commits too

[00:36:51.0000] <annevk>
The one that lands can generate, no?

[00:37:09.0000] <annevk>
That's what I do for most things

[00:37:19.0000] <jochen__>
does somebody know why hyperlink auditing defines the Ping-From header instead of just using the referrer header?

[00:37:31.0000] <jochen__>
or why it's subtly different than the referrer header

[00:37:31.0000] <annevk>
Fetch, etc.

[00:38:34.0000] <annevk>
jochen__: maybe fair of referer stripping?

[00:38:42.0000] <annevk>
Fear*

[00:39:14.0000] <annevk>
/me isn't sure

[00:41:07.0000] <jochen__>
hum hum

[00:41:27.0000] <jochen__>
so a referrer is only send for cross origin pings if the responsible document was fetched over an insecure connection

[00:41:48.0000] <jochen__>
feels like we could just always strip the referrer and be done with it

[03:01:21.0000] <annevk>
jochen__: only if referrer mode is origin, otherwise no header/empty

[04:02:26.0000] <nox>
annevk: Want me to make a PR on DOM for Unenumerable?

[05:21:44.0000] <annevk>
nox: did it land in IDL?

[05:21:49.0000] <annevk>
nox: up to you

[05:22:15.0000] <annevk>
/me hasn't been keeping up with GitHub thus far today

[05:23:14.0000] <nox>
annevk: Not yet.

[05:24:00.0000] <annevk>
nox: I'd like that to land first

[05:47:03.0000] <jochen__>
annevk, https://github.com/whatwg/html/pull/712

[05:53:08.0000] <annevk>
commented in the PR

[12:00:54.0000] <smaug____>
looks like more and more w3c specs start to use that left side toc. Is there some way to get back to the old style? Can't see any alternative stylesheet, but maybe some other way?

[12:01:21.0000] <miketaylr>
resize the browser :/

[12:01:23.0000] <miketaylr>
(jk)

[12:03:02.0000] <smaug____>
hmm, somewhat annoying

[12:03:37.0000] <smaug____>
I guess I need a separate window for specs

[12:38:21.0000] <SimonSapin>
TabAtkins: wasn’t there a button to hide the toc sidebar?

[12:38:41.0000] <TabAtkins>
I haven't added the JS script yet, which is what adds that button.

[12:39:07.0000] <TabAtkins>
smaug____: The side-ToC is now standard W3C style, as of March 1st.

[12:40:48.0000] <TabAtkins>
Domenic or annevk: "no copyright is asserted on this file" is not a legally actionable statement (in dfn.js header). Someone still holds the copyright.  If you want it to be free, use a real license.

[12:58:18.0000] <smaug____>
TabAtkins: sure, and I'm asking whether there is some way to get rid of it

[12:58:55.0000] <smaug____>
just doesn't happen to fit well to the way I browse through specs

[12:59:02.0000] <TabAtkins>
Once I update Bikeshed to fully conform to W3C style, there will be a button to close the sidebar and return it to being inline.  This will not be permanent.

[12:59:06.0000] <smaug____>
(using browser's find all the time)

[12:59:27.0000] <TabAtkins>
By "this" I mean "your choice" - on a reload it'll be back.

[12:59:27.0000] <smaug____>
ok, great, thanks

[13:28:33.0000] <wanderview>
I have to say the service worker spec is much nicer in the new layout \o/

[13:28:45.0000] <wanderview>
linking to an anchor works reliably now

[14:31:41.0000] <TabAtkins>
^_^

[14:32:03.0000] <TabAtkins>
(That smilie was for wanderview.)

[14:55:19.0000] <terinjokes>
/me TabAtkins: the rest of us should just stick with frowns then?

[14:55:28.0000] <Domenic>
TabAtkins: whole repo is CC0ed; I believe that statement is consistent with CC0 but if it's causing confusion you can send a PR to just remove it.

[14:55:49.0000] <TabAtkins>
terinjokes: Stick with whatever you got, I'm just saying that particular one wasn't for you.

[14:55:51.0000] <TabAtkins>
Domenic: kk

[14:56:03.0000] <TabAtkins>
/me is building this into Bikeshed statically right now.

[14:56:18.0000] <TabAtkins>
js sux lol, python 4eva

[14:56:33.0000] <terinjokes>
more turbo pascal, please

[15:34:13.0000] <TabAtkins>
hm, it's not possible to "shield" a <p> from seeing descendant tags that would auto-close it, is there?


2016-02-20
[16:14:30.0000] <TabAtkins>
And I just finished the initial build of dfn-panels into Bikeshed. https://github.com/tabatkins/bikeshed/issues/469 for details; it has to be preffed on right now.

[16:21:26.0000] <Domenic>
TabAtkins: I'm pretty excited to see that in action

[16:24:35.0000] <TabAtkins>
Domenic: It looks exactly like dfn.JS, so hopefully you won't notice any change 😁

[16:26:00.0000] <TabAtkins>
Except the lists of links will be *slightly* more useful, since they won't include the self-link or anything from the indexes.

[16:42:45.0000] <TabAtkins>
Oh, and no long lag in big specs like HTML. 😁

[16:43:55.0000] <Domenic>
Hmm dfn.js is pretty fast for me in HTML

[16:44:01.0000] <Domenic>
The problem with it there is that it's useless on multipage

[16:44:12.0000] <Domenic>
However I'd be really worried about baking in dfn.js popups in singlepage HTML

[16:44:24.0000] <Domenic>
It seems like it could triple the size of an already-large document

[16:45:03.0000] <Domenic>
but yeah dfn.js needs to be tweaked to not include the self-link better in HTML; there are some issues there that are HTML specific I believe.

[18:59:47.0000] <GPHemsley>
Ms2ger: No plans or objections for anything

[21:35:18.0000] <annevk>
TabAtkins: I think Ian wrote dfn.js


2016-02-22
[23:48:42.0000] <annevk>
MikeSmith: why is the "fork me on GitHub" commented out for platform.html5.org?

[23:48:59.0000] <annevk>
MikeSmith: I think a lot of people don't figure out "Last modified" is a link to the changelog either

[23:49:05.0000] <MikeSmith>
because fugly I guess

[23:49:08.0000] <annevk>
MikeSmith: we should make it clearer how to contribute

[23:49:24.0000] <MikeSmith>
OK by me

[23:49:35.0000] <MikeSmith>
you wanna change it, or want me to?

[23:56:07.0000] <annevk>
MikeSmith: I added something

[23:56:17.0000] <MikeSmith>
/me looks

[23:56:35.0000] <MikeSmith>
did you push it?

[23:57:14.0000] <MikeSmith>
/me pulls

[23:57:20.0000] <MikeSmith>
ah yeah OK

[23:57:27.0000] <MikeSmith>
thanks

[01:05:35.0000] <annevk>
MikeSmith: last change to https://www.w3.org/Bugs/Public/show_bug.cgi?id=20247 looks suspicious

[01:05:42.0000] <annevk>
MikeSmith: random person changes the resolution

[01:06:53.0000] <MikeSmith>
/me looks

[01:07:35.0000] <MikeSmith>
yeah

[01:07:59.0000] <MikeSmith>
Will unwind it once I'm back to my laptop

[01:20:23.0000] <annevk>
So I emailed GPHemsley and it seems the best course of action is for MIME Sniffing to become maintained by a group of folks

[01:20:39.0000] <annevk>
Through PRs, community review, etc.

[01:20:51.0000] <annevk>
He doesn't really have the bandwidth anymore to work on it actively

[01:56:18.0000] <jochen__>
annevk: does fetch define when the origin header is set to what value?

[02:00:41.0000] <annevk>
jochen__: it's set in https://fetch.spec.whatwg.org/#http-network-or-cache-fetch

[02:01:01.0000] <annevk>
jochen__: step 7

[02:03:37.0000] <zcorpan_>
annevk: was it intentional to drop Attr#nodeName?

[02:03:55.0000] <zcorpan_>
https://github.com/w3c/web-platform-tests/pull/2593

[02:04:42.0000] <zcorpan_>
live dom viewer uses Attr#nodeName :-)

[02:04:53.0000] <annevk>
pfff

[02:05:05.0000] <annevk>
I guess we should just put Node back on the prototype chain and forget about it

[02:05:42.0000] <annevk>
will require a lot of subtle changes everywhere though

[02:08:07.0000] <zcorpan_>
maybe that's what we'll end up having to do, but adding an alias like Attr already has for nodeValue seems like a reasonable first step

[02:09:04.0000] <annevk>
I guess, I wonder what philipj thinks

[02:09:37.0000] <philipj>
fun with Attr?

[02:10:04.0000] <philipj>
I don't have high hopes for divorcing Attr from Node anymore

[02:10:41.0000] <philipj>
the main benefit in doing so I think would be memory usage, but if people just don't use Attr objects at all it'll work out even better

[02:10:55.0000] <philipj>
of course something like Live DOM Viewer couldn't get by with only getAttributeNames()

[02:11:26.0000] <philipj>
I'm waiting to see data from https://www.chromestatus.com/metrics/feature/timeline/popularity/1034

[02:11:42.0000] <philipj>
that's cloneNode() on attr

[02:12:44.0000] <philipj>
my thinking is that if we require just one more thing with "node" in the name as an alias, then it's just as well to put Node back as the parent interface

[02:13:57.0000] <Ms2ger>
Not sure I agree with that, then you have to add an extra check in every API that takes a Node

[02:15:47.0000] <annevk>
Ms2ger: they usually have checks anyway

[02:15:51.0000] <zcorpan_>
10091 resources from 470k pages match REGEXP_MATCH(content, r'\.attributes\[[a-zA-Z0-9\. -]+\]\.nodeName') (dataset httparchive:har.chrome_jan_15_2016_requests)

[02:16:25.0000] <annevk>
Ms2ger: another branch can be optimized, what are the no-branch cases that would need a branch for Attr?

[02:52:02.0000] <nox>
annevk: Should I try to make a WebIDL PR for [Abstract], btw?

[02:52:23.0000] <annevk>
nox: what's that?

[02:52:37.0000] <annevk>
nox: did you forget [Alias]?

[02:52:39.0000] <nox>
annevk: Signal that that interface cannot be instantiated directly. For example Node.

[02:52:53.0000] <nox>
annevk: [Alias] is a mess to specify, but I started that. :(

[02:52:56.0000] <annevk>
nox: the lack of [Constructor] signifies that

[02:53:03.0000] <nox>
annevk: No it doesn't.

[02:53:07.0000] <nox>
annevk: I can have an Element.

[02:53:10.0000] <nox>
annevk: I can't have a Node.

[02:53:40.0000] <annevk>
Fair, so how does this help?

[02:53:44.0000] <nox>
An Element can be just an Element, a Node cannot be just a Node and is always either a DocumentType etc.

[02:53:57.0000] <nox>
annevk: It helps codegen, as with all the things I try to specify. :P

[02:54:15.0000] <nox>
annevk: Not very important, just helps self-documenting interfaces.

[02:54:27.0000] <nox>
annevk: Ms2ger` is upstreaming my Servo [Abstract] patch to Gecko.

[02:54:55.0000] <Ms2ger`>
I should get back to that

[02:55:05.0000] <nox>
Ms2ger`: Yes you should. You should also review my PR. ;)

[02:56:25.0000] <annevk>
nox: attributes that have no observable effect are tricky, though I guess [NewObject] and such are like that so maybe it's fine

[02:56:40.0000] <nox>
annevk: Are we really going to make Attr derive from Node? :'(

[02:57:34.0000] <annevk>
nox: seems likely, not sure when we started working on DOM but it's been a while and nobody picked this up

[02:57:48.0000] <annevk>
nox: we might get CDATASection back too

[02:57:48.0000] <nox>
Why would we pick this up? It's horrible.

[02:57:55.0000] <nox>
Why is it needed?

[02:58:09.0000] <annevk>
compat, presumably

[02:58:11.0000] <nox>
I disagree with ' my thinking is that if we require just one more thing with "node" in the name as an alias, then it's just as well to put Node back as the parent interface'.

[02:58:49.0000] <annevk>
Sure, but the bottom line here is that implementers need to adopt, if they don't, we need to move on and stop specifying fiction

[02:59:50.0000] <nox>
True I guess. :(

[03:02:10.0000] <annevk>
https://github.com/whatwg/dom/commit/f9f54bd6b6f1c4084eefa9ca057dc90227f068ee AttrExodus is over five years old now

[03:02:42.0000] <annevk>
I don't really know what an appropriate amount of time is for an experiment, but I'm running out of patience

[03:04:19.0000] <nox>
annevk: Do UAs actually say they don't want to implement that, or are they just staying mute and frustrating people?

[03:05:06.0000] <annevk>
Mozilla has said they wanted to do this, but never did

[03:05:36.0000] <annevk>
Chrome has also said they wanted to do this, but never did, and the only person that still seems to care somewhat there is not optimistic

[03:05:49.0000] <annevk>
Though I suppose we could wait for philipj to find out about cloneNode() and attr

[03:06:07.0000] <annevk>
I'm in no rush

[03:06:39.0000] <philipj>
annevk: yeah, that use counter is only weeks away I think

[03:06:40.0000] <annevk>
We could easily extend five years of fiction with one more, but it is about time I think to set a deadline

[03:06:57.0000] <philipj>
Domenic said he wanted to tinker with this I think

[03:07:27.0000] <philipj>
annevk: killing attr child nodes was still pretty great though

[03:07:41.0000] <philipj>
easily the craziest part of Attr as it was, I think

[03:07:43.0000] <nox>
What are "attr child nodes"?

[03:08:13.0000] <philipj>
nox: insanity: https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/4Hg0l42QHH0/H59LyoiJlI4J

[03:08:49.0000] <nox>
I don't see how that is crazier than attr.nextSibling.

[03:13:55.0000] <annevk>
nox: attr containing children is definitely weirder

[03:14:31.0000] <nox>
annevk: I find the fact that it can actually have a child marginally worse than making it seems it can have children, which is what inheriting from Node means.

[03:14:42.0000] <nox>
But only by a small margin.

[03:15:09.0000] <Ms2ger`>
Text can't have children :)

[03:15:31.0000] <nox>
Ms2ger`: But you can text.firstChild, which is sad.

[03:16:00.0000] <annevk>
Yeah, Attr would become similar to Text I suppose in several ways

[03:16:47.0000] <annevk>
We could even make it a CharacterData node :-P

[03:49:43.0000] <Ms2ger`>
Where does shepherd get its definitions for HTML?

[03:53:11.0000] <nox>
Ms2ger`: Go implement Attr exodus in Gecko so we don't have to change that in Servo. :P

[04:17:15.0000] <Ms2ger`>
annevk, thoughts? https://github.com/whatwg/dom/compare/master...Ms2ger:table

[04:25:44.0000] <annevk>
Ms2ger`: looks quite nice

[04:26:09.0000] <annevk>
Ms2ger`: at some point we should come up with some kind of internal slot thing

[04:38:10.0000] <annevk>
/me wonders if Domenic is around already

[05:26:57.0000] <annevk>
/me couldn't resist and is reworking structured clone into an ECMAScripty thing

[07:30:03.0000] <mven>
been trying to wrap my brain around 'orphan' and 'widow' in the css spec. Can someone explain to me in laymen's terms what these properties actually do?

[07:30:13.0000] <mven>
*orphans/widows

[07:49:43.0000] <Ms2ger`>
mven, avoiding having paragraphs split across pages in such a way that you end up with one line on one of the pages

[07:54:39.0000] <mven>
@Ms2ger` So similar to word-wrap?

[09:06:52.0000] <annevk>
/me wonders what https://github.com/whatwg/xhr/issues/53 is about

[09:07:58.0000] <annevk>
Domenic: I left my question in https://github.com/whatwg/html/issues/697

[09:08:09.0000] <Domenic>
annevk: FIFOing my email now :)

[09:08:34.0000] <annevk>
hehe

[09:09:07.0000] <annevk>
Let me know if uploading a copy of the HTML I have written so far for the StructuredClone abstract operation would help

[09:09:26.0000] <annevk>
It's going to be even prettier than https://github.com/dslomov/ecmascript-structured-clone

[09:09:56.0000] <miketaylr>
annevk: that seems like some NSFW spam (xhr#53)

[09:10:52.0000] <annevk>
Okay, emailed GitHub

[09:10:59.0000] <annevk>
Well, reported to *

[09:11:13.0000] <miketaylr>
i bet one day we'll get spam issues x-linked to popular bug threads

[09:12:01.0000] <miketaylr>
"BUY CIALIS CHEAP cf. nodejs/node#4660"

[09:54:01.0000] <annevk>
GitHub acted, yay

[11:21:38.0000] <Krinkle>
/me wonders why https://annevankesteren.nl/2016/01/film-at-11 has url 'Film at 11'

[11:22:04.0000] <Krinkle>
pun on British "News at 11"

[11:22:05.0000] <Krinkle>
?

[11:32:55.0000] <roc>
"film at 11" is a standard phrase

[11:36:42.0000] <roc>
it's supposed to mean "new exciting news coming up" but it is used sarcastically so it means the opposite

[11:46:55.0000] <Darxus>
I have a web page that's one big imagemap.  I have some text in it that's not links, which I'd like to make available as an alt attribute of an area element without an href element.  But the spec says that an area element without an href can't have an alt.  Why not?

[11:49:29.0000] <Darxus>
The page is http://www.chaosreigns.com/

[12:11:27.0000] <annevk>
Krinkle: news at 11 is incorrect, iirc

[12:12:12.0000] <Krinkle>
annevk: interesting.

[12:12:36.0000] <Krinkle>
annevk: So you're sarcastically using the inverse variant of an existing sarcasm.

[12:13:18.0000] <Krinkle>
I didn't know about film at 11, nice one.

[12:13:52.0000] <annevk>
Well, film at 11 is correct, but it's indeed sarcastic

[13:30:44.0000] <gsnedders>
is there any sensible way to run an inline script *after* deferred external scripts?

[14:26:52.0000] <Adis>
hellooo

[14:27:10.0000] <Adis>
someone to talk


2016-02-23
[23:36:33.0000] <annevk>
Oh yay, Microsoft fixed a pathname issue I filed a year and a bit ago: https://connect.microsoft.com/IE/feedback/details/1002846/pathname-incorrect-for-out-of-document-elements

[02:44:36.0000] <nox>
MathML ded?

[02:44:46.0000] <nox>
annevk: What's blocking my Unenumerable PR?

[02:45:55.0000] <annevk>
nox: I don't know, ask those responsible?

[02:46:06.0000] <nox>
annevk: Oh right, sorry.

[02:54:19.0000] <nox>
annevk: Where is the IDL for classList?

[02:54:31.0000] <annevk>
DOM

[02:55:03.0000] <nox>
Oh.

[02:55:59.0000] <annevk>
class="" is a superglobal attribute

[02:56:16.0000] <annevk>
like id="", and it seems soonish, slot=""

[02:56:29.0000] <nox>
Ok.

[02:56:56.0000] <nox>
annevk: slot is for Web Components, right?

[02:57:06.0000] <annevk>
Shadow DOM

[04:24:10.0000] <glazou>
zcorpan: ping

[04:24:16.0000] <zcorpan>
glazou: pong

[04:24:42.0000] <glazou>
zcorpan: I have a PR to submit on dom but I can't, do you need to allow me there?

[04:25:23.0000] <zcorpan>
glazou: anyone should be able to do a PR. have you created a fork?

[04:25:36.0000] <glazou>
zcorpan: ah ok fork-based ; nm then

[04:25:45.0000] <zcorpan>
ok :-)

[05:03:11.0000] <glazou>
/me waves at darobin 

[05:37:53.0000] <zcorpan>
MikeSmith: <http://www.w3.org/mid/56C89957.90709⊙gd>

[05:46:37.0000] <JakeA>
Domenic: how would Promise.resolve(p) work with cancellable promises? Would it be: return new Promise((resolve, reject, cancel) => p.then(resolve, reject, cancel))?

[05:46:54.0000] <JakeA>
In which case it would break if the 3rd param was used for progress

[05:47:18.0000] <glazou>
zcorpan: https://github.com/whatwg/dom/pull/173

[05:52:47.0000] <zcorpan>
glazou: i'll let annevk review. i *think* it's intentional to not invoke those algorithms there, but it could be clearer

[05:53:25.0000] <glazou>
zcorpan: my problem is that without links, I don't know if the intent is to call the algos or perform directly the action

[05:54:06.0000] <zcorpan>
right

[05:54:27.0000] <glazou>
I'll add that comment to the PR

[05:54:28.0000] <annevk>
glazou: any suggestions? The intention is to directly perform the action

[05:54:36.0000] <glazou>
annevk: oh!

[05:54:45.0000] <glazou>
annevk: let me think a second

[05:55:36.0000] <glazou>
annevk: use a prose that is different from the algo's

[05:55:43.0000] <glazou>
here the problem is that it's exactly the same

[05:55:56.0000] <glazou>
"insert a node in a parent before a child"

[05:56:19.0000] <glazou>
maybe say "insert node in the list of children of parent at a position right before child's"

[05:56:20.0000] <glazou>
?

[05:56:24.0000] <annevk>
Because if that was the insert algo, we'd have an infinite loop

[05:56:29.0000] <glazou>
yep

[05:57:04.0000] <glazou>
ok, the PR is invalid then, closing ; but a clarification is probably still needed

[05:57:16.0000] <zcorpan>
http://www.thesaurus.com/browse/insert

[05:57:20.0000] <annevk>
Maybe the easiest would be to just add a note that this is the actual lowest possible insert operation

[05:57:39.0000] <annevk>
iirc there's only one instance of that operation in the entire spec

[05:57:42.0000] <annevk>
same for remove

[05:58:13.0000] <glazou>
right, the a spec has to be self-standing, and that "insert" is meaningless because undefined

[05:58:25.0000] <glazou>
s/the a/but a

[05:58:40.0000] <glazou>
and it's also too similar to the algo's prose

[05:59:07.0000] <annevk>
perhaps the answer here is to give https://dom.spec.whatwg.org/#trees a primitive "insert" and "remove" and use that

[05:59:19.0000] <glazou>
yes, I was coming to that conclusion too

[05:59:24.0000] <annevk>
I like it

[05:59:31.0000] <glazou>
but that requires describing  precisely what it does

[05:59:40.0000] <annevk>
yeah

[06:00:04.0000] <annevk>
happy to take PRs or a new issue, currently reworking structured clone so won't get to it soon

[06:00:15.0000] <glazou>
will do

[06:00:46.0000] <zcorpan>
/me suggests shoehorn/pull out as new terms

[06:01:25.0000] <glazou>
bwarf

[06:01:48.0000] <glazou>
you need a 1st of april version with funny replacements for all important terms

[06:02:19.0000] <glazou>
/me suggests borisjohnsonize instead of replace

[06:06:40.0000] <glazou>
annevk: issue filed

[06:43:06.0000] <MikeSmith>
zcorpan: yeah I saw that message about rel=schema.dcterms but it seems it could be solved simply by somebody just taking time to add it to http://microformats.org/wiki/existing-rel-values

[08:48:30.0000] <Ms2ger>
We really should change references to the document's address to just call it the URL instead

[09:18:49.0000] <annevk>
All things will be rewritten, step-by-step

[10:48:16.0000] <TabAtkins>
Ms2ger: Shepherd spiders the multipage html regularly, and infers a bunch of metadata about definitions as well as it can. Why do you ask?

[13:09:31.0000] <smaug____>
igrigorik: ping

[13:09:51.0000] <smaug____>
igrigorik: why resource hints are triggered also when using link elements in data documents?

[13:10:06.0000] <smaug____>
(documents where document.defaultView is null)

[13:10:31.0000] <smaug____>
I think I asked this before, but if you answered, I lost the answer

[13:11:11.0000] <smaug____>
oh, even better, I've filed a bug about this months ago :)

[13:11:18.0000] <smaug____>
https://github.com/w3c/resource-hints/issues/49

[13:44:07.0000] <smaug____>
igrigorik: another question, is it expected that a single <link> element may define several resource hints

[13:44:14.0000] <smaug____>
my using a list of tokens in rel attribute


2016-02-24
[16:43:14.0000] <MikeSmith>
wanderview_pto: http://stackoverflow.com/questions/35558711/gecko-firefox-44-0-2-blocks-google-fonts and wondering if the speculation in the comment there is accurate

[17:23:44.0000] <TabAtkins>
One of my coworkers pinged me to get approval for his WHATWG wiki account, (because I'm a permanent autoconfirmed member, on the list as someone to contact) but I have no idea what I'm supposed to do, and there's nothing obvious in the UI to help me.

[18:10:54.0000] <Philip`>
Are there any SVG fans who happen to know how to work out why https://www.khronos.org/registry/vulkan/specs/1.0/xhtml/images/tstripadj.svg looks correct in Chrome but completely blank in Firefox?

[18:39:21.0000] <roc>
if you look at the first <ellipse> element, its center x is at about -44, then it's translated by 115, giving you 71, which is outside the viewBox which is from -108 to -13 horizontally

[18:39:46.0000] <roc>
if you delete the viewBox attribute the contents become visible (but very small)

[18:40:54.0000] <MikeSmith>
it’s very small in Chrome as well

[18:41:45.0000] <roc>
Chrome console says "Error: <svg> attribute viewBox: A negative value is not valid. ("-108.050 3.950 -13.183 76.817")"

[18:41:47.0000] <MikeSmith>
and given those details (it’s outside the viewbox), it seems like it rightly shouldn’t be visible at all in Chrome either

[18:41:49.0000] <roc>
so Chrome is ignoring the viewBox

[18:41:52.0000] <MikeSmith>
ah

[18:42:08.0000] <MikeSmith>
wonder if that’s per-spec

[18:42:12.0000] <MikeSmith>
I guess not

[18:42:28.0000] <roc>
spec says "Negative values for width or height are not permitted"

[18:42:56.0000] <roc>
Gecko SVGSVGElement::GetViewBoxTransform says

[18:43:13.0000] <roc>
  if (viewBox.width <= 0.0f || viewBox.height <= 0.0f) {

[18:43:15.0000] <roc>
    return gfx::Matrix(0.0, 0.0, 0.0, 0.0, 0.0, 0.0); // singular

[18:43:18.0000] <roc>
so we draw nothing

[18:43:30.0000] <MikeSmith>
that seems like the right behavior

[18:44:07.0000] <MikeSmith>
I guess the spec doesn’t unambiguously state what UAs must do when they encounter negative values

[18:44:26.0000] <roc>
yeah

[18:45:21.0000] <roc>
well

[18:45:22.0000] <roc>
according to https://www.w3.org/TR/SVG/implnote.html#ErrorProcessing

[18:45:49.0000] <roc>
"The document shall be rendered up to, but not including, the first element which has an error. "

[18:45:56.0000] <roc>
technically I think this means render nothing in this case

[18:46:08.0000] <heycam>
that's old spec behaviour that nobody does, though

[18:46:12.0000] <roc>
right

[18:46:23.0000] <heycam>
I think we should treat the attribute as an error, and then effectively ignore the attribute

[18:46:47.0000] <roc>
chrome draws nothing for 0, 0

[18:47:38.0000] <roc>
heycam: will you write the patch or shall I? :-)

[18:47:54.0000] <heycam>
roc: I am a bit busy but happy to review it :)

[18:50:45.0000] <heycam>
filed https://github.com/heycam/webidl/issues/92 to make it clearer that error processing for attributes should take its default value

[18:51:31.0000] <heycam>
now that is the wrong spec isn't it

[18:52:11.0000] <heycam>
https://github.com/w3c/svgwg/issues/52

[19:02:07.0000] <MikeSmith>
in other news, Microsoft seems to have quietly moved their status for WebRTC 1.0 support in Edge from “not planned” to “under consideration”

[19:02:13.0000] <MikeSmith>
https://github.com/MicrosoftEdge/Status/commit/944ac47dbe9ea54b9478fdfa6b700fdd2355236b

[19:31:19.0000] <MikeSmith>
roc: rr is seeming more and more truly awesome

[19:31:30.0000] <MikeSmith>
re: http://robert.ocallahan.org/2016/02/these-bugs-are-impossible-to-fix.html

[19:32:16.0000] <roc>
yes, I'm happy about it

[19:35:36.0000] <MikeSmith>
roc: did they use chaos mode to reproduce that JS bug? or just the default rr behavior?

[19:36:13.0000] <roc>
they didn't use chaos mode

[19:38:21.0000] <roc>
relatedly, I just got this blog comment:

[19:38:26.0000] <roc>
Me: What is rr? I haven’t heard of it before. (Note: I came to this blog from a link to Rewrite Everything In Rust just a few minutes ago)

[19:38:28.0000] <roc>
*googles*

[19:38:29.0000] <roc>
Me: That EXISTS? Why have I not heard about this before? Why have I not been using this for years? This changes everything.

[19:41:02.0000] <MikeSmith>
heh

[19:41:25.0000] <MikeSmith>
I expect you’re going to see a lot more comments like that

[19:42:01.0000] <MikeSmith>
maybe you should hire a publicist to get the word out more 😆

[20:43:46.0000] <annevk>
TabAtkins: homepage of wiki has account creation link

[00:06:50.0000] <MikeSmith>
the ongoing keygen comedy continues to provide strong entertainment value https://lists.w3.org/Archives/Public/public-webappsec/2016Feb/thread.html#msg76

[00:35:28.0000] <annevk>
It's annoying that the refrain always is "please integrate with my legacy solution"

[00:35:53.0000] <annevk>
Nothing really groundbreaking or considerate of modern UX requirements

[01:05:45.0000] <Philip`>
roc: Thanks!

[01:06:37.0000] <roc>
Philip`: I've submitted a fix for Gecko, but note that the content is definitely invalid. I'm not sure what they're trying to do with that negative width...

[01:10:05.0000] <Philip`>
roc: Something weird in Inkscape, I guess

[01:11:44.0000] <cvrebert>
Is there a reason HTML uses the not-specifically-defined phrase "cancel the event" rather than "set the event's [[canceled flag]]" ?

[01:12:46.0000] <annevk>
cvrebert: no good reason, but note that events are also rather badly defined in that respect

[01:12:58.0000] <annevk>
cvrebert: e.g., referring directly to the type attribute rather than an internal slot, and such

[01:13:36.0000] <annevk>
cvrebert: I'm waiting for https://www.w3.org/Bugs/Public/show_bug.cgi?id=27354 to be fixed before revamping all that

[01:14:47.0000] <cvrebert>
annevk: I was using [[]] to indicate hyperlinking as opposed to ES slot weirdness

[01:16:48.0000] <annevk>
cvrebert: sure, but we need the weirdness before any of this will get solved properly

[01:23:13.0000] <cvrebert>
annevk: Okay.

[01:25:46.0000] <annevk>
It might be weird, but ECMAScript is completely correct that an object consists of internal data and a set of properties that operate on that internal data

[01:26:28.0000] <annevk>
That we haven't formalized that in "DOM" is rather strange

[01:27:24.0000] <cvrebert>
annevk: Right

[01:29:47.0000] <cvrebert>
annevk: Why does DOM recommend (https://dom.spec.whatwg.org/#firing-events ) the phrasing "with its cancelable attribute initialized to true" but HTML uses "that is cancelable" ?

[01:30:33.0000] <annevk>
cvrebert: Hixie may have written the text in HTML before that phrasing was suggested or may have simply not cared

[01:31:31.0000] <annevk>
cvrebert: I suspect that setup to change too as a result of getting more formalism from IDL, not sure about an ETA on that though

[01:31:45.0000] <annevk>
Nobody is in a hurry to improve IDL

[01:31:50.0000] <annevk>
(unfortunately)

[01:32:27.0000] <cvrebert>
:-\

[01:32:28.0000] <annevk>
(except maybe nox, but nox also needs to fix all the Servo bugs)

[01:33:57.0000] <cvrebert>
godspeed, nox

[03:00:04.0000] <nox>
annevk: Ah ah.

[03:00:38.0000] <nox>
annevk: You people work on higher level specs, better if I do something else right? ;)

[03:01:39.0000] <annevk>
nox: Not sure if sarcastic, since there's a ton of stuff blocking on IDL

[03:02:22.0000] <nox>
Sarcastic, I only do stuff that helps Servo.

[03:03:34.0000] <nox>
Oh that reminds me, LegacyUnenumerableNamedProperties landed in Servo.

[03:09:26.0000] <jgraham>
Most things that help the web help servo

[04:22:46.0000] <annevk>
smaug____: https://github.com/whatwg/dom/issues/148

[04:29:36.0000] <annevk>
ritsyy: https://www.w3.org/Bugs/Public/show_bug.cgi?id=28039 might be of interest to you

[04:32:16.0000] <ritsyy>
annevk: seeing it

[04:35:28.0000] <ritsyy>
annevk: yeah, okay it would be better to change it to root, will do this

[04:35:43.0000] <annevk>
cool!

[05:30:32.0000] <ritsyy>
annevk: am i getting it correctly https://paste.kde.org/prrkimwq3 ?

[05:33:32.0000] <annevk>
ritsyy: the change has to be done to where root element is used, but reading it over maybe that is harder than I thought

[05:35:17.0000] <annevk>
ritsyy: I added a comment to https://www.w3.org/Bugs/Public/show_bug.cgi?id=28039 hopefully explaining the situation a bit clearer

[05:47:01.0000] <zcorpan>
annevk: is it not better to just say "We are committed to providing a friendly, safe and welcoming environment for all. Please read and respect [...]" ? if we want to add something to the list, seems somewhat annoying to add it to all READMEs, too

[05:49:49.0000] <zcorpan>
annevk: i'm not sure the "vague critisism" thing belongs in the CoC. (sorry i didn't comment on it earlier, i thought it was removed but i guess i glossed over it)

[05:55:01.0000] <annevk>
zcorpan: seems fine

[05:56:06.0000] <annevk>
zcorpan: I don't know, the kind of "you're doing it all wrong" feedback is rather unhelpful

[05:57:13.0000] <annevk>
zcorpan: will update the PR with that shorter text in a bit

[05:57:57.0000] <zcorpan>
annevk: sure, but it's not clear to me it covers just that. for instance bz sometimes have vague critisism about wrongness without having any idea about what the right fix is, and that is still super-useful and we wouldn't want to discourage it

[05:58:42.0000] <zcorpan>
so i suggest dropping that bullet point

[05:58:55.0000] <annevk>
That's fair, remove it then I guess

[05:59:12.0000] <zcorpan>
people who come along and say "you're all wrong!!" typically don't stay around for long anyway :-)

[05:59:30.0000] <zcorpan>
ok i can remove it myself

[06:00:14.0000] <annevk>
PR updated

[06:01:12.0000] <zcorpan>
wiki too

[06:05:53.0000] <zcorpan>
nice work :-)

[06:06:07.0000] <annevk>
yeah, glad it's all up now

[06:12:57.0000] <annevk>
Perhaps in README.md it should say "The WHATWG community is" rather than "We are"

[06:13:07.0000] <annevk>
Hmm, dunno

[06:17:37.0000] <zcorpan>
let's stop fiddling with it now :-P

[06:24:14.0000] <annevk>
Yeah 😃

[13:04:30.0000] <smaug____>
does github send bugmail for each comment in a review?

[13:06:20.0000] <smaug____>
/me tweaks the settings, hopefully github is less spammy now

[13:48:13.0000] <TabAtkins>
annevk: Thanks for the heads-up about account creation.  I was looking in all the surrounding stuff, not in the text of the page, as I didn't expect to find anything useful there. ^_^

[14:48:16.0000] <boogyman>
Is there a white-list of CSS properties that can/will be applied for pseudo-elements? Can someone help me understand why my "text-decoration" rule isn't being honored in chrome canary/stable nor firefox nightly/stable on W8.1 / Macbook Pro (yosemite). http://jsbin.com/zubacoheyu/edit?html,css,output

[14:49:20.0000] <boogyman>
s/can/will/

[15:32:06.0000] <astearns>
boogyman: https://developer.mozilla.org/en-US/docs/Web/CSS/Privacy_and_the_:visited_selector

[15:34:14.0000] <TabAtkins>
boogyman: Every property applies to ::before/after - they're exactly identical to real elements.  For other pseudos, https://drafts.csswg.org/css-pseudo/ should define the list.  But your problem is :visited, as astearns pointed to.

[15:39:58.0000] <boogyman>
I don't understand the visitor selector. can you give more context? I've read that article. I added another line with the pseudo rule defined first / second... http://jsbin.com/vereyonubo/1/edit?html,css,output

[15:41:13.0000] <boogyman>
The example I gave has anchors, list items, paragraphs, and generic div's.

[15:58:34.0000] <TabAtkins>
Oh, now I see your issue.  text-decoration has a.. unique... method of inheritance.  Basically, text decorations are inherited separately from the text-decoration property, and are only affected by descendant's settings if they override one of the decorations.

[15:59:06.0000] <TabAtkins>
"text-decoration: none" doesn't override anything, it just doesn't establish any new decorations, so it has no effect on descendants once you've set up a decoration on an ancestor.


2016-02-25
[16:00:35.0000] <TabAtkins>
There've been proposals to add a value that explicitly turns off a decoration inherited from an ancestor, and I know this was in a spec at some point, but I can't find it now.

[16:02:12.0000] <boogyman>
So,would it be possible to define pseudo-elements as shadow-dom, then someone can apply the full gambit.

[16:02:22.0000] <TabAtkins>
?

[16:04:06.0000] <boogyman>
" text decorations are inherited separately from the text-decoration property"

[16:05:41.0000] <TabAtkins>
Yeah, what does shadow dom have to do with this?

[16:06:13.0000] <boogyman>
If the pseudo-element created via  ::after{ content:"something"; } becomes shadow-dom, doesn't that mean text decorations could be applied as I expect

[16:06:25.0000] <joeedh>
Hi.  Is it possible for canvas2d's .drawImage method to change the clipping region?

[16:06:51.0000] <TabAtkins>
Shadow dom inherits text decorations just like normal dom.  As far as CSS is concerned it's all one big mushed up tree.

[16:07:38.0000] <TabAtkins>
joeedh: What do you mean?

[16:08:24.0000] <joeedh>
Let's say I've rendered a bunch of vector paths  into seperate canvas instances, and I want to composite them together.

[16:09:00.0000] <joeedh>
At this point the paths are already rendered, but I still want to be able to use them for clipping.

[16:10:03.0000] <boogyman>
So, is there an adhoc solution?

[16:10:53.0000] <joeedh>
For example, I might want to draw a thick blurred stroke over a filled path, but not have the stroke draw outside of that path.

[16:11:00.0000] <TabAtkins>
drawImage doesn't do anything with clipping (besides being able to dictate the source and destination rectangles). It's *affected* by clipping, but clipping itself can only be affected by using the vector stuff directly.

[16:11:17.0000] <TabAtkins>
boogyman: Dont' set text-decoration on ancestors.

[16:12:04.0000] <joeedh>
TabAtkins: eek.

[16:13:37.0000] <joeedh>
TabAtkins: the multiple-canvas layered approach can give you a huge speedup.  but I need some way to affect clipping.

[16:13:46.0000] <TabAtkins>
I'm not sure of implementation status, but you can always do your vector stuff into a Path2D object, and then use that for both stroking/filling in one canvas, and clipping in another.

[16:14:06.0000] <Philip`>
joeedh: You might be able to put the filled-path image on a transparent canvas, then composite the stroked image with source-atop or something like that (so that it only draws to pixel that are opaque in the filled image)

[16:14:09.0000] <joeedh>
actually, I came up with that idea after writing a prototype GPU vector graphics rasterizer, since that's how it's design was evoloving.

[16:14:33.0000] <joeedh>
/me wanted to make the canvas2d version of his idea work, since otherwise he might have to drop mobile support for his app.

[16:15:26.0000] <TabAtkins>
Yeah, sounds like compositing should do the trick for you actually.

[16:15:34.0000] <joeedh>
Philip: that sounds like it should work.

[16:20:19.0000] <joeedh>
ooh it worked

[16:30:24.0000] <gsnedders>
Am I the only one who gets confused when Philip` reappears?

[16:30:39.0000] <Philip`>
No, I do too

[16:31:00.0000] <gsnedders>
What are you actually doing now? I presume working somewhere not-web-related?

[16:31:45.0000] <MikeSmith>
I’m very glad to see Philip` around whenever he shows up

[16:32:08.0000] <MikeSmith>
but yeah Philip` seems like you been showing up a bit more lately

[16:32:49.0000] <Philip`>
gsnedders: Yes (or at least in a non-web-related part of a quite-web-related company)

[16:34:03.0000] <MikeSmith>
company.. I had in mind that you were still operating in academia

[16:34:22.0000] <MikeSmith>
but I guess you probably got your PhD ages ago and moved on

[16:35:01.0000] <MikeSmith>
I seem to remember you were doing work in astrophysics or simiarl

[16:35:58.0000] <Philip`>
Yeah, I think I spent enough time in university and it seemed best to move on :-)

[16:36:30.0000] <Philip`>
Maybe you're thinking of jgraham? (I was just doing CS)

[16:39:49.0000] <MikeSmith>
ah yeah I guess I had conflated that part with jgraham

[17:27:17.0000] <gsnedders>
Philip`: I'm curious as to what :P

[17:27:39.0000] <gsnedders>
MikeSmith: but yeah, jgraham did astrophysics

[17:27:58.0000] <gsnedders>
though that must've been… what, 2008 when he finished?

[17:28:25.0000] <gsnedders>
/me wonders how long ago Philip` graduated now…

[18:30:30.0000] <joeedh>
argh college.

[18:32:49.0000] <joeedh>
/me accidentally educated himself to graduate level.  he does research and, well, the thought of doing a phd program isn't very inspiring

[18:34:07.0000] <joeedh>
especially CS phd programs, if you know what I mean

[19:06:33.0000] <gsnedders>
joeedh: tbf, if you're calling it college, I assume you're American where PhD programmes are far longer

[19:06:41.0000] <joeedh>
yeah

[19:15:53.0000] <joeedh>
we have terrible universities.   I don't like studying under professors who are less educated than I am.

[19:27:01.0000] <joeedh>
btw, does anyone else hate the antialiasing filter most SVG renderers use?

[19:31:32.0000] <joeedh>
/me once had to import a bunch of icons into Blender, just so he could render them with it's better AA reconstruction filters.

[19:31:44.0000] <pdr>
joeedh, what antialiasing filter?

[19:33:55.0000] <joeedh>
if you antialias by rendering your work bigger and downsizing (supersampling) it's the filter used to downsize.

[19:36:22.0000] <joeedh>
https://en.wikipedia.org/wiki/Anti-aliasing_filter .  it's the trade off between blurryness, on the one hand, and jaggies.

[19:37:40.0000] <joeedh>
. . .if you have coworkers who use Illustrator, but provide you with .svg's, it's very embarassing when you can't render them cause the AA filter is too blurring, in pretty much all SVG apps.

[19:38:34.0000] <joeedh>
. . .especially when rendering said .svg is part of the build process, and you have to then render in their machine's Illustrator (or blender), and embedd the result as an image in the svg, but not too bit or not too small. . .

[19:39:45.0000] <joeedh>
there are some good examples of blender's filters here: https://www.blender.org/manual/render/blender_render/antialiasing.html

[19:44:11.0000] <pdr>
joeedh, interesting. I wouldn't have expected any AA filtering beyond what's used to draw the paths themselves.

[19:45:47.0000] <joeedh>
if the paths are supersampled, they have to be filtered by definition.

[19:46:13.0000] <joeedh>
if the paths use some other method, you should still be able to effect a filter (make it look more sharper or more blurrier).

[00:20:42.0000] <MikeSmith>
zcorpan: thanks for your patience in https://github.com/whatwg/html/issues/644#issuecomment-188647346 (the <time> text issue)

[00:21:23.0000] <MikeSmith>
I seriously did not know that style and script and title had that behavior for the text IDL attribute

[00:21:55.0000] <MikeSmith>
or possibly I knew once and forgot

[01:06:56.0000] <annevk>
nox: is there any API where the named properties are enumerable?

[01:28:07.0000] <annevk>
There are plenty in HTML apparently

[01:28:21.0000] <annevk>
Should have looked there before asking

[02:13:11.0000] <annevk>
Since MIME Sniffing is no longer actively maintained, I plan on landing the proposed PRs in https://github.com/whatwg/mimesniff/pulls when the basic issues with them have been resolved.

[02:13:40.0000] <annevk>
So now would be a good time to take a look there and object.

[02:13:58.0000] <annevk>
After that I'll try to make some additional edits so it looks more or less like the other WHATWG projects.

[02:19:25.0000] <ritsyy>
annevk: there is this bug too https://www.w3.org/Bugs/Public/show_bug.cgi?id=28094 , will file a PR for this

[02:43:37.0000] <nox>
annevk: Why wouldn't it work for Window?

[02:44:38.0000] <annevk>
nox: because a "named getter" on Window actually acts on its NamedProperties object (or whatever it's called)

[02:45:10.0000] <annevk>
nox: so there's a level of indirection between the placement of the extended attribute and where it needs to act

[02:46:15.0000] <nox>
annevk: That seems like it doesn't concern whether they are enumerable or not.

[02:50:33.0000] <annevk>
nox: I guess that would make sense, since it's such a special case

[02:51:01.0000] <nox>
annevk: I mean the special case is just about where the named properties actually are, right?

[02:51:11.0000] <nox>
Not whether they should be enumerable, no?

[03:05:35.0000] <JakeA>
annevk: is request.origin described anywhere, or is it just hand-waving?

[03:09:56.0000] <annevk>
JakeA: not as an API, thus far

[03:10:18.0000] <annevk>
JakeA: https://fetch.spec.whatwg.org/#concept-request-origin exists though

[03:11:09.0000] <JakeA>
annevk: gotcha, cheers

[03:30:26.0000] <annevk>
nox: yeah, but maybe it should, or maybe IDL shouldn't define this at all since it's only for the Window object, it's rather weird

[03:30:42.0000] <annevk>
nox: oh well, probably something for the eventual IDL fixup

[03:33:51.0000] <nox>
annevk: It's for all Global interfaces, no?

[03:34:50.0000] <annevk>
nox: sure, but there's only one where it matters

[03:35:32.0000] <annevk>
nox: this is similar to Unforgeable for interfaces, in practice only Location is using that (we're changing that setup now so it can be removed for interfaces from IDL)

[03:43:40.0000] <nox>
annevk: Ah.

[03:43:50.0000] <nox>
annevk: Why, btw? And what's the replacement?

[03:50:13.0000] <annevk>
nox: putting Unforgeable directly on all members, plus some prose that is specific to Location

[03:50:58.0000] <annevk>
(also, no other object should ever use this setup)

[03:51:35.0000] <nox>
annevk: Y, I hate prose. :(

[03:51:40.0000] <nox>
annevk: Prose is bad for codegen. :(

[03:51:55.0000] <annevk>
You cannot codegen Location anyway

[03:52:00.0000] <nox>
How so?

[03:52:10.0000] <annevk>
Because it's super exotic

[03:52:30.0000] <nox>
I'm wondering what we miss in Servo then, because there is nothing about it that we don't codegen.

[03:52:54.0000] <annevk>
probably the web's security model?

[03:52:55.0000] <nox>
What's so exotic about it that it can't be codegen?

[03:52:58.0000] <Ms2ger>
Yep

[03:53:12.0000] <Ms2ger>
We just return null for cross-origin contentWindow

[03:53:14.0000] <nox>
How is that exoticness specific to Location?

[03:53:19.0000] <Ms2ger>
Very simple, very broken

[03:53:28.0000] <annevk>
Ms2ger: heh

[03:53:29.0000] <nox>
Ms2ger: That's not Location though, so I'm confused.

[03:53:34.0000] <Ms2ger>
You're supposed to be able to access contentWindow.location

[03:53:49.0000] <nox>
But not the rest?

[03:54:11.0000] <Ms2ger>
No other IDL objects, at least

[03:54:22.0000] <Ms2ger>
See annevk's long-winded spec :)

[03:54:56.0000] <annevk>
nox: https://github.com/whatwg/html/pull/638 has details

[03:54:59.0000] <nox>
Ms2ger: But in codegen, doesn't that concern contentWindow more than location? That's all the magic of WindowProxy no?

[03:55:07.0000] <annevk>
Ms2ger: if I could make it shorter I would

[03:55:23.0000] <Ms2ger>
annevk, not meant as a value judgement

[03:55:26.0000] <annevk>
Ms2ger: in fact, I patched ECMAScript so I could [[HasProperty]] overrides

[03:55:37.0000] <annevk>
remove /\

[03:55:38.0000] <annevk>
fair

[03:55:43.0000] <Ms2ger>
Shit's complex, yo

[03:56:15.0000] <annevk>
yeah, as bz said this needs some tests

[03:56:28.0000] <Ms2ger>
Desperately

[03:56:42.0000] <Ms2ger>
bholley wrote some long ago, right?

[03:57:11.0000] <annevk>
yeah there are a couple of tests

[03:59:14.0000] <gsnedders>
presto-testo might have some

[03:59:32.0000] <gsnedders>
unfortunately I think the majority of the Presto tests for this were in /core/security which didn't get released

[03:59:49.0000] <gsnedders>
and in random bug folders, which equally didn't get released

[04:00:27.0000] <gsnedders>
because there were a decent number

[04:00:52.0000] <gsnedders>
could always prod someone and try and get these ones released at least, I guess

[04:00:54.0000] <annevk>
I wonder if Presto had the correct security model

[04:01:26.0000] <annevk>
I guess I could download and find out, but my curiosity is not that strong

[04:01:56.0000] <Ms2ger>
gsnedders, do you know if the core/standards/cookies/ were submitted?

[04:02:14.0000] <gsnedders>
Ms2ger: I think not. Do they not rely on .htaccess?

[04:02:29.0000] <Ms2ger>
Dunno, saw some php

[04:02:38.0000] <gsnedders>
oh, maybe just that then

[04:02:54.0000] <gsnedders>
IIRC they're also not very useful

[04:04:29.0000] <gsnedders>
annevk: IIRC there was some property on the Location class that allowed access, which was then checked in the impls of [[HasProperty]], [[GetProperty]], etc.

[04:04:54.0000] <gsnedders>
/me hasn't read the new spec though

[04:05:33.0000] <annevk>
gsnedders: were the properties on Location own properties?

[04:05:54.0000] <Ms2ger>
/me finds a stack of location.hash tests written with th.js

[04:06:04.0000] <annevk>
But that sounds somewhat reasonable

[04:06:41.0000] <gsnedders>
annevk: yeah, they will have been

[04:06:45.0000] <annevk>
But devil is in the details here of course, new standard also does not match browsers exactly, but should violate less ECMAScript invariants

[04:07:27.0000] <gsnedders>
annevk: Presto never moved to using getters on the prototype after they were introduced (in Futhark, IIRC)

[04:08:06.0000] <gsnedders>
But really I think there was decent test coverage, even if the expectations might need changed in a few places

[04:16:16.0000] <Ms2ger>
gsnedders, r? https://github.com/operasoftware/presto-testo/pull/52

[04:16:28.0000] <Ms2ger>
Or frivoal_

[04:21:05.0000] <gsnedders>
LGTM

[04:21:17.0000] <gsnedders>
/me wonders who wrote them

[04:21:33.0000] <gsnedders>
given the subject matter I'd have thought jgraham, but wrong code-style for that

[04:21:59.0000] <Ms2ger>
TIL that dos2unix is 4000 lines of C and still sees active development in 2016

[04:23:40.0000] <frivoal_>
Looks good to me as well. The only missing thing seems to be the delay.php file

[04:52:26.0000] <jgraham>
gsnedders: hallvors wrote half and I wrote half some time later

[05:25:01.0000] <hallvors>
jgraham: wow, you added tests to that test suite later on? I didn't know - thanks :)

[05:26:42.0000] <hallvors>
So are those tests in web-platform-tests now?

[05:27:21.0000] <jgraham>
hallvors: Yep

[05:28:31.0000] <hallvors>
Nice. I remember working on them. Thought it would be a small and simple test suite - then more and more odd corner cases came up :)

[05:29:12.0000] <hallvors>
Also funny that gsnedders can tell us apart by coding style ;)

[05:29:24.0000] <JakeA>
Domenic: The web animations spec uses promises that reject with an AbortError to signal cancellation https://github.com/w3c/web-animations/issues/141 - hoping this can change before it ships in Chrome/Firefox

[05:29:26.0000] <hallvors>
/me is probably less consistent than jgraham

[05:29:51.0000] <jgraham>
Although now I've said that I don't actually recognise any of the tests

[05:30:18.0000] <jgraham>
I *for sure* converted them to testharness.js format. I thought I added more at the same time

[05:30:46.0000] <hallvors>
You're just too good at blending in and adapting your code to existing stuff ;)

[06:21:04.0000] <wanderview_pto>
JakeA: what do you think about adding an "install completed timestamp" to the ServiceWorker object?  could also just be something exposed via devtools

[06:21:42.0000] <JakeA>
wanderview_pto: not against adding it. We already expose it in devtools

[06:22:08.0000] <wanderview_pto>
JakeA: I was about to write a bug for our devtools to add it, then wondered if we should just expose it to content

[06:22:17.0000] <wanderview_pto>
could be useful for devs during development

[06:23:42.0000] <JakeA>
wanderview_pto: would also allow you to stop handling fetches if your SW is "too old", or something. Dunno if that's useful, but it doesn't seem like a bad thing. Maybe a lower-level feature is a way to get the response object for the SW

[06:24:16.0000] <JakeA>
wanderview_pto: we discussed in the past being able to get these things as cache objects, although they mustn't be writable

[06:28:06.0000] <wanderview_pto>
JakeA: oh, you mean to get the sw script cache... does the response have a timestamp as a header or something

[06:28:07.0000] <wanderview_pto>
?

[06:28:27.0000] <JakeA>
There's almost always a date header

[06:28:40.0000] <wanderview_pto>
JakeA: it might be best to have an update time and then the response date header.... so you can compare and see if you got a cached copy or something

[06:28:51.0000] <wanderview_pto>
or maybe that doesn't make sense

[06:29:01.0000] <wanderview_pto>
/me is a c++ developer.

[06:29:37.0000] <annevk>
Domenic: here is an idea

[06:29:50.0000] <annevk>
Domenic: we rename StructuredClone to StructuredCloneWithTransfer

[06:30:30.0000] <annevk>
Domenic: we rename InternalStructuredClone to StructuredClone and make the memory argument optional, defaulting to the algorithm creating something if it was not given

[06:30:59.0000] <annevk>
Domenic: then we don't need StructuredCloneOnly

[06:31:09.0000] <wanderview_pto>
annevk: can a url fragment contain a "/" character?

[06:32:22.0000] <annevk>
Domenic: and we'll rename Transfer to TransferHelper since you really need StructuredCloneWithTransfer if you want to transfer something

[06:32:41.0000] <annevk>
wanderview_pto: yeah I think so

[06:34:26.0000] <wanderview_pto>
annevk: I think our URL parser in gecko gets confused by that...

[06:34:37.0000] <annevk>
Domenic: at some point I'd also like to figure out a better way for the deepClone stuff but...

[06:34:48.0000] <Domenic>
annevk: that sounds pretty good yeah

[06:34:57.0000] <wanderview_pto>
JakeA: I guess I'll write a spec issue

[06:35:15.0000] <annevk>
Domenic: I was pretty pleased with it too after I wrote it all out 😃

[06:39:23.0000] <wanderview_pto>
https://github.com/slightlyoff/ServiceWorker/issues/842

[06:49:12.0000] <wanderview_pto>
annevk: oh... I take it back... our url parser is not confused, I'm just not running the parser

[06:54:43.0000] <JakeA>
wanderview_pto: yeah, I think you're right, it might be good to know the last successful update check too

[07:03:39.0000] <wanderview_pto>
JakeA: I like the idea of being able to feed it back to the server as a diagnostic... although I guess maybe you could do that other ways... with a fetch() in the install event

[07:04:52.0000] <JakeA>
wanderview_pto: we have a lot of places the spec says things like "if there hasn't been an update attempt in 24hrs…" so I don't see why we wouldn't expose that

[07:05:08.0000] <wanderview_pto>
yea

[07:05:25.0000] <wanderview_pto>
JakeA: although what I am suggesting is install time, not last update attempt time

[07:05:29.0000] <gsnedders>
hallvors: I spent enough time fixing flakey tests and reviewing tests I can often guess the author by code style :)

[07:05:44.0000] <gsnedders>
hallvors: some are more distinctive than others, I did wonder if those were you ;)

[07:05:48.0000] <JakeA>
wanderview_pto: <why not both meme>

[07:06:18.0000] <wanderview_pto>
seems reasonable... that could go on the registration of course

[07:19:18.0000] <beverloo>
annevk, out of interest, where do the `noscreen` and `sticky` flags from the Notification API come from?

[07:19:31.0000] <beverloo>
annevk, do you know if anyone is interested in supporting them?

[07:25:45.0000] <annevk>
beverloo: not sure, check the commit log?

[07:25:53.0000] <annevk>
beverloo: prolly Firefox OS...

[07:30:43.0000] <beverloo>
https://github.com/whatwg/notifications/issues/22

[07:32:44.0000] <beverloo>
annevk, I'll file an issue to consider removing them, unless Mozilla has plans to support them (given the Firefox OS updates)

[07:38:38.0000] <wanderview_pto>
annevk: on a scale of bad to terrible, what do you think of just looking for a "#" symbol in a string url to determine if a fragment exists in an http or https url?

[07:39:03.0000] <annevk>
beverloo: I think it's reasonable to remove them

[07:39:12.0000] <wanderview_pto>
trying to find an easy way to assert that a fragment is not there in a place where its hard to use the real parser

[07:39:49.0000] <annevk>
wanderview_pto: do you know you have a proper URL at that point?

[07:39:55.0000] <wanderview_pto>
annevk: yes

[07:40:03.0000] <annevk>
wanderview_pto: probably reasonable then

[07:40:11.0000] <wanderview_pto>
awesome!

[07:40:13.0000] <wanderview_pto>
thanks

[07:40:16.0000] <annevk>
wanderview_pto: though I'd add a comment of sorts

[07:50:35.0000] <ritsyy>
annevk: for this https://www.w3.org/Bugs/Public/show_bug.cgi?id=28094 do you think changing it to something as suggested in comments as "Set computed MIME Type to Computed MIME Type" would be right?  at many places it would be changed then, i think

[07:51:23.0000] <annevk>
ritsyy: yeah, that is generally the way we assign to variables

[07:51:52.0000] <annevk>
ritsyy: if it is the first instance you would use "Let x be y", later on in the algorithm you would have "Set x to z"

[07:52:02.0000] <annevk>
ritsyy: does that make sense?

[07:57:03.0000] <ritsyy>
annevk: the battery went off sorry,it would be changing both of the steps of initializing plus assigning it, sounds good, thanks!

[08:12:55.0000] <gsnedders>
ooh, PyPy 4.1 will support lxml fully. hopefully can move to using PyPy for stuff like BS and wpt lint and such like

[08:19:44.0000] <annevk>
Domenic: so annoying GitHub doesn't allow you to flag feedback as addressed, now all feedback is hidden and I've no idea whether I addressed it

[08:24:14.0000] <Ms2ger>
I'd suggest reviewable.io, but it can't handle large files

[08:24:38.0000] <nox>
Ms2ger: Oh you still have problems?

[08:24:47.0000] <nox>
Oh right, large as in the HTML spec?

[08:24:55.0000] <Ms2ger>
nox, with manifest.json, yeah, so I assume HTML too

[08:25:12.0000] <nox>
Ms2ger: Did you file an issue about that?

[08:25:28.0000] <Ms2ger>
I haven't

[08:25:38.0000] <nox>
You should, maybe they aren't aware of it.

[08:25:48.0000] <Ms2ger>
Well, they error out explicitly

[08:26:37.0000] <nox>
Oh.

[08:32:04.0000] <gsnedders>
It's a known limitation for them.

[08:46:38.0000] <gsnedders>
odinho: plz release the cross-origin DOM tests from t/core/security

[10:16:21.0000] <annevk>
Domenic: cross-origin objects is still mostly ready, though it depends on landing some changes to ECMAScript

[10:16:51.0000] <annevk>
Domenic: StructuredCloneWithTransfer has a couple of outstanding issues, some which need input

[10:17:28.0000] <annevk>
Guess I could try to quickly fix the issues with some of the other PRs I had

[10:50:54.0000] <odinho>
gsnedders: uh, okay.  I can take a look at it later.

[10:52:21.0000] <gsnedders>
odinho: idk, I just need someone still at Opera who might do something :P

[10:53:24.0000] <odinho>
Well, better try to get all stuff you need out, because I might not be there forever, y'know ;)

[10:54:07.0000] <odinho>
I'll probably be moving to England for at least 7 months start of 2017 at least.  Will probably do something else there.  Not sure.

[10:55:35.0000] <gsnedders>
Meh, I regret not fighting more when I was on the inside :(

[10:56:55.0000] <gsnedders>
odinho: related: if you could actually get t/core/security released entirely to a few trusted people, that'd be fantastic. I know there's reasons why it's not all been released publicly

[10:57:02.0000] <gsnedders>
odinho: also maybe t/core/bts?

[10:57:31.0000] <gsnedders>
I'm not entirely sure why t/core/bts didn't manage to get out before, though

[11:00:10.0000] <gsnedders>
/me forgets what else was on t/core

[11:07:53.0000] <odinho>
gsnedders: Something about /bts being embarrasing I think I heard once many ages ago.  And maybe that it is of dubious value(?).

[11:09:22.0000] <gsnedders>
I think bts is an open secret by this point, really. It's been talked about in here often enough. It certainly has some reasonably large testsuites in it, though.

[11:10:53.0000] <gsnedders>
And really, it's of more value released than it is on t. :)

[11:52:43.0000] <zcorpan>
MikeSmith: i would have provided a link but i was on my phone :-)

[11:54:34.0000] <gsnedders>
zcorpan: plz join odinho in my quest to release more

[11:59:09.0000] <zcorpan>
gsnedders: yeah i suppose i should take some time to release more tests

[11:59:38.0000] <gsnedders>
zcorpan: like just dumping stuff in presto-testo is better than nothing, y'know

[11:59:49.0000] <miketaylr>
remember that one time they ~*almost*~ opened up the BTS

[12:00:03.0000] <gsnedders>
/me expects that would've happened had Presto not been killed

[12:00:12.0000] <miketaylr>
but that was blocked on a jira upgrade or something

[12:00:15.0000] <miketaylr>
then... no dice.

[12:17:32.0000] <Domenic>
"525 additions, 545 deletions not shown because the diff is too large. Please use a local Git client to view these changes." nooo

[12:26:51.0000] <boogyman>
ol

[12:38:43.0000] <smaug____>
did Chrome have some way to get some GC statistics from a web page

[12:38:51.0000] <smaug____>
or was it about memory usage or what was it

[13:49:21.0000] <odinho>
:)))

[14:37:18.0000] <jgraham>
odinho: If you are going to be in England I should preemptively invite you toat least visit Mozilla. Or, y'know, apply for a job if "something else" meant "not work for Opera"

[14:48:39.0000] <Domenic>
TabAtkins: you really think it's best that details's disclosure triangle is some new kind of list item type!?

[14:48:58.0000] <TabAtkins>
I think it's fine? I don't understand what about it warrants a "!?"?

[14:49:19.0000] <Domenic>
TabAtkins: well, it's definitely not a list item?

[14:49:25.0000] <TabAtkins>
The disclosure triangle is, in basically all ways, equivalent to a list marker.

[14:49:30.0000] <Domenic>
how so?

[14:50:17.0000] <TabAtkins>
The 'display' property has no semantic connotations. The "list-item" value is exactly identical to "block", except it also generates a ::marker pseudo on the element.  (Theoretically - browsers haven't jumped on implementing that in a controllable way, but still.)

[14:51:12.0000] <TabAtkins>
The triangle is a bit of non-DOM stuff that is attached to the element, and which isn't ::before or ::after, and which probably doesn't need the full set of properties that ::before/after allow.

[14:51:14.0000] <Domenic>
hmm

[14:51:34.0000] <TabAtkins>
::marker seems to be a pretty good match for it, mechanically.


2016-02-26
[17:29:37.0000] <Krinkle>
Hmm.. SW cache is persistent and atomic? I was hoping it'd have at least have TTL or LRU by size (ideally both)

[17:30:08.0000] <Krinkle>
That'll make it a bit more complex to e..g. cache the basic app shell + a buffer of content for offline viewing.

[17:30:22.0000] <Krinkle>
Can't seem to find existing uses of SW that do this properly.

[00:24:51.0000] <annevk>
If you accidentally created a PR with a commit on your own master branch, is there a way to move that commit into a branch and have the PR be based on that branch instead?

[00:30:56.0000] <annevk>
ritsyy: https://github.com/whatwg/html/issues/722#issuecomment-188576457 might be relatively easy to fix for you; it will probably require a little bit of learning about HTML's rendering section

[00:33:08.0000] <ritsyy>
annevk: oh okay, going through it

[01:03:32.0000] <jgraham>
annevk: Moving that commit onto a branch is easy (just create a branch and reset master back to origin/master), but I don't think you can tell GitHub to change the branch for a PR

[01:06:39.0000] <annevk>
/me finds https://stackoverflow.com/questions/10081053/how-to-change-the-base-branch-of-a-pull-request/11983910#11983910 and decides not to go there

[01:07:58.0000] <annevk>
Hmm, https://stackoverflow.com/questions/35605688/modules-in-es6-full-project/35623318 says thank you but does not give me pointless internet points

[01:16:17.0000] <Ms2ger>
If you ever find a way to change the branch that backs a PR, lemme know

[01:18:41.0000] <annevk>
Ms2ger: see "finds" above, it's possible through the GitHub API

[01:19:36.0000] <Ms2ger>
Ugh

[01:20:24.0000] <Ms2ger>
Apparently doesn't work

[01:22:44.0000] <annevk>
Ms2ger: yeah, "Edit: Note: according to comments, the above is only for attaching a new pull request to an existing issue."

[01:22:51.0000] <annevk>
Ms2ger: my bad

[01:23:11.0000] <annevk>
I've seen someone do this once, turn an issue into a PR

[01:23:38.0000] <Ms2ger>
Oh, that's something else than I was thinking

[01:24:07.0000] <annevk>
Yeah, I wanted to change the branch of an existing PR

[01:24:22.0000] <annevk>
But I guess there's no API surface for that

[01:25:03.0000] <annevk>
MikeSmith: why can folks still file bugs in the XHR component? https://www.w3.org/Bugs/Public/show_bug.cgi?id=29506

[01:25:13.0000] <annevk>
MikeSmith: we should probably close that

[01:25:20.0000] <annevk>
MikeSmith: as in, you 😃

[01:27:21.0000] <MikeSmith>
hah

[01:29:13.0000] <MikeSmith>
at first I thought just now that I had closed that already

[01:29:26.0000] <MikeSmith>
but then I remembered I hadn’t yet

[01:29:39.0000] <MikeSmith>
I had closed the whatwg one already

[01:34:45.0000] <MikeSmith>
I may still get dressed down by somebody else but I’ll deal with that whupping when it comes

[01:38:16.0000] <MikeSmith>
btw the only bugzilla components that I see which are still active are one for the DOM fork, one for DOM Parsing and Serialization (which we probably really should try to find our own editor for again), File API, Web IDL, the WebSocket API fork

[01:38:28.0000] <MikeSmith>
seems like we should close the WebIDL component too

[01:39:27.0000] <MikeSmith>
for WebIDL I need to confirm with heycam|away but I thought all issue-tracking had moved to github

[01:40:04.0000] <MikeSmith>
https://github.com/heycam/webidl/issues

[01:45:26.0000] <annevk>
File API definitely moved to GitHub

[01:45:31.0000] <annevk>
(although also without editor)

[01:48:52.0000] <MikeSmith>
will fix that one too then

[01:58:22.0000] <annevk>
MikeSmith: I think you can close DOM too

[01:58:46.0000] <annevk>
MikeSmith: even the TR/ copy links to GitHub (although the W3C GitHub, which appears inactive)

[01:59:35.0000] <annevk>
Hahahaha, https://github.com/w3c/dom/blob/gh-pages/LICENSE.md

[01:59:45.0000] <annevk>
It's a direct fork of whatwg/dom

[01:59:53.0000] <annevk>
Ugh

[02:01:10.0000] <annevk>
https://www.w3.org/TR/dom/ is actually a year older than advertised too

[03:25:54.0000] <odinho>
jgraham: I'd love visiting you, thanks for the preemptive invitation. :)

[04:52:06.0000] <JakeA>
annevk: why do we need a wrapper after respondWith? I thought the existing response types would be enough

[04:52:25.0000] <annevk>
JakeA: how would an existing type work?

[04:53:21.0000] <JakeA>
annevk: it's either opaque or visible, those things already exist. Particular headers are filtered, that already exists with CORS

[04:53:39.0000] <annevk>
JakeA: CORS does that in a particular way that does not work for this

[04:55:03.0000] <annevk>
JakeA: we could maybe make it reuse most of the CORS setup and even the type, but there's a need for changes still

[04:56:51.0000] <JakeA>
annevk: fair. I saw it as the same as it's a header guard in both CORS and foreign fetch. Conscious that we keep adding stuff to response and thought this could be isolated to foreign fetch via a wrapper

[04:57:31.0000] <annevk>
JakeA: the response stuff is not a header guard really

[04:57:58.0000] <annevk>
JakeA: a CORS response is protected by https://fetch.spec.whatwg.org/#concept-filtered-response-cors

[04:58:39.0000] <annevk>
JakeA: https://fetch.spec.whatwg.org/#dom-headers-get doesn't need any guard because of that

[05:00:39.0000] <ritsyy1>
annevk: https://github.com/whatwg/html/pull/748,, landed a bit late :-[

[05:00:43.0000] <JakeA>
annevk: I see, so foreign fetch's respondWith will create a filtered response from the response & the headers list passed to makeVisible (or whatever it ends up being called)

[05:01:54.0000] <annevk>
JakeA: yeah

[05:02:08.0000] <annevk>
JakeA: most of that should probably be in Fetch somehow since it requires changes to responses

[05:02:26.0000] <annevk>
JakeA: which is my Response.makeVisible or Response.reveal() isn't too bad either I think

[05:04:47.0000] <JakeA>
annevk: the reason I don't like Response.makeVisible is you don't get failure feedback, since it doesn't know the target origin

[05:05:43.0000] <JakeA>
And it feels too specific to put on a generic response. A generic way to create a filtered response might be useful… maybe

[05:07:40.0000] <annevk>
ritsyy1: ta

[05:08:15.0000] <annevk>
JakeA: yeah, I guess I don't feel too strongly

[05:08:33.0000] <annevk>
but the filtered response stuff is needed

[05:08:41.0000] <JakeA>
agreed

[05:09:14.0000] <annevk>
ritsyy1: there's also a specific bit on the details element in the rendering section

[05:09:19.0000] <annevk>
ritsyy1: I wonder if that's still required

[05:09:38.0000] <JakeA>
annevk: if responses become structured cloneable or transferrable, then they can be postMessaged to other origins, the makeVisible would have to mean something in that case too.

[05:11:04.0000] <JakeA>
postMessage would have to hook into the cloning process and throw if the visibility is wrong. Dunno if that's desirable.

[05:12:00.0000] <annevk>
JakeA: my idea was for that origin to not persist

[05:12:11.0000] <annevk>
JakeA: but simply be a sanity check at the boundary

[05:12:26.0000] <annevk>
JakeA: once an origin gets hold of the data, it should no longer be origin-bound in that way

[05:13:02.0000] <ritsyy1>
annevk: yeah there it is about summary, i think it should be removed then, right?, i am not sure

[05:13:09.0000] <annevk>
To make structured cloning work btw we'd have to do structured cloning of promises first, hasn't been making much headway lately though Domenic  did have a design

[05:13:43.0000] <annevk>
ritsyy1: I think the changes you made are all correct

[05:14:03.0000] <annevk>
ritsyy1: I just want to check with upsuper about the section on details

[05:14:29.0000] <ritsyy1>
ritsyy1: okay, yes will wait for upsuper's review

[05:15:01.0000] <JakeA>
annevk: sure, and our only boundary right now is foreign fetch, but if makeVisible is a generic method on Response then we need to consider other potential boundaries, and postMessage could be one

[05:15:29.0000] <JakeA>
So the question is whether we're happy with it being a generic thing, or want to keep this specific to the foreign fetch boundary

[05:15:39.0000] <annevk>
JakeA: yeah, it probably makes more sense for makeVisible to be tighlty coupled with respondWith somehow

[05:16:06.0000] <JakeA>
annevk: that's why I was suggesting foreignFetchEvent.makeVisible etc

[05:16:22.0000] <annevk>
JakeA: perhaps it's indeed better for foreign fetch to have its own respondWith variant where you return a promise for a dictionary that has the various bits

[05:16:29.0000] <JakeA>
Which can also throw if the destination origin doesn't match the target

[05:16:33.0000] <annevk>
{response: ..., origin: ..., headers: ...}

[05:16:57.0000] <JakeA>
annevk: yeah, that was one of my suggestions in the thread

[05:16:59.0000] <annevk>
I think that would be the cleanest and then we let Fetch handle the security checks as we did with Handle Fetch

[05:17:06.0000] <annevk>
JakeA: I'm starting to like it

[05:17:24.0000] <JakeA>
annevk: benefit of a seperate method is it can throw and be recovered from

[05:18:18.0000] <annevk>
JakeA: but then you need to know everything synchronously; recovery here seems hard, better be sure when you resolve the promise

[05:18:33.0000] <JakeA>
But that could just be a verify method that takes that dict

[05:19:23.0000] <annevk>
Yeah, I like this design, and for opaque you'd simply omit the origin/headers members

[05:19:25.0000] <JakeA>
annevk: it's a synchronous check isn't it? We know the destination, we have the response, we have the target

[05:20:15.0000] <JakeA>
Agreed. A request object could be upgraded to { request }, unless that's too magic

[05:21:06.0000] <annevk>
JakeA: the check is synchronous, yes (although a standalone verify method would have to be on the event object to know about the target)

[05:21:16.0000] <JakeA>
Agreed

[05:21:20.0000] <annevk>
JakeA: you mean a response object? Seems too magic

[05:21:41.0000] <JakeA>
Ah yes. Yeah, you're right, making it explicit is fine

[06:02:34.0000] <annevk>
Domenic: can you help with https://github.com/tc39/ecma262/issues/418?

[07:48:20.0000] <annevk>
/me gives up on https://www.w3.org/Bugs/Public/show_bug.cgi?id=29506#c6

[08:12:45.0000] <rektide>
what was the place that formed, and recently renamed itself, that intends to help newcomers create new specs?

[08:16:28.0000] <astearns>
rektide: https://www.w3.org/community/wicg/ ?

[08:17:05.0000] <rektide>
astearns: yeah, exactly. thanks for the help!

[08:17:57.0000] <Ms2ger>
Having newcomers create new specs sounds like the worst idea

[08:18:23.0000] <rektide>
Ms2ger: if you or someone else wants to create a spec for global hotkeys, please take it off my plate

[08:18:32.0000] <rektide>
volunteers will be thanked

[08:20:22.0000] <jgraham>
global hotkeys?

[08:21:21.0000] <annevk>
Ms2ger: ? You have to start somehow

[08:21:28.0000] <rektide>
I'd like to build a media player app, where play/pause/mute/fwd/back keys work whether i'm on the page or not. I need hotkeys which are global.

[08:21:43.0000] <annevk>
rektide: that is https://mediasession.spec.whatwg.org/

[08:22:09.0000] <Ms2ger>
annevk, sure, but I don't think just going off and writing your own spec if you have no experience in spec work is going to end up with a useful result

[08:22:49.0000] <annevk>
Ms2ger: it took ten rewrites or so before I got somewhere with XHR, but that's how I started

[08:22:58.0000] <rektide>
Ms2ger: that seems like a really good reason for wicg to exist then, no? To perhaps be a mechanism to inject some slim chance of hope.

[08:23:03.0000] <jgraham>
annevk: Not really

[08:23:20.0000] <jgraham>
By the time you did XHR you already had like 10 years experience working on other specs

[08:24:08.0000] <Ms2ger>
annevk, intentionally "spec work", not "spec editing" :)

[08:24:37.0000] <rektide>
this MediaSession spec is awesome!

[08:24:39.0000] <annevk>
I started XHR in 2006, that would mean I started in 1996 when I was 10 years old

[08:24:42.0000] <annevk>
Seems unlikely

[08:25:12.0000] <annevk>
But yes, I had been active in the community for about two years I suppose

[08:26:07.0000] <jgraham>
annevk: Pretty sure you did start when you were about 10 years old :p

[08:26:43.0000] <Ms2ger>
Wasn't that gsnedders?

[08:26:53.0000] <jgraham>
Isn't he still 10 years old?

[08:27:48.0000] <gsnedders>
Ms2ger: AFAIK the person who came closest to that is still Aaron

[08:28:12.0000] <gsnedders>
I was 14 when I appeared around specs, I think

[08:28:32.0000] <Ms2ger>
Looks like 16 for me

[08:30:37.0000] <gsnedders>
IIRC, Aaron was 12

[08:30:47.0000] <nox>
:|

[08:31:56.0000] <gsnedders>
(Swartz, this is)

[08:41:18.0000] <gsnedders>
At least he was 12 when he first attended a F2F, from memory of what timbl said (to me, at my first F2F, at 16).

[12:06:55.0000] <nox>
What static attributes are there in the platform?

[12:34:59.0000] <nox>
In https://dom.spec.whatwg.org/#dom-element-setattribute, shouldn't step 3 use https://dom.spec.whatwg.org/#concept-element-attributes-get-by-name?

[12:40:39.0000] <annevk>
nox: Notification.permission

[12:41:04.0000] <nox>
annevk: I thought that was the answer to my last question and I was quite confused. :)

[12:41:07.0000] <nox>
annevk: Thanks.

[12:43:17.0000] <annevk>
nox: I think it does not to avoid duplicating a step

[12:43:21.0000] <nox>
I see.

[13:18:36.0000] <nox>
annevk: What's the proper procedure for reviewing?

[13:19:34.0000] <nox>
Oh I guess I can just say it's ok.


2016-02-27
[18:24:35.0000] <MikeSmith>
annevk: I’ve closed all teh components there to new bugs

[22:31:21.0000] <annevk>
MikeSmith: ta

[22:31:32.0000] <annevk>
/me landed the big cross-origin-objects patch

[01:30:33.0000] <MikeSmith>
annevk: nice work, that patch

[04:28:22.0000] <annevk>
Hopefully it's correct 😊

[04:30:20.0000] <annevk>
JakeA: heard in your podcast animations got promises wrong

[04:30:59.0000] <annevk>
JakeA: this makes me worried about Houdini

[04:33:08.0000] <JakeA>
annevk: https://github.com/w3c/web-animations/issues/141 I think so. Hasn't shipped to stable yet so there's a possibility of fixing

[04:36:04.0000] <annevk>
JakeA: oh good

[04:37:04.0000] <annevk>
 Hopefully the third state stuff becomes reality soonish

[05:33:46.0000] <nox>
annevk: I don't compute your "seems fine". Should I make a new change to WebIDL or not?

[05:34:17.0000] <annevk>
nox: you should, if you don't want it to appear on any derived interfaces

[05:34:24.0000] <nox>
Ok.

[05:34:30.0000] <nox>
Will do today or tomorrow.

[05:36:15.0000] <annevk>
nox: can I land the HTML stuff meanwhile?

[05:37:19.0000] <nox>
annevk: If you remove the annotation you mean?

[05:37:33.0000] <annevk>
nox: yeah

[05:37:36.0000] <annevk>
nox: that's already done

[05:37:41.0000] <nox>
Oh, LGTM.

[05:38:54.0000] <annevk>
done

[05:46:05.0000] <annevk>
nox: did you look into DOMTokenList's replace() method? https://bugzilla.mozilla.org/show_bug.cgi?id=1224186

[05:46:26.0000] <nox>
annevk: To implement it in Servo you mean?

[05:46:47.0000] <annevk>
nox: yeah

[05:46:55.0000] <nox>
Yeah, we have some tests, I think.

[05:46:56.0000] <annevk>
nox: thought you might have an idea about tests and such

[05:47:03.0000] <nox>
Also I have a spec question related to it,

[05:47:16.0000] <nox>
classList.add() creates an empty class attribute if there was none,

[05:47:22.0000] <nox>
classList.replace("foo", "bar") doesn't.

[05:47:25.0000] <nox>
Should it?

[05:48:04.0000] <annevk>
Probably not

[05:48:48.0000] <nox>
annevk: Ok, that's good for me.

[08:36:00.0000] <annevk>
Domenic: so when I xref Boolean, I guess it should go to the object's constructor?

[08:46:26.0000] <Domenic>
annevk: hmm there are a rather lot of possibilities for that aren't there :(. looking...

[08:46:47.0000] <annevk>
Domenic: also, since we say we use ECMAScript language and terminology and ECMAScript doesn't xref, why should I?

[08:47:02.0000] <annevk>
Domenic: feels a bit like above and beyond what was there before

[08:47:14.0000] <Domenic>
annevk: well, ES's xrefs are a work in progress... but maybe it is OK to not for these...

[08:47:35.0000] <annevk>
I mean, I'm okay to add them once they add them and figure out how that should work

[08:47:44.0000] <annevk>
or perhaps decide they should all go through an abstract operation

[08:48:17.0000] <annevk>
I'm involved in a brand discussion too that might change how we look for slots, but I'm not sure I'd want to block on that either

[08:48:35.0000] <annevk>
This was kinda supposed to be a two-day thing, but it's taking much more than that now

[08:49:40.0000] <Domenic>
brand discussion?

[08:49:51.0000] <annevk>
I'll try to figure out how to put some kind of commit in between where I move the section, seems tricky

[08:50:15.0000] <Domenic>
that would be lovely :)

[08:50:16.0000] <annevk>
Domenic: https://github.com/tc39/ecma262/issues/354#issuecomment-187830045

[08:50:31.0000] <Domenic>
ah right yeah

[08:51:21.0000] <Domenic>
So I guess I would link "Boolean object" to https://tc39.github.io/ecma262/#sec-boolean-object

[08:51:25.0000] <Domenic>
but I guess we could omit it

[08:52:20.0000] <annevk>
I see

[09:15:08.0000] <annevk>
Domenic: I'm always afraid with this rewriting that things go horribly wrong and I delete a bunch of things

[09:15:29.0000] <annevk>
And that happened...

[09:15:33.0000] <annevk>
Not sure how major it is

[09:27:15.0000] <annevk>
Domenic: about the blog post, I did want to write something on my personal blog about, as a follow up to the same-origin policy one

[09:27:58.0000] <annevk>
Domenic: last couple posts on the WHATWG blog haven't really inspired anyone to write there yet

[09:32:50.0000] <Domenic>
annevk: hmm I was thinking WHATWG blog, as the first of a kind of "major recent changes" thing... I could do modules at some point

[09:33:29.0000] <annevk>
You know what, if you do modules, I'll do this one after

[09:33:50.0000] <annevk>
If we're going to a major changes series it better be chronological :-p

[09:37:13.0000] <Domenic>
haha fair :)

[09:47:13.0000] <annevk>
Domenic: section 6.2.1 The List and Record Specification Type

[09:47:51.0000] <Domenic>
annevk: wow that's special, OK. Inclined to think it's a typo...

[09:52:39.0000] <annevk>
Yeah maybe, I guess I can try fix it upstream and see what happens

[09:52:47.0000] <annevk>
Oh well, time to make dinner

[09:52:55.0000] <Domenic>
https://github.com/tc39/ecma262/pull/421

[09:53:07.0000] <annevk>
ta!

[12:13:45.0000] <IZh>
Hi current spec refers to non-existent anchors #refsSVG11, #refsSVGTiny12 and #refsSVG2.

[12:21:26.0000] <IZh>
The images /images/sample-bdi.png and /images/sample-not-bdi.png has no alt attribute, which is mandatory if I understand correctly.

[12:21:29.0000] <IZh>
Hixie: ^

[12:22:13.0000] <IZh>
Oh, yes. Bugzilla.

[12:27:43.0000] <IZh>
Filled in github.


2016-02-28
[23:59:06.0000] <annevk>
Domenic: would Construct(%Array% instrinsic object of targetRealm, <<inputLength>>) be roughly the right way to create an Array?

[23:59:14.0000] <annevk>
Domenic: the current setup looks a bit wonky

[00:00:07.0000] <annevk>
I guess I also need to carefully document how the length property is read on the input array

[00:00:17.0000] <annevk>
If I want to make this more precise than it was originally

[00:01:29.0000] <annevk>
Maybe later today

[00:08:52.0000] <Domenic>
annevk: I think that would work, although it feels a bit cleaner to go directly for ArrayCreate(0, %ArrayPrototype% intrinsic object of targetRealm). But, if you're going to be precise about Array, then you probably also want to be precise about Boolean/Number/Map/Set/etc...

[00:09:29.0000] <Domenic>
annevk: especially since a lot of other places in the ES spec use ArrayCreate

[00:10:11.0000] <annevk>
ArrayCreate is problematic since it assumes the current Realm in some places

[00:10:14.0000] <Domenic>
annevk: I guess it is probably another internal factoring thing, where Allen pulled out ArrayCreate but had no need to pull out BooleanCreate

[00:10:27.0000] <Domenic>
Only if you don't pass a second argument

[00:10:49.0000] <annevk>
"Let A be a newly created Array exotic object."

[00:11:01.0000] <Domenic>
That is invariant across realms

[00:11:08.0000] <Domenic>
Construct delegates to ArrayCreate anyway

[00:11:49.0000] <annevk>
Interesting, okay, maybe I can use ArrayCreate

[00:11:50.0000] <Domenic>
Construct just also lets you muck with NewTarget and pass non-numbers for `len`

[00:12:01.0000] <annevk>
I guess it makes sense that only the prototype really varies per Realm

[00:12:32.0000] <annevk>
Anyway, later today or tomorrow

[00:12:32.0000] <Domenic>
Yeah

[00:13:00.0000] <Domenic>
(Hmm Construct also does a Set on the length; that's strange...)

[00:27:52.0000] <annevk>
Domenic: I want to be precise because of length, mostly, btw

[00:28:24.0000] <annevk>
Domenic: the others have simple internal slots

[00:29:40.0000] <annevk>
Getting length from input and setting it on output leaves things undefined atm

[00:32:15.0000] <JakeA>
TabAtkins: could object-fit be made to work on any element's contents? I imagine it's been discussed before

[01:23:13.0000] <annevk>
JakeA: non-object contents seems quite a bit harder (especially as there are no intrinsic sizes, so some stuff would not work I suspect)

[01:24:48.0000] <JakeA>
annevk: we know the box of the parent & the boxes of the children

[02:12:55.0000] <annevk>
TabAtkins: I updated bikeshed to see if the reference issue was fixed for DOM as you said and now I get "FATAL ERROR: No 'dfn' refs found for '"insanity-wolf" alt'."

[02:13:07.0000] <annevk>
TabAtkins: I thought you ran regression tests against DOM now?

[02:14:00.0000] <annevk>
The reliability of bikeshed leaves a lot to be desired, perhaps everything should just use Wattsi or some such instead

[05:47:12.0000] <nox>
FATAL ERROR: No 'dfn' refs found for '"insanity-wolf" alt'.

[05:51:39.0000] <nox>
annevk, TabAtkins: ^

[05:58:19.0000] <annevk>
nox: yeah, see little earlier today

[05:58:39.0000] <nox>
Ok.

[05:59:01.0000] <nox>
annevk: "If the [LegacyUnenumerableNamedProperties] extended attribute is specified on an interface, then it applies to all its derived interfaces and must not be specified on any of them."?

[05:59:43.0000] <annevk>
nox: seems reasonable

[05:59:46.0000] <nox>
annevk: As for my bikeshed error, this is because I'm trying to add a new step after 2.7 in https://dom.spec.whatwg.org/#concept-event-listener-inner-invoke.

[06:00:00.0000] <annevk>
nox: I'm no IDL expert

[06:00:03.0000] <nox>
annevk: Seems like we don't abort the steps if event's stop immediate propagation flag is set at that point.

[06:00:46.0000] <nox>
I think that's the intent of invoke's step 1, but it is misplaced. What do you think?

[06:01:09.0000] <annevk>
I think you're correct, my fault

[06:01:23.0000] <nox>
annevk: No problem. :)

[06:01:44.0000] <nox>
annevk: I have various improvements I want to make to dispatch/invoke/inner invoke. Would that be a good thing?

[06:01:58.0000] <nox>
More short-circuits, no more target in eventPath, etc.

[06:03:24.0000] <annevk>
Target needs to be in path for API

[06:03:49.0000] <annevk>
event.getDeepPath or some such

[06:04:05.0000] <nox>
annevk: Mmmh.

[06:04:23.0000] <annevk>
Invoke step 1 should become inner invoke 2.1 or so I think

[06:04:37.0000] <nox>
annevk: I mean the local variable eventPath in dispatch.

[06:04:45.0000] <annevk>
That used to be the setup until I messed it up recently

[06:05:00.0000] <nox>
We put target in eventPath, but then never do anything with it.

[06:05:07.0000] <annevk>
nox: yeah, that'll be exposed at some point

[06:05:12.0000] <nox>
Oh ok. :)

[06:05:30.0000] <nox>
annevk: Any idea for the wolf?

[06:06:03.0000] <nox>
annevk: I don't think it can be step 2.1 with the "found" mess.

[06:06:43.0000] <annevk>
No idea

[06:06:55.0000] <nox>
annevk: Invoke is never called if stop propagation is set,

[06:06:59.0000] <annevk>
nox: sure it can, just return false

[06:07:01.0000] <nox>
so step 1 in invoke is useless.

[06:07:10.0000] <nox>
annevk: But it should return true.

[06:07:36.0000] <annevk>
Ah okay, then do that

[06:08:06.0000] <nox>
annevk: Should I put a note in place of invoke's step 1?

[06:08:20.0000] <nox>
Like "this is never called when event's stop propagation is set" or something.

[06:09:23.0000] <annevk>
Nah

[06:09:36.0000] <nox>
annevk: Do I remove that step?

[06:10:32.0000] <annevk>
Yeah

[06:10:41.0000] <annevk>
Should be 2.1

[06:11:25.0000] <annevk>
Of inner*

[06:13:23.0000] <nox>
Why 2.1?

[06:14:15.0000] <nox>
annevk: You can't reach 2.1 if stop propagation is set, and we know it is, so I planned to put it as 2.8.

[06:14:22.0000] <nox>
we know it isn't*

[06:15:17.0000] <annevk>
Ah right

[06:15:30.0000] <nox>
If you really want it to be before the actual call, it should be 2.3, but I don't really see the point.

[06:15:41.0000] <annevk>
Agreed

[06:16:29.0000] <annevk>
nox: can you create your own branches yet?

[06:17:52.0000] <nox>
annevk: On upstream's repos you mean

[06:17:53.0000] <nox>
?

[06:18:23.0000] <annevk>
nox: yeah, whatwg/dom

[06:18:33.0000] <nox>
Yes. Do you prefer me to push stuff there?

[06:19:00.0000] <annevk>
nox: makes it easier to get purple PRs

[06:19:16.0000] <nox>
Oh?

[06:19:26.0000] <nox>
annevk: Should I recreate the PR?

[06:19:43.0000] <annevk>
nox: oh no, it's fine for now

[06:19:49.0000] <nox>
Ok. :)

[06:20:09.0000] <annevk>
nox: let me look into this tomorrow and explain then

[06:20:19.0000] <nox>
Explain?

[06:24:49.0000] <nox>
annevk: Even if it is exposed one day, we could still set eventPath to everything but its first element, and then remove the redundant "and object is not target" that is repeated twice.

[10:45:39.0000] <Domenic>
https://twitter.com/JustRogDigiTec/status/704013991522111488 is sad

[11:05:17.0000] <roc>
we should have web-platform-tests that test that non-standard features aren't implemented

[11:10:49.0000] <nox>
annevk: Is it known that wpt and the spec disagree with regard to Range.insertNode?

[11:12:10.0000] <nox>
https://github.com/w3c/web-platform-tests/pull/2065

[11:14:07.0000] <nox>
Never mind I think my code is just incorrect.

[11:58:09.0000] <Domenic>
I think there are some such tests for Attr


2016-02-29
[03:02:47.0000] <annevk>
nox: for any future PRs to DOM you should now be able to create branches directly on the main repository (please don't push to master)

[03:03:26.0000] <annevk>
nox: the advantage of that is that the person committing (mostly me I guess) can rebase before landing, resulting in automatic closure of the PR and some automatic cross-referencing of the commit to the PR

[03:05:25.0000] <nox>
annevk: Ok cool.

[03:07:04.0000] <ritsyy>
annevk: https://github.com/whatwg/html/pull/748 reviews for this one?, i am unclear about some of the sections

[03:10:16.0000] <annevk>
ritsyy: looking

[03:14:50.0000] <annevk>
ritsyy: reviewed

[03:15:39.0000] <ritsyy>
ritsyy: yes, renaming it, thanks!

[03:15:48.0000] <annevk>
ritsyy: thanks for the ping, if you pushed that commit a few days ago, remember to say something in the issue, otherwise reviewers won't get a notification

[03:16:42.0000] <ritsyy>
annevk: no no i just did the commit, i thought to ping you here, will comment there too after this commit

[03:18:05.0000] <annevk>
ah okay

[03:19:07.0000] <ralt>
annevk: might be worth to switch to gitlab, it has many features that you seem to want (rebase in PRs, protected branches and permissions let some people push to non-protected branches only, etc)

[03:19:14.0000] <ralt>
or at least, look at gitlab :)

[03:22:40.0000] <annevk>
ralt: wow cool, I want that, but with the community from GitHub

[03:23:04.0000] <annevk>
It was already hard to imagine we're the only ones with these issues

[04:00:53.0000] <nox>
annevk: https://github.com/tabatkins/bikeshed/commit/152f137ad3946c665c8a78648ac0d803369642b5

[04:00:57.0000] <nox>
That's the bug I think.

[04:05:57.0000] <nox>
annevk: https://github.com/tabatkins/bikeshed/pull/611

[05:27:46.0000] <nox>
annevk: OOOOOH, I think I got a workaround to unblock DOM.

[05:28:16.0000] <annevk>
Call TabAtkins?

[05:29:06.0000] <nox>
annevk: Nah.

[05:29:12.0000] <nox>
And I failed. :(

[05:29:28.0000] <nox>
annevk: I hoped &equals; would do the trick given it's just regexps. :P

[05:31:24.0000] <nox>
annevk: We can also do 'src= "insanity-wolf"' for now.

[05:31:49.0000] <annevk>
Nah, let's wait

[05:32:08.0000] <annevk>
TabAtkins discouraged me to work around flaws

[05:33:00.0000] <nox>
K.

[07:20:09.0000] <Domenic>
We should set up CI for the bikeshed specs so that (a) we don't have to check in generated code; (b) we can pin to a specific Bikeshed version.

[07:20:33.0000] <Domenic>
I envision a metadata file in the repo (maybe .travis.yml, maybe something else) that contains the Bikeshed commit hash that the spec is meant to be built with

[07:20:37.0000] <Domenic>
And you can update that every once in a while

[07:32:51.0000] <annevk>
I would not mind such a setup

[07:39:03.0000] <gsnedders>
I guess the important question is whether we have any desire to review BS output. Probably not really, because it's just too noisy.

[07:45:32.0000] <annevk>
gsnedders: it's somewhat useful to do, especially since I often type <span> instead of <a>, but it's very noisy indeed

[08:02:58.0000] <Ms2ger>
TIL about the word "excrescence"

[08:16:36.0000] <annevk>
1 of 1 matches

[08:23:33.0000] <Ms2ger>
foolip++

[08:24:51.0000] <philipj>
Ms2ger: I tried quite hard to find something to complain about, but the truth is you write tests almost exactly like I would aspire to :)

[08:26:02.0000] <philipj>
Ms2ger: if you're in a good mood, the top two in https://github.com/w3c/web-platform-tests/pulls/foolip need review

[08:26:27.0000] <philipj>
/me does actually know what mood has to do with it...

[08:26:32.0000] <philipj>
doesn't!

[08:29:51.0000] <Ms2ger>
philipj, r+ and r+ with rebase and nit

[08:35:15.0000] <Domenic>
While we're talking tests... is https://github.com/yaycmyk/jsdom/blob/label-input-activation/test/web-platform-tests/to-upstream/html/semantics/forms/the-label-element/proxy-click-to-associated-element.html#L24-L29 the correct pattern for testing events, or should we be using EventWatcher maybe, or...?

[08:35:39.0000] <Domenic>
EventWatcher seems pretty heavyweight for single events I guess

[08:36:05.0000] <annevk>
/me wonders if nox has studied Shadow DOM yet

[08:36:13.0000] <nox>
Not yet.

[08:36:24.0000] <nox>
But given I implemented <template>, I probably will at some point.

[08:36:50.0000] <Ms2ger>
Domenic, assert_true(true); is dumb

[08:37:05.0000] <Domenic>
Ms2ger: just do t.done()?

[08:37:15.0000] <Ms2ger>
Domenic, input.addEventListener("click", t.step_func_done()) is probably what I'd use

[08:37:53.0000] <Domenic>
Ms2ger: hmm, that's not documented in http://testthewebforward.org/docs/testharness-library.html#promise-tests

[08:38:27.0000] <Ms2ger>
You're correct

[08:39:07.0000] <Domenic>
I'll see if I can pull off a PR from the web interface

[08:39:28.0000] <annevk>
Domenic: ETA on structured clone?

[08:39:36.0000] <philipj>
Ms2ger: thanks!

[08:39:37.0000] <Domenic>
annevk: within the hour

[08:39:48.0000] <Domenic>
Ms2ger: oh lol I see why they did assert_true. The docs told them to.

[08:39:58.0000] <Domenic>
Ms2ger: "The above example can be rewritten as:"

[08:40:25.0000] <annevk>
Domenic: I want to make the change I suggested in the PR, but other than that I think it's good, but who knows, you might find something again 😃

[08:40:25.0000] <Ms2ger>
Huh

[08:40:36.0000] <annevk>
Domenic: in the PR thread*

[08:41:28.0000] <Domenic>
I will change it to assert_equals(1+1, 2)

[08:48:08.0000] <Ms2ger>
Domenic, are you updating the docs?

[08:48:45.0000] <Domenic>
Ms2ger: https://github.com/w3c/testharness.js/pull/186

[08:51:11.0000] <Ms2ger>
Domenic, reviewed

[08:51:30.0000] <Domenic>
Ms2ger: dang, now I have to go make changes using not the web interface :P. Will fix after reviewing this HTML PR...

[08:52:11.0000] <Ms2ger>
Domenic, I'll review again tomorrow if nobody beats me to it :)

[09:10:26.0000] <TabAtkins>
annevk: I'm working on it this morning, don't worry.

[09:12:52.0000] <TabAtkins>
nox's PR seems hacky but workable, I'll merge in a few minutes.

[09:13:01.0000] <nox>
TabAtkins: It doesn't pass tests.

[09:13:16.0000] <nox>
TabAtkins: I'm not sure what's that thing is supposed to match btw, because I don't see =type= in that shorthands file.

[09:13:22.0000] <TabAtkins>
Yeah, that's why I can't merge from my phone.

[09:13:46.0000] <TabAtkins>
Haven't updated the docs yet, was waiting for any problems to shake out. 😀

[09:22:02.0000] <annevk>
ugh

[09:22:16.0000] <annevk>
TabAtkins: it basically delayed fixing stuff in DOM by two days, that's not a great way to operate

[09:22:23.0000] <annevk>
TabAtkins: please fix the way you develop bikeshed

[09:26:26.0000] <annevk>
Domenic: const a = []; Object.defineProperty(a, "length", { get() { return 5; } }) throws

[09:26:48.0000] <annevk>
Domenic: I based my code on similar-looking code in ECMAScript

[09:27:06.0000] <Domenic>
annevk: hmm, I don't think it should, per spec...

[09:27:35.0000] <Domenic>
annevk: ah I see, length is non-configurable...

[09:28:03.0000] <Domenic>
annevk: OK, that part looks good

[09:32:01.0000] <annevk>
Domenic: should we go through the placeholder stuff here?

[09:32:06.0000] <annevk>
Domenic: or is it clear now?

[09:32:24.0000] <Domenic>
annevk: it is definitely not clear, but I will try re-reading it with your new explanation in mind and suggesting better text...

[09:32:48.0000] <annevk>
Domenic: this is basically what the old text had too

[09:33:01.0000] <annevk>
Domenic: though replacing the placeholder with the transferred object lived in postMessage()

[09:33:05.0000] <Domenic>
annevk: well, I didn't review the old text :)

[09:33:37.0000] <annevk>
Domenic: sure, but basically a lot of improvements are being blocked on this now

[09:34:34.0000] <Domenic>
annevk: could it be rephrased as "Everywhere placeholderResult shows up inside clone, replace it with transferResult"?

[09:34:35.0000] <annevk>
Domenic: basically if you have an object-graph in your engine, you want to take the placeholder object and replace it directly with the transferred object

[09:34:58.0000] <Domenic>
annevk: right but e.g. does that mean crawling the graph with GetOwnProperties etc.?

[09:35:13.0000] <annevk>
Domenic: no, because then if it didn't show up inside clone it wouldn't be replaced

[09:35:48.0000] <Domenic>
annevk: that is the main part of my question. where else can it show up.

[09:35:52.0000] <annevk>
Domenic: I'm not sure what GetOwnProperties is or how it relates

[09:36:06.0000] <annevk>
Domenic: it's returned in [[TransferList]]

[09:36:35.0000] <annevk>
Domenic: hmm, maybe it cannot show up there, those don't use memory at the moment

[09:36:48.0000] <Domenic>
annevk: right that's step 5.4. But in 5.3, which we are discussing, it isn't in outputTransferList

[09:37:36.0000] <annevk>
Domenic: I was thinking that objects ending up in [[TransferList]] could have references, but that's currently not possible

[09:37:54.0000] <annevk>
Domenic: that might change though if we start passing memory to [[Transfer]] in the future for some new use case

[09:38:04.0000] <Domenic>
annevk: let's worry about that then?

[09:38:56.0000] <annevk>
Domenic: sure, I can add a comment under [[Transfer]] similar to what I have under [[Clone]]

[09:39:12.0000] <Domenic>
What kind of comment?

[09:39:16.0000] <Domenic>
Oh you mean <!-- comment

[09:39:28.0000] <annevk>
<!-- if we add memory, we need to change so and so -->

[09:39:46.0000] <Domenic>
Thanks.

[09:39:57.0000] <Domenic>
This pushes the major imprecision into the single phrase "inside clone", which we can live with

[09:40:19.0000] <Domenic>
Ideally we'd specify exactly how you go crawling the object graph and replacing these placeholders. Or figure out what implementations actually do.

[09:40:21.0000] <TabAtkins>
All right, nox's fix worked, dom builds cleanly now.

[09:40:45.0000] <annevk>
I see, I thought that was more or less a given since we created placeholder objects inside the StructuredCloneWithTransfer algorithm and that algorithm only ever returns clone/transferList or an exception

[09:42:09.0000] <annevk>
Domenic: ^ still not entirely clear to me why you think it's unclear now, but I guess I can add "in /clone/"

[09:43:21.0000] <Domenic>
annevk: I am trying to figure out if there are observable consequences to different ways of doing this replacement (because there are many: different ways of graph traversal; different ways of getting the list of properties; etc.) but I am not sure yet one way or the other.

[09:43:57.0000] <annevk>
I suspect this actually happens at a much lower level than getting properties in engines

[09:44:35.0000] <annevk>
They have these placeholder objects allocated with some pointer, and they just make that point someplace else

[09:44:47.0000] <Domenic>
Right, I guess so.

[09:44:51.0000] <TabAtkins>
nox: Unfortunately using entities doesn't avoid the shorthands, as all but a few run over the parsed DOM, not raw text, so they see the entity already substituted. Haven't come up with a good way around that yet. :/

[09:45:32.0000] <nox>
TabAtkins: Yeah understood that afterwards. :) I saw regexps and just thought bikeshed was crazier than I had thought initially. Sorry for that. :P

[09:46:03.0000] <annevk>
Domenic: it would only be observable if you could get cause code to run in targetRealm while cloning, which should be impossible

[09:46:35.0000] <annevk>
Domenic: I agree that it would be nice if we had better language to define this, but I don't think ECMAScript gives low-level access to allocated objects

[09:47:11.0000] <TabAtkins>
nox: I'd actually thought of the case that DOM hit, but remembered that it wouldn't be hit by normal attributes. I did not consider code examples. ^_^

[09:47:34.0000] <annevk>
Domenic: maybe I should ask in #jslang if anyone has ideas

[09:47:46.0000] <TabAtkins>
Anyway, DOM is being put into the integration suite now, and I'm gonna put a bunch more in too, so it's unlikely I'll break anything without noticing again.

[09:51:32.0000] <annevk>
TabAtkins: thank you, dom.bs and url.bs are the main pain points

[09:51:39.0000] <annevk>
TabAtkins: notifications.bs seems to get by, mostly

[09:52:09.0000] <annevk>
Domenic: asked there, but no high hopes

[09:52:14.0000] <TabAtkins>
annevk: kk, I'll put url.bs in too. No reason not to, testing is already slow enough that slowing it down by another minute or so is fine.

[09:52:20.0000] <Domenic>
annevk: just clarifying that it's scoped to clone is enough for now for me

[09:52:45.0000] <annevk>
TabAtkins: you might want to improve those build times :-P

[09:53:09.0000] <TabAtkins>
Man don't I know it.  Got a few things lined up to work on for that, then gonna dive in and see what else is slowing things down.

[09:53:30.0000] <TabAtkins>
Got a decent profiler already hooked up, so it's just a matter of putting in the time.

[10:13:59.0000] <IZh>
Hi. Is this a valid link? <a href=#shared-internal-slot:-[[crossoriginpropertydescriptormap]]>...</a>

[10:15:25.0000] <annevk>
think so

[10:15:52.0000] <IZh>
annevk: Shouldn't square brackets be %-encoded?

[10:16:57.0000] <annevk>
IZh: I guess per https://url.spec.whatwg.org/#syntax-url-fragment they should

[10:17:24.0000] <annevk>
IZh: that might be hard to fix though

[10:17:50.0000] <IZh>
annevk: Well, the spec has only one wrong anchor.

[10:18:20.0000] <annevk>
IZh: it's generated, that's the problem

[10:18:35.0000] <annevk>
IZh: although I suppose we could just override the id of that header and forget about it

[10:19:29.0000] <IZh>
annevk: But why not to fix escaping code? I suppose it must already %-encode non-ASCII symbols. Why not just add the square brackets to the set?

[10:19:45.0000] <TabAtkins>
annevk: I'm not url-encoding anchors in several spots, I'm happy to go through and fix that.

[10:20:56.0000] <TabAtkins>
(I haven't needed to be precise with that, because Bikeshed only generates IDs that are url-safe without any escaping needed.)

[10:22:46.0000] <Domenic>
This is Wattsi though :)

[10:24:52.0000] <IZh>
It seems that https is not supported on IPv6 address of whatwg.org.

[10:27:13.0000] <annevk>
IZh: as I said, that might be tricky

[10:27:24.0000] <annevk>
IZh: file an issue against whatwg/wattsi

[10:27:30.0000] <annevk>
IZh: or a PR 😃

[10:30:03.0000] <annevk>
Domenic: if you can take another look now maybe we can land it today

[10:31:31.0000] <IZh>
annevk: Filed #22.

[10:33:21.0000] <annevk>
IZh: thank you, is this breaking anything for you or just something you noticed?

[10:34:20.0000] <IZh>
annevk: Just something another validator is barking on. :-)

[10:34:51.0000] <IZh>
annevk: I'm periodically validating the spec. :-)

[10:35:32.0000] <IZh>
Because the spec has to conform to itself.

[10:37:36.0000] <annevk>
Domenic: would "across event loops, i.e., ..." work?

[10:37:42.0000] <annevk>
Domenic: I mainly don't like the ":"

[10:38:38.0000] <Domenic>
Yeah it would. I like the colon slightly more but both should be ok

[10:39:28.0000] <Domenic>
Heading upstairs from lunch now, we can indeed probably land this today

[10:39:31.0000] <annevk>
Domenic: or "I.e., they support being cloned across ..."

[10:40:04.0000] <Domenic>
Yeah although I prefer to start sentences with "that is" instead of "I.e."

[10:40:47.0000] <annevk>
sure

[10:47:46.0000] <TabAtkins>
Domenic: Well Bikeshed has the same issue, so I'm still filing an issue on myself. ^_^

[10:59:15.0000] <annevk>
Domenic: thanks so much for all the reviewing

[10:59:33.0000] <Domenic>
annevk: thanks for doing this!! it's so much nicer.

[10:59:51.0000] <annevk>
Domenic: ECMAScript prose is rather addictive

[11:00:12.0000] <Domenic>
You can close https://github.com/whatwg/html/issues/575 and https://github.com/whatwg/html/issues/557 now if you want :)

[11:00:21.0000] <Domenic>
haha yeah I do like the precision

[11:21:35.0000] <wanderview_pto>
how many times should I write the same function before I propose a convenience version in the spec?

[11:21:35.0000] <wanderview_pto>
in this case, a promise-returning service worker wait_for_state()

[11:24:07.0000] <Domenic>
That sounds like a function very useful for tests and not that useful for other code?

[11:27:13.0000] <wanderview_pto>
ok

[11:30:11.0000] <Domenic>
I dunno, are you writing tests or demos?

[11:31:12.0000] <wanderview_pto>
tests

[11:33:22.0000] <jsbell>
tests + demos for me; I'd love that too.

[11:38:08.0000] <jsbell>
wanderview_pto: I think we talked about that very early on, maybe decided not to because the "sw-as-progressive-enhancement" scenario shouldn't use it.

[11:39:31.0000] <jsbell>
But still, +1

[11:39:53.0000] <wanderview_pto>
jsbell: I dunno... I can think of progressive use cases... something like navigator.serviceWorker.register(script).then(swr => swr.installing.waitFor('active')).then(_ => enableOfflineUI())

[11:40:06.0000] <wanderview_pto>
you only get the offline UI if you can register a service worker that goes acitve

[11:40:10.0000] <jsbell>
Right.

[11:40:18.0000] <wanderview_pto>
although I guess for 'active' we already have the .ready promise

[11:40:40.0000] <wanderview_pto>
I find the .ready promise a bit weird, tbh

