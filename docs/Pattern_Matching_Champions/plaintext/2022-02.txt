2022-02-01
[11:47:40.0118] <TabAtkins>
I'm applying all our resolutions right now, and I'm finally to the binding visibility one, and I have a question.

[11:48:27.0374] <TabAtkins>
So `&`/`|` is simple, as is array patterns; bindings from earlier patterns are visible to later patterns. But what about object matchers?

[11:49:05.0595] <TabAtkins>
Should `{a, b: ${console.log(a)}}` work? If so, I presume `{b: ${console.log(a)}, a}` wouldn't work? Or should neither work?

[11:58:18.0205] <mpcsh>
is both working an option?

[11:59:20.0174] <TabAtkins>
That seems impossible; `{a: ${console.log(b)||"a"}, b: ${console.log(a)||"b"}}` logs what, exactly?

[11:59:31.0646] <mpcsh>
yeah you're right

[12:00:18.0327] <mpcsh>
I'm gonna say we should match destructuring here:
```js
const x = {a: 1, b: 2};
const {a, c = a} = x; // works
const {d = b, b} = x; // doesn't work
```

[12:00:46.0396] <TabAtkins>
that's my preference too, i just hadn't checked what worked yet

[12:00:47.0203] <mpcsh>
(I didn't know those semantics off the top of my head, just worked it out in the console)

[12:00:48.0872] <mpcsh>
 * (I didn't know those semantics off the top of my head, just worked it out in the console)

[12:02:33.0015] <TabAtkins>
Also I don't have a real opinion on this PR, someone else can merge it if they like: https://github.com/tc39/proposal-pattern-matching/pull/237

[12:02:37.0062] <TabAtkins>
 * Also I don't have a real opinion on this PR, someone else can merge it if they like: https://github.com/tc39/proposal-pattern-matching/pull/237

