2024-02-05
[06:41:24.0201] <rbuckton>
Are we meeting today, or canceling for this week? 

[08:11:37.0927] <rbuckton>
I expect some folks may be traveling today.

[08:19:34.0917] <rbuckton>
After 20 minutes, only Richard and Jack showed up and we don't seem to have an agenda, so we're assuming this is canceled.

[09:10:19.0035] <ljharb>
i totally spaced that we had it; i had to get the kids ready this morning. without a full complement tho there's not much we could get done.


2024-02-13
[11:34:53.0536] <ljharb>
the next meeting happens to fall on President's Day. who all is available to meet? i'd like to have the meeting if enough of us can do it - otherwise the next one's not til march 4th, and i'd really like to be able to present in april


2024-02-14
[12:50:37.0795] <mpcsh>
> <@ljharb:matrix.org> the next meeting happens to fall on President's Day. who all is available to meet? i'd like to have the meeting if enough of us can do it - otherwise the next one's not til march 4th, and i'd really like to be able to present in april

I'll be there!


2024-02-15
[09:37:44.0890] <rbuckton>
During the last plenary session, Shu expressed some concern about the perf cost of iterator destructuring for extractors. I know this is a known concern we've discussed before, which is why we've potentially considered using index/length instead.
danielrosenwasser pointed out to me that in https://peps.python.org/pep-0622/#custom-matching-protocol, Python decided against full-blown custom matchers in favor of a far more limited approach using `__match_args__`, where something like `case Point(1, 2)` only tests whether the subject is an instance of `Point`, and then reads `Point.__match_args__` which returns an array containing ordered keys like `["x", "y"]`, which in turn is used to extract the named properties of the subject to match for those positions.
I admit, I'm not a fan of adopting that approach as it severely limits the value proposition for extractors, but there is something to be said for the possible performance implications. I'm curious what everyone else's thoughts are on this, though.

[09:51:02.0157] <rbuckton>
The other approach discussed was C#'s `Deconstruct`, which allows for some custom evaluation logic but leverages C#'s `out` parameters for ordered destructuring:
```cs
void Deconstruct(out int x, out int y) {
  x = this.x;
  y = this.y;
}
```
I have been toying with a [`ref` proposal](https://github.com/rbuckton/proposal-ref) for a few years that is similar to `out` (C# also has `ref`, and the only real difference between `ref` and `out` in C# is that an `out` must be assigned to before a normal return from the function body).

[09:51:19.0039] <rbuckton>
 * The other approach discussed briefly in plenary was C#'s `Deconstruct`, which allows for some custom evaluation logic but leverages C#'s `out` parameters for ordered destructuring:

```cs
void Deconstruct(out int x, out int y) {
  x = this.x;
  y = this.y;
}
```

I have been toying with a [`ref` proposal](https://github.com/rbuckton/proposal-ref) for a few years that is similar to `out` (C# also has `ref`, and the only real difference between `ref` and `out` in C# is that an `out` must be assigned to before a normal return from the function body).

[09:51:47.0208] <rbuckton>
 * The other approach discussed briefly in plenary was C#'s `Deconstruct`, which allows for some custom logic but leverages C#'s `out` parameters for ordered destructuring:

```cs
void Deconstruct(out int x, out int y) {
  x = this.x;
  y = this.y;
}
```

I have been toying with a [`ref` proposal](https://github.com/rbuckton/proposal-ref) for a few years that is similar to `out` (C# also has `ref`, and the only real difference between `ref` and `out` in C# is that an `out` must be assigned to before a normal return from the function body).

[09:54:20.0521] <Jack Works>
I don't like the python approach 

