2022-08-01
[06:50:58.0951] <yulia>
why is this potentially a bad path? I am not sure I understand your example with `f.toString` ? Is it an issue if we do something custom here? It can include multiple definitions. That is the case for other languages such as idris iirc

[06:51:49.0431] <yulia>
I am also not sure that this will be a problem with decorators on parameters. This is the same as having internal functions

[06:52:31.0937] <yulia>
 * why is this potentially a bad path? I am not sure I understand your example with `f.toString` ? Is it an issue if we do something custom here? It can include multiple definitions

[06:52:43.0089] <yulia>
 * why is this potentially a bad path? I am not sure I understand your example with `f.toString` ? Is it an issue if we do something custom here? It can include multiple definitions. That is the case for other languages such as idris iirc

[08:46:14.0608] <rbuckton>
I am concerned we could be jumping the gun introducing overloads purely for pattern matching purposes, with Type Annotations on the table. True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future. There are a number of questions we could ask now whose answers could change dramatically in 3-5 years:

- Would each overload be an independent function reference, or are they somehow nested inside the function?
- How would this apply to `F.p.bind`? Do we match during `.bind` or when the final function is invoked?
- How would this apply to `Proxy`?
- How would this affect `new F()` and the resulting `new.target`, prototypes, etc.
- If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?
- If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?
- How would this be impacted by a potential future including type annotations, metadata, reflection, binary AST, etc?

Given that its easy enough to write `(x) => match(x) { ... }` or `function f(x) { return match(x) { ... } }`, I don't think introducing overloads this early in the game would be advisable. At the very least, it shouldn't be tied to a v1 of pattern matching as I believe that would result in the feature sitting in limbo for a decade while we try to sort out cross-cutting concerns.

[08:46:53.0113] <rbuckton>
 * I am concerned we could be jumping the gun introducing overloads purely for pattern matching purposes, with Type Annotations on the table. True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future. There are a number of questions we could ask now whose answers could change dramatically in 3-5 years:

- Would each overload be an independent function reference, or are they somehow nested inside the function?
- How would this apply to `F.p.bind`? Do we match during `.bind` or when the final function is invoked?
- How would this apply to `Proxy`?
- How would this affect `new F()` and the resulting `new.target`, prototypes, etc.
- If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?
- If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?
- How would this be impacted by a potential future including type annotations, metadata, reflection, binary AST, etc?

Given that its easy enough to write `(x) => match(x) { ... }` or `function f(x) { return match(x) { ... } }`, I don't think introducing overloads this early in the game would be advisable. At the very least, it shouldn't be tied to a v1 of pattern matching as I believe that would result in the feature sitting in limbo for a decade while we try to sort out cross-cutting concerns.

[08:49:10.0448] <rbuckton>
> <@yulia:mozilla.org> I am also not sure that this will be a problem with decorators on parameters. This is the same as having internal functions

In my list above I reference function and parameter decorators as needing to have *some* knowledge of overloads, which is a further complication especially in regards to proposals such as Decorator Metadata.

[08:50:51.0068] <rbuckton>
Method decorators are already stage 3 and have no concept of overloads. Introducing overloads that point to the same function reference would cause issues if decorator libraries aren't written to handle that case, and most won't be. 

[08:56:31.0202] <rbuckton>
Consider a class built to handle server-side HTTP routes:

```js
class HttpRoutes {
  @route("GET", "/products")
  getProducts(req) { ... }

  @route("GET", "/products/{id}")
  getProduct(req) { ... }
}
```

The route might attach metadata to the method that would be used to pick the method to execute when a request is handled. Then we introduce overloads for pattern matching and someone else decides to write:

```js
class HttpRoutes {
  @route("GET", "/products")
  get(req when { url: "/products" }) { ...}

  @route("GET", "/products/{id}")
  get(req when { url: /\/products\/\d+/ }) { ... }
}
```
Without updating the decorator library, the metadata for `get` might be overwritten, or might be potentially unreachable if each method is nested internally.

[08:56:52.0498] <rbuckton>
So you then run into a versioning and/or documentation problem.

[09:02:05.0799] <rbuckton>
Also, let me know if there's a better way to handle this discussion given the issues with your wrist. I had a comminuted fracture in my left wrist about 15 years ago, and daily pain ever since (worse on some days than others), so I can at least partially relate to how difficult typing can be at times.

[09:04:45.0117] <rbuckton>
 * Also, let me know if there's a better way to handle this discussion given the issues with your wrist. I had a comminuted fracture in my left wrist about 15 years ago, and daily pain ever since (worse on some days than others), so I can at least partially relate to how difficult typing can be at times.

[09:09:47.0980] <yulia>
ahaha yeah it would be better to have a call

[09:09:56.0152] <yulia>
but, i already typed this up so

[09:13:23.0909] <yulia>
> with Type Annotations on the table

(you also mentioned bin ast, and other things here so ill try to answer everything... but i lost it) I believe this is an _very interesting_ companion to type annotations. In fact, I was thinking that it may be interesting to have matchers written via the interface keyword. This may allow us to share both runtime behavior (that, due to being able to throw, can have interesting implications for both safety and optimization) and static information. I don't see this as in opposition and have been chatting with the typescript folks. They don't hate it so far. These may work very well together in fact.

bin-ast doesn't have much support at the moment. I am not sure why this would be in opposition to metadata or reflection. Maybe you have an example i can consider.

> True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future

I rather strongly disagree. In fact i think the opposite. This has been described to me as one of the weaknesses of typescript -- that they have no impact at run time. What guards and typed objects were proposed to be were runtime checks that can also be used as static information.

> Would each overload be an independent function reference, or are they somehow nested inside the function?

This is open for discussion. A reasonable implementation would to have a match inside of an intermediate function. Effectively pointing to a table that then routes you to the correct functionality.

> How would this apply to F.p.bind? Do we match during .bind or when the final function is invoked?

yes, if we take the table approach, then

```js
function foo(x when a) { /*...*/} 

function foo( x when b) { /*...*/}

function foo( x) { /*...*/ }


// under the hood, so to speak

function foo (x) {
  match(x) {
    when a: _internal_shapedFoo_1(x)
    when b: _internal_shapedFoo_2(x)
    default : _internal_Foo_default(x)
  }
}
```

(but really, the interesting thing is when you _dont_ have the default case.)

From the engine perspective, if we see that everything is shaped, we might be able to remove the intermediary function. This can possibly result in more assumptions being made (similar to what was being attempted by the guard proposal). This shares a lot of features with guards. 

> How would this apply to Proxy?

what precisely do you mean? can you give an example? Proxies is kind of a big region for me so I am not immediately grasping the issue you are pointing out.

> How would this affect new F() and the resulting new.target, prototypes, etc.

One way to answer this might be: What happens when you have a match statement in the constructor of F? another way to answer it (though I am still absorbing it) is your comment here: https://github.com/tc39/proposal-pattern-matching/issues/281#issuecomment-1199706022 for the new Book example.

> If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?

An decorator would apply to its direct shaped function. So, for example:

```js
class HttpRoutes {

  @route("GET", "/products")
  get(req when { url: "/products" }) { ...}

  @route("GET", "/products/{id}")
  get(req when { url: /\/products\/\d+/ }) { ... }

  // internal engine functions
  @route("GET", "/products")
  _internal_shapedget_1(req when { url: "/products" }) { ...}

    @route("GET", "/products/{id}")
  _internal_shapedget_2(req when { url: /\/products\/\d+/ }) { ... }

  implementation_get(req) { 
    match(req) {
       when { url: "/products" }: // ...
       when { url: /\/products\/\d+/ }: // ... 
       default : // throw no such function
    }
  }
}

```

and, you can likely imagine what would happen if the default behavior had a decorator

> If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?

Hopefully the above answers this question?

[09:13:46.0675] <yulia>
 * > with Type Annotations on the table

(you also mentioned bin ast, and other things here so ill try to answer everything... but i lost it) I believe this is an _very interesting_ companion to type annotations. In fact, I was thinking that it may be interesting to have matchers written via the interface keyword. This may allow us to share both runtime behavior (that, due to being able to throw, can have interesting implications for both safety and optimization) and static information. I don't see this as in opposition and have been chatting with the typescript folks. They don't hate it so far. These may work very well together in fact.

bin-ast doesn't have much support at the moment. I am not sure why this would be in opposition to metadata or reflection. Maybe you have an example i can consider.

> True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future

I rather strongly disagree. In fact i think the opposite. This has been described to me as one of the weaknesses of typescript -- that they have no impact at run time. What guards and typed objects were proposed to be were runtime checks that can also be used as static information.

> Would each overload be an independent function reference, or are they somehow nested inside the function?

This is open for discussion. A reasonable implementation would to have a match inside of an intermediate function. Effectively pointing to a table that then routes you to the correct functionality.

> How would this apply to F.p.bind? Do we match during .bind or when the final function is invoked?

yes, if we take the table approach, then

```js
function foo(x when a) { /*...*/} 

function foo( x when b) { /*...*/}

function foo( x) { /*...*/ }


// under the hood, so to speak

function foo (x) {
  match(x) {
    when a: _internal_shapedFoo_1(x)
    when b: _internal_shapedFoo_2(x)
    default : _internal_Foo_default(x)
  }
}
```

(but really, the interesting thing is when you _dont_ have the default case.)

> How would this apply to Proxy?

what precisely do you mean? can you give an example? Proxies is kind of a big region for me so I am not immediately grasping the issue you are pointing out.

> How would this affect new F() and the resulting new.target, prototypes, etc.

One way to answer this might be: What happens when you have a match statement in the constructor of F? another way to answer it (though I am still absorbing it) is your comment here: https://github.com/tc39/proposal-pattern-matching/issues/281#issuecomment-1199706022 for the new Book example.

> If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?

An decorator would apply to its direct shaped function. So, for example:

```js
class HttpRoutes {

  @route("GET", "/products")
  get(req when { url: "/products" }) { ...}

  @route("GET", "/products/{id}")
  get(req when { url: /\/products\/\d+/ }) { ... }

  // internal engine functions
  @route("GET", "/products")
  _internal_shapedget_1(req when { url: "/products" }) { ...}

    @route("GET", "/products/{id}")
  _internal_shapedget_2(req when { url: /\/products\/\d+/ }) { ... }

  implementation_get(req) { 
    match(req) {
       when { url: "/products" }: // ...
       when { url: /\/products\/\d+/ }: // ... 
       default : // throw no such function
    }
  }
}

```

and, you can likely imagine what would happen if the default behavior had a decorator

> If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?

Hopefully the above answers this question?

[09:15:00.0403] <yulia>
 * > with Type Annotations on the table

(you also mentioned bin ast, and other things here so ill try to answer everything... but i lost it) I believe this is an _very interesting_ companion to type annotations. In fact, I was thinking that it may be interesting to have matchers written via the interface keyword. This may allow us to share both runtime behavior (that, due to being able to throw, can have interesting implications for both safety and optimization) and static information. I don't see this as in opposition and have been chatting with the typescript folks. They don't hate it so far. These may work very well together in fact.

bin-ast doesn't have much support at the moment. I am not sure why this would be in opposition to metadata or reflection. Maybe you have an example i can consider.

> True static typing may not be on the table now, but designing overloads purely for pattern matching could put us in a poor position in the future

I rather strongly disagree. In fact i think the opposite. This has been described to me as one of the weaknesses of typescript -- that they have no impact at run time. What guards and typed objects were proposed to be were runtime checks that can also be used as static information.

> Would each overload be an independent function reference, or are they somehow nested inside the function?

This is open for discussion. A reasonable implementation would to have a match inside of an intermediate function. Effectively pointing to a table that then routes you to the correct functionality.

> How would this apply to F.p.bind? Do we match during .bind or when the final function is invoked?

yes, if we take the table approach, then

```js
function foo(x when a) { /*...*/} 

function foo( x when b) { /*...*/}

function foo( x) { /*...*/ }


// under the hood, so to speak

function foo (x) {
  match(x) {
    when a: _internal_shapedFoo_1(x)
    when b: _internal_shapedFoo_2(x)
    default : _internal_Foo_default(x)
  }
}
```

(but really, the interesting thing is when you _dont_ have the default case.)

From the engine perspective, if we see that everything is shaped, we might be able to remove the intermediary function. This can possibly result in more assumptions being made (similar to what was being attempted by the guard proposal). This shares a lot of features with guards. 

> How would this apply to Proxy?

what precisely do you mean? can you give an example? Proxies is kind of a big region for me so I am not immediately grasping the issue you are pointing out.

> How would this affect new F() and the resulting new.target, prototypes, etc.

One way to answer this might be: What happens when you have a match statement in the constructor of F? another way to answer it (though I am still absorbing it) is your comment here: https://github.com/tc39/proposal-pattern-matching/issues/281#issuecomment-1199706022 for the new Book example.

> If a function decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?

An decorator would apply to its direct shaped function. So, for example:

```js
class HttpRoutes {

  @route("GET", "/products")
  get(req when { url: "/products" }) { ...}

  @route("GET", "/products/{id}")
  get(req when { url: /\/products\/\d+/ }) { ... }

  // internal engine functions
  @route("GET", "/products")
  _internal_shapedget_1(req when { url: "/products" }) { ...}

    @route("GET", "/products/{id}")
  _internal_shapedget_2(req when { url: /\/products\/\d+/ }) { ... }

  implementation_get(req) { 
    match(req) {
       when { url: "/products" }: // ...
       when { url: /\/products\/\d+/ }: // ... 
       default : // throw no such function
    }
  }
}

```

and, you can likely imagine what would happen if the default behavior had a decorator

> If a parameter decorator is applied to only one overload, what function does it get? If they're all the same function, how would we differentiate overloads in the decorator?

Hopefully the above answers this question?

