2024-09-03
[08:27:15.0126] <TabAtkins>
@room augh, I ended up with too much on my plate at the tail end of last week and am not ready for this meeting. I'm so sorry but gotta cancel, do y'all have availability later in the week? Or else next Monday?

[08:33:09.0312] <ljharb>
i can do the same time on friday

[08:42:53.0546] <Jack Works>
I also want to sleep early tonight ðŸ‘€

[08:48:15.0727] <rbuckton>
I can also do Friday at the same time, or next Monday

[08:48:40.0951] <Jack Works>
if it can be 1 hr earlier that will be great 

[08:50:45.0035] <ljharb>
i can't do any earlier unfortunately, i have to drop my kids off at school

[08:50:59.0337] <ljharb>
why don't i move it to friday, and we can reschedule further if needed


2024-09-06
[08:37:02.0656] <TabAtkins>
Sorry, I clicked Yes on the invite but didn't actually ping the room - yeah, this morning is great.

[09:05:44.0699] <TabAtkins>
@room just in case anyone else is joining, meeting is starting now

[09:06:00.0475] <TabAtkins>
@room just in case anyone else is joing, meeting is starting now

[09:43:35.0901] <TabAtkins>
meeting notes: https://github.com/tc39/proposal-pattern-matching/issues/332

[10:01:34.0253] <rbuckton>
Regarding the contextual keyword issue, it's not that having both prefix and infix contextual keywords is impossible, but that they introduce complexity that must be managed, and that complexity could easily grow out of control. When new syntax would introduce an ambiguous parse, we must always choose an approach that favors backwards compatibility. 

Given the example:
```
for (using is of and [not/a+"/g]; b++; [/"/g, 5])
```

We would have to break down the grammar to align with ECMAScript syntax roll-out:
- `for..of` shipped before `using`
- `using` will probably ship before `is`

Prior to pattern matching, the above parse would treat `is` as an identifier and `and [not/a+"/g]; b++; [/"/g, 5]` as an expression. Therefore we would need to maintain that behavior. As waldemar points out, this is a complex issue that will resurface each time a proposal seeks to add a new feature. Unfortunately, I don't think just choosing `~=` is a solution to the overarching problem. There are a limited set of punctuators, and combining punctuators in more and more obscure ways will do little to convey their meaning, whereas contextual keywords give us a far wider space for future proposals to leverage. IMO, finding solutions to make it easier to address the prefix/infix complexity, such as automated validators, may be worth pursuing.

[10:26:25.0333] <TabAtkins>
I'm still giggling over the fact that `for(of of of)` is valid today.

[10:26:43.0987] <TabAtkins>
```js
var of = [1,2,3];
for(of of of) console.log(of);
```

[12:19:51.0187] <ljharb>
personally i think we won't be adding so many keywords of either type that the complexity is a problem

