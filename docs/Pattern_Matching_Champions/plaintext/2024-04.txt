2024-04-01
[03:05:15.0921] <mpcsh>
hey folks, are we meeting today?

[07:54:23.0997] <ljharb>
I’m not sure we need to - separately I’m not feeling well, so I’ll be late if we are.

[08:25:03.0883] <rbuckton>
I am also not feeling well, so will not be in attendance unless there is a need.


2024-04-04
[08:04:33.0960] <rbuckton>
I'm confused by this example in the README.md, I don't think the 2nd parameter matches the proposed spec text:

```js
RegExp.prototype[Symbol.customMatcher] = function(subject, {matchType}) {
    const result = this.exec(subject);
    if(matchType == "boolean") return result;
    if(matchType == "extractor") return [result, ...result.slice(1)];
}
```
Isn't the 2nd argument just a string, and aren't the possible values `"boolean"` and `"list"`?

[08:12:02.0289] <rbuckton>
Also, I'm not sure I agree with the result for a RegExp custom matcher as suggested here: https://github.com/tc39/proposal-pattern-matching?tab=readme-ov-file#regex-extractor-patterns

To match against a RegExp, you may want to match against either named capture groups, positional capture groups, or the whole match. I think the matcher could just be:

```js
RegExp.prototype[Symbol.customMatcher] = function(subject, hint) {
    const result = this.exec(subject);
    if (hint === "boolean") return !!result;
    if (hint === "list") return result && [result];
}
```
And the pattern would look like:

```
when /(?<left>\d+) \+ (?<right>\d+)/({groups:{let left, let right}}): ...;
when /(\d+) \* (\d+)/([void, let left, let right]): ...;
when /\d+/([let digits]): ...;
```


[08:15:22.0406] <rbuckton>
The extra outputs from `...result.slice(1)` seem like unnecessary overhead for the sake of convenience as I doubt engines will optimize them away if unused.

[13:47:00.0985] <TabAtkins>
I was kinda wanting to be able to do the second and third cases as just `(void, let left, let right)` and `(let digits)` rather than requiring an array pattern as well, but I suppose that's not a big deal, yeah.

