2023-07-06
[09:41:55.0969] <ljharb>
next week is plenary, but we could still have our meeting i think. i plan to be there

[11:07:00.0073] <TabAtkins>
Do we have meeting notes? If not, a summary of the discussion?

[13:56:50.0598] <ljharb>
i could type up a summary. tab, will you be able to be there monday?

[14:10:58.0466] <TabAtkins>
yes

[14:29:05.0148] <ljharb>
awesome, let's chat then, then


2023-07-07
[09:40:23.0017] <TabAtkins>
sounds good.

[09:41:09.0130] <TabAtkins>
If we're chunking `${}` for now, how do you reference variables to match against? Are we going to move the syntax around so binding patterns have some prefix and naked idents are resolved as variable references?

[09:46:36.0738] <TabAtkins>
(Assuming we have a solution for variable refs, I'm okay with dropping `${}` in favor of array extractors, fwiw.)

[09:48:26.0090] <TabAtkins>
And by "a solution" I think the only reasonable one is indeed that a bare ident is a variable ref rather than an irrefutable binding pattern. It should precisely the same syntax restrictions and resolution rules as array extractors does.

[09:49:22.0051] <TabAtkins>
That is, if `when foo(): ...` works, then `when foo:` also needs to work and find the same variable. (But do a value match instead of forcing an array-extractor match.)

[10:12:35.0534] <TabAtkins>
And I suppose `when foo` would still try to find a custom matcher on the value. Difference from `when foo()` is that it would accept any successful result, while `foo()` further matches the successful result against a `[]` pattern. Right?

[10:28:11.0287] <TabAtkins>
Does this end up removing the `with <matcher>` suffix entirely? We still have it on regex matchers right now, is that okay? (If we remove it, we have to rely entirely on named capture groups to pull things out of a regex matcher.)

[14:34:01.0908] <ljharb>
> <@tabatkins:matrix.org> If we're chunking `${}` for now, how do you reference variables to match against? Are we going to move the syntax around so binding patterns have some prefix and naked idents are resolved as variable references?

yes, that's the current thinking


2023-07-10
[02:33:14.0889] <mpcsh>
hey friends, I'm out for this meeting - office and internet are both down from my move. see ya next time ü´°

[08:00:36.0082] <ljharb>
running a few minutes late; I‚Äôll be there soon

[08:03:31.0914] <TabAtkins>
I'm trying my best to join, having a time of it

[08:07:56.0695] <rbuckton>
https://gist.github.com/rbuckton/b6a98fd423595b1c6b4162c4f039b6b1

[09:54:19.0479] <TabAtkins>
Okay I think this is a complete summary of the group's current thoughts? https://gist.github.com/tabatkins/51f35f88d7eea61d9ecbe3e82da817a5

[11:23:14.0503] <mpcsh>
I like the introduction of `let`/`var`/`const` for identifier patterns. nice thinking whoever came up with that üëçÔ∏è

[14:03:12.0461] <TabAtkins>
It's been floating in the gestalt for a while, it's *possible* yulia | Back in October named it first but I'm not sure.


2023-07-17
[13:48:56.0375] <rbuckton>
I've been suggesting `let` (`const`/`var`) patterns since I first brought up extractors over a year ago.


2023-07-20
[03:11:07.0769] <Jack Works>
wow, it has already one year passed since yulia draft the issue

[03:11:13.0058] <Jack Works>
time flies so fast

