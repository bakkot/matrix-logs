2023-09-01
[20:16:01.0795] <Jack Works>
> <@rbuckton:matrix.org> How does that break that expectation?

tenary does not have a "block" to be scoped

[20:24:23.0006] <rbuckton>
The block would be the block containing the ExpressionStatement, not the expression itself. 

[20:26:35.0392] <rbuckton>
Block scopes are always at the statement level, though `match`/`when` may end up being the lone exception

[05:23:16.0539] <Jack Works>
> <@rbuckton:matrix.org> The block would be the block containing the ExpressionStatement, not the expression itself. 

I think that's even worse

[07:25:36.0700] <rbuckton>
That's the behavior that C# has, so there is precedent

[07:26:22.0297] <rbuckton>
And it's consistent with normal `let`/`const`

[11:41:47.0062] <TabAtkins>
Yeah, I'm not sure I see the confusion, the scopes are exactly the same as normal. The fact that the binding is established in an expression rather than a statement doesn't change anything, in my mind.

[12:05:01.0161] <rbuckton>
We just need to clarify corner cases like parenthesized statement heads in `if`, `switch`, `with`, and `while`. And maybe the expression in `for..of` and `for..in`.

[12:45:03.0991] <TabAtkins>
Yeah, statement heads are the corner case - they're halfway between the outer scope and their inner block scope. But they're already complex in various ways, so that's nothing new.

[15:23:14.0357] <ljharb>
i think statement heads making bindings make sense intuitively. i do not think expressions making bindings make sense.


2023-09-02
[18:03:42.0221] <rbuckton>
> <@ljharb:matrix.org> i think statement heads making bindings make sense intuitively. i do not think expressions making bindings make sense.

I don't think expression-local block scoping makes sense, but I disagree with respect to bindings. Expressions introducing bindings is quite common in many languages, so I don't think it would be difficult to adopt or learn. 

[18:30:15.0128] <ljharb>
other languages aren’t the rubric; either now or eventually, most JS devs have or will have never used another language

[18:49:48.0034] <rbuckton>
I don't find that argument compelling. It assumes JS devs cannot adapt and the language itself cannot evolve. Besides, even JS can introduce bindings in expressions and has been able to do so since it was created. It's just that most often it was unintentional. 

[18:53:57.0630] <rbuckton>
And I'm not arguing that *because X has it, we should have it". I'm arguing that it's a compelling feature with reasonable semantics in many languages that JS also shares other syntax with. It's not a huge leap to adopt the capability, and not difficult to learn or understand. I'm also arguing that it's a feature I've seen requested from several sources, one of which is a noted language designer. It's also a feature that is regularly present in FP style languages and has a long history, and a large part of the JS community uses it for functional programming. 

[18:54:11.0297] <rbuckton>
* And I'm not arguing that "because X has it, we should have it". I'm arguing that it's a compelling feature with reasonable semantics in many languages that JS also shares other syntax with. It's not a huge leap to adopt the capability, and not difficult to learn or understand. I'm also arguing that it's a feature I've seen requested from several sources, one of which is a noted language designer. It's also a feature that is regularly present in FP style languages and has a long history, and a large part of the JS community uses it for functional programming.


2023-09-03
[21:10:04.0372] <ljharb>
i'm not saying that "other languages do it" is an anti-argument. i'm saying it's a very very weak argument.

[21:10:41.0110] <ljharb>
and yes, i do feel that an expression producing a binding would be a wildly surprising, brand new capability in the language, and i can't conceive of what would convince me that that capability is anything short of catastrophic

[21:11:18.0789] <ljharb>
if you're going to say "noted language designer" i'm going to ask what, besides TS, applies - because TS as a language has so many flaws that i don't think that's the "pro" you think it is.

[21:12:14.0757] <ljharb>
eg, does pascal have the ability to produce bindings in expressions? what else does?


2023-09-04
[01:27:24.0336] <mpcsh>
hey y'all, as of this coming week I have reached the end of my hiatus; I'm offline tomorrow (today) for labor day, but expect me to be back going forward!

[01:27:39.0666] <mpcsh>
 * hey y'all, as of this coming week I have reached the end of my hiatus; I'm offline tomorrow (today) for labor day / family visiting, but expect me to be back going forward!

[08:07:35.0573] <ljharb>
thinking about it more, i think we still need the `if` clause in a match expression


2023-09-05
[04:39:17.0965] <Jack Works>
I started to edit spec and found there is something we need to figure out before we continue

[04:40:06.0621] <Jack Works>
the current spec create a new DeclarativeEnvironment for each binding (https://tc39.es/proposal-pattern-matching/#sec-add-match-binding)

[04:41:19.0914] <Jack Works>
to support `for` head, https://tc39.es/ecma262/#sec-createperiterationenvironment, we need to pre-determinate what binding it contains

[04:42:33.0805] <Jack Works>
this brings the question: how is the `let` `const` binding work inside a pattern.

[04:43:37.0502] <Jack Works>
for example, is `[1, let a] or [2, let a]` valid? or is it an early error?

[04:49:03.0500] <Jack Works>
is every level of MatchPattern creates a DeclarationEnvironment?

```
{ // level 1 DeclEnv
    let x,
    y: [ // level 2 DeclEnv
        let x, x
    ]
} // matches { x: 1, y: [2, 3] } and creates binding of x that is value ...?
```

[04:50:51.0644] <Jack Works>
or only the top level MatchPattern creates a DeclarationEnvironment (in this case the previous example gives an early error)?

[04:53:17.0404] <Jack Works>
what's the syntax when it is used in `for...of`?

`for (const x is pattern of expr)`? `for (match pattern of expr)`?

[07:01:07.0907] <rbuckton>
> <@ljharb:matrix.org> eg, does pascal have the ability to produce bindings in expressions? what else does?

Pascal does not, to my knowledge, but there are many languages that support bindings in expressions: C#, F#, LCF, Haskell (LCF derivative), Scheme (LCF derivative), ML (LCF derivative), Python, Clojure, Racket (Scheme derivative), OCaml (ML derivative), Perl, Raku (Perl derivative) PHP, M (aka PowerQuery), and that is not an exhaustive list.

[07:01:59.0089] <rbuckton>
> <@ljharb:matrix.org> and yes, i do feel that an expression producing a binding would be a wildly surprising, brand new capability in the language, and i can't conceive of what would convince me that that capability is anything short of catastrophic

I have a very difficult time believing that something like this would be catastrophic. 

[07:06:22.0659] <rbuckton>
> <@jackworks:matrix.org> for example, is `[1, let a] or [2, let a]` valid? or is it an early error?

In earlier discussions, a pattern could allow multiple declarations of the same binding, such as in different branches of a disjunction. Variables that are not initialized would remain in TDZ. We did not fully describe what would happen in the case where the same declaration was initialized twice. For `let` we could either error or possibly just reassign. For `const` we would probably error (unless maybe we tried to initialize it to the same value).

[07:09:27.0359] <rbuckton>
> <@jackworks:matrix.org> for example, is `[1, let a] or [2, let a]` valid? or is it an early error?

Personally, I would like this to not be an error for the sake of developer convenience, but could see an argument for it not being so. Simple disjunctions like this could be rewritten to `[1 or 2, let a]`, but more complex disjunctions that don't share much of the same shape couldn't be simplified.

[07:12:46.0864] <rbuckton>
> <@jackworks:matrix.org> is every level of MatchPattern creates a DeclarationEnvironment?
> 
> ```
> { // level 1 DeclEnv
>     let x,
>     y: [ // level 2 DeclEnv
>         let x, x
>     ]
> } // matches { x: 1, y: [2, 3] } and creates binding of x that is value ...?
> ```

Why would you create new declarative environments? My assumption was that you would descend into expressions and patterns to look for `let` and `const` bindings in `BoundNames`, and only need to create a single declarative environment for each `when` clause of `match`, or use the current declarative environment for `is`.

[08:01:27.0941] <ljharb>
> <@rbuckton:matrix.org> I have a very difficult time believing that something like this would be catastrophic. 

we can certainly see what the committee thinks, but i’m surprised that you have such different expectations tbh

[08:04:42.0951] <Jack Works>
> <@rbuckton:matrix.org> Why would you create new declarative environments? My assumption was that you would descend into expressions and patterns to look for `let` and `const` bindings in `BoundNames`, and only need to create a single declarative environment for each `when` clause of `match`, or use the current declarative environment for `is`.

we need to decide if `is` can leak variable bindings. it will be a breaking change adding it in the future 

[08:41:56.0115] <rbuckton>
> <@jackworks:matrix.org> we need to decide if `is` can leak variable bindings. it will be a breaking change adding it in the future

My intent with `is` is that the bindings are declared in the nearest block scope, otherwise we would not be able to emulate `if let`/`while let` with `is`, which is one of the key capabilities:

```
if (x is Option.Some(let value)) {
  value;
}

const y = x is Option.Some(let value) ? value + 1 : 0;
```
If the `let` is only visible within the pattern itself, it makes it useless as a destructuring mechanism.

[09:40:33.0205] <ljharb>
i think there's specific places it makes sense. an if conditional making bindings available in the block is good. a ternary conditional making bindings available in the positive branch is good too

[09:40:58.0143] <ljharb>
but `;x is Option.some(let value);` making bindings available outside the pattern seems very very bad to me.

[09:41:06.0593] <rbuckton>
You can't have one without the other without introducing some new even more complex binding mechanism.

[09:41:14.0208] <ljharb>
i don't think that's true

[09:41:31.0362] <ljharb>
certainly it will make the spec trickier to write, but that's not important

[09:41:59.0714] <rbuckton>
Bad maybe, but it will rarely be used in that way as its not the most convenient mechanism.

[09:42:03.0341] <ljharb>
 * certainly it will make the spec trickier to write, but that's not important (in terms of priority of constituencies)

[09:42:28.0854] <ljharb>
i think it would also be bad if the ternary made the bindings available in the negative branch, to be clear

[09:42:37.0592] <rbuckton>
I'd very much like to be able to have this capability.

[09:42:44.0548] <ljharb>
i'd prefer bindings never be visible outside the pattern, over leaking bindings willy nilly

[09:42:56.0925] <rbuckton>
The bindings in the negative branch would be uninitialized and thus in TDZ

[09:43:12.0899] <ljharb>
not if they use `var`

[09:43:42.0892] <rbuckton>
Then don't support `var` for this feature. I think that's far more reasonable.

[09:47:55.0337] <rbuckton>
And restricting this to only the true branch would break negation for cases like early exit:

```
if (!(x is Option.some(let value)) {
  return; // nothing to do, exit early
}
value; // use 'value'
```

[09:48:34.0882] <rbuckton>
(or possibly even `if (x is not Option.some(let value)) { ... }` should we decide to make that work as well.

[09:48:39.0723] <rbuckton>
 * (or possibly even `if (x is not Option.some(let value)) { ... }` should we decide to make that work as well)

[09:55:33.0436] <ljharb>
that only affects ternaries, not if's

[09:55:38.0761] <ljharb>
oh

[09:55:42.0727] <ljharb>
well yeah, don't do that

[09:56:00.0491] <ljharb>
you'd do `if (x not is Option.Some(let value)) { }`

[09:56:31.0046] <rbuckton>
What is `not is`? That's not proposed and doesn't read well, IMO.

[09:56:47.0975] <ljharb>
it's definitely supposed to be in the PR

[09:56:53.0467] <rbuckton>
Ternary and `if` shouldn't be treated differently.

[09:57:03.0280] <ljharb>
in this case they're the same.

[09:57:14.0471] <rbuckton>
`is not` I would expect, since `not` is part of the pattern grammar. `not is` is not a part of the proposal, IIRC.

[09:57:20.0992] <ljharb>
oh ok, fair

[09:57:23.0399] <ljharb>
`is not`, sure

[09:57:32.0117] <ljharb>
either way you'd still only get the bindings in the positive branch

[09:57:50.0603] <rbuckton>
I think that's far too confusing.

[09:58:10.0223] <ljharb>
i think anything else would be confusing.

[09:59:02.0512] <ljharb>
fwiw the committee already discussed this with https://github.com/tc39/proposal-Declarations-in-Conditionals and i recall the majority thinking that it should only be visible in the `if`, but i might be remembering wrong

[10:01:20.0418] <rbuckton>
Short-circuiting to avoid complex middle branches is a common practice, and you're proposing a mechanism that would force a specific style of coding. I'd like to be able to do this:

```
return x is not Option.Some(let value) ? "no-value" :
  value === 1 ? "single-value" :
  "multiple-values";
```

vs this:

```
return x is Option.Some(let value) ? 
    value === 1 ? "single-value" :
    "multiple-values" :
  "no-value";
```

As the latter requires additional nesting that hampers readability, especially in more complex cases than is shown. Yes, `match` is an option, but this could be existing code that you're refactoring to use patterns.

[10:01:55.0497] <ljharb>
we often have mechanisms that somewhat force specific styles of coding.

[10:02:09.0161] <ljharb>
and nested ternaries are pretty widely considered horrifically unreadable.

[10:02:12.0982] <rbuckton>
I would very much like for this not to be one of them.

[10:02:30.0084] <ljharb>
do you have any compelling examples that don't use the comma operator or nested ternaries?

[10:02:34.0275] <rbuckton>
Ternaries nested in the second example, yes. ternaries in the first example are far more readable.

[10:02:45.0849] <ljharb>
that's subjective, i don't find either of those readable.

[10:02:53.0922] <ljharb>
not everything needs to be, or should be, a single expression

[10:02:57.0280] <ljharb>
 * not everything needs to be, or should be, a single expression/line

[10:03:49.0316] <rbuckton>
Given that it is subjective, mandating a coding style that fits your perspective essentially invalidates everyone else's style. That's what linters are for.

[10:04:08.0789] <rbuckton>
 * Given that it is subjective, mandating a coding style that fits a single perspective essentially invalidates everyone else's style. That's what linters are for.

[10:05:20.0179] <ljharb>
it's not to mandate a coding style

[10:05:27.0876] <ljharb>
it's to ensure explicit and clear variable scopes

[10:05:40.0093] <ljharb>
if some coding styles don't work with that, that's fine, they just don't work with that

[10:05:47.0335] <rbuckton>
There are plenty of examples that wouldn't use ternaries. I showed one earlier:

```
function getTypeOfPropertyOrIndexSignatureOfType(type: Type, name: __String): Type | undefined {
    return getTypeOfPropertyOfType(type, name) ||
        (getApplicableIndexInfoForName(type, name) is { type: const propType } &&
            addOptionality(propType, /*isProperty*/ true, /*isOptional*/ true));
}
```




[10:06:06.0632] <ljharb>
and personally i find that very unreadable and would not try to do that in a single return statement

[10:06:33.0165] <rbuckton>
This proposal still maintains explicit variable scopes, and it is the same scoping mechanism we already have: block scoping. Introducing a _new_ scoping mechanism would be confusing.

[10:06:36.0977] <ljharb>
but please remember that both the vscode and typescript codebases are not in any way common or idiomatic for the JS ecosystem, so style arguments coming from them aren't very compelling to me.

[10:07:13.0621] <rbuckton>
This is a style preference that many projects have made, especially FP-style projects.

[10:07:19.0087] <ljharb>
an expression can't produce bindings, and adding that capability is something that would need to be its own proposal. trying to do that here would tank both efforts.

[10:07:52.0615] <ljharb>
i realize that we wouldn't necessarily be able to add it later to `is`, which makes it tricky, but that doesn't mean we can add it now either

[10:08:31.0430] <rbuckton>
I don't believe that it would, and I think this is the correct proposal to discuss this.

[10:09:23.0158] <ljharb>
i think you are severely underestimating the reaction to this aspect of the proposal.

[10:09:44.0181] <rbuckton>
I'd be happier if we _also_ had a specific expression form similar to `let..in`, which is more explicitly tailored to that case, but that wouldn't mean that `let` patterns in `is` aren't valid.

[10:09:49.0189] <ljharb>
i can tell you if i weren't a champion of pattern matching i'd die on the hill of not allowing it. as it is, i won't block on that but i would bet money others will.

[10:10:20.0304] <ljharb>
it's fine for declaration patterns to work in `is`, so they can be used later in the pattern. the question here is how much *beyond* the pattern should they be usable

[10:10:47.0224] <rbuckton>
Having been down the road of "what other statements could be made into expressions" discussion back when I first proposed `throw` expressions, I'm not sure the sentiment is that much against it.

[10:10:59.0930] <ljharb>
 * it's fine for declaration patterns to work in `is`, so they can be used later in the pattern. the question here is how much _beyond_ the pattern should they be usable (for when clauses, it's available in the RHS)

[10:11:12.0333] <ljharb>
you have a very different takeaway than i do from that discussion

[10:11:12.0686] <rbuckton>
 * Having been down the road of the "what other statements could be made into expressions" discussion back when I first proposed `throw` expressions, I'm not sure the sentiment is that much against it.

[10:11:28.0229] <ljharb>
my takeaway was that throw expressions were basically the only thing consensus would even come close to tolerating

[10:11:36.0593] <ljharb>
 * my takeaway was that throw expressions were basically the only statement-as-expression that consensus would even come close to tolerating

[10:12:25.0650] <rbuckton>
I pushed back against most statements-as-expressions at the time. The only ones I thought that were possibly worth pursuing aside from `throw` were `debugger` and `let`/`const`.

[10:15:31.0170] <ljharb>
debugger seems doable, but i'm convinced let/const isn't for the same reasons as here

[10:20:25.0419] <rbuckton>
I'm not necessarily opposed to restricting the scope of `let` patterns, I just fine that there are too many basic cases that will not work or be confusing if we enforce a specific scope. Negation/short-circuiting/early return are the most obvious examples. Introducing a `let` whose scope isn't block-scoped is another. However, I find `let` patterns to be the _best_ way out of the "what is a reference vs. what is a binding" problem from the original proposal, and that Rust also has.

[10:20:33.0378] <rbuckton>
 * I'm not necessarily opposed to restricting the scope of `let` patterns, I just find that there are too many basic cases that will not work or be confusing if we enforce a specific scope. Negation/short-circuiting/early return are the most obvious examples. Introducing a `let` whose scope isn't block-scoped is another. However, I find `let` patterns to be the _best_ way out of the "what is a reference vs. what is a binding" problem from the original proposal, and that Rust also has.

[10:35:40.0247] <ljharb>
i agree with that part

[10:36:12.0375] <ljharb>
but we can satisfy that by just always restricting bindings to the pattern, or to the RHS of the containing when clause.

but, i think we can do better than that - as long as we don't open the floodgates by just naively expanding it to the containing block

[10:37:55.0486] <Jack Works>
> <@rbuckton:matrix.org> And restricting this to only the true branch would break negation for cases like early exit:
> 
> ```
> if (!(x is Option.some(let value)) {
>   return; // nothing to do, exit early
> }
> value; // use 'value'
> ```

looks like we have very different mental morals on this. I won't expect any binding created in the if header is available outside of the if statement 

[10:38:08.0075] <Jack Works>
* In reply to @rbuckton:matrix.org
And restricting this to only the true branch would break negation for cases like early exit:

if (!(x is Option.some(let value)) {
  return; // nothing to do, exit early
}
value; // use 'value'


looks like we have very different mental modal on this. I won't expect any binding created in the if header is available outside of the if statement

[10:38:25.0526] <Jack Works>
* looks like we have very different mental modal on this. I won't expect any binding created in the if header is available outside of the if statement


