2023-09-01
[20:16:01.0795] <Jack Works>
> <@rbuckton:matrix.org> How does that break that expectation?

tenary does not have a "block" to be scoped

[20:24:23.0006] <rbuckton>
The block would be the block containing the ExpressionStatement, not the expression itself. 

[20:26:35.0392] <rbuckton>
Block scopes are always at the statement level, though `match`/`when` may end up being the lone exception

[05:23:16.0539] <Jack Works>
> <@rbuckton:matrix.org> The block would be the block containing the ExpressionStatement, not the expression itself. 

I think that's even worse

[07:25:36.0700] <rbuckton>
That's the behavior that C# has, so there is precedent

[07:26:22.0297] <rbuckton>
And it's consistent with normal `let`/`const`

[11:41:47.0062] <TabAtkins>
Yeah, I'm not sure I see the confusion, the scopes are exactly the same as normal. The fact that the binding is established in an expression rather than a statement doesn't change anything, in my mind.

[12:05:01.0161] <rbuckton>
We just need to clarify corner cases like parenthesized statement heads in `if`, `switch`, `with`, and `while`. And maybe the expression in `for..of` and `for..in`.

[12:45:03.0991] <TabAtkins>
Yeah, statement heads are the corner case - they're halfway between the outer scope and their inner block scope. But they're already complex in various ways, so that's nothing new.

[15:23:14.0357] <ljharb>
i think statement heads making bindings make sense intuitively. i do not think expressions making bindings make sense.


2023-09-02
[18:03:42.0221] <rbuckton>
> <@ljharb:matrix.org> i think statement heads making bindings make sense intuitively. i do not think expressions making bindings make sense.

I don't think expression-local block scoping makes sense, but I disagree with respect to bindings. Expressions introducing bindings is quite common in many languages, so I don't think it would be difficult to adopt or learn. 

[18:30:15.0128] <ljharb>
other languages aren’t the rubric; either now or eventually, most JS devs have or will have never used another language

[18:49:48.0034] <rbuckton>
I don't find that argument compelling. It assumes JS devs cannot adapt and the language itself cannot evolve. Besides, even JS can introduce bindings in expressions and has been able to do so since it was created. It's just that most often it was unintentional. 

[18:53:57.0630] <rbuckton>
And I'm not arguing that *because X has it, we should have it". I'm arguing that it's a compelling feature with reasonable semantics in many languages that JS also shares other syntax with. It's not a huge leap to adopt the capability, and not difficult to learn or understand. I'm also arguing that it's a feature I've seen requested from several sources, one of which is a noted language designer. It's also a feature that is regularly present in FP style languages and has a long history, and a large part of the JS community uses it for functional programming. 

[18:54:11.0297] <rbuckton>
* And I'm not arguing that "because X has it, we should have it". I'm arguing that it's a compelling feature with reasonable semantics in many languages that JS also shares other syntax with. It's not a huge leap to adopt the capability, and not difficult to learn or understand. I'm also arguing that it's a feature I've seen requested from several sources, one of which is a noted language designer. It's also a feature that is regularly present in FP style languages and has a long history, and a large part of the JS community uses it for functional programming.


2023-09-03
[21:10:04.0372] <ljharb>
i'm not saying that "other languages do it" is an anti-argument. i'm saying it's a very very weak argument.

[21:10:41.0110] <ljharb>
and yes, i do feel that an expression producing a binding would be a wildly surprising, brand new capability in the language, and i can't conceive of what would convince me that that capability is anything short of catastrophic

[21:11:18.0789] <ljharb>
if you're going to say "noted language designer" i'm going to ask what, besides TS, applies - because TS as a language has so many flaws that i don't think that's the "pro" you think it is.

[21:12:14.0757] <ljharb>
eg, does pascal have the ability to produce bindings in expressions? what else does?


2023-09-04
[01:27:24.0336] <mpcsh>
hey y'all, as of this coming week I have reached the end of my hiatus; I'm offline tomorrow (today) for labor day, but expect me to be back going forward!

[01:27:39.0666] <mpcsh>
 * hey y'all, as of this coming week I have reached the end of my hiatus; I'm offline tomorrow (today) for labor day / family visiting, but expect me to be back going forward!

[08:07:35.0573] <ljharb>
thinking about it more, i think we still need the `if` clause in a match expression


2023-09-05
[04:39:17.0965] <Jack Works>
I started to edit spec and found there is something we need to figure out before we continue

[04:40:06.0621] <Jack Works>
the current spec create a new DeclarativeEnvironment for each binding (https://tc39.es/proposal-pattern-matching/#sec-add-match-binding)

[04:41:19.0914] <Jack Works>
to support `for` head, https://tc39.es/ecma262/#sec-createperiterationenvironment, we need to pre-determinate what binding it contains

[04:42:33.0805] <Jack Works>
this brings the question: how is the `let` `const` binding work inside a pattern.

[04:43:37.0502] <Jack Works>
for example, is `[1, let a] or [2, let a]` valid? or is it an early error?

[04:49:03.0500] <Jack Works>
is every level of MatchPattern creates a DeclarationEnvironment?

```
{ // level 1 DeclEnv
    let x,
    y: [ // level 2 DeclEnv
        let x, x
    ]
} // matches { x: 1, y: [2, 3] } and creates binding of x that is value ...?
```

[04:50:51.0644] <Jack Works>
or only the top level MatchPattern creates a DeclarationEnvironment (in this case the previous example gives an early error)?

[04:53:17.0404] <Jack Works>
what's the syntax when it is used in `for...of`?

`for (const x is pattern of expr)`? `for (match pattern of expr)`?

[07:01:07.0907] <rbuckton>
> <@ljharb:matrix.org> eg, does pascal have the ability to produce bindings in expressions? what else does?

Pascal does not, to my knowledge, but there are many languages that support bindings in expressions: C#, F#, LCF, Haskell (LCF derivative), Scheme (LCF derivative), ML (LCF derivative), Python, Clojure, Racket (Scheme derivative), OCaml (ML derivative), Perl, Raku (Perl derivative) PHP, M (aka PowerQuery), and that is not an exhaustive list.

[07:01:59.0089] <rbuckton>
> <@ljharb:matrix.org> and yes, i do feel that an expression producing a binding would be a wildly surprising, brand new capability in the language, and i can't conceive of what would convince me that that capability is anything short of catastrophic

I have a very difficult time believing that something like this would be catastrophic. 

[07:06:22.0659] <rbuckton>
> <@jackworks:matrix.org> for example, is `[1, let a] or [2, let a]` valid? or is it an early error?

In earlier discussions, a pattern could allow multiple declarations of the same binding, such as in different branches of a disjunction. Variables that are not initialized would remain in TDZ. We did not fully describe what would happen in the case where the same declaration was initialized twice. For `let` we could either error or possibly just reassign. For `const` we would probably error (unless maybe we tried to initialize it to the same value).

[07:09:27.0359] <rbuckton>
> <@jackworks:matrix.org> for example, is `[1, let a] or [2, let a]` valid? or is it an early error?

Personally, I would like this to not be an error for the sake of developer convenience, but could see an argument for it not being so. Simple disjunctions like this could be rewritten to `[1 or 2, let a]`, but more complex disjunctions that don't share much of the same shape couldn't be simplified.

[07:12:46.0864] <rbuckton>
> <@jackworks:matrix.org> is every level of MatchPattern creates a DeclarationEnvironment?
> 
> ```
> { // level 1 DeclEnv
>     let x,
>     y: [ // level 2 DeclEnv
>         let x, x
>     ]
> } // matches { x: 1, y: [2, 3] } and creates binding of x that is value ...?
> ```

Why would you create new declarative environments? My assumption was that you would descend into expressions and patterns to look for `let` and `const` bindings in `BoundNames`, and only need to create a single declarative environment for each `when` clause of `match`, or use the current declarative environment for `is`.

[08:01:27.0941] <ljharb>
> <@rbuckton:matrix.org> I have a very difficult time believing that something like this would be catastrophic. 

we can certainly see what the committee thinks, but i’m surprised that you have such different expectations tbh

[08:04:42.0951] <Jack Works>
> <@rbuckton:matrix.org> Why would you create new declarative environments? My assumption was that you would descend into expressions and patterns to look for `let` and `const` bindings in `BoundNames`, and only need to create a single declarative environment for each `when` clause of `match`, or use the current declarative environment for `is`.

we need to decide if `is` can leak variable bindings. it will be a breaking change adding it in the future 

[08:41:56.0115] <rbuckton>
> <@jackworks:matrix.org> we need to decide if `is` can leak variable bindings. it will be a breaking change adding it in the future

My intent with `is` is that the bindings are declared in the nearest block scope, otherwise we would not be able to emulate `if let`/`while let` with `is`, which is one of the key capabilities:

```
if (x is Option.Some(let value)) {
  value;
}

const y = x is Option.Some(let value) ? value + 1 : 0;
```
If the `let` is only visible within the pattern itself, it makes it useless as a destructuring mechanism.

[09:40:33.0205] <ljharb>
i think there's specific places it makes sense. an if conditional making bindings available in the block is good. a ternary conditional making bindings available in the positive branch is good too

[09:40:58.0143] <ljharb>
but `;x is Option.some(let value);` making bindings available outside the pattern seems very very bad to me.

[09:41:06.0593] <rbuckton>
You can't have one without the other without introducing some new even more complex binding mechanism.

[09:41:14.0208] <ljharb>
i don't think that's true

[09:41:31.0362] <ljharb>
certainly it will make the spec trickier to write, but that's not important

[09:41:59.0714] <rbuckton>
Bad maybe, but it will rarely be used in that way as its not the most convenient mechanism.

[09:42:03.0341] <ljharb>
 * certainly it will make the spec trickier to write, but that's not important (in terms of priority of constituencies)

[09:42:28.0854] <ljharb>
i think it would also be bad if the ternary made the bindings available in the negative branch, to be clear

[09:42:37.0592] <rbuckton>
I'd very much like to be able to have this capability.

[09:42:44.0548] <ljharb>
i'd prefer bindings never be visible outside the pattern, over leaking bindings willy nilly

[09:42:56.0925] <rbuckton>
The bindings in the negative branch would be uninitialized and thus in TDZ

[09:43:12.0899] <ljharb>
not if they use `var`

[09:43:42.0892] <rbuckton>
Then don't support `var` for this feature. I think that's far more reasonable.

[09:47:55.0337] <rbuckton>
And restricting this to only the true branch would break negation for cases like early exit:

```
if (!(x is Option.some(let value)) {
  return; // nothing to do, exit early
}
value; // use 'value'
```

[09:48:34.0882] <rbuckton>
(or possibly even `if (x is not Option.some(let value)) { ... }` should we decide to make that work as well.

[09:48:39.0723] <rbuckton>
 * (or possibly even `if (x is not Option.some(let value)) { ... }` should we decide to make that work as well)

[09:55:33.0436] <ljharb>
that only affects ternaries, not if's

[09:55:38.0761] <ljharb>
oh

[09:55:42.0727] <ljharb>
well yeah, don't do that

[09:56:00.0491] <ljharb>
you'd do `if (x not is Option.Some(let value)) { }`

[09:56:31.0046] <rbuckton>
What is `not is`? That's not proposed and doesn't read well, IMO.

[09:56:47.0975] <ljharb>
it's definitely supposed to be in the PR

[09:56:53.0467] <rbuckton>
Ternary and `if` shouldn't be treated differently.

[09:57:03.0280] <ljharb>
in this case they're the same.

[09:57:14.0471] <rbuckton>
`is not` I would expect, since `not` is part of the pattern grammar. `not is` is not a part of the proposal, IIRC.

[09:57:20.0992] <ljharb>
oh ok, fair

[09:57:23.0399] <ljharb>
`is not`, sure

[09:57:32.0117] <ljharb>
either way you'd still only get the bindings in the positive branch

[09:57:50.0603] <rbuckton>
I think that's far too confusing.

[09:58:10.0223] <ljharb>
i think anything else would be confusing.

[09:59:02.0512] <ljharb>
fwiw the committee already discussed this with https://github.com/tc39/proposal-Declarations-in-Conditionals and i recall the majority thinking that it should only be visible in the `if`, but i might be remembering wrong

[10:01:20.0418] <rbuckton>
Short-circuiting to avoid complex middle branches is a common practice, and you're proposing a mechanism that would force a specific style of coding. I'd like to be able to do this:

```
return x is not Option.Some(let value) ? "no-value" :
  value === 1 ? "single-value" :
  "multiple-values";
```

vs this:

```
return x is Option.Some(let value) ? 
    value === 1 ? "single-value" :
    "multiple-values" :
  "no-value";
```

As the latter requires additional nesting that hampers readability, especially in more complex cases than is shown. Yes, `match` is an option, but this could be existing code that you're refactoring to use patterns.

[10:01:55.0497] <ljharb>
we often have mechanisms that somewhat force specific styles of coding.

[10:02:09.0161] <ljharb>
and nested ternaries are pretty widely considered horrifically unreadable.

[10:02:12.0982] <rbuckton>
I would very much like for this not to be one of them.

[10:02:30.0084] <ljharb>
do you have any compelling examples that don't use the comma operator or nested ternaries?

[10:02:34.0275] <rbuckton>
Ternaries nested in the second example, yes. ternaries in the first example are far more readable.

[10:02:45.0849] <ljharb>
that's subjective, i don't find either of those readable.

[10:02:53.0922] <ljharb>
not everything needs to be, or should be, a single expression

[10:02:57.0280] <ljharb>
 * not everything needs to be, or should be, a single expression/line

[10:03:49.0316] <rbuckton>
Given that it is subjective, mandating a coding style that fits your perspective essentially invalidates everyone else's style. That's what linters are for.

[10:04:08.0789] <rbuckton>
 * Given that it is subjective, mandating a coding style that fits a single perspective essentially invalidates everyone else's style. That's what linters are for.

[10:05:20.0179] <ljharb>
it's not to mandate a coding style

[10:05:27.0876] <ljharb>
it's to ensure explicit and clear variable scopes

[10:05:40.0093] <ljharb>
if some coding styles don't work with that, that's fine, they just don't work with that

[10:05:47.0335] <rbuckton>
There are plenty of examples that wouldn't use ternaries. I showed one earlier:

```
function getTypeOfPropertyOrIndexSignatureOfType(type: Type, name: __String): Type | undefined {
    return getTypeOfPropertyOfType(type, name) ||
        (getApplicableIndexInfoForName(type, name) is { type: const propType } &&
            addOptionality(propType, /*isProperty*/ true, /*isOptional*/ true));
}
```




[10:06:06.0632] <ljharb>
and personally i find that very unreadable and would not try to do that in a single return statement

[10:06:33.0165] <rbuckton>
This proposal still maintains explicit variable scopes, and it is the same scoping mechanism we already have: block scoping. Introducing a _new_ scoping mechanism would be confusing.

[10:06:36.0977] <ljharb>
but please remember that both the vscode and typescript codebases are not in any way common or idiomatic for the JS ecosystem, so style arguments coming from them aren't very compelling to me.

[10:07:13.0621] <rbuckton>
This is a style preference that many projects have made, especially FP-style projects.

[10:07:19.0087] <ljharb>
an expression can't produce bindings, and adding that capability is something that would need to be its own proposal. trying to do that here would tank both efforts.

[10:07:52.0615] <ljharb>
i realize that we wouldn't necessarily be able to add it later to `is`, which makes it tricky, but that doesn't mean we can add it now either

[10:08:31.0430] <rbuckton>
I don't believe that it would, and I think this is the correct proposal to discuss this.

[10:09:23.0158] <ljharb>
i think you are severely underestimating the reaction to this aspect of the proposal.

[10:09:44.0181] <rbuckton>
I'd be happier if we _also_ had a specific expression form similar to `let..in`, which is more explicitly tailored to that case, but that wouldn't mean that `let` patterns in `is` aren't valid.

[10:09:49.0189] <ljharb>
i can tell you if i weren't a champion of pattern matching i'd die on the hill of not allowing it. as it is, i won't block on that but i would bet money others will.

[10:10:20.0304] <ljharb>
it's fine for declaration patterns to work in `is`, so they can be used later in the pattern. the question here is how much *beyond* the pattern should they be usable

[10:10:47.0224] <rbuckton>
Having been down the road of "what other statements could be made into expressions" discussion back when I first proposed `throw` expressions, I'm not sure the sentiment is that much against it.

[10:10:59.0930] <ljharb>
 * it's fine for declaration patterns to work in `is`, so they can be used later in the pattern. the question here is how much _beyond_ the pattern should they be usable (for when clauses, it's available in the RHS)

[10:11:12.0333] <ljharb>
you have a very different takeaway than i do from that discussion

[10:11:12.0686] <rbuckton>
 * Having been down the road of the "what other statements could be made into expressions" discussion back when I first proposed `throw` expressions, I'm not sure the sentiment is that much against it.

[10:11:28.0229] <ljharb>
my takeaway was that throw expressions were basically the only thing consensus would even come close to tolerating

[10:11:36.0593] <ljharb>
 * my takeaway was that throw expressions were basically the only statement-as-expression that consensus would even come close to tolerating

[10:12:25.0650] <rbuckton>
I pushed back against most statements-as-expressions at the time. The only ones I thought that were possibly worth pursuing aside from `throw` were `debugger` and `let`/`const`.

[10:15:31.0170] <ljharb>
debugger seems doable, but i'm convinced let/const isn't for the same reasons as here

[10:20:25.0419] <rbuckton>
I'm not necessarily opposed to restricting the scope of `let` patterns, I just fine that there are too many basic cases that will not work or be confusing if we enforce a specific scope. Negation/short-circuiting/early return are the most obvious examples. Introducing a `let` whose scope isn't block-scoped is another. However, I find `let` patterns to be the _best_ way out of the "what is a reference vs. what is a binding" problem from the original proposal, and that Rust also has.

[10:20:33.0378] <rbuckton>
 * I'm not necessarily opposed to restricting the scope of `let` patterns, I just find that there are too many basic cases that will not work or be confusing if we enforce a specific scope. Negation/short-circuiting/early return are the most obvious examples. Introducing a `let` whose scope isn't block-scoped is another. However, I find `let` patterns to be the _best_ way out of the "what is a reference vs. what is a binding" problem from the original proposal, and that Rust also has.

[10:35:40.0247] <ljharb>
i agree with that part

[10:36:12.0375] <ljharb>
but we can satisfy that by just always restricting bindings to the pattern, or to the RHS of the containing when clause.

but, i think we can do better than that - as long as we don't open the floodgates by just naively expanding it to the containing block

[10:37:55.0486] <Jack Works>
> <@rbuckton:matrix.org> And restricting this to only the true branch would break negation for cases like early exit:
> 
> ```
> if (!(x is Option.some(let value)) {
>   return; // nothing to do, exit early
> }
> value; // use 'value'
> ```

looks like we have very different mental morals on this. I won't expect any binding created in the if header is available outside of the if statement 

[10:38:08.0075] <Jack Works>
* In reply to @rbuckton:matrix.org
And restricting this to only the true branch would break negation for cases like early exit:

if (!(x is Option.some(let value)) {
  return; // nothing to do, exit early
}
value; // use 'value'


looks like we have very different mental modal on this. I won't expect any binding created in the if header is available outside of the if statement

[10:38:25.0526] <Jack Works>
* looks like we have very different mental modal on this. I won't expect any binding created in the if header is available outside of the if statement


[10:42:36.0753] <rbuckton>
How would you propose such code be written then?

[10:51:59.0531] <rbuckton>
If anything, that convinces me that we *shouldn't* introduce a new block scope in an `if` head.

[11:14:18.0888] <ljharb>
which examples do you want me to alter?

[11:14:29.0575] <rbuckton>
The kind of complexity you are signing up for to make `let` patterns usable in such a narrow way is full-on control flow analysis. If they are just declared in the outer block scope, TDZ does all of that work for you. 

[11:14:41.0627] <ljharb>
eg
```
function getTypeOfPropertyOrIndexSignatureOfType(type: Type, name: __String): Type | undefined {
    const topot = getTypeOfPropertyOfType(type, name);
    return  ||
        (getApplicableIndexInfoForName(type, name) is { type: const propType } &&
            addOptionality(propType, /*isProperty*/ true, /*isOptional*/ true));
}
```

[11:14:44.0843] <rbuckton>
The early return example. 

[11:14:54.0656] <ljharb>
 * eg

```
function getTypeOfPropertyOrIndexSignatureOfType(type: Type, name: __String): Type | undefined {
    const topot = getTypeOfPropertyOfType(type, name);
    if (topot) { return topot; }
    return  (getApplicableIndexInfoForName(type, name) is { type: const propType } &&
            addOptionality(propType, /*isProperty*/ true, /*isOptional*/ true));
}
```

[11:15:14.0261] <rbuckton>
That isn't an applicable refactoring, that is a complete change to code style. 

[11:15:26.0529] <ljharb>
 * eg

```
function getTypeOfPropertyOrIndexSignatureOfType(type: Type, name: __String): Type | undefined {
    const topot = getTypeOfPropertyOfType(type, name);
    if (topot) { return topot; }

    if (getApplicableIndexInfoForName(type, name) is { type: const propType }) {
            return addOptionality(propType, /*isProperty*/ true, /*isOptional*/ true));
    }

    return false;
}
```

[11:15:34.0587] <ljharb>
i dunno, something like that (sorry for the edits)

[11:15:37.0367] <rbuckton>
I'd argue we'd keep it as is rather than use pattern matching in that case

[11:15:42.0285] <ljharb>
"change to code style" is what refactoring *is*

[11:16:13.0817] <ljharb>
early returns tend to make code more readable; i (and most of the js ecosystem) used to force everything to have one return at the bottom, per jslint, but everyone's largely shifted away from that.

[11:16:28.0417] <ljharb>
 * early returns tend to make code more readable; i (and most of the js ecosystem) used to force everything to have one return at the bottom, per jslint, but everyone's largely shifted away from that since the late 2000's.

[11:17:16.0803] <ljharb>
but yeah "don't use pattern matching" is obv a fine choice there if it doesn't mesh well with the style you prefer

[11:17:17.0389] <rbuckton>
Yes. I would like to be able to use early return in my last example, but can't if the condition including the pattern is the negative case. 

[11:17:46.0790] <ljharb>
i'm pretty sure that example works; is there something i missed, or another one with the negative caes?

[11:17:48.0629] <ljharb>
 * i'm pretty sure that example works; is there something i missed, or another one with the negative case?

[11:18:48.0605] <rbuckton>
Sorry, I was away from my PC and on my phone. I meant this example:

```
if (!(x is Option.some(let value)) {
  return; // nothing to do, exit early
}
value; // use 'value'
```

[11:20:02.0650] <rbuckton>
Specifically, the negative case in the `if`. This is an example of something I've seen in C#, which has the same "declaration pattern" concept that I'm proposing with `let` patterns.

[11:22:15.0113] <ljharb>
```
if (x is not Option.Some(let value)) {
   // use `value`
}
return;
```
is fine imo

[11:22:39.0100] <rbuckton>
That isn't an early return though.

[11:22:46.0092] <ljharb>
true. but not everything has to be

[11:23:02.0512] <rbuckton>
You also are incorrect in the use of `not`.

[11:23:07.0831] <ljharb>
how so?

[11:23:25.0361] <rbuckton>
The early return is if its not a match. You swapped the branches but not the condition.

[11:23:34.0091] <ljharb>
or this:
```
if (x is Option.Some(value)) {
  return;
}
const Option.Some(value) = x;
```
using extractors

[11:24:00.0653] <ljharb>
ok so yes, i see what you mean

[11:24:05.0073] <rbuckton>
I'm saying that we *could* have this work in a way that is intuitive, but these restrictions make it hard to reason over.

[11:24:22.0722] <rbuckton>
Also, you're re-evaluating the match now which is completely inefficient.

[11:24:41.0357] <ljharb>
true. i don't think this kind of situation is common enough or important enough tho to warrant shredding the mental model of what can produce bindings in a block.

[11:25:00.0923] <ljharb>
what happens if you do `const Option.Some(value) = x` when it doesn't match, btw?

[11:26:15.0661] <rbuckton>
It doesn't need to be that complex. `if` doesn't make its own block, so the bindings are declared in the containing scope. TDZ handles cases where conditions failed to match or bindings weren't initialized. Scoping works as you'd expect and existing code can be refactored to patterns without completely rewriting the entire function.

[11:27:44.0661] <ljharb>
the if parens are attached to the block

[11:27:52.0281] <ljharb>
just like `for (let x in y) {}` is

[11:27:54.0510] <rbuckton>
By narrowing the scoping to inside of the `if`, or to only `true` branches in ternaries/short-circuiting, you're making things far more complicated and harder to reason over and use.

[11:27:59.0780] <ljharb>
 * just like `for (let x in y) {}` is - so there's already precedent for that mental model.

[11:28:05.0357] <ljharb>
 * just like `for (let x of y) {}` is - so there's already precedent for that mental model.

[11:28:16.0754] <rbuckton>
That doesn't need to be the case, since `if` isn't `for`.

[11:28:24.0533] <ljharb>
yes but that's what users already expect

[11:28:28.0139] <ljharb>
that's what will be easy to reason about

[11:28:36.0372] <ljharb>
doing anything *different* is what will be complicated and confusing

[11:29:00.0059] <rbuckton>
Users expect `for` declarations to be scoped, but that doesn't apply to _Expression_.

[11:29:14.0256] <ljharb>
users don't think about grammar at all

[11:29:25.0192] <rbuckton>
for example, there's no reason that a `let` pattern in the Expression of a `for` statement head should be scoped to the `for`.

[11:30:01.0502] <ljharb>
`for (let i = 0; i < 3; ++i) { } i;` will error because i is not defined

[11:30:09.0764] <ljharb>
so there is a reason, because *that's already how it works* since 2015

[11:30:13.0621] <ljharb>
we can't change that, period

[11:30:17.0947] <rbuckton>
```
for (let x of y is Option.some(let value) ? value : []) {
}
value; // could be legal here
```

[11:30:29.0100] <ljharb>
could be. but that would be different and surprising.

[11:30:31.0530] <ljharb>
and thus, shouldn't be.

[11:30:36.0791] <rbuckton>
Yes, that's the `for` declaration. That's separate from the `expression` part.

[11:30:38.0419] <ljharb>
 * and thus, shouldn't be, even if some people would find it useful.

[11:30:48.0861] <ljharb>
users don't think about it that way

[11:31:04.0036] <ljharb>
it's "things bound inside the for (…) are only in scope in the `{ … }`"

[11:31:12.0475] <ljharb>
obviously we *could* do it. but nobody will expect that.

[11:31:27.0527] <rbuckton>
And maybe it makes sense to have `for` and `while` scope their expressions to the per-iteration block, but `if` is not per-iteration, so it doesn't need to obey those rules.

[11:31:41.0561] <ljharb>
arguably if is an iteration of one :-p but sure

[11:31:53.0855] <ljharb>
it doesn't *need* to. but it *should* because that's what users will expect. and that always trumps "what we could get away with"

[11:32:11.0830] <rbuckton>
But I could definitely see this being useful:

```
while (x is not Option.Some(let value)) {
  x = nextX();
}
value;
```

[11:32:31.0327] <ljharb>
"it could be useful" is never sufficient to override "it will probably be surprising"

[11:32:55.0789] <rbuckton>
I don't find it surprising, and I'm not convinced the general developer population would either.

[11:34:13.0141] <rbuckton>
What I would find surprising is if this:

```
if (x is Option.Some(let value)) {
  value;
}
return;
```

can't be refactored to the negative case like it can for every other expression:

```
if (!(x is Option.Some(let value))) {
  return;
}
value;
```


[11:34:35.0972] <ljharb>
then the solution to that surprise is no bindings at all, really.

[11:34:45.0548] <ljharb>
which i don't think any of us want

[11:35:13.0916] <ljharb>
because no expression can create bindings yet, so that would be a much larger surprise.

[11:35:21.0026] <rbuckton>
If we can't introduce bindings in patterns to capture matched values, pattern matching has almost no value.

[11:35:39.0746] <ljharb>
to use your "but this is different so its ok" argument, then "an expression with let/const/var inside" is different, and it's fine if it follows different rules

[11:35:50.0228] <ljharb>
 * to use your "but this is different so its ok" argument, then "an expression with let/const/var inside" is different, and it's fine if it follows different rules, including that you can't naively refactor it like you can normal expressions.

[11:36:06.0604] <rbuckton>
Pattern matching itself is a very complex feature. You're not going to get away with just assuming how things work without reading some kind of documentation, so I'm not sure its going to be that surprising.

[11:36:51.0179] <ljharb>
sure. but that argument works for all of our positions in varying degrees.

[11:36:58.0774] <ljharb>
including refactorability

[11:37:59.0257] <rbuckton>
Principle of least surprise. Which is more surprising?
1. A `let` pattern introduces a binding that is scoped to the nearest outer block.
2. I can't swap an `if` condition to its inverse without a complete rewrite of the surrounding code.

[11:38:19.0869] <ljharb>
personally, the former.

[11:38:29.0786] <rbuckton>
All `let` declarations are currently scoped to the nearest outer block.

[11:38:31.0308] <ljharb>
because i just don't hold that second assumption at all

[11:38:47.0470] <ljharb>
for example, if you return inside the block, or throw, or do something async, etc, you can't swap it without larger rewrites

[11:39:08.0749] <ljharb>
> <@rbuckton:matrix.org> All `let` declarations are currently scoped to the nearest outer block.

sure, and no expressions can create bindings. both current scenarios aren't super relevant here?

[11:39:30.0063] <rbuckton>
I've already imagined a number of cases for (2) in multiple codebases where I wouldn't be able to employ pattern matching in cases where it would be extremely useful, without having to even further complicate my code.

[11:40:14.0267] <rbuckton>
Both (1) and (2) are assuming expressions can create bindings, they're just talking about scoping. We've already spent the cost of that surprise for these cases.

[11:40:41.0618] <ljharb>
ok, but as i said, 2 is just not a valid assumption without a bunch of caveats

[11:41:00.0371] <ljharb>
and pattern matching doesn't have to be useful everywhere. there's still a vast number of places it will be useful.

[11:41:07.0333] <rbuckton>
If it helps, I can reach out to Anders and the C# team to get additional context as to why they chose the variable scope they did for `is`.

[11:41:30.0820] <ljharb>
it can't hurt, but i'm not sure it'll make much difference. JS isn't C#.

[11:41:41.0334] <rbuckton>
What caveats? I showed a very basic case that shows the discrepancy already.

[11:42:11.0254] <ljharb>
there exist less basic cases where you can't just swap the condition without a larger code change.

[11:42:15.0110] <rbuckton>
I find (1) the least surprising because it matches what `let` already does. It declares the variable in the containing block scope. 

[11:42:32.0811] <ljharb>
 * there exist less-basic cases where you can't just swap the condition without a larger code change.

[11:42:39.0424] <rbuckton>
Yes, but those cases are going to be complicated regardless as to how pattern matching works.

[11:42:54.0239] <ljharb>
right but it illustrates why it's an invalid assumption that you can just inverse an `if`

[11:42:57.0340] <ljharb>
 * right but it illustrates why it's an invalid assumption that you can just easily inverse an `if`

[11:42:57.0959] <rbuckton>
Its not more or less complex with pattern matching.

[11:43:02.0839] <ljharb>
that's not generally true, so it's false

[11:43:13.0218] <rbuckton>
If you can't inverse an `if` in the simple case, the more complex cases aren't relevant.

[11:43:42.0692] <ljharb>
i hear you that some very basic if's would be inversable, and pattern matching with contained bindings would make that not the case

[11:43:54.0837] <ljharb>
but to me that makes things *more* consistent - that you can count on inverting the if even *less*.

[11:44:00.0583] <ljharb>
because that's just not something you should ever rely on.

[11:46:45.0949] <ljharb>
 * i hear you that some very basic if's would be trivially inversable, and pattern matching with contained bindings would make that not the case

[11:46:48.0909] <rbuckton>
IMO, this gives pattern matching even more jagged edges that would make it harder to use. With my proposed scoping, things you might expect to work just work, rather than needing to consult documentation on why you can't do the thing that looks like it should work just fine.

[11:46:54.0716] <ljharb>
 * but to me that makes things _more_ consistent - that you can count on trivially inverting the if even _less_.

[11:47:20.0778] <ljharb>
a surprising binding will cause a lot more problems than a surprising error.

[11:48:43.0416] <rbuckton>
I don't agree, especially when the error requires significantly more knowledge of the complexities of pattern matching, scopes and bindings. 

[11:49:28.0839] <rbuckton>
Especially when we could have chosen the approach that works, lets me do the thing that seems like it should obviously work, and adds utility.

[11:49:38.0809] <rbuckton>
 * Especially when we could have chosen the approach that lets me do the thing that seems like it should obviously work, and adds utility.

[11:50:42.0316] <ljharb>
"obviously" is very subjective.

[11:50:52.0806] <rbuckton>
What would you propose the scope of `value` be in this case:
```
const y = x is Option.Some(let value) ? value : 2;
```
Because if its just the expression, then I can't even work around the inversion of `if` by pulling the expression out.

[11:52:02.0449] <rbuckton>
i.e., a potential refactor of the inverted `if` might be:
```
const tmp = x is Option.Some(let value);
if (!tmp) {
  return;
}
value;
```

But even that wouldn't work if we choose more complex, restrictive scoping.

[11:56:09.0736] <ljharb>
i would assume the `value` is available in one of two scopes - either, only in the expression in the positive branch, or, only in the entire remainder of the ternary expression. but never outside of the ternary.

[11:58:59.0208] <rbuckton>
There isn't a ternary in the 2nd example.

[11:59:49.0644] <rbuckton>
both of those assumptions severely limit the utility of the feature. If that were the case, you wouldn't be able to use it in the true or false branch of `if`, or in `while`, which are two places that we *really* want this feature.

[12:00:22.0818] <rbuckton>
If its "only in the true branch, except in `if` or `while` or `switch`", you're adding even more and more complexity.

[12:01:10.0026] <rbuckton>
I think "`let` patterns are bound in the containing block scope" is simple and matches existing `let`/`const`. It requires none of this complexity or second guessing. 

[12:01:52.0240] <rbuckton>
If you want it scoped to the expression itself, use `do` since it introduces a block scope into an expression.

[12:03:35.0902] <rbuckton>
then you can have `const y = do { x is Option.Some(let value) ? value : 2 };` and keep it scoped to the expression if that's what you want.

[12:05:30.0042] <rbuckton>
Then the block scope boundary remains the same as everywhere else in JS, the containing block scope. Don't have `if` declare a block scope on its own, since it doesn't currently. `while` might require a bit more discussion, but I'm also not certain it needs its own block scope either since not having one would be useful for checking for loop exit conditions with patterns.

[12:31:33.0371] <ljharb>
oh sure, i don't think the 2nd example should work at all

[12:31:40.0201] <ljharb>
testing and extracting are different operations.

[14:28:08.0105] <rbuckton>
> <@ljharb:matrix.org> testing and extracting are different operations.

That's somewhat antithetical to pattern matching. The point is that testing and extraction should be the same operation.

[14:28:25.0487] <ljharb>
in `match` yes

[14:28:29.0736] <ljharb>
but `is` isn't pattern matching, it's just testing

[14:28:33.0288] <rbuckton>
That was the biggest problem with the `let when` proposal, IMO.

[14:28:41.0365] <ljharb>
 * but `is` isn't pattern matching, it's just testing (using pattern matching's patterns)

[14:28:43.0173] <rbuckton>
`is` is pattern matching, that's why it exists.

[14:28:58.0989] <ljharb>
it's not *matching* tho, it's testing

[14:29:01.0369] <ljharb>
like regex match vs test

[14:29:11.0044] <ljharb>
it's a boolean operation, like test. it doesn't produce matched stuff.

[14:29:21.0741] <rbuckton>
No, I think that's the wrong metaphor.

[14:29:46.0723] <rbuckton>
That may be your intuition, but that's not why I proposed `is`.

[14:30:23.0246] <rbuckton>
The `is` expression is derived from C#'s `is` for pattern matching, including declaration patterns.

[14:30:42.0980] <ljharb>
ok but it's a boolean operator, and it doesn't matter what it does in C#, in JS people will expect it to be a pure operation that produces a boolean, just like instanceof or in

[14:30:46.0946] <ljharb>
 * ok but it's a boolean operator, and it doesn't matter what it does in C#, in JS people will expect it to be a pure operation that produces a boolean, just like `instanceof` or `in`

[14:31:18.0676] <ljharb>
giving it extra semantics in special places where it makes sense is one thing; turning it into the first non-pure binary operator doesn't make sense to me.

[14:31:32.0631] <rbuckton>
I don't think that expectation is relevant given that its pattern matching syntax.

[14:31:42.0417] <ljharb>
the LHS and the operator aren't.

[14:31:47.0109] <ljharb>
only the RHS is.

[14:31:56.0603] <rbuckton>
What do you mean by "non-pure binary operator"?

[14:32:10.0423] <ljharb>
like a binary operator that has effects outside of producing a value or throwing an exception.

[14:32:13.0925] <rbuckton>
Because my definition of purity is probably not that.

[14:32:30.0152] <rbuckton>
All operators can have effects outside of producing a value.

[14:32:31.0137] <ljharb>
(obv a binary operator may invoke user code that has side effects, that's not what i mean)

[14:32:46.0902] <ljharb>
they don't by default. that's just the exceptional case.

[14:33:18.0704] <rbuckton>
`is` isn't `instanceof` or `in`. It is more than that.

[14:33:34.0657] <ljharb>
at the operator level it's precisely that

[14:33:47.0694] <ljharb>
`is` would also invoke a custom matcher, just like instanceof can invoke a Symbol.hasInstance method

[14:34:00.0911] <ljharb>
that there's syntax doesn't make it not a binary operator.

[14:34:30.0046] <ljharb>
but to step back, it sounds like this is a dealbreaker for being ready for advancement in september

[14:34:44.0528] <rbuckton>
I strongly disagree with the position that `is` should only test. 

[14:34:55.0948] <ljharb>
i would be shocked if anyone else expected it to be any different.

[14:35:09.0383] <ljharb>
 * i would be shocked if anyone else expected it to be anything but testing, aside from the special binding cases we've discussed.

[14:35:20.0504] <ljharb>
and "is" isn't the proper spelling of something that extracts bindings anyways

[14:35:31.0189] <ljharb>
"is" is the prefix for a predicate function. something pure that only produces a boolean.

[14:35:32.0268] <rbuckton>
Maybe we need to pick a different name for the operator, but I'd be strongly opposed to giving `is` less pattern matching capabilities than `match`.

[14:35:39.0775] <ljharb>
what would be the point then?

[14:35:42.0672] <ljharb>
`match` can already do it

[14:35:54.0902] <ljharb>
the only benefit to `is` was that it's sugar for the common case of matching to true or false

[14:35:57.0015] <rbuckton>
`match` can't introduce bindings outside of its match legs.

[14:36:16.0720] <ljharb>
i would also bet money that literally none of us expected that was the purpose of `is`.

[14:36:18.0900] <rbuckton>
I proposed `is` primarily for `if` and `while`, but also for in-expression extraction.

[14:36:30.0115] <ljharb>
that latter part imo is an anti-goal. we should never have that.

[14:36:50.0439] <rbuckton>
I proposed `is` to this group at the same time as `let` patterns. 

[14:37:09.0077] <ljharb>
sure, but there were no examples i recall that demonstrated that a bare expression produced bindings in the block.

[14:37:11.0995] <rbuckton>
I completely disagree with that point. I strongly believe we should have that.

[14:37:21.0779] <ljharb>
ok, but given consensus requirements, we won't

[14:37:23.0961] <ljharb>
so where do we go now?

[14:37:36.0909] <rbuckton>
There have been examples of such since I first proposed it.

[14:38:06.0960] <rbuckton>
I think a larger group discussion is in order, at the very least.

[14:38:43.0129] <ljharb>
sure, that's fine. we met yesterday and have another one next monday

[14:39:00.0386] <ljharb>
i apologize if i missed those examples; i'd immediately have called out the problem if i'd seen them.

[14:39:15.0044] <rbuckton>
Ah, yesterday was a holiday. I was unaware there was still a meeting scheduled.

[14:39:16.0696] <rbuckton>
https://gist.github.com/rbuckton/e49581c9031a73edd0fce7a260748994#layer-3-pattern-matching-syntax

[14:39:36.0322] <rbuckton>
```
if (opt is Option.Some{ value: let value }) print(value);
```
was the first example if `is` and `let`

[14:39:49.0543] <ljharb>
that's an `if` not a bare expression

[14:39:54.0107] <ljharb>
all the `if` examples make sense to me

[14:40:06.0692] <rbuckton>
 * ```
if (opt is Option.Some{ value: let value }) print(value);
```

was the first example of `is` and `let`

[14:40:17.0317] <ljharb>
and all the `let when` examples were block-level declarations, so that wasn't a problem either (for this reason, at least)

[14:41:01.0731] <rbuckton>
I proposed `is` as an infix expression. There were no restrictions on what patterns were permitted. We also discussed scoping for `is` in multiple meetings.

[14:41:58.0815] <ljharb>
i'll take your word for it, but again, i don't recall any discussion of scoping outside of a `when` RHS, or a special header (if/while/for)

[14:49:25.0726] <rbuckton>
IIRC, we've even discussed in this channel what the scope should be for the simplest case of a `let` pattern, i.e., `x is let y;`. I'd argue that you're not likely to see that happen often in practice as there are better ways to do that for simple cases, but its a capability that falls out of the syntax and the feature.


2023-09-08
[08:17:45.0099] <rkirsling>
it really is super cool how `when { numOrString: String }` just magically reads as a typecheck

[10:05:36.0664] <TabAtkins>
Yeah that's exactly one of the big reasons I was cool with switching the bindings syntax elsewhere.

[10:53:59.0495] <ljharb>
it indeed lends itself well to TS being able to infer types from it :-)

[14:29:42.0377] <rbuckton>
I haven't had the time to review the PR yet as I've been heads down in testing out the Shared Structs origin trial. I should have some time to look at it on Monday

[14:49:31.0055] <TabAtkins>
Don't worry about it, it's not finished yet.

[14:49:36.0273] <TabAtkins>
I got distracted with planning for TPAC.


2023-09-10
[05:57:54.0937] <Jack Works>
> <@rkirsling:matrix.org> it really is super cool how `when { numOrString: String }` just magically reads as a typecheck

I like things like { numOrStr: typeof "string" }

[06:03:34.0118] <Jack Works>
we can have an update at the plannery but I don't think we can finish the spec in 10 days

[07:48:06.0974] <ljharb>
i agree. I don’t think we have complete champion group consensus yet anyways 


2023-09-12
[04:56:01.0222] <Jack Works>
do we have if pattern?

[04:57:38.0461] <Jack Works>
if we have if pattern, some structure can be composed with it

[04:59:09.0004] <Jack Works>
* ```
// before
when pattern if (expr): expr // match with guard
// after
when pattern and if (expr): expr // the whole thing is a pattern, no need special syntax for match + guard
```

[04:59:14.0806] <Jack Works>
* ```js
// before
when pattern if (expr): expr // match with guard
// after
when pattern and if (expr): expr // the whole thing is a pattern, no need special syntax for match + guard
```

[04:59:29.0714] <Jack Works>
```js
// before
when pattern if (expr): expr // match with guard
// after
when pattern and if (expr): expr // the whole thing is a pattern, no need special syntax for match + guard
```

[04:59:54.0686] <Jack Works>
* <code>
// before
when pattern if (expr): expr // match with guard
// after
when pattern and if (expr): expr // the whole thing is a pattern, no need special syntax for match + guard
</code>

[05:00:16.0442] <Jack Works>
* `// before
when pattern if (expr): expr // match with guard
// after
when pattern and if (expr): expr // the whole thing is a pattern, no need special syntax for match + guard`

[05:00:33.0486] <Jack Works>
* // before
when pattern if (expr): expr
// match with guard

// after
when pattern and if (expr): expr
// the whole thing is a pattern, no need special syntax for match + guard


[05:01:42.0271] <Jack Works>
// before
match (...) {
...
if (expr): ...
}

// after
match (...) {
...
when if (expr): ...
}

[07:26:12.0270] <ljharb>
i think we still need it

[07:36:56.0121] <rbuckton>
Jack Works: is your question "Do we still have a form of `if` in `match`?" or is it "Do we have an `if` _pattern_ that can be placed anywhere in a pattern, or an `if` _clause_ that must come after the pattern?"? While I like the idea of an `if` _pattern_, that would have ramifications on how `let` patterns are initialized. 
My intent for `let`/`const` patterns was for the bindings to be initialized only once after an entire pattern has matched successfully. That doesn't quite work if `if` is a _pattern_, since they would need to be initialized immediately.

[07:41:40.0527] <rbuckton>
in other words:

```
if (x is [let y and if (y > 1)]) {
  y; // ok, 'y' is initialized
} else {
  y; // expected to error as 'y' in TDZ/uninitialized, but won't because 'y' was initialized immediately.
}
```
Though, we could possibly do both by having both outer bindings and per-pattern bindings, such that the outer bindings are initialized with the per-pattern bindings from the success path of the match, not unlike per-iteration bindings in `for` statements.

[07:44:15.0310] <rbuckton>
One benefit of `if` patterns is that they could be a mechanism to use predicates, had we gone the route of doing `instanceof` checks by default, though they wouldn't have been quite as elegant: `let y and if (isFoo(y))`

[09:50:36.0092] <ljharb>
we should still have if clauses in match; id never considered an if pattern

[09:56:52.0753] <Jack Works>
is pattern (let x and F) calls F as a predicate function when F is a function and there is no @@matcher on it?

[09:57:39.0422] <Jack Works>
I think it should at least be (let x and F()) or something to indicate it will call the function? but it will also conflict with the extractor maybe?

[10:31:14.0810] <rbuckton>
> <@jackworks:matrix.org> I think it should at least be (let x and F()) or something to indicate it will call the function? but it will also conflict with the extractor maybe?

That would conflict with Extractors, yes. 


2023-09-13
[18:11:35.0378] <Jack Works>
Eh

[18:11:52.0293] <Jack Works>
I forgot the separator

[18:12:05.0649] <Jack Works>
how do we do this? using `,` or `;`?

[18:45:54.0922] <rbuckton>
I'd be tempted to suggest `,`, since `;` might run afoul of ASI so we'd have to add restrictions to ASI interpretation such as the one for `for` in https://tc39.es/ecma262/#sec-rules-of-automatic-semicolon-insertion

[18:47:36.0376] <rbuckton>
But I'd rather get feedback from everyone else on that one. If its `,`, then you would need to use something other than _Expression_ in each leg since that also consumes `,`.

[18:48:52.0825] <rbuckton>
 * But I'd rather get feedback from everyone else on that one. If its `,`, then you would need to use _AssignmentExpression_ rather than _Expression_  in each leg since _Expression_ also consumes `,`.

[23:13:08.0813] <ljharb>
i'm confused, which separator

[23:13:17.0428] <ljharb>
after a RHS expression? 1000% semicolon

[23:13:51.0004] <ljharb>
we don't need to cater to ASI people at all as long as we leave the "style" possible, they can stick semicolons in the front of lines where it conflicts

[23:14:18.0849] <ljharb>
the committee already has consensus on that (it's ok to add new ASI restrictions) even tho we couldn't quite get consensus on telling people to just use semicolons

[03:40:37.0169] <TabAtkins>
> <@rbuckton:matrix.org> in other words:
> 
> ```
> if (x is [let y and if (y > 1)]) {
>   y; // ok, 'y' is initialized
> } else {
>   y; // expected to error as 'y' in TDZ/uninitialized, but won't because 'y' was initialized immediately.
> }
> ```
> Though, we could possibly do both by having both outer bindings and per-pattern bindings, such that the outer bindings are initialized with the per-pattern bindings from the success path of the match, not unlike per-iteration bindings in `for` statements.

Why would you expect y to be TDZ there? The binding was established, even if the pattern eventually failed. `if( x is [let y] && y > 1)` wouldn't TDZ, for instance.

