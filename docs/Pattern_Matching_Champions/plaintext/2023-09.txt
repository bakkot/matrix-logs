2023-09-01
[20:16:01.0795] <Jack Works>
> <@rbuckton:matrix.org> How does that break that expectation?

tenary does not have a "block" to be scoped

[20:24:23.0006] <rbuckton>
The block would be the block containing the ExpressionStatement, not the expression itself. 

[20:26:35.0392] <rbuckton>
Block scopes are always at the statement level, though `match`/`when` may end up being the lone exception

[05:23:16.0539] <Jack Works>
> <@rbuckton:matrix.org> The block would be the block containing the ExpressionStatement, not the expression itself. 

I think that's even worse

[07:25:36.0700] <rbuckton>
That's the behavior that C# has, so there is precedent

[07:26:22.0297] <rbuckton>
And it's consistent with normal `let`/`const`

[11:41:47.0062] <TabAtkins>
Yeah, I'm not sure I see the confusion, the scopes are exactly the same as normal. The fact that the binding is established in an expression rather than a statement doesn't change anything, in my mind.

[12:05:01.0161] <rbuckton>
We just need to clarify corner cases like parenthesized statement heads in `if`, `switch`, `with`, and `while`. And maybe the expression in `for..of` and `for..in`.

[12:45:03.0991] <TabAtkins>
Yeah, statement heads are the corner case - they're halfway between the outer scope and their inner block scope. But they're already complex in various ways, so that's nothing new.

[15:23:14.0357] <ljharb>
i think statement heads making bindings make sense intuitively. i do not think expressions making bindings make sense.


2023-09-02
[18:03:42.0221] <rbuckton>
> <@ljharb:matrix.org> i think statement heads making bindings make sense intuitively. i do not think expressions making bindings make sense.

I don't think expression-local block scoping makes sense, but I disagree with respect to bindings. Expressions introducing bindings is quite common in many languages, so I don't think it would be difficult to adopt or learn. 

[18:30:15.0128] <ljharb>
other languages arenâ€™t the rubric; either now or eventually, most JS devs have or will have never used another language

