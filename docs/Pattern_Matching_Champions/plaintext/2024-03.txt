2024-03-04
[06:21:55.0710] <Jack Works>
do we have meeting today?

[07:57:48.0518] <TabAtkins>
I'm planning on showing up, since we haven't had one in a while.

[07:59:47.0495] <ljharb>
Same - I’ll be a few minutes late but we def need a meeting

[08:41:39.0990] <TabAtkins>
Meeting notes posted: https://github.com/tc39/proposal-pattern-matching/issues/315


2024-03-17
[07:58:08.0137] <Jack Works>
do we have meeting today? I'd prefer not showing today but if we're discussing something important I can make it


2024-03-18
[22:43:06.0574] <ljharb>
yes, we definitely do - it's the last one before next plenary. obv if you can't make it you can't make it tho.

[07:55:08.0499] <ljharb>
(I’ll be a few minutes late)


2024-03-26
[07:45:55.0780] <rbuckton>
The current semantics of `InvokeCustomMatcher` don't work well for extractors due to the `SameValueZero` and `SameValueNonNumber` semantics on steps 1 and 3. I would expect that steps 1 and 3 would return `false` when _kind_ is `~list~`, since a `Foo(x)` is invalid if `Foo` isn't a valid matcher since an iterator is expected.

[08:01:53.0465] <rbuckton>
Also, step 10 and 11 say:
> 10. Perform ? GetIteratorCached(_result_, _cacheGroup_).
> 11. Return _result_.

Why are we not returning the iterator here? I was hoping to avoid dragging in all of the caching logic for non-pattern Extractors, but if I want to reuse `InvokeCustomMatcher` it seems like I would need to do so.

[08:16:57.0141] <rbuckton>
We also still need to narrow down whether _receiver_ makes sense, or whether there are other ways to accommodate those cases (i.e., a getter returning a bound function, etc.). 

[08:18:58.0845] <Jack Works>
> <@rbuckton:matrix.org> The current semantics of `InvokeCustomMatcher` don't work well for extractors due to the `SameValueZero` and `SameValueNonNumber` semantics on steps 1 and 3. I would expect that steps 1 and 3 would return `false` when _kind_ is `~list~`, since a `Foo(x)` is invalid if `Foo` isn't a valid matcher since an iterator is expected.

Yes. It's a bug, actually it fails the spec assert "Assert: listSubject is an Object.". In the `~list~` mode, it should throw.

[08:23:16.0595] <Jack Works>
> <@rbuckton:matrix.org> Also, step 10 and 11 say:
> > 10. Perform ? GetIteratorCached(_result_, _cacheGroup_).
> > 11. Return _result_.
> 
> Why are we not returning the iterator here? I was hoping to avoid dragging in all of the caching logic for non-pattern Extractors, but if I want to reuse `InvokeCustomMatcher` it seems like I would need to do so.

Oh it's another bug, there are some type mismatch here

[08:46:24.0912] <Jack Works>
fixed in https://github.com/tc39/proposal-pattern-matching/commit/ac676440bcbff5be7b87791fdafdfeeab64cbd44#diff-7d681727fcf47dc0b9a7512a470fb0da63276c625891a5cc232d725bd12912fd


2024-03-27
[09:40:28.0172] <rbuckton>
I've posted a PR for the initial spec text for Extractors for possible advancement to Stage 2. I'd appreciate feedback from this group, today if possible, as I plan to merge the PR later today when I post my slides to the agenda. https://github.com/tc39/proposal-extractors/pull/12

[09:50:15.0711] <rbuckton>
In addition, my slides are here if anyone would like to review: https://1drv.ms/p/s!AjgWTO11Fk-TkqpinLRBZZwud0rM9w?e=s7hKoI

