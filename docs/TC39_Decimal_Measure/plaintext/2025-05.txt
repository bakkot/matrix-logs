2025-05-06
[04:18:18.0534] <eemeli>
If we do have a call this week, I would like to present a new proposal, which I intend to also present to TG2 for approval to present to TG1 at the upcoming meeting:

https://github.com/eemeli/proposal-intl-keep-trailing-zeros

The very short description of the proposal is to make it so that this happens:

    const nf = new Intl.NumberFormat("en");
    nf.format("1.0") === "1.0";

    const pr = new Intl.PluralRules("en");
    pr.select("1.0") === "other";

This is a follow-up to discussions at the last tc39-numerics call.

[04:20:34.0953] <eemeli>
I would also welcome co-champions for the proposal.

[04:32:41.0756] <nicolo-ribaudo>
I'd love to talk about it. It seems like this week the numerics call is right before the TG2 one, maybe we can coalesce them?

[04:55:42.0592] <eemeli>
The TG2 agenda looks pretty full this week. My preference would be to aim for a max 45 min numerics call at its planned timeslot, and to talk about this separately at both meetings as the audiences and viewpoints are distinct.

[05:08:28.0938] <Jesse>
sgtm

[10:16:42.0298] <sffc>
I don't feel "proposal-intl-keep-trailing-zeros" is particularly controversial on its own. It's basically a bugfix.


2025-05-08
[05:39:19.0734] <Jesse>
call in 3.5 hours!

[06:45:53.0157] <eemeli>
At least for me, neither the browser or Android versions of Element appear to support markdown links in the topic, so they're showing up as syntax.

[06:46:23.0854] <eemeli>
But with the `https://` parts thankfully linkified.

[07:52:39.0919] <Jesse>
oh, sorry about that -- it works for me

[07:52:49.0334] <Jesse>
I can unmarkdown things

[09:02:22.0375] <nicolo-ribaudo>
Meeting time!

[09:53:05.0649] <sffc>
ICU4X meeting conflict today, sorry. I'll be in the TG2 meeting though!


2025-05-12
[03:47:15.0568] <eemeli>
Possibly interesting/relevant from a "tc39-numerics" PoV, I happened to notice that jschoi has submitted https://github.com/tc39/proposal-bigint-math/ for Stage 2 advancement at the upcoming meeting.

[04:06:27.0189] <Jesse>
absolutely, I've been following this privately but we can definitely talk about these ideas together

[04:06:29.0315] <Jesse>
thanks!

[08:44:20.0642] <jschoi>
> <@jesse:igalia.com> absolutely, I've been following this privately but we can definitely talk about these ideas together

If you or eemeli have any feedback, concerns, or coordination regarding BigInt Math and its interaction with other numerics proposals, let me know. I‚Äôll be making my presentations soon. 

[09:04:49.0907] <eemeli>
jschoi: https://github.com/tc39/proposal-bigint-math/issues/27


2025-05-16
[15:57:46.0367] <sffc>
When are people getting to A Coru√±a? We should have a numerics mini summit


2025-05-17
[02:45:51.0804] <eemeli>
I'm arriving rather late on Tuesday night, but staying on for the Web Engines Hackfest.


2025-05-19
[23:32:53.0352] <Jesse>
I'll be there on the 27th!

[04:12:24.0624] <sffc>
Ok, maybe those of us who are there on Tuesday can get dinner, and then there should be enough time later in the week and weekend to pull others in


2025-05-20
[00:38:21.0620] <Jesse>
and in anticipation of that, we have the biweekly JS numerics call this Thursday!


2025-05-22
[05:42:30.0060] <Jesse>
it looks like I have some unexpected childcare duty today; I'm afraid I can't meet with y'all as planned

[05:42:45.0640] <Jesse>
you're welcome to meet; if you do, please do add any interesting items here

[05:43:14.0868] <Jesse>
a number of us will be in A Coru√±a next week, so I'm looking forward to working with y'all face-to-face soon


2025-05-28
[00:49:12.0559] <Jesse (üá™üá∏)>
numerics fans! Shall we do a minisummit while we're here? One idea would be to meet tomorrow after plenary

[00:49:32.0457] <Jesse (üá™üá∏)>
AFAIK a number of us are also here next week for the Web Engines Hackfest

[01:13:23.0967] <nicolo-ribaudo>
eemeli Time to get the fractionalDigits vs fractionDigits bikeshedding on the agenda!

[01:14:17.0067] <sffc>
There isn't much extra time this week, but I want us to reserve a nice chunk of time for this. I would be open to a nice Saturday walk to Fisterra with JS Numerics on the agenda.

[01:15:55.0576] <eemeli>
The community event is tomorrow an hour after the meeting ends, and AFAIK ryzokuken and I are due to talk about MF2 there.

[01:16:33.0521] <ryzokuken>
yep the community event starts 18:30 tomorrow 

[01:16:48.0341] <Jesse (üá™üá∏)>
Friday could also work? at the moment Friday seems to be kind of empty

[01:17:28.0711] <sffc>
I already have Friday booked for time with the Igalia Intl team about Intl Era Month Code, etc.

[01:18:56.0724] <eemeli>
Could do a numerics dinner tomorrow after the community event?

[01:35:28.0865] <Jesse (üá™üá∏)>
that might be getting a bit late but I'm open to it

[01:41:48.0646] <sffc>
I'd prefer during the day on Saturday than after a long day of meetings and community event

[01:42:32.0116] <sffc>
It seems the TC39 schedule is light on Friday so maybe we could reach out to the chairs to reserve a block for a breakout session on this

[01:44:08.0800] <Jesse (üá™üá∏)>
I'll float the idea to the chairs; there may be some interest in breakout sessions as we did in Seattle

[01:48:16.0121] <eemeli>
I'd be fine with anything on Friday. Not really up for scheduling work stuff for Saturday; I'm rather looking forward to having some time off.

[01:55:16.0007] <sffc>
Are y'all going on the city tour today? (I went on it last time I was here)

[02:01:09.0516] <Jesse (üá™üá∏)>
I leaning towards not doing it (I've also already done a tour)

[02:01:42.0898] <Jesse (üá™üá∏)>
(but I'll be at the dinner)

[02:28:29.0807] <ryzokuken>
I will

[02:29:05.0136] <ryzokuken>
both options sound good to me and slightly preferable than doing it after the community event

[02:33:25.0159] <eemeli>
Getting a timeslot within the schedule on Friday sounds like the best outcome.

[02:35:57.0496] <Jesse (üá™üá∏)>
PR set up: https://github.com/tc39/agendas/pull/1891

[02:40:22.0517] <eemeli>
I added a slides link PR for keep-trailing-zeros, with content copied almost verbatim from its readme: https://docs.google.com/presentation/d/1gunNRRXJNdDwqTHh-XjV3ueI8PFasRI9WcF4KfWvxE0/edit?usp=sharing

[02:43:51.0403] <nicolo-ribaudo>
Maybe add an example showing that the proposed behaviour is the same as when you force the `.0` through minFractionalDigits

[02:50:21.0045] <nicolo-ribaudo>
Do you know if there is any language where PluralRules differs between `1.1` and `1.10`?

[02:51:29.0025] <eemeli>
Done, I think -- added slide 6.

[02:56:31.0987] <eemeli>
Apparently these:
- Bosnian (bs)
- Lower Sorbian (dsb)
- Croatian (hr)
- Upper Sorbian (hsb)
- Latvian (lv)
- Macedonian (mk)
- Prussian (prg)
- Serbian (Latin) (sh)
- Serbian (sr)

[02:57:34.0625] <Jesse (üá™üá∏)>
but these differences would be respected in the language-specific plural rules, right?

[02:58:47.0734] <eemeli>
Yes.

[02:58:50.0483] <Jesse (üá™üá∏)>
iow it would already be buggy, today, and buggy perhaps right after launching this change, but fixable later

[03:02:50.0297] <eemeli>
My npm package `make-plural` already handles string inputs in the way that's being proposed, hence being able to generate the above list with:
```
import plurals from 'make-plural'
Object.entries(plurals).filter(([lc, fn]) => fn('1.1') !== fn('1.10'))
```

[07:43:15.0466] <Jesse (üá™üá∏)>
ok we presented our case again

[07:43:30.0214] <Jesse (üá™üá∏)>
congrats on getting preserve-trailling-zeroes to stage 1

[07:43:31.0133] <Jesse (üá™üá∏)>
!

[07:44:24.0903] <Jesse (üá™üá∏)>
it seems that there's some non-trivial interest in having a polymorphic amount

[07:45:39.0642] <Jesse (üá™üá∏)>
one thing that I'd like to see are arguments for that, different from the (reasonable, understandable, valid) desire to have a numeric notion that can handle all "numerics"

[07:45:58.0394] <Jesse (üá™üá∏)>
* one thing that I'd like to see are arguments for that, different from the (reasonable, understandable, valid) desire to have a notion of amount that can handle all "numerics"

[07:46:45.0438] <Jesse (üá™üá∏)>
I thought that we walked back from the idea of supporting bigints (at least, bigints with more than 34 significant digits)

[07:47:09.0761] <Jesse (üá™üá∏)>
IIRC the main motivation for that was cryptocurrency

[07:47:38.0564] <sffc>
That's not the conclusion I drew

[07:48:20.0218] <ljharb>
the motivation for me is "if it's not tied to one single numeric type, it should handle them all"

[07:49:22.0712] <Jesse (üá™üá∏)>
I'd be interested to know how much slower a polymorphic amount would be compared to a decimal-backed amount

[07:49:43.0894] <ljharb>
* the motivation for me is "if it's not tied to one single numeric type, it should handle them all" (to be clear, decimal-only is fine, number-only is fine, but if it's decimal and number i'm going to insist it also include bigint)

[07:49:54.0484] <Jesse (üá™üá∏)>
I mean, surely it's not *faster*, and I can see, without digging into any details, why it would be slower

[07:50:15.0033] <Jesse (üá™üá∏)>
we also generally don't position decimal as something fast

[07:52:03.0086] <Jesse (üá™üá∏)>
(I always hesitate to emphasize this becuase I don't want to be misunderstood as being totally insensitive to performance)

[07:53:00.0863] <eemeli>
Is performance being proposed as a rationalisation for Amount? I thought that it explicitly was _not_ for Decimal as a whole.

[07:53:35.0650] <sffc>
Polymorphic Amount is probably not _that much_ slower, but my point is that it's not _free_, and I haven't heard motivation for why we would otherwise prefer Polymorphic Amount over Decimal Amount

[07:54:11.0364] <Jesse (üá™üá∏)>
right, performance isn't being proposed in connection with amount

[07:54:40.0868] <eemeli>
An Amount supporting all numeric types would not need to be fully polymorphic, like the polyfill it could hold one BigInt and one Number to represent all numeric values.

[07:55:02.0467] <eemeli>
(bigint for the value, number for the count of fractional digits)

[07:55:47.0398] <Jesse (üá™üá∏)>
ah, a kind of bigdecimal amount?

[07:55:53.0004] <eemeli>
And then it could have separate `toNumber`, `toDecimal`, and `toBigInt` methods. Which could throw.

[07:55:54.0745] <eemeli>
Yeah.

[07:57:53.0174] <eemeli>
In particular considering non-intl use cases, I think supporting the numeric values that we already have in JS with Amount kinda counts.

[07:58:01.0818] <sffc>
I was in the middle of drafting a message saying that Decimal Amount avoids problems exactly like this

[07:58:51.0486] <eemeli>
It doesn't really "avoid" the problem, just moves it to happen in the constructor.


2025-05-29
[00:59:31.0104] <Jesse (üá™üá∏)>
the decimal continuatin will be this afternoon (early, not late)

[01:42:19.0998] <Jesse (üá™üá∏)>
here are the continuation topics:

[01:48:30.0349] <Jesse (üá™üá∏)>
not sure what WH has in mind with pi to 72 significant digits; this isn't one of the (many, many) Number values that are exactly representable in base-10 having > 34 significant digits

[01:48:52.0281] <Jesse (üá™üá∏)>
* not sure what WH has in mind with pi to 72 significant digits; this isn't one of the (many, many) Number values that are exactly representable in base-2 and having > 34 significant (decimal) digits

[01:49:41.0798] <Jesse (üá™üá∏)>
I'd love to hear more about use cases for `equals` for amounts

[01:50:13.0235] <Jesse (üá™üá∏)>
it got removed not because of any opposition to it, just ignorance of any concrete need

[01:50:40.0745] <Jesse (üá™üá∏)>
(I added it in the latest version of the Decimal polyfil, fwiw)

[01:52:41.0046] <sffc>
It confounds me how any value type wouldn't have an equals function. As the most basic use case, I would like the ability to store these in a hash set.

[01:52:42.0986] <Jesse (üá™üá∏)>
MM's question at the top ("Why is amount tied to decimal?") might have been answered by N-ic's email

[01:53:15.0557] <Jesse (üá™üá∏)>
but it might also be another form of "why a monomorphic decimal-backed amount instead of a polymorphic one"

[01:53:17.0836] <nicolo-ribaudo>
I still have to answer again to Mark

[01:53:54.0318] <Jesse (üá™üá∏)>
sgtm -- that's convincing enough

[01:54:48.0835] <Jesse (üá™üá∏)>
for the exponential notation question, I'm not sure if there's any issue. All the examples we listed use decimal digit strings but we intend to support exponential notation, too

[01:55:02.0457] <sffc>
The Equals function gets a bit more fraught with Polymorphic Amount (are numerically-equal Number, BigInt, and Decimal Amounts .equals to each other?)

[01:55:08.0118] <Jesse (üá™üá∏)>
right

[01:56:06.0075] <sffc>
I think that instead of Polymorphic Amount, I like your idea of String Amount. Many of the Polymorphic Amount problems go away.

[01:56:26.0872] <sffc>
So the question should be Decimal Amount or String Amount.

[01:56:51.0935] <Jesse (üá™üá∏)>
a String-backed amount definitely aligns with the main use cases for amount

[01:57:23.0266] <Jesse (üá™üá∏)>
conversion function (`toDecimal` etc.) might throw but maybe that's not so bad

[01:57:56.0450] <Jesse (üá™üá∏)>
* conversion functions (`toDecimal`, `toBigInt`, `toNumber` etc.) might throw but maybe that's not so bad

[01:58:02.0065] <sffc>
We can discuss that in an issue but I feel like `toDecimal` could have an options argument that tells it whether to round or throw

[02:00:30.0971] <nicolo-ribaudo>
If we do string amount, I'd prefer conversions to be cast-like operations, e.g. `Decimal(amount)` and `BigInt(amount)` rather than `amount.toDecimal()` and `amount.toBigInt()`

[02:04:34.0846] <Jesse (üá™üá∏)>
I think E-emli suggested this approach, too?

[02:04:57.0652] <eemeli>
I would also prefer something like a "string amount". Provided that its `.toString()` was a numeric string, then `new Decimal(amount)`, `BigInt(amount)`, and `Number(amount)` would all work.

[02:05:49.0873] <Jesse (üá™üá∏)>
a String-backed amount also leaves open the possibility of adding new numeric types

[02:05:52.0047] <sffc>
I don't want to get ahead of ourselves on `.toString()`; I want it to be able to hold a unit annotation

[02:06:03.0686] <sffc>
Or some other syntax for rationals

[02:06:37.0404] <sffc>
`"4/3"` or `"1.50[meter]"` might be valid string outputs

[02:06:58.0483] <sffc>
But not as part of the Decimal proposal

[02:07:10.0959] <sffc>
We should make it future-proof though

[02:08:05.0952] <Jesse (üá™üá∏)>
the decimal continuation might happen after this talk (!)

[02:09:29.0627] <eemeli>
As in, before lunch?

[02:09:39.0104] <Jesse (üá™üá∏)>
yes

[02:09:58.0482] <sffc>
As long as Waldemar and Mark Miller are on the call

