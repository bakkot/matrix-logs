2025-02-12
[03:42:51.0849] <eemeli>
Looking over and considering Jesse's upcoming Decimal/Measure presentation and explainer, I get the sense that we really ought to find a way to reach the end goals here in multiple smaller steps, rather than one big leap. By Decimal normalising trailing zeros, the use cases for them introduce a dependency on Measure, but it gets a bit hairy if Measure then also depends on Decimal for its value representation.

What if we were to initially not include _any_ conversions in Measure? Then we wouldn't need to change its inputs at all, and we would still be providing a way for Intl.NumberFormat and Intl.MessageFormat to get their formattable inputs as a combined value+units+precision package.

Then we could consider separately the Smart Units part of this whole thing adding unit conversions, and Decimal defining its accessors on Measure, and we'd avoid having everythin depend on everything else.

[04:11:38.0886] <eemeli>
Here's a sketch of what that might look like: https://gist.github.com/eemeli/0bd413d2f711cbd6016673af8d68c38c

That's in TS, so the real thing would need to have appropriate runtime checks for the types. The lack of any methods on the class is quite intentional, as is freezing it.

I'm also starting to think that we might want to call this "Amount" rather than "Measure", mostly because then it also makes sense for currencies: it feels really clumsy to talk of a "measure of money", whereas an "amount of money" (or anything else, really) makes more sense.

[04:17:23.0096] <Jesse>
thanks!

[04:18:49.0872] <Jesse>
happy to discuss another name

[04:19:34.0784] <Jesse>
"measure" suggests physical quantities and (it feels like) is excludes currencies; "amount" clearly includes currencies but (to my mind) weakly excludes other kinds of measurements

[04:22:29.0800] <Jesse>
shouldn't we have a toLocaleString or at least toString in Amounts?

[04:29:36.0662] <Jesse>
I wonder if want to tie in to ISO 4217 (standardization of currencies) somehow or whether measure/amount is merely any tagged number (or string, or bigint) at all

[04:30:09.0079] <Jesse>
`new Amount(42.75, "foobar gramz")`

[04:30:55.0318] <Jesse>
I like the simplicity of the zero-method approach but I wonder if this deflates the value-add too much

[04:31:28.0406] <Jesse>
one of the nice value-add parts of measure, to my mind, was its tie-in to CLDR's units.xml

[04:31:49.0994] <Jesse>
exposing new capabilities to the language, rather than merely attaching a string to a number

[04:43:30.0766] <eemeli>
I would argue that e.g. "3 meters" or "42 grams" are both also "amounts", whereas calling those "measures" or "measurements" would be more opinionated about how the figure was reached.

[04:44:28.0320] <eemeli>
toLocaleString potentially yes, delegating to Intl.NumberFormat. Not at all so sure about toString; what would be the use case for it?

[04:45:44.0998] <eemeli>
I think that's a question that would be best answered within a more general currency formatting context, as any answer here ought to match the answer given by Intl.NumberFormat.

[04:47:57.0156] <eemeli>
I agree that conversion is nice, but I think it's also complicated -- and has its own Stage 1 proposal: https://github.com/tc39/proposal-smart-unit-preferences

[04:57:08.0967] <Jesse>
ah, right

[04:57:27.0015] <Jesse>
I wonder if the harmony under discussion should also include smart units

[04:57:39.0255] <Jesse>
the current measure README explicitly refers to smart units

[05:03:06.0937] <eemeli>
Yeah, there's a continuum of (at least) three separate considerations here that we're trying to solve:
- How to represent a number together with its unit/currency/precision (Measure/Amount)
- How to convert values between compatible units (Smart Units)
- How to represent numbers better (Decimal)

I think Decimal depends on Amount, and unit conversion _might_ depend on Decimal if that's the chosen type for the value of an Amount after conversion. So I'm looking for a way to solve the first problem in a way that doesn't require simultaneously solving all the problems and introducing all of these cross-dependencies.

[05:09:12.0850] <Jesse>
I like the suggestion to use decimal as the result of doing conversions

[05:09:49.0234] <Jesse>
these typically involve things like taking reciporocals or multiplying values (including squaring, cubing, etc.) so decimal feels like a good match

[05:10:06.0311] <Jesse>
since it's promise is to provide more precision

[05:10:31.0620] <eemeli>
The cleanest way that I see for this stack to proceed would be:
1. Amount
2. Decimal
3. Unit conversions

Then each step would only depend on things before it.

[05:12:57.0943] <Jesse>
that looks good -- I'd like to see decimal building on amount/measure so I think it makes sense to focus on amount

[05:42:33.0698] <Jesse>
I think given the amount of interest in these topics it might make sense to set up a regular call for decimal, measure/amount, and smart units

[05:43:27.0156] <Jesse>
things are sort of scattered atm -- I've discussed this stuff in TG2, TG3, in plenary, in this channel, and (to a much lesser extent) the delegates channel

[05:44:59.0825] <Jesse>
how about tomorrow (Thursday, February 13th) at, say, 18:00 CET?

