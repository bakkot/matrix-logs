2025-07-02
[03:14:03.0877] <nicolo-ribaudo>
Unfortunately I'll not be able to join the meeting today (due to some rain that happened a few days ago causing significant travel disruptions üòÖ)

[03:14:13.0764] <nicolo-ribaudo>
* Unfortunately I'll not be able to join the meeting today (due to some rain that happened a few days ago causing significant travel disruptions and messing up my schedule üòÖ)

[04:30:26.0431] <eemeli>
I'll be there. Should be able to share a draft of the spec changes for keep-trailing-zeros that I've been working on.

[05:39:23.0143] <eemeli>
Said spec draft: https://github.com/eemeli/ecma402/pull/1

I found it easier to start on the diff by working on a branch of the whole `ecma402` repo; is there any ecmarkup tooling that could take a git diff and generate the usual sort of proposal spec presentation from that?

[05:39:40.0438] <eemeli>
* Said spec draft: https://github.com/eemeli/ecma402/pull/1

I found it easier to start on the diff by working on a fork of the whole `ecma402` repo; is there any ecmarkup tooling that could take a git diff and generate the usual sort of proposal spec presentation from that?

[05:46:59.0398] <Richard Gibson>
> is there any ecmarkup tooling that could take a git diff and generate the usual sort of proposal spec presentation from that?

well, it's trivial to just apply the diff and render the resulting spec‚Äîor did you have something else in mind, like translating `git diff --word-diff=plain` `[-removed-]`/`{+added+}` output into `<del>removed</del>`/`<ins>added</ins>`?

[05:50:56.0236] <eemeli>
Yes, to the latte question.

[05:50:59.0754] <eemeli>
* Yes, to the latter question.

[05:52:09.0926] <Jesse>
I'll be there

[05:52:15.0642] <eemeli>
Not having previously worked on a proposal that's more about changing existing text rather than adding new stuff, I figured I'd ask as I presume this type of thing happens on occasion.

[06:18:21.0415] <Jesse>
I've also got a PR for reducing the scope of measure in line with our earlier discussions: https://github.com/tc39/proposal-measure/pull/29

[07:51:41.0710] <eemeli>
Jesse: Added some comments on your PR.

[07:57:17.0785] <eemeli>
Jesse: In https://github.com/tc39/proposal-measure/pull/29 you're proposing that we drop units and currencies from the initial Amount? That seems surprisingly different from what we've been discussing so far.

[08:20:57.0738] <Jesse>
ah, right -- taking a look at the old notes, I realize I cut too much

[08:21:05.0965] <Jesse>
I'll restore units + currency

[08:21:07.0426] <Jesse>
sorry about that

[08:21:12.0838] <Jesse>
I'll restore units + currency

[08:22:25.0657] <Jesse>
in the spec text we do support units + currency, so the README and spec are out-of-sync

[09:02:46.0863] <Jesse>
call now: https://docs.google.com/document/d/1O2EQC61TIDtkcvDSkhDf4N_R9GioT0foU2tH9HBdMdQ/edit?pli=1&tab=t.0

[09:07:01.0924] <Jesse>
ugh permissions issue, stil trying...


2025-07-03
[04:41:13.0609] <Jesse>
taking a look at the issue of the Amount spec text not yet handling Intl.NumberFormat, it seems to me that no spec text is needed (!) provided that keep-trailing-zero is merged in

[04:44:20.0605] <Jesse>
the `FormatNumeric` AO seems to be doing the heavy lifting in NumberFormat; and given that the `ToPrimitive` AO will result in a call to `toString` on Amount objects (because there won't be a `.valueOf` method), it seems to me that, with Eemeli's bugfix, NumberFormat should work out-of-the-box with Amounts

[09:53:01.0307] <eemeli>
Well, not with Amounts that include a unit or currency. For those, the toString() output will not be parseable as a number, and the currency or unit in the Amount will be discarded.

[14:02:01.0697] <Richard Gibson>
color me sniped: https://gist.github.com/gibson042/180b7147f84e17e4d55d2893f28719a2


2025-07-04
[02:20:33.0109] <eemeli>
Regarding [this](https://github.com/tc39/proposal-measure/pull/29#discussion_r2182738311) short conversation between Jesse and myself, I've started to think that the default behaviour of `Amount.p.toString()` should be to return the numeric string with no unit/currency markers, so that e.g. `new Decimal(amount)` would work without any special Amount-detection code.

The with-marker behaviour could be implemented optionally, e.g. with `.toString({ style: 'long' })` where `style: 'numeric'` would be the default.

[02:37:28.0370] <eemeli>
I've added suggestions to the PR implementing the above.


2025-07-05
[12:17:48.0748] <sffc>
I strongly oppose a toString function not being round-trippable to the type it was created from

[12:18:29.0872] <sffc>
* I strongly oppose a toString function having default behavior that is not round-trippable to the type it was created from

[12:20:57.0749] <sffc>
* I strongly oppose a toString function having default behavior that is not round-trippable to the type it was created from, for a number of reasons. I didn't think this was a controversial position, but if it would help, I'll make another writeup like I did with #175 (why precision is important) and #181 (why Decimal isn't the only solution for representing exact numbers)

[12:22:44.0258] <sffc>
> so that e.g. new Decimal(amount) would work without any special Amount-detection code.
This is based on the potentially flawed premise that `new Decimal(amount)` would call ToString on the `amount`, but TC39 has ruled that we don't want this type of implicit conversion.

[12:22:49.0649] <sffc>
* > so that e.g. new Decimal(amount) would work without any special Amount-detection code.

This is based on the potentially flawed premise that `new Decimal(amount)` would call ToString on the `amount`, but TC39 has ruled that we don't want this type of implicit conversion.

[12:27:42.0060] <sffc>
Besides that point, I don't find the `new Decimal(amount)` argument to be convincing because:

1. Brand checking is easy and ECMA does it all the time now, and even without brand checking, it could check for e.g. a `.decimal` field or a `Symbol.toDecimal` function
2. Amount can have a `toDecimal` function, which looks nicer in chaining (people like method chaining)


2025-07-09
[02:41:25.0930] <Jesse>
perhaps on Thursday we can discuss this

[02:41:28.0143] <Jesse>
https://github.com/tc39/proposal-measure/pull/29#discussion_r2194555604


2025-07-10
[09:04:01.0990] <Jesse>
eemeli: are you able to come?

[10:00:31.0366] <Jesse>
here are the items I have as next steps for us:

[10:00:47.0544] <Jesse>
* Prepare slides for Measure for stage 2
* Allow ‚Äú1.2[kg]‚Äù in the constructor (currently not allowed)
* Change Intl.NmberFormat to accept merely style: unit/currently without throwing.
* Add toNumber to spec text
* ToPrimitive: should give number or string if no currency/unit, throw otherwise.
* RGN updates us about concerns re: currency in the chat or as an issue


[10:02:25.0606] <Jesse>
* - Prepare slides for Amount for stage 2
- Allow ‚Äú1.2\[kg\]‚Äù in the constructor (currently not allowed)
- Change Intl.NmberFormat to accept merely style: unit/currently without throwing.
- Add toNumber to spec text for Amount
- ToPrimitive: should give number or string if no currency/unit, throw otherwise.
- RGN updates us about concerns re: currency in the chat or as an issue

[11:01:37.0239] <eemeli>
Supporting ‚Äú1.2[kg]‚Äù in the constructor would presumably let `new Amount(a)` "just work", where `a` is itself an Amount.


2025-07-15
[04:24:47.0381] <eemeli>
The draft spec for keep-trailing-zeros is now available: https://tc39.es/proposal-intl-keep-trailing-zeros

Richard Gibson's script was really useful in generating that from https://github.com/eemeli/ecma402/pull/1, which I'll continue to keep open & in sync with the proposal repo's version.

I've submitted this for stage 2/2.7 advancement at the upcoming TC39 meeting, and am currently working on slides for it.


2025-07-16
[11:00:13.0188] <sffc>
eemeli: For the Mixed Units proposal, Ben's README has examples like
```
    let footAndInch = new Measurement(5.5, {unit: "foot-and-inch"})
    footAndInch.toComponents()
    // [ {value: 5, unit: "foot"}, {value: 6, unit: "inch"}]
    footAndInch.toString()
    // "5 feet and 6 inches"
```
This requires unit conversion. Did you have in mind a way to implement mixed unit formatting without that?

[11:00:59.0675] <sffc>
Note: We already support ListFormat with type="unit", and you can glue together your own mixed unit format string if you have the individual values.

