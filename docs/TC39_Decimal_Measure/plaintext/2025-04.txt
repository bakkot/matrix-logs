2025-04-07
[09:02:15.0546] <eemeli>
I see that there's a Decimal.Amount item on the agenda. Would it be possible to get a reply from sffc or Jesse to [this question](https://github.com/tc39/proposal-measure/issues/26#issuecomment-2759531000) I left on the issue two weeks ago?

[09:03:46.0492] <Jesse>
yes, I'll take a look -- thanks!


2025-04-09
[07:03:13.0310] <Jesse>
if you're interested, you're welcome to take a look at the current slides for the decimal update next week: https://notes.igalia.com/p/tc39-2025-04-decimal-intl-integration#/

[07:04:21.0629] <Jesse>
I've tried to incorporate feedback on our recent discussions here and present a version of Decimal.Amount that I think warrants discussion in plenary

[07:08:34.0338] <Jesse>
eemeli: are you happy with N-ic's response to the question?

[08:43:33.0169] <sffc>
I think
1. We should spend more time overall on motivation and less on the API
2. Discuss how this design addresses committee feedback from February
3. We should probably change "withSignificantDigits" to "toAmount" to address Eemeli's feedback)

[08:47:21.0619] <Jesse>
agree -- I can add a bit to the slides

[09:23:02.0933] <Richard Gibson>
Thanks!
* I think slide 8 would be better if it demonstrated *in*equality of values with differing precision (e.g., `v.equals(v.withFractionalDigits(2)) // false`).
* There seems to be a typo on slide 11 (extraneous trailing `)` in the code block).
* On slide 12, "_`Intl.NumberFormat` should handle `Decimal.Amount` values (the former is a kind of number)_" seems non-grammatical (what is "_the former_" referring to?).
* Slide 15 misspells "Discussion".

[09:23:22.0470] <Jesse>
ack, thank you -- I'm on it!


2025-04-10
[22:31:05.0129] <eemeli>
Niocolo's reply does answer my questions, but it doesn't really make me happy about `Decimal.Amount`. According to the current version of the slides it's described as:
> Today, we propose a new `Decimal.Amount` primordial for storing a (1) decimal value (2) with a precision (3) but without a unit.

That last part in particular seems rather novel and surprising, and I can't find any mention of such an approach in the repo or meeting notes. I proposed the term "amount" as an alternative for "measure", but now it's being taken up as a part of Decimal and won't include any units?

[22:39:36.0205] <sffc>
My mental model of `Decimal.Amount` is that it contains both a precision and a unit

[22:41:14.0124] <sffc>
* My mental model of `Decimal.Amount` is that it contains both a precision and a unit. I just looked at Jesse's updated slides and they are proposing a specific shape I haven't seen before.

[22:46:40.0126] <sffc>
I don't agree with the framing of the motivation on slide 4. There wasn't consensus that the proposals remain separate; I would describe it as skepticism raised by some delegates that the use cases were similar enough to merge them.

[22:50:33.0422] <sffc>
We should highlight that we took home the feedback about building a _protocol_, and we investigated it. We found, however, that only the primordial brings immutability, ergonomics, and interoperability to the table. To address the feedback about a top-level `Amount` not seeming well-motivated, we are coming with an updated proposal that scopes the primordial under `Decimal.Amount`, to make clear that this is a type that is designed to live in the Decimal universe.

