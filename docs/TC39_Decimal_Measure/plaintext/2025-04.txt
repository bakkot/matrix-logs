2025-04-07
[09:02:15.0546] <eemeli>
I see that there's a Decimal.Amount item on the agenda. Would it be possible to get a reply from sffc or Jesse to [this question](https://github.com/tc39/proposal-measure/issues/26#issuecomment-2759531000) I left on the issue two weeks ago?

[09:03:46.0492] <Jesse>
yes, I'll take a look -- thanks!


2025-04-09
[07:03:13.0310] <Jesse>
if you're interested, you're welcome to take a look at the current slides for the decimal update next week: https://notes.igalia.com/p/tc39-2025-04-decimal-intl-integration#/

[07:04:21.0629] <Jesse>
I've tried to incorporate feedback on our recent discussions here and present a version of Decimal.Amount that I think warrants discussion in plenary

[07:08:34.0338] <Jesse>
eemeli: are you happy with N-ic's response to the question?

[08:43:33.0169] <sffc>
I think
1. We should spend more time overall on motivation and less on the API
2. Discuss how this design addresses committee feedback from February
3. We should probably change "withSignificantDigits" to "toAmount" to address Eemeli's feedback)

[08:47:21.0619] <Jesse>
agree -- I can add a bit to the slides

[09:23:02.0933] <Richard Gibson>
Thanks!
* I think slide 8 would be better if it demonstrated *in*equality of values with differing precision (e.g., `v.equals(v.withFractionalDigits(2)) // false`).
* There seems to be a typo on slide 11 (extraneous trailing `)` in the code block).
* On slide 12, "_`Intl.NumberFormat` should handle `Decimal.Amount` values (the former is a kind of number)_" seems non-grammatical (what is "_the former_" referring to?).
* Slide 15 misspells "Discussion".

[09:23:22.0470] <Jesse>
ack, thank you -- I'm on it!


2025-04-10
[22:31:05.0129] <eemeli>
Niocolo's reply does answer my questions, but it doesn't really make me happy about `Decimal.Amount`. According to the current version of the slides it's described as:
> Today, we propose a new `Decimal.Amount` primordial for storing a (1) decimal value (2) with a precision (3) but without a unit.

That last part in particular seems rather novel and surprising, and I can't find any mention of such an approach in the repo or meeting notes. I proposed the term "amount" as an alternative for "measure", but now it's being taken up as a part of Decimal and won't include any units?

[22:39:36.0205] <sffc>
My mental model of `Decimal.Amount` is that it contains both a precision and a unit

[22:41:14.0124] <sffc>
* My mental model of `Decimal.Amount` is that it contains both a precision and a unit. I just looked at Jesse's updated slides and they are proposing a specific shape I haven't seen before.

[22:46:40.0126] <sffc>
I don't agree with the framing of the motivation on slide 4. There wasn't consensus that the proposals remain separate; I would describe it as skepticism raised by some delegates that the use cases were similar enough to merge them.

[22:50:33.0422] <sffc>
We should highlight that we took home the feedback about building a _protocol_, and we investigated it. We found, however, that only the primordial brings immutability, ergonomics, and interoperability to the table. To address the feedback about a top-level `Amount` not seeming well-motivated, we are coming with an updated proposal that scopes the primordial under `Decimal.Amount`, to make clear that this is a type that is designed to live in the Decimal universe.

[23:57:22.0391] <ljharb>
why would "amount" include a unit?

[23:57:31.0979] <ljharb>
amount to me is like a magnitude, it's unitless

[00:09:25.0928] <nicolo-ribaudo>
> <@ljharb:matrix.org> why would "amount" include a unit?

The idea is that:
- the decimal proposal introduces plain decimals, exactly as it was for the past year
- for good Intl integration and to be able to fully represent external decimal128 values, the proposal also introduced an object that lets you represent a (decimal,precision) pair. This object doesn't support any operations, it's just some data payload + a comparison function. It has a prototype, to put the function on it, as well as things like .toLocaleString.
- the measure proposal needs a way to define an (object,precision,unit): given that for the other proposal we are defining (object,precision) already, this proposal can just add the unit there.

Whether it's called Amount, Measure, or something else doesn't really matter for now — if we have .to/.with/.someThing else methods to get to it, we could even not expose the constructor at all (like we don't expose ArrayIterator)

[00:10:06.0906] <nicolo-ribaudo>
* The idea is that:
- the decimal proposal introduces plain decimals, exactly as it was for the past year
- for good Intl integration and to be able to fully represent external decimal128 values, the proposal also introduced an object that lets you represent a (decimal,precision) pair. This object doesn't support any operations, it's just some data payload + a comparison function. It has a prototype, to put the function on it, as well as things like .toLocaleString.
- the measure proposal needs a way to define an (object,precision,unit): given that for the other proposal we are defining (object,precision) already, this proposal can just add the unit there.
Whether it's called Amount, Measure, or something else doesn't really matter for now — if we have .to/.with/.someThing else methods to get to it, we could even not expose the constructor at all (like we don't expose ArrayIterator). Although this is more like a nuclear option, because people will give a name to these objects and we are in a position to direct that.


[00:10:15.0365] <nicolo-ribaudo>
* The idea is that:
the decimal proposal introduces plain decimals, exactly as it was for the past year
for good Intl integration and to be able to fully represent external decimal128 values, the proposal also introduced an object that lets you represent a (decimal,precision) pair. This object doesn't support any operations, it's just some data payload + a comparison function. It has a prototype, to put the function on it, as well as things like .toLocaleString.
the measure proposal needs a way to define an (object,precision,unit): given that for the other proposal we are defining (object,precision) already, this proposal can just add the unit there.
Whether it's called Amount, Measure, or something else doesn't really matter for now — if we have .to/.with/.someThing else methods to get to it, we could even not expose the constructor at all (like we don't expose ArrayIterator). Although this is more like a nuclear option, because people will give a name to these objects and we are in a position to direct that.


[00:10:38.0824] <nicolo-ribaudo>
* The idea is that:

- the decimal proposal introduces plain decimals, exactly as it was for the past year

- for good Intl integration and to be able to fully represent external decimal128 values, the proposal also introduced an object that lets you represent a (decimal,precision) pair. This object doesn't support any operations, it's just some data payload + a comparison function. It has a prototype, to put the function on it, as well as things like .toLocaleString.

- the measure proposal needs a way to define an (object,precision,unit): given that for the other proposal we are defining (object,precision) already, this proposal can just add the unit there.


Whether it's called Amount, Measure, or something else doesn't really matter for now — if we have .to/.with/.someThing else methods to get to it, we could even not expose the constructor at all (like we don't expose ArrayIterator). Although this is more like a nuclear option, because people will give a name to these objects and we are in a position to direct that.

[00:10:50.0378] <nicolo-ribaudo>
Oh well I give up on formatting this as a list

[00:12:34.0955] <sffc>
I was proposing that `Decimal.Amount` adds both precision and unit. There is no middle intermediate type; it is just a `Decimal.Amount` with a null unit. Some delegates were already skeptical of adding 1 type, so I didn't want to push my luck with 2 types (and then we'd have to name them), plus Luca pointed out that there isn't really any JS duck-typing advantage to distinguishing "null unit" from "type does not support a unit". So it seems simplest to keep them as one type.

[00:13:45.0683] <nicolo-ribaudo>
Yes I've been convinced that we should have them as a single object. The .unit should be on the Decimal.Amount object, and not on a third new one.

[00:14:10.0429] <nicolo-ribaudo>
This is unrelated to how the proposals are merged/split though, a proposal can add a property/field on an existing object 

[00:15:24.0760] <sffc>
/me verifies that the Decimal.Amount OP does indeed state that the unit is in the data model of Decimal.Amount

[00:16:36.0326] <sffc>
I see

[00:16:59.0649] <nicolo-ribaudo>
Yes I double-checked yesterday too :)

My mental model of the end state matches exactly what you described there

[00:17:29.0872] <sffc>
If you think removing the unit field from my formulation of `Decimal.Amount` is more likely to make it palatable in the short term for Stage 2 purposes... okay with me. Not sure about Eemeli.

[00:19:01.0064] <nicolo-ribaudo>
I think it's not only good for decimal (keeping the proposal focused on its goal), but it also makes life easier for proposal-that-adds-the-unit: there is no new object to justify, it's just adding a field on an existing one

[00:20:32.0529] <nicolo-ribaudo>
And I think Decimal.Amount should be justified entirely on Intl integration and interop with external systems, without saying "it will be _needed_ to add units", even though we must make it clear from the beginning that the plan is the other proposal will slot into that

[00:23:58.0413] <nicolo-ribaudo>
A question I have for eemeli is: you expressed disappointment with entangling the two proposals in the past. If plain Decimal was much further ahead in the process than Measure (or if decimal was already stage 4!), would you be ok with this design?

[00:58:00.0772] <eemeli>
I continue to think that trying to intermingle these proposals is making the whole situation less rather than more clear. Is "this design" the following?
- A `Decimal` would not carry any precision information.
- The decimal proposal introduces `Decimal.Amount` as an object that carries precision information, but does not support mathematical operations.
- The measure proposal adds `unit` to `Decimal.Amount`.

[01:13:16.0263] <nicolo-ribaudo>
Yes

[01:34:53.0337] <eemeli>
Ok, then in a hypothetical future where something like `Decimal.Amount` was already stage 3 or 4, then it would indeed be obvious for measure to be adding `unit` to it. But this is not where we are now, and I don't see the value of the question. More significantly, I don't understand why `Decimal.Amount` needs to be included in the decimal proposal, if `Decimal` itself will not carry precision information.

In the current slides, the motivation and use cases for `Decimal` and `Decimal.Amount` appear to be orthogonal, with the former serving data exchange, while the latter is for formatting values with precision. Why are both of these mixed into the decimal proposal?

Would it not be simpler to have one proposal (decimal) providing a solution for data exchange, and another proposal (measure) providing a solution for formatting values with precision?

[06:34:05.0076] <Jesse>
I think the current `Decimal.Amount` is also relevant for the data exchange story because part of the story may involve a developer's need to preserve all digits of a number coming over the wire, and/or transmitting a decimal value with that precision

[06:36:26.0986] <Jesse>
with `Decimal` alone, that aspect of the data exchange story is harder to sell because you'd need to store a decimal value from a string coming over the wire, and then calculate the precision of it on the side (e.g. by simple parsing, looking for the "." character, then counting the digits on the left and right). And that extra information would need to stored separately from the decimal value

[06:37:42.0077] <Jesse>
there is another way to understand the data exchange story, which is preservation of mathematical accuracy (i.e., no rounding). That's where `Decimal` fits the bill

[06:58:33.0787] <Jesse>
with `Decimal.Amount` we also address complementary needs for formatting decimals

[06:59:32.0508] <Jesse>
so I understand the point about orthogonal needs but I might say that the current design, with Decimal.Amount, addresses two complementary needs

[07:01:21.0880] <Jesse>
I think that Decimal.Amount also helps us to not get too entangled with issues of units and the use cases arising from them, such as conversion, formatting, canonicalization (or not?) (e.g. kilometer --> meter)

[07:02:32.0354] <Jesse>
thus Decimal.Amount helps us to stay in the realm of decimal numbers properly speaking, without getting caught up by unit issues

[07:31:23.0383] <littledan>
I'm opposed to making Decimal more complicated by adding this other Decimal.Amount class. What if we made Amount part of the Measure proposal. Whether it's two classes or one, either way could work, but this is beyond the core behavior of Decimal. (It'd be fine if we say, Intl.PluralRules doesn't work for Decimal)

[07:31:58.0864] <littledan>
* I'm opposed to making Decimal more complicated by adding this other Decimal.Amount class. What if we made Amount part of the Measure proposal? Whether Amount is a separate class from Measure or it's just a Measure with a null unit, either way could work, but this is beyond the core behavior of Decimal. (It'd be fine if we say, Intl.PluralRules doesn't work for Decimal)

[07:33:41.0132] <littledan>
I don't think that "Decimal has no value for Intl" is a reasonable counterargument. TC39 would not let almost any Intl proposal through if every proposal had to be seen as of core importance to every delegate's goals.

[07:40:53.0088] <littledan>
so I agree 100% with Eemeli

[08:59:10.0955] <nicolo-ribaudo>
I'll be a few minutes late

[09:03:50.0526] <Jesse>
Dan and Eemeli and I are here

[09:48:01.0085] <sffc>
Two reasons I don't agree with this line of reasoning:

1. JS is a great language for i18n _because_ we take an Intl-first approach. In the last 10 years, Decimal is second only to Temporal in being a proposal that impacts i18n. It should also take an Intl-first approach.
2. Decimal by itself is a fairly weekly-motivated proposal due to reasons I've made clear on GitHub (we can agree to disagree on this). Decimal with Intl makes the proposal well-motivated.

[09:50:54.0192] <littledan>
yes, I disagree with 2

[09:51:28.0050] <littledan>
I'm happy that the Measure proposal is being developed. We should have something like this in our standard library.

[09:53:03.0959] <littledan>
but I really don't see any cases where looking at Intl makes us want to go back and change the underlying proposal. I think it'd be worth it to fully develop Measure and check whether there's anything like this.

[12:10:33.0513] <littledan>
* What if we made Amount part of the Measure proposal? Whether Amount is a separate class from Measure or it's just a Measure with a null unit, either way could work, but this is beyond the core behavior of Decimal. (It'd be fine if we say, Intl.PluralRules doesn't work for Decimal)

[16:44:58.0243] <sffc>
Putting aside disagreements regarding process and procedure, the two _outcomes_ I want to _avoid_ are:

1. JS ends up with separate Decimal and Amount/Measure types that together are not maximally symbiotic
2. JS ends up with Decimal but no intrinsic for its i18n interop

The way we get to (1) is if we pursue Amount/Measure by itself, optimized for existing numeric types in JS, and then Decimal comes along later, but Amount/Measure is not designed with maximal Decimal integration. For example, Decimal.Amount has a more elegant way of handling precision than a polymorphic Amount/Measure would be able to have.

The way we get to (2) is if Decimal gets to Stage 2 without Intl support, and then Amount/Measure gets blocked for whatever reason (lack of consensus around intrinsic vs protocol, etc).

Going back to process/procedure questions, the way to prevent both of these outcomes is to put Decimal.Amount into the Decimal proposal (with precision only, no units for now) and advance it to Stage 2. If Decimal gets approved, so does Decimal.Amount.

[16:52:04.0477] <sffc>
It's worth reminding everyone that we _almost_ got Stage 2 on full decimal last summer. The hold-out was Jordan who took the position that "if we're adding Decimal, let's do it right and make equality and arithmetic and stuff work the way devs expect it to work". In other words, the other delegates were mostly okay with having a type in the language that has the shape of Decimal.Amount.

Our latest proposal is that we have Decimal as the ergonomic entrypoint, and we keep full decimal, renamed to Decimal.Amount, to cover the use cases that Decimal doesn't cover by itself. This seems like a great compromise.

[16:52:20.0492] <sffc>
* It's worth reminding everyone that we _almost_ got Stage 2 on Full Decimal128 last summer. The hold-out was Jordan who took the position that "if we're adding Decimal, let's do it right and make equality and arithmetic and stuff work the way devs expect it to work". In other words, the other delegates were mostly okay with having a type in the language that has the shape of Decimal.Amount.

Our latest proposal is that we have Decimal as the ergonomic entrypoint, and we keep full decimal, renamed to Decimal.Amount, to cover the use cases that Decimal doesn't cover by itself. This seems like a great compromise.

[16:52:48.0877] <sffc>
* It's worth reminding everyone that we _almost_ got Stage 2 on Full Decimal last summer. The hold-out was Jordan who took the position that "if we're adding Decimal, let's do it right and make equality and arithmetic and stuff work the way devs expect it to work". In other words, the other delegates were mostly okay with having a type in the language that has the shape of Decimal.Amount.

Our latest proposal is that we have Decimal as the ergonomic entrypoint, and we keep Full Decimal, renamed to Decimal.Amount, to cover the use cases that Decimal doesn't cover by itself. This seems like a great compromise.

[16:56:50.0436] <sffc>
What do people think of this comparison: in Temporal, by themselves, MonthDay or YearMonth might not be super strongly motivated. We would have been able to achieve most of the value proposition of Temporal by just having PlainDate. However, the champions decided amongst themselves that these two types were an important part of the whole overall package of an ergonomic datetime API. The plenary trusted our judgement, and now we have the types. In a similar way, Decimal.Amount should be a type that we position as motivated as a piece of the ergonomic numerics type system, and it is just one piece of the proposal that we put in front of plenary.

[16:59:07.0052] <sffc>
* Putting aside disagreements regarding process and procedure, the two _outcomes_ I want to _avoid_ are:

1. JS ends up with separate Decimal and Amount/Measure types that together are not maximally symbiotic
2. JS ends up with Decimal but no ergonomic solution for its i18n interop

The way we would get to (1) is if we pursue Amount/Measure by itself, optimized for existing numeric types in JS, and then Decimal comes along later, but Amount/Measure is not designed with maximal Decimal integration. For example, Decimal.Amount has a more elegant way of handling precision than a polymorphic Amount/Measure would be able to have.

The way we would get to (2) is if Decimal gets to Stage 2 without Intl support, and then Amount/Measure gets blocked for whatever reason (lack of consensus around intrinsic vs protocol, etc).

Going back to process/procedure questions, the way to prevent both of these outcomes is to put Decimal.Amount into the Decimal proposal (with precision only, no units for now) and advance it to Stage 2. If Decimal gets approved, so does Decimal.Amount.


2025-04-11
[17:04:20.0500] <sffc>
* What do people think of this comparison: in Temporal, by themselves, MonthDay or YearMonth might not be super strongly motivated. We would have been able to achieve most of the value proposition of Temporal by just having PlainDate. However, the champions decided amongst themselves that these two types were an important part of the whole overall package of an ergonomic datetime API. The plenary trusted our judgement, and now we have the types. In a similar way, Decimal.Amount should be a type that we position as motivated as a piece of the ergonomic numerics type system, and it is just one piece of the proposal that we put in front of plenary.

I don't think it is right to position this as a question we ask plenary: "should we include Decimal.Amount?" That's just an opportunity for inconclusive debate around what it means to be motivated and what is the bar for being motivated and what the alternatives could be. In Temporal, we didn't ask "should we include Temporal.PlainYearMonth?" We just included it as part of our package. Delegates who were interested left feedback on GitHub. This is what we can and should do with Decimal.Amount.

[17:05:18.0065] <sffc>
* What do people think of this comparison: in Temporal, by themselves, MonthDay or YearMonth might not be super strongly motivated. We would have been able to achieve most of the value proposition of Temporal by just having PlainDate. However, the champions decided amongst themselves that these two types were an important part of the whole overall package of an ergonomic datetime API. The plenary trusted our judgement, and now we have the types. In a similar way, Decimal.Amount should be a type that we position as motivated as a piece of the ergonomic numerics type system, and it is just one piece of the proposal that we put in front of plenary.

I don't think it is right to position this as a question we ask plenary: "should we include Decimal.Amount?" That's just an opportunity for inconclusive debate around what it means to be motivated and what is the bar for being motivated and what the alternatives could be. In Temporal, I don't recall us asking "should we include Temporal.YearMonth?" We just included it as part of our package. Delegates who were interested left feedback on GitHub. This is what we can and should do with Decimal.Amount.

[01:09:33.0158] <eemeli>
> Decimal but no ergonomic solution for its i18n interop

sffc What would this look like? As we've agreed that Decimal (the one that does math) won't include precision, my understanding is that without any changes in ECMA-402 attempting to format a Decimal with NumberFormat or select its plural category will call its `.toString()` method, and get the user the result that they might expect from the Decimal's numerical value.

This won't really add any new capabilities for number formatting, but it won't take them away either, so I don't see how the i18n interop of even a minimal Decimal would not have an ergonomic solution.

[01:11:46.0694] <eemeli>
Also, just to clarify, I am not advocating for a polymorphic Amount, and I'm not aware of anyone else doing so either. I do think that a black-box Amount would be sufficient for i18n purposes, but that's not the same thing.

[01:15:43.0703] <nicolo-ribaudo>
The "good intl support for decimal" that Shane would be happy with is something along the lines of https://github.com/nicolo-ribaudo/proposal-numeric-with-precision (but just for decimal). It's what evolved in the discussions of merging decimal and measure, but we can figure out what's the _minimal_ chunk that would need to be added to Decimal that:
- is good enough for intl
- can be extended by the measure/amount proposal

[01:17:56.0173] <nicolo-ribaudo>
* The "good intl support for decimal" that Shane would be happy with is something along the lines of https://github.com/nicolo-ribaudo/proposal-numeric-with-precision (but just for decimal, and without the protocol). It's what evolved in the discussions of merging decimal and measure, but we can figure out what's the _minimal_ chunk that would need to be added to Decimal that:
- is good enough for intl
- can be extended by the measure/amount proposal

[06:05:24.0806] <Jesse>
can you say more about what a black-box Amount is, versus a minimal Amount?

[06:06:15.0607] <Jesse>
atm the current Decimal.Amount does almost nothing, except string formatting and equality comparison (which itself is pretty trivial)

[06:06:23.0649] <eemeli>
It's an Amount that doesn't directly tell you what its contained value is, so it's only available as e.g. a string.

[06:07:36.0113] <Jesse>
ah, I see. At the moment that's what we've got, though the current design needs to be updated somewhat if we want this to be  a basis for measure, and not just the end of the road for Decimal

[06:22:00.0950] <Jesse>
another alternative is that Measure/Amount is its own primordial

[06:23:15.0658] <Jesse>
we've talked about the 2-class vs. 3-class approach before, and argued in favor of the 2-class approach, but I wonder if we want to revisit that

[06:24:33.0850] <Jesse>
the line of thinking I have in mind is: is Measure really so close to Decimal.Amount that Measure has to be viewed as an extension of Decimal.Amount?

[06:25:42.0537] <Jesse>
if we look at Decimal.Amount as a solution to a couple of problems arising from the decimal problem space, then maybe it's just an accident that Measure -- if you drop some data -- looks like a Decimal.Amount

[07:39:35.0891] <littledan>
OK, I guess I'm sold on Decimal.Amount at this point

[07:39:53.0892] <littledan>
we should probably go back and make sure it has the full IEEE data model though (including negative precision)

[07:40:10.0567] <littledan>
it vaguely makes sense to model significant digits (?)

[07:40:34.0227] <littledan>
I guess I see little risk of 1., but cannot disagree with you that 2. is a possibility

[07:41:10.0110] <littledan>
yes, Temporal is a strong reference point for "let's not worry too much about making too many classes, and make sure we have a clean division of what's logically actually represented, rather than filling in nulls"

[07:41:23.0945] <littledan>
except the difference is that Decimal.Amount is much lighter-weight

[07:42:13.0389] <littledan>
(what if we called the class Decimal.WithPrecision?)

[07:54:11.0014] <nicolo-ribaudo>
What if for now we call it `Decimal.ThatObject`, and just name it further ahead during stage 2 once both the proposal are at stage 2? :)

[07:54:30.0791] <littledan>
heh Amount is fine for now

[07:54:46.0374] <littledan>
anyway I've flipped the polarity of how I feel about this proposal

[07:54:57.0136] <littledan>
not sure what I was thinking...

[07:55:36.0006] <littledan>
it's nice and minimal

[07:57:58.0822] <nicolo-ribaudo>
(disclosure :P) I was talking with Dan about this potential minimal version of this: https://nicolo-ribaudo.github.io/proposal-decimal-with-precision/ and https://github.com/nicolo-ribaudo/proposal-decimal-with-precision

It's currently broken because I forgot to round, and it has the .with method naming that Eemeli suggested to change, but it could be a good starting point 

[08:04:56.0650] <eemeli>
Is this not satisfied by indicating significant digits with a positive integer number?

[08:06:39.0017] <littledan>
well, yeah, that's what IEEE calls it, but this proposal flips the sign bit, but that's fine

[08:06:59.0351] <littledan>
I think it's probably more intuitive for positive to mean "more decimal places"

[08:15:02.0536] <eemeli>
I would prefer `Decimal.ThatObject`, or some other clearly not-final name for the part that is getting packaged into the decimal proposal. The i18n problem/need that it's fulfilling was only accepted by committee as a part of the measure proposal, and the clear intent is for it to be filled out with `unit` and `currency` fields by the measure proposal.

[08:17:52.0144] <littledan>
sure, SGTM

[08:26:24.0911] <eemeli>
Jesse: Regarding this phrase in the slides:
> We propose a new Decimal.Amount primordial for storing a (1) decimal value (2) with a precision (3) but without a unit.

Would it be perhaps more appropriate to phrase it a bit like this?
> We propose a new Decimal.Amount primordial for storing a decimal value with a precision.
> If accepted, the measure proposal may add fields to this primoridal to store unit or currency indicators.

[11:27:57.0700] <Jesse>
Yes, that’s closer to the intention — I’ll change it, thanks!

[11:59:45.0137] <Jesse>
would we need something like a `.withQuantum` method (name TBD) to expose this kind of capability? It could take a positive or negative integer (negative would be equivalent to `.withFractionalDigitss` with a negated argument)

[12:02:38.0116] <nicolo-ribaudo>
We should pick just one probably, especially because the word "quantum" is not very well known

[13:10:01.0755] <littledan>
yes, "precision" is way more clear than "quantum"

[13:30:08.0787] <nicolo-ribaudo>
For precision, I think both toFixed and Intl use positive numbers to mean "more digits of precision", so it'd be great to follow that. I don't actually know what the current PR does, or what IEEE does.

[13:30:46.0270] <nicolo-ribaudo>
I think we should stay within what can be encoded by IEEE, but we can expose it differently. Is the quantum the number of fractional digits or of significant digits?


2025-04-14
[11:32:12.0864] <nicolo-ribaudo>
Do you think it would it be backward compatible for Intl to check if the argument to `.format()` has a `.significantDigits` property, rather just checking for the internal slot?

[11:32:45.0134] <nicolo-ribaudo>
For some delegates it's important to try to not check internal slots other than on the `this` argument, so that the feature does not break with membranes

[11:32:57.0119] <nicolo-ribaudo>
* Do you think it would it be backward compatible for Intl to check if the argument to `.format()` has a `.significantDigits`/`.unit` property, rather just checking for the internal slot?

[11:36:19.0920] <ljharb>
while i agree with their motivations i think it's reasonable for static methods to check slots on arguments, altho no precedent has been set

[11:55:39.0012] <littledan>
yeah, I think this would make plenty of sense -- maybe we could do it in https://tc39.es/ecma402/2024/#sec-tointlmathematicalvalue for the case ToPrimitive would've thrown an error from no method existing

[13:43:08.0266] <eemeli>
If we have `.format()` check for properties, then what's the decimal-proposal need for something like `Decimal.Amount` to exist at all? Could a `Decimal.p.toAmount()` return something like
```
{ valueOf: () => 42, significantDigits: 3 }

[15:45:56.0296] <sffc>
eemeli: I struggle to identify a reason to favor that approach (essentially the protocol approach) instead of returning an intrinsic. An intrinsic gives us immutability, ability to attach methods such as toString and toLocaleString, constructors, brand checking.

[15:53:40.0343] <sffc>
* eemeli: An intrinsic gives us immutability, ability to attach methods such as toString and toLocaleString, constructors, brand checking. I don't see why _not_ to return an intrinsic from that method.


2025-04-15
[00:29:14.0917] <Jesse>
do we want Amount to support NaN, -0, and infinity?

