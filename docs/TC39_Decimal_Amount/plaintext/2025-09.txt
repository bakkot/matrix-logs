2025-09-02
[06:11:50.0738] <Jesse>
reminder -- we have a JS numerics call on Thursday!

[06:12:28.0669] <Jesse>
the main topic is to try to settle on how we want to handle infinity in the data model

[06:32:20.0263] <Jesse>
agenda is at https://docs.google.com/document/d/1O2EQC61TIDtkcvDSkhDf4N_R9GioT0foU2tH9HBdMdQ/edit?pli=1&tab=t.0#heading=h.v13inqtu2ric


2025-09-04
[09:02:50.0288] <sffc>
Running a few minutes late


2025-09-18
[08:30:06.0935] <eemeli>
We have a call today, yes?

[08:46:54.0255] <Jesse>
yes!

[08:47:06.0816] <Jesse>
agenda here: https://docs.google.com/document/d/1O2EQC61TIDtkcvDSkhDf4N_R9GioT0foU2tH9HBdMdQ/edit?pli=1&tab=t.0

[09:52:31.0485] <Jesse>
taking a look at https://github.com/tc39/proposal-amount/issues/54 , I think the SDO in keep-trailing-zeros should take care of most/all of these?

[09:53:17.0470] <Jesse>
(the version of the spec that WH is referring to is an older one that predates our pirating of some of keep-trailing-zero's functionality, specifically the SDO that computes significant digits)

[09:54:28.0236] <Jesse>
B-en would you be willing to add an open question to plenary in the amount slides about parsing numbers with units in them? E.g. `new Amount("42[kg]")

[09:54:33.0629] <Jesse>
* B-en would you be willing to add an open question to plenary in the amount slides about parsing numbers with units in them? E.g. \`new Amount("42\[kg\]")`

[09:54:41.0414] <Jesse>
* B-en would you be willing to add an open question to plenary in the amount slides about parsing numbers with units in them? E.g. `new Amount("42\[kg\]")`

[09:55:19.0910] <Jesse>
there was also an open question about what keep-trailing-zeroes does in Intl.NF when given exponential notation strings like "3e-5"

[09:57:06.0240] <Ben Allen>
and our current position is basically just... "we dunno?"

[09:57:12.0082] <Jesse>
yeah

[09:58:24.0385] <Jesse>
this might intersect with discussions about notation for numbers-with-units in ther contexts like CLDR etc. we're sort of rolling with a new (?) bracket notation

[10:01:13.0152] <Jesse>
there's also a todo to make an issue to discuss creatng amounts from an amount. I see a reference to that here: https://github.com/tc39/proposal-amount/issues/49#issuecomment-3286110669

[10:02:50.0591] <Jesse>
I'm not sure what the issue is? It seems to me that we'd like to have the property `new Amount(new Amount(a, b), c)` equivalent to new Amount(a, b).with(c)

[10:02:59.0031] <Jesse>
* I'm not sure what the issue is? It seems to me that we'd like to have the property `new Amount(new Amount(a, b), c)` equivalent to `new Amount(a, b).with(c)`

[10:04:58.0797] <Jesse>
or to put it differently: should we ban `new Amount(new Amount(...))`?

[10:05:45.0291] <Jesse>
thinking ahead to decimal and other number-y things, I suppose we should support them. but they'll be objects so I suppose we'd need to do some brand checks


2025-09-19
[20:29:42.0771] <sffc>
Jesse, can you make the polyfill available someplace like https://tc39.es/proposal-amount/docs/ so that people can use it in the web inspector like they can with the Temporal polyfill?

[23:43:45.0975] <Jesse>
great idea -- I'm on it!

[00:46:28.0500] <sffc>
I made some PRs to the README: https://github.com/tc39/proposal-amount/pull/60, https://github.com/tc39/proposal-amount/pull/61

[05:41:51.0151] <nicolo-ribaudo>
From the accounting software I use :)

[09:48:26.0666] <sffc>
Important Update: I had a discussion with folks from the V8 team about pushback on the proposal, who hold similar perspectives as some of the other skeptics. Good news is that we arrived at common ground on the proposal being acceptable, but with a name such as `FormattableAmount` that emphasizes that its semantics are around formatting as opposed to arithmetic or other things that users might want to use them for. I think we should go to Stage 2 with that name in order to avoid potential issues during plenary. We can continue to discuss the name during Stage 2.

[09:49:04.0004] <sffc>
The V8 folks also want us to engage more proactively with the HTML `<amount>` proposal, which I agree with.

[10:06:10.0127] <eemeli>
I am not comfortable with changing the proposed name without a discussion in committee about it. To me, `FormattableAmount` implies that it should not be used for interchange. If that is the case, then we should re-consider whether it ought to go under the `Intl` namespace.

[10:16:13.0851] <sffc>
I mostly agree but also see the perspective that Amount sounds like something that wants to eventually get arithmetic and be used in other contexts

[10:17:23.0342] <sffc>
This was late breaking feedback and we didn't have time to bike shed a name that would fully convey "useful for interchange and formatting but not arithmetic"

[10:18:14.0537] <sffc>
I think we should have that discussion during Stage 2. I don't want to keep being stuck in Stage 1 because every meeting some new delegate raises some new concern

[10:19:20.0762] <sffc>
Maybe InterchangeAmount?

[10:20:03.0695] <sffc>
At this point I won't block Intl.Amount either, because I'd rather get Stage 2

[10:22:58.0845] <sffc>
The other feedback I got from V8 team was, "there's multiple ways to represent precision, why do we want to bless significant digits" to which my answer was "because 402 and 262 already do that in their stringification APIs" to which the response was "well then emphasize that this thing has string semantics"

[10:24:12.0177] <sffc>
I wish this feedback had come in a month ago but I only received it at 1700 UTC yesterday

[10:39:47.0575] <sffc>
But, well, better now than "in plenary"

[10:42:17.0819] <eemeli>
If these are Stage 2 blockers, we should not rush to make changes to the proposal before it's presented next week, but either try for Stage 2 with what we have now, or withdraw the presentation, take the time to review and update, and then bring it up at the next meeting.

[10:43:14.0798] <eemeli>
* If these are Stage 2 blockers, we should not rush to make changes to the proposal before it's presented next week, but either
1. try for Stage 2 with what we have now, or
2. withdraw the presentation, take the time to review and update, and then bring it up at the next meeting.

[10:46:14.0956] <eemeli>
My preference would be for the latter, actually. Better to get this to Stage 2 on our next attempt, rather than fail to do multiple times running.

[10:46:32.0618] <sffc>
We've already done (2) once, I don't want to do it again. I didn't hear anything new from V8, just more strongly held

[10:47:01.0072] <eemeli>
When have we withdrawn an Amount presentation?

[10:47:28.0512] <sffc>
Withdrawn from asking for Stage 2, which we did in July

[10:48:19.0124] <sffc>
I'm playing with the "Google consensus" here. We had that in July which is why I'm frustrated that we don't seem to have it now on September, maybe due to the Shu transition or people being on vacation

[10:48:39.0149] <sffc>
But we have it if we pick a name like FormattableAmount

[10:49:59.0766] <eemeli>
Will the concerns about "Amount" be raised in an issue on the repo?

[10:50:08.0492] <sffc>
If we delay Stage 2 again, it just invites more delegates to rehash these same points again. I would feel different if I felt that the feedback I got from V8 raised novel concerns.

[10:51:25.0129] <nicolo-ribaudo>
Could we go with "AmountPlaceholder" and say we'll decide it in stage 2?

[10:51:33.0347] <sffc>
The V8 team rarely posts their actual position on GitHub; they channel it through Shu and now Rezvan. I got the opportunity to talk directly with them because I work at Google

[10:52:45.0764] <sffc>
I think SM does the same, channeling it through Dan or Yulia

[10:53:40.0667] <eemeli>
To some extent yes, but for specific issues like this I'd expect the concerns to be raised as issues as well as in committee.

[10:55:34.0714] <eemeli>
`FormattableAmount` or any other iteration of the name is a solution to some problem with the proposal as it's currently presented. If that problem is that there's disagreement about the use cases or intended utility, then we should have that explicitly recognised before we jump to a solution. I'm not at all sure that renaming is the right solution, and I'm not really sure what the problem is that you want to solve with it.

[10:56:42.0920] <eemeli>
(Also, it's 9pm on Friday evening for me, I'm already down two pints, and hence I don't think I'm in a state where I should be agreeing to any significant changes to the proposal before Monday.)

[10:56:43.0329] <sffc>
I said the two problems in my first set of comments in this channel

[10:57:50.0276] <eemeli>
So if the problem is
> its semantics are around formatting as opposed to arithmetic or other things that users might want to use them for

Then interchange is out as a rationalisation, yes?

[10:58:54.0962] <sffc>
(1) they really really don't want arithmetic and don't want to be put in a position where they have to fight people trying to add it, and (2) they aren't convinced 262 should be blessing this specific representation of precision for the general case of physical quantities since there are other ways to represent precision

[10:59:03.0423] <eemeli>
And if the focus ought to be on the formatting, then that changes how we ought to be presenting the precision, as then we're presumably talkign about the precision of the formatted result, rather than the precision of the mathematical value.

[10:59:26.0525] <sffc>
They seem okay with the interchange aspect

[11:00:12.0719] <eemeli>
If that's the case, then "formattable" doesn't seem like an appropriate qualifier for the name.

[11:00:48.0094] <sffc>
I agree but it gets us closer. AdjectiveAmount where Adjective has something to do with the desired use case

[11:01:24.0872] <eemeli>
> they really really don't want arithmetic

What does this mean about Decimal? Is that effectively DOA?

[11:02:44.0180] <sffc>
I think it means the specific version where we add arithmetic to Amount is dead. Not necessarily Decimal but that's a different discussion.

[11:03:45.0982] <sffc>
We didn't discuss too deeply about whether unit conversion could be acceptable. I think we might have a slightly better chance there 

[11:05:36.0688] <eemeli>
I don't really see how changing the name is required to prevent arithmetic from being added later, when the same effect would be achievable by the V8 team clearly stating that while they're fine with an Amount (as currently proposed) without arithmetic, they would not be fine with later proposals adding such arithmetic.

[11:07:13.0756] <sffc>
It's more about emphasizing the desired purpose. A dev might reasonably want to do math on an Amount, but not on a FormatableAmount

[11:07:56.0867] <eemeli>
Similarly, a dev might reasonably want to use an Amount for interchange, but not a FormattableAmount.

[11:09:28.0214] <eemeli>
And so if the Amount is meant to be primarily formattable, then it rather logically could make sense as Intl.Amount.

[11:09:38.0065] <eemeli>
(I'll be logging off for the night in max 15 mins.)

[11:12:14.0300] <eemeli>
Is the V8 team concerned about Amount math happening in the spec, or Amount math happening in general? I would presume that we'd end up with some userland libraries adding such capabilities to Amount. But perhaps not to FormattableAmount.

[11:15:04.0430] <sffc>
I think we can get consensus on a name that covers interchange and formatting but also discourages arithmetic

