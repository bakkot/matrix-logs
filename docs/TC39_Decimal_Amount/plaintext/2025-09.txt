2025-09-02
[06:11:50.0738] <Jesse>
reminder -- we have a JS numerics call on Thursday!

[06:12:28.0669] <Jesse>
the main topic is to try to settle on how we want to handle infinity in the data model

[06:32:20.0263] <Jesse>
agenda is at https://docs.google.com/document/d/1O2EQC61TIDtkcvDSkhDf4N_R9GioT0foU2tH9HBdMdQ/edit?pli=1&tab=t.0#heading=h.v13inqtu2ric


2025-09-04
[09:02:50.0288] <sffc>
Running a few minutes late


2025-09-18
[08:30:06.0935] <eemeli>
We have a call today, yes?

[08:46:54.0255] <Jesse>
yes!

[08:47:06.0816] <Jesse>
agenda here: https://docs.google.com/document/d/1O2EQC61TIDtkcvDSkhDf4N_R9GioT0foU2tH9HBdMdQ/edit?pli=1&tab=t.0

[09:52:31.0485] <Jesse>
taking a look at https://github.com/tc39/proposal-amount/issues/54 , I think the SDO in keep-trailing-zeros should take care of most/all of these?

[09:53:17.0470] <Jesse>
(the version of the spec that WH is referring to is an older one that predates our pirating of some of keep-trailing-zero's functionality, specifically the SDO that computes significant digits)

[09:54:28.0236] <Jesse>
B-en would you be willing to add an open question to plenary in the amount slides about parsing numbers with units in them? E.g. `new Amount("42[kg]")

[09:54:33.0629] <Jesse>
* B-en would you be willing to add an open question to plenary in the amount slides about parsing numbers with units in them? E.g. \`new Amount("42\[kg\]")`

[09:54:41.0414] <Jesse>
* B-en would you be willing to add an open question to plenary in the amount slides about parsing numbers with units in them? E.g. `new Amount("42\[kg\]")`

[09:55:19.0910] <Jesse>
there was also an open question about what keep-trailing-zeroes does in Intl.NF when given exponential notation strings like "3e-5"

[09:57:06.0240] <Ben Allen>
and our current position is basically just... "we dunno?"

[09:57:12.0082] <Jesse>
yeah

[09:58:24.0385] <Jesse>
this might intersect with discussions about notation for numbers-with-units in ther contexts like CLDR etc. we're sort of rolling with a new (?) bracket notation

[10:01:13.0152] <Jesse>
there's also a todo to make an issue to discuss creatng amounts from an amount. I see a reference to that here: https://github.com/tc39/proposal-amount/issues/49#issuecomment-3286110669

[10:02:50.0591] <Jesse>
I'm not sure what the issue is? It seems to me that we'd like to have the property `new Amount(new Amount(a, b), c)` equivalent to new Amount(a, b).with(c)

[10:02:59.0031] <Jesse>
* I'm not sure what the issue is? It seems to me that we'd like to have the property `new Amount(new Amount(a, b), c)` equivalent to `new Amount(a, b).with(c)`

[10:04:58.0797] <Jesse>
or to put it differently: should we ban `new Amount(new Amount(...))`?

[10:05:45.0291] <Jesse>
thinking ahead to decimal and other number-y things, I suppose we should support them. but they'll be objects so I suppose we'd need to do some brand checks


2025-09-19
[20:29:42.0771] <sffc>
Jesse, can you make the polyfill available someplace like https://tc39.es/proposal-amount/docs/ so that people can use it in the web inspector like they can with the Temporal polyfill?

[23:43:45.0975] <Jesse>
great idea -- I'm on it!

[00:46:28.0500] <sffc>
I made some PRs to the README: https://github.com/tc39/proposal-amount/pull/60, https://github.com/tc39/proposal-amount/pull/61

[05:41:51.0151] <nicolo-ribaudo>
From the accounting software I use :)

[09:48:26.0666] <sffc>
Important Update: I had a discussion with folks from the V8 team about pushback on the proposal, who hold similar perspectives as some of the other skeptics. Good news is that we arrived at common ground on the proposal being acceptable, but with a name such as `FormattableAmount` that emphasizes that its semantics are around formatting as opposed to arithmetic or other things that users might want to use them for. I think we should go to Stage 2 with that name in order to avoid potential issues during plenary. We can continue to discuss the name during Stage 2.

[09:49:04.0004] <sffc>
The V8 folks also want us to engage more proactively with the HTML `<amount>` proposal, which I agree with.

[10:06:10.0127] <eemeli>
I am not comfortable with changing the proposed name without a discussion in committee about it. To me, `FormattableAmount` implies that it should not be used for interchange. If that is the case, then we should re-consider whether it ought to go under the `Intl` namespace.

[10:16:13.0851] <sffc>
I mostly agree but also see the perspective that Amount sounds like something that wants to eventually get arithmetic and be used in other contexts

[10:17:23.0342] <sffc>
This was late breaking feedback and we didn't have time to bike shed a name that would fully convey "useful for interchange and formatting but not arithmetic"

[10:18:14.0537] <sffc>
I think we should have that discussion during Stage 2. I don't want to keep being stuck in Stage 1 because every meeting some new delegate raises some new concern

[10:19:20.0762] <sffc>
Maybe InterchangeAmount?

[10:20:03.0695] <sffc>
At this point I won't block Intl.Amount either, because I'd rather get Stage 2

[10:22:58.0845] <sffc>
The other feedback I got from V8 team was, "there's multiple ways to represent precision, why do we want to bless significant digits" to which my answer was "because 402 and 262 already do that in their stringification APIs" to which the response was "well then emphasize that this thing has string semantics"

[10:24:12.0177] <sffc>
I wish this feedback had come in a month ago but I only received it at 1700 UTC yesterday

[10:39:47.0575] <sffc>
But, well, better now than "in plenary"

[10:42:17.0819] <eemeli>
If these are Stage 2 blockers, we should not rush to make changes to the proposal before it's presented next week, but either try for Stage 2 with what we have now, or withdraw the presentation, take the time to review and update, and then bring it up at the next meeting.

[10:43:14.0798] <eemeli>
* If these are Stage 2 blockers, we should not rush to make changes to the proposal before it's presented next week, but either
1. try for Stage 2 with what we have now, or
2. withdraw the presentation, take the time to review and update, and then bring it up at the next meeting.

[10:46:14.0956] <eemeli>
My preference would be for the latter, actually. Better to get this to Stage 2 on our next attempt, rather than fail to do multiple times running.

[10:46:32.0618] <sffc>
We've already done (2) once, I don't want to do it again. I didn't hear anything new from V8, just more strongly held

[10:47:01.0072] <eemeli>
When have we withdrawn an Amount presentation?

[10:47:28.0512] <sffc>
Withdrawn from asking for Stage 2, which we did in July

[10:48:19.0124] <sffc>
I'm playing with the "Google consensus" here. We had that in July which is why I'm frustrated that we don't seem to have it now on September, maybe due to the Shu transition or people being on vacation

[10:48:39.0149] <sffc>
But we have it if we pick a name like FormattableAmount

[10:49:59.0766] <eemeli>
Will the concerns about "Amount" be raised in an issue on the repo?

[10:50:08.0492] <sffc>
If we delay Stage 2 again, it just invites more delegates to rehash these same points again. I would feel different if I felt that the feedback I got from V8 raised novel concerns.

[10:51:25.0129] <nicolo-ribaudo>
Could we go with "AmountPlaceholder" and say we'll decide it in stage 2?

[10:51:33.0347] <sffc>
The V8 team rarely posts their actual position on GitHub; they channel it through Shu and now Rezvan. I got the opportunity to talk directly with them because I work at Google

[10:52:45.0764] <sffc>
I think SM does the same, channeling it through Dan or Yulia

[10:53:40.0667] <eemeli>
To some extent yes, but for specific issues like this I'd expect the concerns to be raised as issues as well as in committee.

[10:55:34.0714] <eemeli>
`FormattableAmount` or any other iteration of the name is a solution to some problem with the proposal as it's currently presented. If that problem is that there's disagreement about the use cases or intended utility, then we should have that explicitly recognised before we jump to a solution. I'm not at all sure that renaming is the right solution, and I'm not really sure what the problem is that you want to solve with it.

[10:56:42.0920] <eemeli>
(Also, it's 9pm on Friday evening for me, I'm already down two pints, and hence I don't think I'm in a state where I should be agreeing to any significant changes to the proposal before Monday.)

[10:56:43.0329] <sffc>
I said the two problems in my first set of comments in this channel

[10:57:50.0276] <eemeli>
So if the problem is
> its semantics are around formatting as opposed to arithmetic or other things that users might want to use them for

Then interchange is out as a rationalisation, yes?

[10:58:54.0962] <sffc>
(1) they really really don't want arithmetic and don't want to be put in a position where they have to fight people trying to add it, and (2) they aren't convinced 262 should be blessing this specific representation of precision for the general case of physical quantities since there are other ways to represent precision

[10:59:03.0423] <eemeli>
And if the focus ought to be on the formatting, then that changes how we ought to be presenting the precision, as then we're presumably talkign about the precision of the formatted result, rather than the precision of the mathematical value.

[10:59:26.0525] <sffc>
They seem okay with the interchange aspect

[11:00:12.0719] <eemeli>
If that's the case, then "formattable" doesn't seem like an appropriate qualifier for the name.

[11:00:48.0094] <sffc>
I agree but it gets us closer. AdjectiveAmount where Adjective has something to do with the desired use case

[11:01:24.0872] <eemeli>
> they really really don't want arithmetic

What does this mean about Decimal? Is that effectively DOA?

[11:02:44.0180] <sffc>
I think it means the specific version where we add arithmetic to Amount is dead. Not necessarily Decimal but that's a different discussion.

[11:03:45.0982] <sffc>
We didn't discuss too deeply about whether unit conversion could be acceptable. I think we might have a slightly better chance there 

[11:05:36.0688] <eemeli>
I don't really see how changing the name is required to prevent arithmetic from being added later, when the same effect would be achievable by the V8 team clearly stating that while they're fine with an Amount (as currently proposed) without arithmetic, they would not be fine with later proposals adding such arithmetic.

[11:07:13.0756] <sffc>
It's more about emphasizing the desired purpose. A dev might reasonably want to do math on an Amount, but not on a FormatableAmount

[11:07:56.0867] <eemeli>
Similarly, a dev might reasonably want to use an Amount for interchange, but not a FormattableAmount.

[11:09:28.0214] <eemeli>
And so if the Amount is meant to be primarily formattable, then it rather logically could make sense as Intl.Amount.

[11:09:38.0065] <eemeli>
(I'll be logging off for the night in max 15 mins.)

[11:12:14.0300] <eemeli>
Is the V8 team concerned about Amount math happening in the spec, or Amount math happening in general? I would presume that we'd end up with some userland libraries adding such capabilities to Amount. But perhaps not to FormattableAmount.

[11:15:04.0430] <sffc>
I think we can get consensus on a name that covers interchange and formatting but also discourages arithmetic

[11:15:33.0863] <sffc>
I don't have a suggestion at this moment for that name. InteropAmount?

[11:16:51.0586] <sffc>
That's a good nuanced question that I don't have an answer to

[11:17:39.0657] <eemeli>
Exactly; I'd like to have the discussion about the problem before we have the discussion about the solution.

[11:21:07.0679] <sffc>
There's also the second concern; he pointed at a thermometer on the wall and said it measures barometric pressure to 5 millibar, but Amount can't represent that, and it can't represent 5ft 9in either, so it isn't a very good solution for representing physical quantities in general. Michael Ficarra raised similar concerns with 3/4 Mile (rational amounts).

[11:22:08.0921] <sffc>
So their position is that the name should emphasize that we are picking a very specific representation, one that is based on the needs of formatting

[11:23:10.0699] <eemeli>
That also implies that we should consider `roundingIncrement` or similar.

[11:23:54.0274] <eemeli>
(Train's arriving at my station; will try not to work over the weekend, so might take until Monday that I can continue here.)

[11:24:46.0539] <sffc>
Supporting `roundingIncrement` in the constructor is a good idea, probably one we should add. I don't think that resolves concerns about the relationship between the data model and the name of the type


2025-09-21
[00:36:41.0449] <Jesse>
oh no -- it looks like when I tweaked the GitHub Pages setup for Amount, people ended up looking at an old version of the spec

[00:36:46.0560] <Jesse>
https://github.com/tc39/proposal-amount/issues/54#issuecomment-3315302152

[00:37:17.0549] <Jesse>
the comment only makes sense if you realize that WH must have been looking at an old spec; we *did* make those changes

[04:52:51.0659] <nicolo-ribaudo>
sffc Does the discussion above mean that the V8 team would not be ok with adding unit conversion / smart units to these objects?

[09:03:40.0256] <sffc>
> <@nicolo-ribaudo:matrix.org> sffc Does the discussion above mean that the V8 team would not be ok with adding unit conversion / smart units to these objects?

We didn't go into depth but I think it might actually be easier to make that argument than general arithmetic, if the goal is to exactly mirror what Intl would be doing, string to string

[09:06:46.0509] <sffc>
(I'm trying my best to channel the position I heard from them which probably is not 100% on the dot)

[09:12:04.0395] <Rob Palmer>
It seems important to have someone from V8 present during this topic. Do you know who will attend? 


2025-09-22
[23:06:09.0928] <Jesse>
If we’re getting the calculations of significant digits wrong, even after adapting keep-trailing-zeros’s SDO, I wonder if there’s a bug in the SDO or whether I’m using it incorrectly

[23:07:05.0892] <Jesse>
what do we think of the suggestion to not even compute significant digits?

[23:07:32.0141] <Jesse>
JRL usually comes but I’m not sure if he’s in the V8 team

[23:37:13.0431] <eemeli>
Morning. I've not looked at issues yet, but not computing significant digits has been on my mind as a decent solution. As in, I don't think without further information we can know whether `'4200'` has two or four significant digits, or whether `'0.042'` and `'4.2e-2'` have the same or different numbers of significant digits. I'll go find an issue where to comment on this more publicly.

[23:58:21.0934] <Jesse>
regarding the issue of arithmetic, I thought we generally wanted to avoid that. At most, arithmetic would happen internally when doing unit conversions, but that's different from Amount offering you an API for doing arithmetic

[23:58:47.0794] <Jesse>
I'd say https://github.com/tc39/proposal-amount/issues/54 is a good candidate

[00:02:21.0880] <nicolo-ribaudo>
It seems like you just forgot to subtract from the number of fractional digits the exponent, for numbers written in exponential notation 

[00:02:46.0631] <nicolo-ribaudo>
And then use the conversion between fractional and significant that WH proposes in the issue?

[00:03:02.0955] <Jesse>
IIRC the spec already has a notion of "significant digit" whereby `4200` has 2 significant digits (a block of trailing zeros is ignored)

[00:03:06.0944] <Jesse>
*but*

[00:03:16.0543] <Jesse>
you're right that those *could* be significant

[00:04:18.0611] <nicolo-ribaudo>
We should convert between the two using the algorithm we've always told Mark when he asked about the relationship between the two

[00:05:10.0600] <Jesse>
the proposal as it stands does allow you to stipulate that `4200` has 4 digits

[00:06:05.0397] <nicolo-ribaudo>
That seems what I expect

[00:06:10.0965] <nicolo-ribaudo>
And 4.2e2 has 2

[00:06:21.0183] <nicolo-ribaudo>
> <@nicolo-ribaudo:matrix.org> We should convert between the two using the algorithm we've always told Mark when he asked about the relationship between the two

significant = fractional + ceil(1+ log10(value)), I think

[00:06:30.0442] <eemeli>
Added my comment to #54.

[00:07:37.0445] <Jesse>
I thnk the keep-trailing-zeros would say `4200` has 4 if I understand http://tc39.es/proposal-intl-keep-trailing-zeros/#sec-runtime-semantics-stringintlmv 

[00:07:56.0581] <nicolo-ribaudo>
Idk I studied in school that for significant digits you include all the zeros on the right of the number

[00:07:59.0596] <Jesse>
right, we can calculate one from the other

[00:08:02.0698] <eemeli>
That's what it should be doing, yes.

[00:08:08.0533] <Jesse>
well, in a certain understanding of "significant digits"

[00:08:19.0244] <nicolo-ribaudo>
> <@nicolo-ribaudo:matrix.org> Idk I studied in school that for significant digits you include all the zeros on the right of the number

Which makes the answer for 4200 quite clear

[00:10:12.0950] <Jesse>
I think the calculation approach doesn't work well with the current "ignore tailing zeroes, including in the integer part" perspective

[00:10:38.0642] <Jesse>
because it works with the mathematical value rather than a presentation of it

[00:10:42.0220] <eemeli>
I think saying how many significant digits 4200 has is problematic, and we should only do so if we need to. So, given that we can and do calculate how many fraction digits it has, what is the need for us to calculate significant digits for it?

[00:11:27.0771] <eemeli>
If it's in order to provide information about the number, then we'd be much better off reporting `integerDigits` in addition to `fractionDigits`.

[00:11:44.0552] <Jesse>
ah, interesting suggestion

[00:13:20.0562] <eemeli>
That pair is much more absolutely calculable from the value, match each other closely, and can e.g. give an indicator of how much space is needed to represent the number, or whether e.g. exponential notation might be appropriate for it.

[00:14:06.0024] <nicolo-ribaudo>
Mh I guess yeah if the goal is formatting/interchange you don't need significant digits

[00:14:26.0564] <eemeli>
To be clear, I'm not necesarily saying we _should_ include `integerDigits`, I'm trying to provide an alternative to the one use case I'm aware of for a calculated `significantDigits`.

[00:16:02.0088] <Jesse>
I think we should have that in our back pocket as a counterproposal; I expect WH to bring this up in discussion

[01:59:33.0376] <Jesse>
I don't quite see why the current spec fails to handle 0 and -0, but if I understand https://github.com/tc39/proposal-amount/issues/54#issuecomment-3316517702 correctly, the reason why we don't handle `"NaN"` correctly is because the SDO for StringIntlMV apparently doesn't handle that string? I took a look at the grammar and AOs and SDOs like `ToNumber` and `StringNumericValue` but don't see how those produce NaN. Is that the root cause of the concern?

[02:03:11.0393] <Jesse>
Ah, I think I see what is meant: we should "handle" `"NaN"` as a failure to parse a decimal string

[02:05:01.0232] <Jesse>
it took me a while to understand this becasue we've been talking about NaN as a valid string to be handled; but it seems that , following this approach,`"NaN"` is just an invalid notation for decimal strings, just like `"xyz"` would be an invalid decimal string

[03:34:05.0439] <Jesse>
there's a bit more: https://github.com/tc39/proposal-amount/issues/54#issuecomment-3317514477

[03:35:36.0388] <Jesse>
I wonder if we might want to just remove support for significant digits in the constructor and `with`, though we could keep the significant property (it would be calculated in the constructor)

[03:36:08.0023] <Jesse>
also, given the thinking of fraction digits that allows negative values, I wonder if we should also support that in the constructor and `.with`

[05:10:04.0255] <Jesse>
https://github.com/tc39/proposal-amount/issues/64 is an attempt to settle on how we should address the issues raised by Agoric in recent TG3 calls

[06:32:14.0339] <eemeli>
I've just commented on both #54 and #64.

I'm concerned that with negative fraction digits we'd be inventing a novel way of expressing numerical precision, and that this does not match what we already have in the language in Intl.NumberFormat and Number.p.toPrecision.

[06:57:04.0509] <nicolo-ribaudo>
I gave some examples in 54. Note that Intl.NumberFormat and Number.p.toFixed (toPrecision deals with significant digits, not fractionals) do not accept negative values but also never emit exponential notation. Negative fractional digits only ever happen with exponential notation.

[06:57:12.0043] <nicolo-ribaudo>
* I gave some examples in 54. Note that Intl.NumberFormat and Number.p.toFixed (toPrecision deals with significant digits, not fractionals) do not accept negative values but also never emit exponential notation. Negative fractional digits would only ever happen with exponential notation.

[06:59:04.0098] <nicolo-ribaudo>
The PostgreSQL case is actually more interesting than the Java one, since JS more frequently interfaces with it

[07:03:20.0353] <Jesse>
I just took a look at postgres.js and see that they just handle NUMERIC as strings https://github.com/porsager/postgres?tab=readme-ov-file#numbers-bigint-numeric 

[08:44:26.0767] <sffc>
I'll be channeling the Google position during plenary, fyi. Which is basically what I said on Friday

[08:44:42.0512] <sffc>
We had some additional discussion this morning

[08:45:10.0404] <sffc>
So I think keep the slides as they have been, and the name change will come as a comment from me

[09:32:40.0272] <sffc>
Oh I thought we were still asking for Stage 2

[09:33:13.0946] <nicolo-ribaudo>
Oh well, good that Ben still called out that it is for stage 2 on the agenda and stage 2 is on the table if the contention is resolved

[09:33:25.0384] <sffc>
ok

[09:33:34.0322] <nicolo-ribaudo>
Ideally we'll have a continuation for once WH is happy with Jesse's PR

[09:53:43.0421] <nicolo-ribaudo>
Rendering of negative fractional digits should always switch to exponential, right?

[09:55:39.0927] <sffc>
yeah if we allow them that's how they would need to behave, or we could reject them (and force significant digits to always be at least as many as integer digits)

[10:01:17.0137] <sffc>
30 minutes is optimistic Ben :)

[10:01:54.0678] <nicolo-ribaudo>
Is it correct that this is how Intl behaves? https://github.com/tc39/proposal-amount/issues/54#issuecomment-3320206259

[10:03:22.0068] <sffc>
"the table from Waldemar above" => which table? there are multiple tables in his OP

[10:04:52.0615] <nicolo-ribaudo>
_significantDigits_ section

[10:04:57.0349] <Jesse>
I think he means the corrected behavior table significant digits

[10:06:04.0988] <Jesse>
I'd prefer to work in a "safe space" with this significant digits, where we "know" what to do. What do we think about allowing significant digits to be present but throw if the given string uses exponential notation?

[10:06:28.0991] <Jesse>
(actualy even there we might run into trouble)

[10:06:36.0597] <sffc>
I believe the table under "significantDigits" aligns with my expectation and understanding of how Intl.NF behaves

[10:07:18.0376] <sffc>
Where the value 0 requires its own set of special rules

[10:07:44.0257] <Jesse>
I propose using -Infinity for zero; it makes the equation work

[10:08:08.0446] <nicolo-ribaudo>
I'm fine with either Infinity or 1 + fractional

[10:08:11.0795] <nicolo-ribaudo>
* I'm fine with either -Infinity or 1 + fractional

[10:08:20.0429] <Ben Allen>
I've messaged CDA about potentially getting more time than that

[10:08:25.0524] <nicolo-ribaudo>
(assuming that 1 + fractional is what Intl does)

[10:31:56.0530] <eemeli>
Not just Intl, also: `(0).toPrecision(3) === "0.00"`.

[10:34:39.0283] <nicolo-ribaudo>
I'm going to open a PR with how I think significant digits should be done

[11:21:54.0906] <sffc>
Since we have a continuation item now, would anyone like to have a meeting to plan how to address the issues from the V8 team?

[11:22:10.0033] <sffc>
(a champions call in advance of the continuation)

[11:22:31.0077] <nicolo-ribaudo>
I'd be happy to meet at :00, or right after the TC39 meeting

[11:22:52.0169] <nicolo-ribaudo>
Actually, I'm ready in 15 min too

[11:26:05.0774] <Jesse>
I could chat too

[11:34:18.0890] <nicolo-ribaudo>
https://github.com/tc39/proposal-amount/pull/66

[11:56:50.0497] <sffc>
I put a slot for right after TC39 but can move it up if there isn't otherwise a conflict with Mathieu's work

[11:57:39.0697] <nicolo-ribaudo>
I'm taking notes but I don't actually care to be present for these topics

[11:57:58.0687] <nicolo-ribaudo>
And for Eemeli it's already very late, I'd hate asking to stay around for longer :)

[11:58:43.0411] <nicolo-ribaudo>
I'll stop taking notes after this topic

[12:04:09.0758] <Jesse>
lmk where I should go

[12:04:16.0196] <nicolo-ribaudo>
eemeli / Ben Allen ? :)

[12:04:17.0853] <Jesse>
we can use the JS numerics call

[12:05:27.0240] <eemeli>
Yeah, I'm not up for a meeting after TC 39 ends, which will be at 23:00 my time.

[12:05:35.0152] <nicolo-ribaudo>
What about now?

[12:05:39.0931] <sffc>
I'm in https://meet.google.com/rnj-tbvq-qea

[12:05:52.0579] <Jesse>
joining

[12:06:01.0406] <eemeli>
Eh, fine.

[13:11:05.0354] <nicolo-ribaudo>
A slides duel where we keep switching screen between Shane's slides and Ben's slides

[13:11:13.0310] <Ben Allen>
no thank you

[13:16:12.0524] <Jesse>
a parallel zoom call


2025-09-23
[22:05:47.0413] <sffc>
I've gotten one LGTM so far on my slides (which reiterate what I posted here earlier and what we discussed in the champions call). I like the idea of me presenting the position slides and then Ben presenting proposed solutions.


2025-09-24
[22:55:49.0320] <sffc>
Slides for the Intl MV Limit: https://docs.google.com/presentation/d/1V1BC6PtJ7-q6zVvsgKt9dcaLmIeeLnE3s8DwP4KOl7Q/edit?slide=id.p#slide=id.p

[00:44:56.0666] <eemeli>
- Slides 4-7: IntlMVs determined from bigints are not accounted for. These mean that there is not "a discrete, fixed set of MVs representable", or an upper limit to the values. For instance, this works fine: `new Intl.NumberFormat().format(2n * (10n ** 308n))`.
- Slide 6: How do you get to 20k digits with a 10k limit on significant digits?
- Slide 7 should probably mention removing the spec-mandated limits as an alternative, even if it's not preferred.

[07:28:20.0995] <sffc>
Slide 3 already says "The limit currently applies only to String, not to BigInt." I'll try to be more clear that everything that follows also applies only to String and not BigInt.

20k digits because there are 10k before the decimal point and 10k after the decimal point.

OK I'll add that alternative.

[07:32:11.0645] <eemeli>
> 20k digits because there are 10k before the decimal point and 10k after the decimal point.

... of which the fraction digits will be all zeros due to the 10k significant digit limit, no?

[07:49:55.0689] <sffc>
The significant digit limit in the PR is not 10k digits; it is up to 10k digits before the decimal separator and up to 10k digits after the decimal separator, or up to 20k total

[07:56:20.0741] <eemeli>
sffc:  Ok, I'd misunderstood the limits based on _q_ in the algorithm, and got confused by your use of "significant digits" in the slides and previously. Isn't the limit then a limit on **fraction digits** instead?

