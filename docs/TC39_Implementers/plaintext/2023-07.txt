2023-07-26
[12:10:57.0875] <ljharb>
it is *very* confusing that in the chrome console, `class T{ #b = 1; }; const t = new T(); console.log(t.#b);` works instead of throws. is that a bug worth filing?

[12:12:07.0179] <ljharb>
 * it is _very_ confusing that in the chrome console, `class T{ #b = 1; }; const t = new T(); console.log(t.#b);` works instead of throws (it throws in safari, altho it doesn't parse so i have to do it in two lines). is that a bug worth filing?

[13:11:52.0535] <shu>
that is intentional afaik

[13:11:56.0448] <shu>
why is it very confusing?

[13:12:29.0684] <shu>
this was done with the hypothesis that when in a REPL debugging, developers expect to be able to access their private state

[13:12:48.0044] <littledan>
yeah it used to throw, and there was a particular effort to make it work. It's only in the console, so it doesn't violate privacy.

[13:12:48.0052] <shu>
otherwise you can't debug private state easily at all

[13:14:19.0213] <shu>
there are other non-conformant behavior in the console like allowing let/const redecls at the same scope

[13:14:36.0767] <shu>
for the same reasons, that is, of better DX during REPL debugging

[13:14:52.0110] <littledan>
What would be really great is if we could revive the effort to standardize JS console behavior, which has long differed from scripts and modules. Bradley was previously working on this.

[13:15:05.0648] <shu>
that was shut down by Allen last time IIRC

[13:15:12.0151] <shu>
but Allen is no longer actively participating

[13:15:49.0555] <littledan>
well, we can review the counterarguments he made previously and see what the committee thinks

[13:16:00.0108] <shu>
yeah

[13:16:25.0345] <littledan>
ultimately I think Allen's model of embedders/extensions and such differs from the way we've been moving, and I think that sort of thing was the sticking point

[13:17:28.0163] <littledan>
This is the previous repo: https://github.com/bmeck/js-repl-goal

[13:37:47.0302] <Ashley Claymore>
I want cake and to eat it too.
Strict mode repl, don't let me assign to non-writable prop, but also yay for letting me access private fields when debugging!

[13:39:18.0613] <shu>
yeah that could be a feature request, a 100% compliant repl mode

[13:39:26.0693] <shu>
dunno if devtools would be interested

[13:40:45.0410] <littledan>
IIRC last time we asked (years ago with a different team) Chrome DevTools people liked the goal if it could be done well. Ultimately it's hard to say yes or no until more work has been done on the proposal.

[13:41:33.0953] <littledan>
but yes we definitely shouldn't move forward with anything like this without engaging various devtools people

[13:55:00.0401] <ljharb>
> <@shuyuguo:matrix.org> why is it very confusing?

a user on irc spent 6 hours trying to figure out why their code worked in the console and not anywhere else

[13:55:39.0692] <ljharb>
perhaps emitting a warning the first time someone access private data they're not "supposed" to be able to get in the repl, would be helpful?

[13:56:19.0738] <ljharb>
(iow, developers seem to _not_ expect the repl *input* to behave differently from real code, only the output)

[13:59:59.0724] <shu>
having a warning for non-compliant behavior like this is a great thing to file an issue about

[14:00:13.0018] <shu>
the not-input-but-output point is kind of tricky

[14:00:42.0177] <shu>
i think there's a pretty legitimate mental model where if you take a multiline file, you can evaluate it line-by-line by copy/pasting into a repl

[14:01:10.0151] <littledan>
there's a bunch of things that are different between consoles besides this. e.g., consoles beat modules by years in supporting top-level await.

[14:01:37.0645] <littledan>
and obviously the const/let redefinition which I don't think anyone is asking anyone to get rid of

[14:01:45.0093] <shu>
OTOH there's also data that devs _don't_ want the line-by-line mental model for let/const

[14:01:50.0616] <shu>
because convenience trumps there

[14:01:56.0084] <littledan>
exactly

[14:02:04.0220] <littledan>
so this seems more like a documentation issue

[14:02:32.0828] <littledan>
but it'd also be kinda nice if the difference in behavior could ultimately be traced to, "the console is simply defined differently" rather than "Chrome does some silly thing"

[14:03:36.0680] <littledan>
also if devtools want to keep innovating, we can specifically endorse the "also random extensions are cool, this is just the base" theory *just for consoles*

[14:03:54.0735] <littledan>
while simultaneously defining cases that everyone wants to support

[14:04:17.0436] <shu>
yes, agreed on all points there

[14:04:41.0902] <littledan>
ultimately I don't know if the "someone was confused for 6 hours" problem is solvable in general... that's sort of a thing that happens sometimes

[14:05:46.0936] <shu>
my personal opinion is that the driving design principle for devtools is just anticipating what users think is surprising, which is inconsistent from feature to feature

[14:06:30.0018] <shu>
in an ideal world you'd do actual research here

[14:07:16.0178] <littledan>
I'm personally cool with things being kinda inconsistent, but I also don't really see why "the way JS is evaluated in a console" should be in the category of "competitive advantages from one devtools implementation to another"--ideally we'd make things less surprising by aligning [on what our research shows is less surprising]

[14:26:08.0563] <Chris de Almeida>
TG6: devtools spec

