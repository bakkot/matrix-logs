2023-08-24
[13:34:36.0719] <ljharb>
where'd be the right place to report a chrome bug, that `Object.assign(new URL('about:blank'), { protocol: 'http' }).protocol === 'http'` is false

[13:35:23.0725] <shu>
https://bugs.chromium.org/p/chromium/issues/list

[13:40:35.0790] <bakkot>
ljharb: the `protocol` accessor includes `:`, doesn't it?

[13:41:08.0145] <bakkot>
`Object.assign(new URL('about:blank'), { protocol: 'http' }).protocol === 'http:' // true`

[13:42:48.0742] <bakkot>
yeah https://url.spec.whatwg.org/#dom-url-protocol

[13:43:03.0857] <bakkot>
that's not a bug, that's just how URL objects work


2023-08-25
[17:26:08.0289] <ljharb>
i think Firefox appends the colon for you but that wasn’t the problem. It works fine when the starting protocol is http/https

[17:26:33.0826] <ljharb>
but doesn’t when it’s about: - maybe it’s fixed in chrome but not in node tho

[17:27:42.0371] <ljharb>
(what i mean is, yes i made an error and it should be equal to the string including the colon, but it doesn’t work in latest node when it starts as about:blank

[17:27:58.0665] <ljharb>
* (what i mean is, yes i made an error and it should be equal to the string including the colon, but it doesn’t work in latest node when it starts as about:blank)

[17:51:19.0155] <bakkot>
Node implements its own copy of the URL object, so that would be a Node bug, not a Chrome bug

[21:25:08.0080] <ljharb>
fair enough

[21:25:32.0429] <ljharb>
indeed, you're exactly right, i'll file a node issue

[21:27:09.0692] <ljharb>
 * indeed, you're exactly right, i filed https://github.com/nodejs/node/issues/49319

[01:26:11.0180] <nicolo-ribaudo>
Do browsers plan to ship the decorators and decorators metadata proposals at the same time?

We usually have one Babel plugin per proposal, but I'm considering just implementing both in the same since it's much easier to do.

[10:10:36.0113] <shu>
> <@nicolo-ribaudo:matrix.org> Do browsers plan to ship the decorators and decorators metadata proposals at the same time?
> 
> We usually have one Babel plugin per proposal, but I'm considering just implementing both in the same since it's much easier to do.

no promises but that seems likely for V8


2023-08-30
[11:03:50.0962] <ljharb>
shu: it seems like assigning `Symbol.toStringTag` on %Iterator%.prototype (to match the iterator helpers semantics) causes a *huge* deopt for all iterator things in "whatever version of v8 node is using". is that something that'd be fixed if i filed an issue? (specifically, the deopt for adding a largely unrelated property to a builtin)

[11:07:12.0525] <shu>
feel free to file, can take a look and if we decide not too we'll close it with explanation

[11:08:29.0751] <shu>
 * feel free to file, can take a look and if we decide not to we'll close it with explanation

