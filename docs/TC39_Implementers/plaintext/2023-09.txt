2023-09-04
[19:26:02.0885] <Jack Works>
I have a performance question. if a and b are the same type (no type conversion will happen), then is a==b fast as a===b?

[07:32:38.0670] <kai>
I'm also curious, from a specification point of view, the conversion of IsLooselyEqual to IsStrictlyEqual does require additional operations, but both abstract operations have their own type judgments for the operands. For the case where the two operands are of the same type, whether it can be optimized it


2023-09-05
[14:51:15.0223] <ljharb>
shu: i have a package that sets Symbol.isConcatSpreadable on a few objects, for the purpose of ensuring that array concat still works as expected even if someone does `Array.prototype[Symbol.isConcatSpreadable] = true`, or has an array with an own property set on it.

a user is reporting that v8 becomes permanently slow if Symbol.isConcatSpreadable is ever set, even once, on any object - and deleting it later doesn't fix it. is there anything that could be done here to make it less pathological to set it on an arbitrary object?

[14:53:34.0064] <ljharb>
https://github.com/ljharb/safe-array-concat/pull/3#issuecomment-1707355732 for context

