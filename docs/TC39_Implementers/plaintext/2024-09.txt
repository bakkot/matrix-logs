2024-09-02
[16:23:44.0754] <ljharb>
what's the perf of Object.hasOwn vs Object.prototype.hasOwnProperty.call? (re https://github.com/nodejs/node/pull/54710#issuecomment-2325374488 )


2024-09-03
[13:05:33.0395] <snek>
> <@ljharb:matrix.org> what's the perf of Object.hasOwn vs Object.prototype.hasOwnProperty.call? (re https://github.com/nodejs/node/pull/54710#issuecomment-2325374488 )

i agree with joyee's comment

[13:05:42.0201] <snek>
it could be improved though

[13:14:15.0730] <ljharb>
i'm sure it's accurate. but it doesn't make any sense to me why it'd be implemented in that way

[13:14:26.0528] <shu>
how would you implement it?

[13:14:58.0590] <snek>
i would imagine it was convenient at the time. generally v8 development goes like 1) implement thing correctly and then 2) optimize given the known working impl

[14:42:43.0049] <canadahonk>
fwiw I implemented it basically the same in my engine

[16:04:51.0387] <ljharb>
i would assume that whatever hasOwnProperty does to check that the object has the property is the same thing hasOwn would do

[16:04:59.0000] <ljharb>
as opposed to just wrapping hasOwnProperty

[16:27:43.0095] <bakkot>
then all of the various optimizations which look for hasOwnProperty would have to be updated to look for both hasOwn and hasOwnProperty

[16:33:32.0653] <shu>
> <@ljharb:matrix.org> i would assume that whatever hasOwnProperty does to check that the object has the property is the same thing hasOwn would do

but why would this make hasOwn faster than hasOwnProperty?

[16:42:24.0266] <ljharb>
it wouldn't, it'd make it no slower

[16:42:30.0569] <ljharb>
 * it wouldn't, it'd make it "no slower"

[16:43:37.0920] <shu>
best to benchmark the current difference, i expect a few branches won't matter too much in practice if you think hasOwn is better stylistically

[16:44:02.0592] <Justin Ridgewell>
I don’t think the call is the slow part of the implementation?

[16:44:16.0368] <Justin Ridgewell>
It’s the extra checks done before the call

