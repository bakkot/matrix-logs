2022-03-10
[15:50:44.0290] <shu>
interesting limitation i just ran into during implementation of the shared struct prototype: on shared structs, `Atomics` operations that need to inspect the value for its operation cannot work for values that don't have identity

[15:51:11.0025] <shu>
for example, suppose there's a shared struct `s` with a field `p` that has the value `42`

[15:51:52.0033] <shu>
`Atomics.load(s, 'p')`, `Atomics.store(s, 'p', whatever)`, `Atomics.exchange(s, 'p', whatever)` all work fine since they just treat the field as bits, there's no inspection of the contents

[15:52:21.0246] <shu>
`Atomics.compareExchange(s, 'p', 42, whatever)` or `Atomics.add(s, 'p')`, by contrast, can't be made to work on all implementations

[15:54:24.0752] <shu>
if an implementation chooses to box its values like V8, then '42' is not the integer 42, but a heap allocation. the implementation complexity for making those Atomics operations work is quite high, will be slow, and also defeats the purpose (lightweight synchronization). for heavier weight synchronization, use plain reads/writes and operations then synchronize separately on a mutex

[15:55:46.0718] <shu>
if an implementation NaN-boxes, like JSC and SpiderMonkey, maybe treating double bit patterns as arbitrary atomic64s might work for a subset of operations like compareExchange, but can't be made to work for arithmetic operations

[15:55:54.0224] <shu>
since there are no hardware instructions for atomic floating point math

[15:57:55.0345] <shu>
OTOH if we extend structs with field types, then Atomics could work on certain field types (like the existing TA types)


2022-03-11
[16:03:20.0604] <shu>
so the upshot here is, i think: without field types, the kind of lock-free programming with shared structs will be pretty limited

[16:03:35.0146] <shu>
and that's probably fine, because you shouldn't be doing lock-free programming most of the time?

[19:18:05.0293] <rbuckton>
One of the uses for `compareExchange` is to implement lock-free updates (i.e., atomically compare and update, returning a value so you can see if you succeeded). Requiring locks to use `compareExchange` kind of defeats the purpose. 

[10:45:55.0484] <asumu>
That's interesting, so then `compareExchange`, `add`, `sub`, etc. will just error on a shared struct until types are added? The issue with the boxed case is that doing the loads atomically to read the actual value has high cost?

