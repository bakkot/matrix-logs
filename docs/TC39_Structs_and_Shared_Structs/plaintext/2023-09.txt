2023-09-06
[13:43:26.0749] <rbuckton>
shu: Are the origin trial shared structs not allowed to have fields that are stringified integers?

[14:25:56.0386] <shu>
rbuckton: it should, that looks like a bug

[14:26:01.0355] <shu>
i'll investigate soon, thanks for raising it

[15:32:40.0914] <rbuckton>
The more I tinker with this, trying to shoehorn it into the compiler, the more I want some mechanism to attach behavior.
I also had to implement a custom `Map`-like mechanism using shared structs to share some keyed data efficiently. 

[15:33:20.0290] <rbuckton>
I have made some progress on parallel parsing, however. 

[15:44:56.0565] <shu>
i am working on the behavior thing

[15:45:10.0955] <shu>
more specifically, the thread-local storage thing

[15:45:46.0842] <shu>
our current GC scheme makes inter-heap cycles uncollectable, and i'm trying to fix that, which is taking a bit due to GC being finnicky


2023-09-08
[16:48:21.0705] <rbuckton>
shu: are you aware of any issues debugging workers when - - harmony-structs or the Shared string table flag are enabled? I'm running issues debugging in VS Code and wanted to check if there were any known issues before I file an issue with VS Code. 

[16:50:12.0414] <rbuckton>
I'm not sure if it's Code, the chrome debug protocol, NodeJS, or V8 causing the issue, but the first breakpoint I hit after starting a worker and passing it a shared struct results in the debugger locking up. 

[16:57:14.0828] <rbuckton>
I finally reached a point where I can successfully parse a large project (xstate) using parallel parsing and the results aren't very promising yet. On a single thread, parse takes about 1.2s on my machine, and about 3.5s when running in parallel. However this is still very early and I'm having to copy the entire AST of each file from the struct representation into a normal JS object so it can be used by our existing checker and emitter. The limitations of structs mean we can't just use them as-is without a significant rewrite. 


2023-09-09
[17:06:01.0751] <shu>
rbuckton: re: VSCode debugging, i don't know but i wouldn't be surprised if devtools just doesn't work because nobody has looked at it. printf debugging is what we do unfortunately, devtools investment is unlikely to materialize without something like getting to stage 3 first

[17:06:17.0834] <shu>
yeah, copying into normal objects sounds like it would kill performance indeed

[17:06:31.0900] <shu>
what are the limitations? attaching behavior and that ownProperty bug?

[17:06:52.0555] <shu>
(please file issues for the limitations getting in your way in addition to the attaching behaviors thing)

[17:27:38.0514] <rbuckton>
> <@shuyuguo:matrix.org> what are the limitations? attaching behavior and that ownProperty bug?

If I limit this to just the command line compiler, the biggest issue is that I can't emulate our internal `NodeArray` with a `SharedArray`. A `NodeArray` is just an `Array` with a few extra properties attached, but that causes several issues:
- Can't define extra fields on `SharedArray`
- Alternatively, can't define numeric indexed properties on a regular struct.
- SharedArray is not iterable and you can't make a regular struct iterable, so I have to rewrite every `for..of` and array method call to work around. 

[17:27:53.0931] <rbuckton>
* In reply to @shuyuguo:matrix.org
what are the limitations? attaching behavior and that ownProperty bug?


If I limit this to just the command line compiler, the biggest issue is that I can't emulate our internal NodeArray with a SharedArray. A NodeArray is just an Array with a few extra properties attached, but that causes several issues:

Can't define extra fields on SharedArray

Alternatively, can't define numeric indexed properties on a regular struct.

SharedArray is not iterable and you can't make a regular struct iterable, so I have to rewrite every for..of and array method call to work around.


[17:28:20.0192] <rbuckton>
* In reply to shu
what are the limitations? attaching behavior and that ownProperty bug?


In reply to @shuyuguo:matrix.org
what are the limitations? attaching behavior and that ownProperty bug?

If I limit this to just the command line compiler, the biggest issue is that I can't emulate our internal NodeArray with a SharedArray. A NodeArray is just an Array with a few extra properties attached, but that causes several issues:
- Can't define extra fields on SharedArray

- Alternatively, can't define numeric indexed properties on a regular struct.

- SharedArray is not iterable and you can't make a regular struct iterable, so I have to rewrite every for..of and array method call to work around.


[17:28:32.0877] <rbuckton>
* In reply to shu
what are the limitations? attaching behavior and that ownProperty bug?


In reply to shu
what are the limitations? attaching behavior and that ownProperty bug?

In reply to @shuyuguo:matrix.org
what are the limitations? attaching behavior and that ownProperty bug?
If I limit this to just the command line compiler, the biggest issue is that I can't emulate our internal NodeArray with a SharedArray. A NodeArray is just an Array with a few extra properties attached, but that causes several issues:

Can't define extra fields on SharedArray

Alternatively, can't define numeric indexed properties on a regular struct.

SharedArray is not iterable and you can't make a regular struct iterable, so I have to rewrite every for..of and array method call to work around.


[17:30:00.0937] <rbuckton>
We also use data structures like `Map` that we can't emulate due to the inability to attach behavior, so there's a lot of copying in and out of data structures we can use. 

[17:33:14.0207] <rbuckton>
If I wanted to extend these structs to the language service, we're in the realm of needing behavior and the ability to freeze or lock down specific properties. Our AST is mostly treated as immutable, but if we were to vend struct based nodes from our API they would become unsafe to use if a consumer could make changes to properties outside of a lock. 

[17:37:52.0976] <rbuckton>
For now I've worked around a few other issues. I add a `__tag__` field to structs I create when type identity is important, as well as a field containing a pseudo- identity hash so I can use some structs as keys in a shared hashmap implementation I wrote (in place of Map where needed). 

[17:40:39.0203] <rbuckton>
I'm using classes and decorators to fake syntax to better work with the type system, like in the example above. The decorators just collect field names and create a SharedStructType attached to the class, behavior is just defined as static methods. 

[17:43:41.0680] <rbuckton>
I'm also experimenting with a `Mutex` wrapper that let's me write code like this:

```ts
{
  using lck = new UniqueLock(mutex);
  ...
}
```

Though the mutex wrapper is slower than `Atomics.Mutex`.

[18:11:10.0329] <rbuckton>
> <@rbuckton:matrix.org> In reply to shu
> what are the limitations? attaching behavior and that ownProperty bug?
> 
> 
> In reply to shu
> what are the limitations? attaching behavior and that ownProperty bug?
> 
> In reply to @shuyuguo:matrix.org
> what are the limitations? attaching behavior and that ownProperty bug?
> If I limit this to just the command line compiler, the biggest issue is that I can't emulate our internal NodeArray with a SharedArray. A NodeArray is just an Array with a few extra properties attached, but that causes several issues:
> 
> Can't define extra fields on SharedArray
> 
> Alternatively, can't define numeric indexed properties on a regular struct.
> 
> SharedArray is not iterable and you can't make a regular struct iterable, so I have to rewrite every for..of and array method call to work around.

This ended up horribly formatted due to trying to edit the message on my phone :/

[18:11:26.0750] <rbuckton>
> <@shuyuguo:matrix.org> what are the limitations? attaching behavior and that ownProperty bug?

 * If I limit this to just the command line compiler, the biggest issue is that I can't emulate our internal NodeArray with a SharedArray. A NodeArray is just an Array with a few extra properties attached, but that causes several issues:

- Can't define extra fields on SharedArray

- Alternatively, can't define numeric indexed properties on a regular struct.

- SharedArray is not iterable and you can't make a regular struct iterable, so I have to rewrite every for..of and array method call to work around.


2023-09-11
[13:54:53.0035] <shu>
rbuckton: we should figure out how to get builds of node with tip-of-tree V8. your indexed property woes seems to have been long fixed, but the V8 version that your version of node uses hasn't picked it up

[13:55:16.0170] <shu>
```
~/v8/v8 $ out/x64.debug/d8 --harmony-struct ./test-shared-struct-elements-own-prop.js 
V8 is running with experimental features enabled. Stability and security will suffer.
0,1
{"writable":true,"enumerable":true,"configurable":false}

~/v8/v8 $ cat ./test-shared-struct-elements-own-prop.js 
var t = new SharedStructType(["0", "1"]);
var s = new t();
print(Object.keys(s));
print(JSON.stringify(Object.getOwnPropertyDescriptor(s, "0")));
```

[16:32:36.0304] <rbuckton>
I'll have to take some time next week to spin up a NodeJS build environment


2023-09-12
[09:13:28.0069] <Mathieu Hofman>
I've used https://nodejs.org/download/v8-canary/ successfully before

[09:14:35.0250] <Mathieu Hofman>
Built from https://github.com/nodejs/node-v8

[13:29:19.0844] <rbuckton>
> <@mhofman:matrix.org> Built from https://github.com/nodejs/node-v8

Thanks! This works perfectly

[13:32:42.0538] <rbuckton>
`instanceof` for Mutex/Condition/SharedArray is great. I see that it works for instances of instances of `SharedStructType` as well, though there's still no fast way to see if a value is *any* shared struct (i.e., without access to its specific constructor)

[13:33:47.0149] <shu>
rbuckton: there is, i also added `SharedStructType.isSharedStruct` iirc

[13:35:52.0909] <rbuckton>
Ah, great

[13:41:14.0625] <rbuckton>
Hmm. I was hoping I could use `SharedStructType` to emulate `SharedArray` when I also need extra fields, but its significantly slower so that's a no-go.

[13:44:18.0721] <shu>
yes -- that's a possible optimization that's not implemented due to complexity/effort

[13:44:37.0995] <shu>
if you use indexed fields in SharedStructTypes, those are _always_ backed by "dictionary elements", i.e. a hash table

[13:44:41.0700] <shu>
SharedArrays are contiguous arrays

[13:45:09.0605] <shu>
we can optimize SharedStructTypes to use fast elements when those indexes are all packed, or something

[13:45:22.0754] <shu>
i could put it on the queue if it's a blocker

[13:47:08.0594] <Ashley Claymore>
> <@rbuckton:matrix.org> Hmm. I was hoping I could use `SharedStructType` to emulate `SharedArray` when I also need extra fields, but its significantly slower so that's a no-go.

Could the N extra fields be hidden at the start of the sharedarray? Their names map to fixed indexes 0,1,2 etc, and all array looping logic knows to start index at N? Or too big a refactor?

[13:48:54.0852] <rbuckton>
Thats just as much of a refactor as what I was doing, which was stashing a SharedArray in an `items` field in another struct. The biggest issue with that approach is that every function that expected a `NodeArray` with indexable elements has to check if it's instead a `SharedNodeArray` to use its `items` field.

[13:49:22.0691] <shu>
rbuckton: what's the full list of field names you'd like to be fast?

[13:49:29.0585] <shu>
might not be too bad, i'll see if i have time next week

[13:55:33.0222] <rbuckton>
I'm not sure how to answer that. What's "slow" is that I'm trying to emulate a `SharedArray` with fields named `"length"`, `"0"`, `"1"`, etc. as well as attach a few extra fields that we normally stash on a `NodeArray`, which looks something like this:

```ts
interface NodeArray<T extends Node> extends Array<T> {
  pos: number;
  end: number;
  hasTrailingComma: boolean;
  transformFlags: TransformFlags; // number
}
```
If you're asking about other fields, the most frequently hit fields on our AST are `pos`, `end`, `kind`, `id`, `transformFlags`, and `parent`:

```ts
interface Node {
  pos: number;
  end: number;
  kind: SyntaxKind; // number
  transformFlags: TransformFlags; // number
  id: number | undefined;
  parent: Node | undefined;
}
```

[13:59:06.0786] <shu>
ah i see

[13:59:29.0420] <shu>
is the length of these nodes known AOT per Node?

[13:59:42.0062] <shu>
(and are contiguous?)

[14:07:39.0068] <rbuckton>
Can you clarify what you mean by contiguous?

[14:09:41.0068] <rbuckton>
I've essentially mirrored our AST structure into shared struct definitions, so I could tell you exactly how many fields are attached to a given node, though I'd need a bit if you want something like the average field count.

[14:13:42.0627] <shu>
by contiguous i mean if a node type's length is N, then the node always has indexed properties 0 to N-1, inclusive, with no holes

[14:13:52.0378] <shu>
hole in the usual JS sense

[14:14:26.0808] <shu>
and no, not looking for an average field count

[14:14:42.0845] <shu>
by AOT i mean is the length fixed per node _type_ instead of per node _instance_

[14:14:52.0565] <shu>
since all shared arrays are fixed length

[14:14:59.0053] <rbuckton>
A `Node`? No. A `NodeArray`, yes. There are no holes in `NodeArray`s, though they could be filled with different kinds of `Node` subtypes.

[14:15:45.0316] <shu>
oh, my bad, i think i misread

[14:15:54.0561] <shu>
you're not saying you want Nodes to have some elements in addition to some properties

[14:16:17.0820] <shu>
you're saying you're trying to convert NodeArrays, which are arrays + some string-named properties that you listed above

[14:16:50.0246] <shu>
that points to another direction, which is...

[14:17:44.0991] <shu>
perhaps the dev trial should unify the notions of SharedStructType and SharedArray and just let SharedStructTypes specify "i want N indexed properties"

[14:17:54.0769] <shu>
but even then a SharedArray constructor is probably helpful

[14:18:06.0952] <shu>
in any case i hear the feedback now and i'll push it on the queue

[14:21:18.0770] <rbuckton>
Yes. I have two choices for a shared struct implementation of a `NodeArray`:

1. I use a Shared Struct with a small set of string-named fields (like `pos`/`end`), as well a `length` and a number of indexed fields with no holes. This would emulate `NodeArray` except for functionality from array prototype as I can just use `length` and indices instead. This provides enough overlap between `NodeArray` and `SharedNodeArray` that I don't need to special case every single function that works with `NodeArray`.

2. I use a Shared Struct with the same set of string-named fields as well as an `items` field that holds a `SharedArray`. In this case, I need to add branching cases in every function that works with `NodeArray`.

[14:23:03.0624] <shu>
i try to allow (1) to be more easily expressed and be faster

[14:23:10.0251] <rbuckton>
Another option would be the ability to add extra fields to a `SharedArray`, such that integer indexed properties go through the current fast path for `SharedArray` and other string properties go the slow path.

[14:23:10.0888] <shu>
 * i'll try to allow (1) to be more easily expressed and be faster

[14:23:40.0379] <rbuckton>
Though I assume that could be handled by unification as you suggested above.

[14:23:57.0693] <shu>
something like `SharedStructType(fields, { alsoGiveMeElementsUpTo: N })` or whatever

[14:25:32.0934] <rbuckton>
Yeah, or the `SharedStructType` constructor could just test `fields` for interger-indexed field names that start from `0` and go to `N` with no holes, and optimize those (unless you need to optimize `length` as well.

[14:25:42.0727] <rbuckton>
 * Yeah, or the `SharedStructType` constructor could just test `fields` for interger-indexed field names that start from `0` and go to `N` with no holes, and optimize those (unless you need to optimize `length` as well).

[14:26:23.0812] <rbuckton>
For the purposes of the trial, I don't necessarily need convenience, I just need capability. I can work around inconveniences if the capabilities are there.

[14:48:24.0575] <rbuckton>
Quick update on the parallel parsing front, after tinkering with how I batch source files to send to background threads, I went from parse time being 6x slower than single threaded, to only 1.5x slower.

[14:49:02.0433] <shu>
ah interesting, would love to dig in at some point, should be faster after all :)

[14:56:17.0112] <rbuckton>
TypeScript normally does a depth-first parse of source files: for each root file, we parse the file, collect its imports and `/// <reference>` directives, and then parse those files. The order in which we parse files affects signature overload resolution when we merge types for global scope and module augmentations. Depth first isn't very efficient for parallelization though, so I'm having to rewrite it to be breadth-first instead, which will (of course) affect overload resolution. I was trying a batching approach to minimize that affect, but it wasn't successful. In the end I'm probably just going to "fix it in post" and reorder the file list based on what we *would* have generated prior to batching.

[15:04:52.0147] <Ashley Claymore>
Curious, Is some of the remaining slowdown coming from under utilization, threads waiting for work to do, or are they fully saturated but there is additional overhead with the sharing? (Very excited by all this, we've also been looking at running TS in parallel and the parsing was showing as a bottleneck due to cache misses. A cross thread cache could be a big win)

[15:06:23.0701] <rbuckton>
I don't have enough information on that to say, yet. I think some of the inefficiencies are due to workarounds and needing to convert the struct representation to a normal `Node` representation.

[15:07:30.0820] <rbuckton>
I'm currently working on abstracting away the differences between a `Node` and a `SharedNode` so that I can just use shared structs end to end in the command line compiler, which would at least do away with the conversion step.

[15:09:14.0175] <rbuckton>
Once that works, I can look into whether its feasible to bind in parallel and possibly even emit in parallel. Unfortunately our emitter often queries information from the checker, which we probably won't be able to parallelize currently.

[15:10:19.0206] <rbuckton>
And I'm not sure how efficient synchronizing on the checker and calling into it from other threads will be.

[15:14:28.0427] <rbuckton>
> <@shuyuguo:matrix.org> if you use indexed fields in SharedStructTypes, those are _always_ backed by "dictionary elements", i.e. a hash table

Are you saying all property access against a shared struct (not a shared array) in the origin trial uses hash table lookup/slow mode?

[15:15:49.0413] <shu>
> <@rbuckton:matrix.org> Are you saying all property access against a shared struct (not a shared array) in the origin trial uses hash table lookup/slow mode?

No, just the integer-indexed properties on shared structs

[15:15:53.0364] <shu>
string-named properties are fast

[15:15:56.0920] <rbuckton>
Ah, ok

[15:16:06.0642] <shu>
it's a pecularity of how elements (indexed properties) are stored on JSObjects


2023-09-17
[10:06:04.0059] <rbuckton>
I'm still tinkering with my parallel parse prototype, and I'm planning to try it on a few large scale projects. I'm not currently seeing the perf-gains I would hope, but its too early to say if its an issue with the shared structs functionality, the size of the projects I've been using for testing, or something about how I've had to hack around parts of the compiler to get something functional.
I wrote a rudimentary work-stealing thread pooling mechanism, but I'm finding that adding more threads slows down parse rather than speeding it up for the monorepo I've been using as a test case. CPU profiling shows a lot of the threads aren't processing work efficiently, and are either spinning around trying to steal work or are waiting to be notified of work. Spinning isn't very efficient because there's no spin-wait mechanism nor the ability to write an efficient one (I can sort-of approximate one using `Condition.wait` with a short timeout to emulate `sleep`, but I can't efficiently yield). I also can't write efficient lock-free algorithms with shared structs alone, since I can't do CAS, so the fastest "lock-free"-ish updates I can perform are inside of a `Mutex.tryLock` unless I want to fall back to also sending a `SharedArrayBuffer` to the worker just so I can use `Atomics.compareExchange`.

Here's a rough approximation of the thread pool I'm using right now, if anyone has suggestions or feedback: https://gist.github.com/rbuckton/3648f878595ed4e2ff3d52a15baaf6b9

[10:08:56.0043] <rbuckton>
Ah, wait. I just noticed I can do compareExchange with `SharedArray`. That's good.

[10:09:58.0980] <rbuckton>
 * Ah, wait. I just noticed I can do `compareExchange` with `SharedArray` and shared structs. That's wonderful!

[11:03:44.0827] <rbuckton>
I've updated my gist slightly to perform atomic updates on the task counter, probably a few more updates later.

[16:05:52.0086] <shu>
>  I also can't write efficient lock-free algorithms with shared structs alone, since I can't do CAS, so the fastest "lock-free"-ish updates I can perform are inside of a Mutex.tryLock unless I want to fall back to also sending a SharedArrayBuffer to the worker just so I can use Atomics.compareExchange.

why can't you CAS shared structs?

[16:05:58.0600] <shu>
`Atomics.compareExchange` works with shared struct fields!

[16:06:08.0058] <shu>
oh, i should've kept reading, you noticed it


2023-09-18
[03:49:48.0663] <Ashley Claymore>
> <@rbuckton:matrix.org> I'm still tinkering with my parallel parse prototype, and I'm planning to try it on a few large scale projects. I'm not currently seeing the perf-gains I would hope, but its too early to say if its an issue with the shared structs functionality, the size of the projects I've been using for testing, or something about how I've had to hack around parts of the compiler to get something functional.
> I wrote a rudimentary work-stealing thread pooling mechanism, but I'm finding that adding more threads slows down parse rather than speeding it up for the monorepo I've been using as a test case. CPU profiling shows a lot of the threads aren't processing work efficiently, and are either spinning around trying to steal work or are waiting to be notified of work. Spinning isn't very efficient because there's no spin-wait mechanism nor the ability to write an efficient one (I can sort-of approximate one using `Condition.wait` with a short timeout to emulate `sleep`, but I can't efficiently yield). I also can't write efficient lock-free algorithms with shared structs alone, since I can't do CAS, so the fastest "lock-free"-ish updates I can perform are inside of a `Mutex.tryLock` unless I want to fall back to also sending a `SharedArrayBuffer` to the worker just so I can use `Atomics.compareExchange`.
> 
> Here's a rough approximation of the thread pool I'm using right now, if anyone has suggestions or feedback: https://gist.github.com/rbuckton/3648f878595ed4e2ff3d52a15baaf6b9

Looks good to me. Have you experimented with batch sizes? Each task being N files, rather than 1:1 task file ratio?

[03:50:56.0958] <Ashley Claymore>
Also wondering how much the tasks are known up front (one main glob) vs discovered as imports are found. I.e how well the queue can stay pumped?

[03:56:26.0704] <rbuckton>
Tasks are 1:1 per file. With work stealing, batching would be less efficient since you could have threads sitting idle. 

[03:58:48.0425] <rbuckton>
How much is known upfront depends on the tsconfig `files`, `include`, and `exclude` options, though I'm using a striping approach to try to collect all imports/references for each pass around the file list. 

[03:59:59.0871] <rbuckton>
I need to experiment with a few more projects of different sizes though, it's still fairly early yet. 

[04:02:33.0531] <rbuckton>
The current approach is still very waterfall like in the main thread. I would need to do a lot more work to have the child threads scan for imports/references so they don't have to constantly wait for the main thread to hand out more work. 

[04:04:06.0959] <rbuckton>
Unfortunately, program.ts is very callback heavy and dependent on caches that would *also* need to be shared. 

[04:05:02.0798] <rbuckton>
There's a lot of idle time waiting for main right now

[04:08:04.0489] <rbuckton>
I currently have a synchronized, shareable `Map`-like data structure I can use for that, but I may want to see if I can build a lock-free, concurrent Map first so there's less blocking involved

[05:26:52.0862] <Ashley Claymore>
> <@rbuckton:matrix.org> Tasks are 1:1 per file. With work stealing, batching would be less efficient since you could have threads sitting idle.

true tho that assumes the queuing system is zero-cost (no padding around tasks). So might work out that some batching, while theoretically less efficient at packing, leads to better results.
Just an idea :) 

[05:28:16.0925] <Ashley Claymore>
In an ideal world parsing the largest files first would also be ideal for work stealing, though finding the largest files may be more costly than that saves too

[06:09:07.0471] <Jack Works>
is there slides of update?

[06:09:41.0521] <Jack Works>
I'm excited about the progress you've made and want to know more details! I can't wait!

[07:43:35.0324] <shu>
Jack Works: there are in fact no slides yet :(

[07:43:39.0239] <shu>
got so much to do this week

[07:44:18.0193] <shu>
rbuckton: i wonder if also web workers sucking somehow is getting in the way of your performance? this is node though so who knows, might be unrelated to web workers even if its worker implementation were less than ideal

[09:03:27.0413] <rbuckton>
> <@aclaymore:matrix.org> true tho that assumes the queuing system is zero-cost (no padding around tasks). So might work out that some batching, while theoretically less efficient at packing, leads to better results.
> Just an idea :)

You are possibly correct, though that is a level of fine tuning I'm not anywhere near investigating yet.

[09:04:49.0981] <rbuckton>
> <@shuyuguo:matrix.org> rbuckton: i wonder if also web workers sucking somehow is getting in the way of your performance? this is node though so who knows, might be unrelated to web workers even if its worker implementation were less than ideal

Are you imagining there is overhead to reading/writing from shared structs or using mutex/condition caused by the worker? Or are you talking about overhead due as a result of setup, postMessage, etc.?

[10:08:35.0457] <rbuckton>
I've updated the thread pool example to use a lock free Chase-Lev deque, though it still uses a Mutex/Condition to put the thread to sleep when there's no work to do.

[10:26:00.0758] <rbuckton>
It's still somewhat inefficient if a thread ends up sleeping and a task is added to a queue for a different thread that is still active.

[12:16:05.0145] <Mathieu Hofman>
Reading all this, I am still curious to understand how Shared Struct help compared to a synchronization mechanism (to implement a thread pool) coupled with an efficient message passing. How much actual shared mutable state is necessary?

[12:51:48.0726] <rbuckton>
What would you consider to be "efficient message passing"? 

[12:53:13.0519] <rbuckton>
The lion's share of what TypeScript would send back and forth for parallel parse is essentially immutable, but a lot of the smaller data structures I need just to do coordination require shared mutable state.

[12:55:07.0476] <rbuckton>
If I wanted to write my own `malloc`/`free` over a growable `SharedArrayBuffer` as a heap, I could mostly do the same things as what we can do with Shared Structs, albeit *far* slower due to the need for wrappers and indirection, plus I would have to handle string encoding/decoding on my own and could never shrink the size heap. Shared structs are far more efficient in this regard.

[12:58:30.0453] <rbuckton>
And when I say "could mostly do the same things", I mean "have done something very similar" with https://esfx.js.org/esfx/api/struct-type.html, with the downside that it requires fixed sized types for fields and everything is laid out flat within a `SharedArrayBuffer`.

[12:59:05.0587] <rbuckton>
(and it doesn't support arbitrary string values)

[13:29:17.0123] <shu>
> <@rbuckton:matrix.org> Are you imagining there is overhead to reading/writing from shared structs or using mutex/condition caused by the worker? Or are you talking about overhead due as a result of setup, postMessage, etc.?

i was thinking the latter, and scheduling

[13:30:42.0491] <shu>
> <@mhofman:matrix.org> Reading all this, I am still curious to understand how Shared Struct help compared to a synchronization mechanism (to implement a thread pool) coupled with an efficient message passing. How much actual shared mutable state is necessary?

my thinking has always been single-writer XOR multiple-reader kind of data sharing will get you pretty far

[13:30:52.0224] <Mathieu Hofman>
I guess I'm wondering how these small data structures for synchronization are used, how much they need to do, and if there's any way to abstract them into higher level concepts. The immutable data could be passed as messages, and does not need to be based on shared struct from what I gather. I am basically still worried we're designing a blunt tool that will be abused when alternatives would be more aligned with the JS ecosystem.

[13:31:08.0391] <shu>
but if your application wants mutable shared state there is no alternative

[13:32:16.0992] <shu>
i continue to strongly disagree with this handwringing about abuse

[13:43:59.0607] <shu>
but i think we remain agreed that shared mutable state is a bad thing to entice people into reaching for from the get go

[14:00:37.0075] <rbuckton>
> <@shuyuguo:matrix.org> i was thinking the latter, and scheduling

For TypeScript, I'm not using postMessage at all except for the built-in one NodeJS does to pass the initial value of `workerData`, so that wouldn't be the cause. 

[14:04:47.0007] <rbuckton>
> <@mhofman:matrix.org> I guess I'm wondering how these small data structures for synchronization are used, how much they need to do, and if there's any way to abstract them into higher level concepts. The immutable data could be passed as messages, and does not need to be based on shared struct from what I gather. I am basically still worried we're designing a blunt tool that will be abused when alternatives would be more aligned with the JS ecosystem.

The problem is that concurrency and coordination often requires far more complex coordination primitives than we are likely to ship in the standard library. With the implementation in the origin trial, I can easily build these more complex coordination capabilities out of the primitives we have through the use of mutable shared state. If we are limited to only a few built-in mutable and shareable data structures and everything else is immutable, then it is possible this proposal won't meet the needs of the applications that need this capability the most.

[14:05:56.0119] <rbuckton>
That's not saying we shouldn't *also* have immutable data structures, or at least the ability to freeze all or part of a shared struct, as I'd like those too.

[14:06:20.0693] <shu>
rbuckton: yeah that all tracks exactly with my intuition

[14:06:51.0107] <rbuckton>
Even though I would consider most of the TypeScript AST to be immutable, that's not exactly true. It's immutable to our consumers, but we need to be able to attach additional shared data ourselves.

[14:08:05.0886] <rbuckton>
for example, I may build a `SourceFile` and its AST in parallel parse, but this file hasn't been bound and had its symbols and exports recorded yet. Once parse is complete, we hand the entire program off to the binder which could also do its work in parallel.

[14:08:56.0380] <shu>
in the back of my mind i'm still thinking about the viability of dynamic "ownership" tracking, for lack of a better word. by "ownership" i mean single writer XOR multiple readers

[14:09:38.0717] <rbuckton>
And while our emitter uses tree transformations that produce a new AST for changed subtrees, we still reuse unchanged subtrees as much as possible, and need to attach additional information about how those original nodes should be handled during emit as well. 

[14:10:47.0816] <rbuckton>
Weak Maps and thread-local state don't help there as I may want to parallelize emit and transformation for subtrees as well, which means handing parts of the tree off to other threads.

[14:12:38.0988] <rbuckton>
> <@shuyuguo:matrix.org> in the back of my mind i'm still thinking about the viability of dynamic "ownership" tracking, for lack of a better word. by "ownership" i mean single writer XOR multiple readers

On a per-instance level, or something less fine grained? In my TypeScript experiment I wrote a `SharedMutex` that supports single writer (exclusive) locks and multiple reader (shared) locks on top of the ones you provide on `Atomic`.

[14:12:49.0162] <rbuckton>
> <@shuyuguo:matrix.org> in the back of my mind i'm still thinking about the viability of dynamic "ownership" tracking, for lack of a better word. by "ownership" i mean single writer XOR multiple readers

 * On a per-instance level, or something less fine grained? In my TypeScript experiment I wrote a `SharedMutex` that supports single writer (exclusive) locks and multiple reader (shared) locks on top of the ones you provide on `Atomics`.

[14:14:25.0811] <shu>
rbuckton: on a per-instance level

[14:14:57.0728] <rbuckton>
That sounds potentially expensive?

[14:14:59.0948] <shu>
not to provide ordering, or blocking until reading is available, but to e.g. throw, or provide query APIs for whether it's currently safe to read

[14:15:04.0084] <shu>
indeed, that's why i've punted on it

