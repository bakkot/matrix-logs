2023-09-06
[13:43:26.0749] <rbuckton>
shu: Are the origin trial shared structs not allowed to have fields that are stringified integers?

[14:25:56.0386] <shu>
rbuckton: it should, that looks like a bug

[14:26:01.0355] <shu>
i'll investigate soon, thanks for raising it

[15:32:40.0914] <rbuckton>
The more I tinker with this, trying to shoehorn it into the compiler, the more I want some mechanism to attach behavior.
I also had to implement a custom `Map`-like mechanism using shared structs to share some keyed data efficiently. 

[15:33:20.0290] <rbuckton>
I have made some progress on parallel parsing, however. 

[15:44:56.0565] <shu>
i am working on the behavior thing

[15:45:10.0955] <shu>
more specifically, the thread-local storage thing

[15:45:46.0842] <shu>
our current GC scheme makes inter-heap cycles uncollectable, and i'm trying to fix that, which is taking a bit due to GC being finnicky


2023-09-08
[16:48:21.0705] <rbuckton>
shu: are you aware of any issues debugging workers when - - harmony-structs or the Shared string table flag are enabled? I'm running issues debugging in VS Code and wanted to check if there were any known issues before I file an issue with VS Code. 

[16:50:12.0414] <rbuckton>
I'm not sure if it's Code, the chrome debug protocol, NodeJS, or V8 causing the issue, but the first breakpoint I hit after starting a worker and passing it a shared struct results in the debugger locking up. 

[16:57:14.0828] <rbuckton>
I finally reached a point where I can successfully parse a large project (xstate) using parallel parsing and the results aren't very promising yet. On a single thread, parse takes about 1.2s on my machine, and about 3.5s when running in parallel. However this is still very early and I'm having to copy the entire AST of each file from the struct representation into a normal JS object so it can be used by our existing checker and emitter. The limitations of structs mean we can't just use them as-is without a significant rewrite. 


2023-09-09
[17:06:01.0751] <shu>
rbuckton: re: VSCode debugging, i don't know but i wouldn't be surprised if devtools just doesn't work because nobody has looked at it. printf debugging is what we do unfortunately, devtools investment is unlikely to materialize without something like getting to stage 3 first

[17:06:17.0834] <shu>
yeah, copying into normal objects sounds like it would kill performance indeed

[17:06:31.0900] <shu>
what are the limitations? attaching behavior and that ownProperty bug?

[17:06:52.0555] <shu>
(please file issues for the limitations getting in your way in addition to the attaching behaviors thing)

[17:27:38.0514] <rbuckton>
> <@shuyuguo:matrix.org> what are the limitations? attaching behavior and that ownProperty bug?

If I limit this to just the command line compiler, the biggest issue is that I can't emulate our internal `NodeArray` with a `SharedArray`. A `NodeArray` is just an `Array` with a few extra properties attached, but that causes several issues:
- Can't define extra fields on `SharedArray`
- Alternatively, can't define numeric indexed properties on a regular struct.
- SharedArray is not iterable and you can't make a regular struct iterable, so I have to rewrite every `for..of` and array method call to work around. 

[17:27:53.0931] <rbuckton>
* In reply to @shuyuguo:matrix.org
what are the limitations? attaching behavior and that ownProperty bug?


If I limit this to just the command line compiler, the biggest issue is that I can't emulate our internal NodeArray with a SharedArray. A NodeArray is just an Array with a few extra properties attached, but that causes several issues:

Can't define extra fields on SharedArray

Alternatively, can't define numeric indexed properties on a regular struct.

SharedArray is not iterable and you can't make a regular struct iterable, so I have to rewrite every for..of and array method call to work around.


[17:28:20.0192] <rbuckton>
* In reply to shu
what are the limitations? attaching behavior and that ownProperty bug?


In reply to @shuyuguo:matrix.org
what are the limitations? attaching behavior and that ownProperty bug?

If I limit this to just the command line compiler, the biggest issue is that I can't emulate our internal NodeArray with a SharedArray. A NodeArray is just an Array with a few extra properties attached, but that causes several issues:
- Can't define extra fields on SharedArray

- Alternatively, can't define numeric indexed properties on a regular struct.

- SharedArray is not iterable and you can't make a regular struct iterable, so I have to rewrite every for..of and array method call to work around.


[17:28:32.0877] <rbuckton>
* In reply to shu
what are the limitations? attaching behavior and that ownProperty bug?


In reply to shu
what are the limitations? attaching behavior and that ownProperty bug?

In reply to @shuyuguo:matrix.org
what are the limitations? attaching behavior and that ownProperty bug?
If I limit this to just the command line compiler, the biggest issue is that I can't emulate our internal NodeArray with a SharedArray. A NodeArray is just an Array with a few extra properties attached, but that causes several issues:

Can't define extra fields on SharedArray

Alternatively, can't define numeric indexed properties on a regular struct.

SharedArray is not iterable and you can't make a regular struct iterable, so I have to rewrite every for..of and array method call to work around.


[17:30:00.0937] <rbuckton>
We also use data structures like `Map` that we can't emulate due to the inability to attach behavior, so there's a lot of copying in and out of data structures we can use. 

[17:33:14.0207] <rbuckton>
If I wanted to extend these structs to the language service, we're in the realm of needing behavior and the ability to freeze or lock down specific properties. Our AST is mostly treated as immutable, but if we were to vend struct based nodes from our API they would become unsafe to use if a consumer could make changes to properties outside of a lock. 

