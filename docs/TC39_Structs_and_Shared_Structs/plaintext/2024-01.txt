2024-01-18
[09:59:49.0092] <rbuckton>
My apologies, I will be about 2 minutes late to the working session today

[11:01:18.0733] <rbuckton>
shu: At one point you had discussed having one shared struct inherit from another shared struct. If we ignore TLS prototypes and behavior for a moment, is there any specific benefit to modeling an actual inheritance model here, or would just having the inherited struct just maintain the initial field layout of the base struct be sufficient?

[11:01:32.0434] <rbuckton>
 * shu: At one point you had discussed having one shared struct inherit from another shared struct. If we ignore TLS prototypes and behavior for a moment, is there any specific benefit to modeling an actual inheritance model here, or would having the inherited struct just maintain the initial field layout of the base struct be sufficient?

[11:03:04.0001] <shu>
i think the benefit is more like "full composability with rest of the language", mainly

[11:03:24.0790] <shu>
i know the field has kind of soured on inheritance hierarchies vs inline storage of stuff

[11:03:59.0833] <shu>
but for e.g. AST nodes, you probably do want an inheritance hierarchy in the "layout prefix" sense that i was imagining

[11:04:11.0726] <shu>
`AstNodeBase` has `loc` or whatever

[11:04:46.0753] <rbuckton>
I'm more asking if there is any reason that `struct B extends A {}` needs to care about `A` other than its field layout (if you ignore TLS prototypes and constructor initialization logic)

