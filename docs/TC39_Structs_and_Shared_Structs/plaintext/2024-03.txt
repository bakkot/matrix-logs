2024-03-03
[14:36:08.0504] <Mathieu Hofman>
Hey shu,  tomorrow is actually not a great time for Mark and I. I know it's last minute but maybe Thursday would work for everyone?

[14:39:06.0529] <Mathieu Hofman>
We also need to discuss a little more between him and I to make this follow up discussion more productive, and I was too tired after my travels last week to catch up with him.


2024-03-04
[10:10:26.0848] <shu>
Mathieu Hofman: at the same time slot i have a conflict

[10:10:51.0817] <shu>
could you please send out an email to the people on the call asking for a time change? what time works for you on thursday?

[10:11:14.0013] <shu>
didn't see this till now, i don't check for messages on weekends

[10:11:26.0572] <shu>
actually guess i'll send out the email

[10:45:57.0443] <shu>
@room the meeting is moved to Thursday, 11am-12pm PT

[10:46:03.0987] <shu>
okay maybe @room doesn't work

[10:46:10.0632] <shu>
Mathieu Hofman: rbuckton ^

[10:46:38.0766] <rbuckton>
I saw, thanks

[11:08:51.0508] <snek>
I can confirm that room works 

[11:09:13.0568] <snek>
element delivers pushes very slowly though 

[11:15:25.0256] <Mathieu Hofman>
Sorry I was driving. Yes Thursday 11am works for us. Thanks!


2024-03-05
[09:45:56.0344] <Mathieu Hofman>
Chatting with Mark yesterday, we realized that the wasm shared everything thread is pretty strict about shared stuff not being able to access non shared stuff. Which brings the question, are there no use cases where shared funcs need to "call" a host function (which I assume is non-shared?). How would that work?

[09:46:09.0249] <Mathieu Hofman>
 * Chatting with Mark yesterday, we realized that the wasm shared everything thread proposal is pretty strict about shared stuff not being able to access non shared stuff. Which brings the question, are there no use cases where shared funcs need to "call" a host function (which I assume is non-shared?). How would that work?

[09:52:00.0245] <shu>
that is a required use case, in fact

[09:52:19.0599] <shu>
that's what all the thread-local storage, thread-bound storage, and discussions of that nature orbit around

[09:52:40.0553] <shu>
i talked about this in the update talk as the "syscall table"

[09:52:42.0976] <Mathieu Hofman>
right but what I'm reading is that TLS only stored shared things?

[09:52:55.0517] <shu>
TLS is a table that stores unshared things

[09:53:00.0054] <shu>
the _storage_ is local

[09:53:04.0516] <shu>
err

[09:53:09.0624] <shu>
 * the _storage_ is thread-local

[09:53:17.0522] <shu>
you can put e.g. web API JSFunctions inside them

[09:53:31.0027] <shu>
the JS proposal also has the no shared->unshared edges restriction (at runtime)

[09:54:22.0687] <Mathieu Hofman>
In https://github.com/WebAssembly/shared-everything-threads/blob/main/proposals/shared-everything-threads/Overview.md#thread-local-storage-tls it says:
> We don't allow non-shared references in thread-local globals because then they would not be able to be accessed from shared functions

That's why I'm confused

[09:54:48.0350] <shu>
oh that's a wasm type systems quirk, i was also confused by that

