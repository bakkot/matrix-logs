2023-01-19
[16:31:10.0048] <shu>
i do plan to have the call tomorrow if anyone's interested

[16:31:19.0088] <shu>
on my agenda is to talk about method sharing and prototype lookup

[16:33:45.0175] <Mathieu Hofman>
I mentioned to Ashley the other day it might be worth for him to join to discuss if there may be any similarities with the R&T proposal as was hinted by some during the last plenary. Will remind him of the call tomorrow

[16:36:24.0319] <shu>
indeed, that sounds great, thanks!

[04:38:07.0364] <Ashley Claymore>
Thanks Mathieu Hofman ! I am likely to be on a train home during the call, but will try and listen in on my mobile 

[07:22:46.0511] <shu>
doh, a last minute conflict arose (apartment repair people)

[07:23:55.0649] <shu>
Ashley Claymore: if i move this one to the 26th 1 hour earlier (9am PT), would that work better for you?

[09:00:24.0264] <littledan>
OK, are we meeting now?

[09:02:00.0657] <littledan>
shu: ^

[09:06:39.0301] <littledan>
OK, I take it not

[09:08:36.0005] <Ashley Claymore>
Moved to next week on the TC39 events cal now

[09:13:28.0619] <Ashley Claymore>
Also feel free to have at the original time next week (10am PT), I'm getting an earlier train than I would usually today :)

[10:28:55.0651] <shu>
littledan: sorry about short notice, last minute conflict


2023-01-26
[17:17:59.0236] <shu>
planned agenda for tomorrow's meeting:

- method sharing and prototype lookup
- property redefinition (and freezing)
- R&T interaction

[17:18:12.0086] <shu>
 * planned agenda for tomorrow's meeting:

- method sharing and prototype lookup
- property redefinition (and freezing)
- R&T interaction

[17:25:48.0362] <asumu>
Unfortunately I don't think I will be able to attend tomorrow due to a conflicting appointment. I don't have much to report, Wasm GC is moving towards getting a formal spec (& JS API spec) so if anything relevant comes out of that I'll report in future meetings.

[17:28:52.0881] <shu>
thanks asumu

[18:14:18.0164] <Ashley Claymore>
> <@aclaymore:matrix.org> Also feel free to have at the original time next week (10am PT), I'm getting an earlier train than I would usually today :)

^^ if missed before. Feel free to keep the 10am time, if that works better for asumu . My clash last week was not reoccurring 

[07:54:34.0449] <rbuckton>
> <@shuyuguo:matrix.org> planned agenda for tomorrow's meeting:
> 
> - method sharing and prototype lookup
> - property redefinition (and freezing)
> - R&T interaction

I'm also curious if we can leverage `using` with Mutex/ConditionVariable, since that was one of the reasons I focused on getting that proposal to Stage 3.

[08:50:52.0388] <shu>
sure, sounds good

[09:04:29.0034] <shu>
Ashley Claymore: the call is now, btw

[09:05:07.0721] <Ashley Claymore>
omw

[09:05:24.0982] <Ashley Claymore>
sorry, actually 1 min

[09:05:29.0556] <shu>
np

[10:39:16.0884] <rbuckton>
Regarding the "shared modules" suggestion. I may have jumped a few steps ahead in my reasoning without explaining how I got there, so I'll take a few steps back.

If we imagine an implementation of shared structs that contains some form of methods, what can those methods close over? Only globals? What about functions that are siblings to the shared struct? What about imports?

If we do not close over these things, the methods of shared structs won't be able to reuse useful utilities such as common vector math operations you might use in a 3D graphics library, that aren't somehow patched into `globalThis`.

If we do close over these things, how do we ensure the module graph has been instantiated on the worker thread? What about initialization logic that might be needed that wires together some of these modules, applies polyfills, etc.? What if these modules contain top-level `await` or must otherwise be loaded asynchronously?

How and when do we instantiate the thread-local (or per-realm?) prototype for each struct, especially if doing so might kick off this kind of module loading in the worker?

The leap in logic I took to the "shared module" approach was to address these concerns:

- "Shared modules" would have an identity in the module cache that could be used as part of the type identity.
- "Shared modules" would promote code reuse.
- "Shared modules" would be restricted to containing only those things that can safely be shared, i.e. references to globals (which would be re-bound per realm), local functions, variables, shared structs, and imports/exports from other "shared modules".
- Due to the nature of the above restrictions, "shared modules" avoid accidental references to non-shared code.

It could be that the idea of isolating shared code to its own file is overkill, but many developers are already used to doing this with things like `protobuf` today (i.e., maintaining their `protobuf` schema in a separate file).

[10:39:48.0569] <rbuckton>
 * Regarding the "shared modules" suggestion. I may have jumped a few steps ahead in my reasoning without explaining how I got there, so I'll take a few steps back.

If we imagine an implementation of shared structs that contains some form of methods, what can those methods close over? Only globals? What about functions that are siblings to the shared struct? What about imports?

If we do not close over these things, the methods of shared structs won't be able to reuse useful utilities such as common vector math operations you might use in a 3D graphics library, that aren't somehow patched into `globalThis`.

If we do close over these things, how do we ensure the module graph has been instantiated on the worker thread? What about initialization logic that might be needed that wires together some of these modules, applies polyfills, etc.? What if these modules contain top-level `await` or must otherwise be loaded asynchronously?

How and when do we instantiate the thread-local (or per-realm?) prototype for each struct, especially if doing so might kick off this kind of module loading in the worker?

The leap in logic I took to the "shared module" approach was to address these concerns:

- "Shared modules" would have an identity in the module cache that could be used as part of the type identity.
- "Shared modules" would promote code reuse.
- "Shared modules" would be restricted to containing only those things that can safely be shared, i.e. references to globals (which would be re-bound per realm), local functions, variables, shared structs, and imports/exports from other "shared modules".
- Due to the nature of the above restrictions, "shared modules" avoid accidental references to non-shared code.

It could be that the idea of isolating shared code to its own file is overkill, but many developers are already used to doing this with things like `protobuf` today (i.e., maintaining their `protobuf` schema in a separate file).

[10:40:26.0368] <rbuckton>
 * Regarding the "shared modules" suggestion. I may have jumped a few steps ahead in my reasoning without explaining how I got there, so I'll take a few steps back.

If we imagine an implementation of shared structs that contains some form of methods, what can those methods close over? Only globals? What about functions that are siblings to the shared struct? What about imports?

If we do not close over these things, the methods of shared structs won't be able to reuse useful utilities such as common vector math operations you might use in a 3D graphics library, that aren't somehow patched into `globalThis`.

If we do close over these things, how do we ensure the module graph has been instantiated on the worker thread? What about initialization logic that might be needed that wires together some of these modules, applies polyfills, etc.? What if these modules contain top-level `await` or must otherwise be loaded asynchronously?

How and when do we instantiate the thread-local (or per-realm?) prototype for each struct, especially if doing so might kick off this kind of module loading in the worker?

The leap in logic I took to the "shared module" approach was to address these concerns.

- "Shared modules" would have an identity in the module cache that could be used as part of the type identity.
- "Shared modules" would promote code reuse.
- "Shared modules" would be restricted to containing only those things that can safely be shared, i.e. references to globals (which would be re-bound per realm), local functions, variables, shared structs, and imports/exports from other "shared modules".
- Due to the nature of the above restrictions, "shared modules" avoid accidental references to non-shared code.

It could be that the idea of isolating shared code to its own file is overkill, but many developers are already used to doing this with things like `protobuf` today (i.e., maintaining their `protobuf` schema in a separate file).

[10:52:26.0457] <littledan>
My answer to this closing over/loading question was, the other side which receives the object has three options for handling module loading:
- The receiving side already expected that the object would come, so the module where the shared struct is defined has already been loaded, and the receiving module can start using it immediately.
- [I honestly can't think of a use case for this, but ] The receiving side sets itself up to handle objects dynamically, so it queries the object it received for the module specifier, `await import()`s that, and then can use the methods.
- The receiving side just wants to use the plain old data, and can do so without importing anything.

In all cases, there are no particular restrictions in what is closed over (just by construction because we do this whole dance per module map). And there just is no such thing as shared code, no limitations on mutating the local copy of the shared classes, or on TLA (because no synchronous module loading is ever used, just normal async). It does depend on one or other type of identity (which could be URL, or module block, or symbol if we have a global mapping).

What do you see as the downsides of this option?

[10:53:03.0871] <littledan>
> What about initialization logic that might be needed that wires together some of these modules, applies polyfills, etc.?

I don't have a solution to this; I was assuming that you could somehow bake this into the module.

[10:53:28.0662] <littledan>
(which doesn't mean necessarily bundling all recursive dependencies! it can have `import` statements like normal.)

[10:57:10.0628] <littledan>
I honestly don't understand how "shared modules" would work in detail--how they would differ from this, beyond being a subset requiring only recursive use of shared modules

[11:53:32.0432] <rbuckton>
> The receiving side already expected that the object would come, so the module where the shared struct is defined has already been loaded, and the receiving module can start using it immediately.

This is probably reasonable, as long as you can reliably correlate a shared struct type in both realms by module id and export name. However, that would potentially restrict shared struct definitions to only be at the top level of a _Module_, since returning them from a function call might not necessarily result in the same identity being valid.

[11:54:11.0635] <rbuckton>
> [I honestly can't think of a use case for this, but ] The receiving side sets itself up to handle objects dynamically, so it queries the object it received for the module specifier, await import()s that, and then can use the methods.

This seems like a poor developer experience. 

[12:04:32.0903] <rbuckton>
The "shared module" I was imagining would be fairly restrictive so as to have the declarations only really be resident in memory once, and not reparsed/linked/evaluated per-realm. No per-realm initialization, variables limited to constant, primitive values (and trivially reduceable expressions containing primitives), only top-level declarations: structs, functions, vars, imports/exports, maybe enums (if we can find a version of that proposal that might be accepted).
Such a module could be accessed via module id, and reachable from any worker/realm. Evaluating functions/methods/constructors/etc. from a "shared module" would use the current realm.
Struct type identity would be trivially resolvable via _module id_+_export name_, producing the correct prototype in each realm.

[12:05:57.0709] <rbuckton>
A fourth approach, which I'm trying to enable with this design, is that the receiving end doesn't need to worry about running code to support the struct since its easily reachable.

[12:10:04.0496] <rbuckton>
Yes, the setup is more restrictive due to the limitations imposed by a "shared module", but it also avoids many pitfalls like developers inadvertently depending on thread-local or realm-local state in shared code. The benefit being that _consuming_ shared structs is simple and intuitive. You just send the value via `postMessage` and can use it immediately in the worker without any added fuss.

[12:12:05.0182] <littledan>
OK, so this is trying to solve the stronger version of the problem that you explained

[12:13:09.0999] <littledan>
> <@rbuckton:matrix.org> This is probably reasonable, as long as you can reliably correlate a shared struct type in both realms by module id and export name. However, that would potentially restrict shared struct definitions to only be at the top level of a _Module_, since returning them from a function call might not necessarily result in the same identity being valid.

Yes, shared structs which define methods that are supposed to be accessible from other agents need to be defined at the top level of a module. I agree that this is a singificant restriction.

[12:13:38.0472] <littledan>
> <@rbuckton:matrix.org> This seems like a poor developer experience.

It's hard for me to evaluate how bad it is without understanding the use cases for this scenario.

[12:13:39.0686] <rbuckton>
Yes. It's trying to impose restrictions on what a shared struct can reference so as to make the rest of the system simple and intuitive.

[12:14:37.0267] <littledan>
I just can't construct the scenario in my head where it wouldn't be natural to directly import the module defining the shared struct, when you expect to receive it in postMessage

[12:15:36.0735] <rbuckton>
I came at this from the perspective of: "Lets say we wanted to implement `Number` as a shared struct, from the ground up, what would we need to do?" (excl. operator overloading)

[12:16:32.0406] <rbuckton>
Would you want everyone to need to write `import "std:number";` in their module to receive a number via `postMessage`?

[12:16:40.0112] <rbuckton>
 * Would you want everyone to need to write `import "std:number";` in their module to receive a number via `postMessage`?

[12:17:29.0256] <littledan>
While that's an interesting lens, I like to think of those things being in an implicit "prelude". (The same logic applies for the operator overloading usage declarations, for example)

[12:18:02.0685] <littledan>
so I guess I would go for, "let's see if we can implement `Number` *except* for that specific import statement"

[12:18:04.0414] <rbuckton>
You'd need to use a side-effecting `import "structModule"` if you never access the constructor yourself, otherwise minifiers will tree shake it away.

[12:19:22.0280] <rbuckton>
Which just adds one more source of potential confusion when things don't work in your bundled, minified release build.

[12:19:34.0191] <littledan>
Ah, I hadn't really considered tree shaking

[12:21:21.0780] <littledan>
are there any other problems that come to mind for you besides tree shaking?

[12:21:40.0762] <rbuckton>
As I mentioned in the thread above, depending on an `import` is one more shaky foundation to build on that is a potential pit of failure for developers. A tree shaking minifier might remove the `import`, or would need to perform additional static analysis to know whether its actually safe to remove the import.

[12:22:26.0646] <littledan>
I mean, I think we could teach tree shakers this particular thing: You can't just eliminate running an export of a shared struct, since executing that has a side effect. (We'd have to teach the tree shaker about that syntactic construct anyway!)

[12:23:19.0710] <littledan>
OK, thanks for explaining; I hadn't considered that

[12:23:32.0353] <rbuckton>
- Remembering to include the `import`
- The main process changing the data it sends to the worker (depending on how the app is structured)
- Middleware that might run before application code is loaded.

[12:24:54.0248] <rbuckton>
Its not the tree shaking of the `export`, its the tree shaking of the `import`. That requires looking across files to say "oh, this `import` is from a module that transitively imports a module containing a shared struct that I might potentially receive", which is far more complicated.

[12:25:32.0784] <littledan>
> <@rbuckton:matrix.org> Its not the tree shaking of the `export`, its the tree shaking of the `import`. That requires looking across files to say "oh, this `import` is from a module that transitively imports a module containing a shared struct that I might potentially receive", which is far more complicated.

oh, I guess I assumed that this was normal stuff for tree shakers

[12:25:53.0602] <littledan>
that a module execution may be known to have a side effect and that that shouldn't be removed

[12:25:57.0065] <rbuckton>
If your app/package contains a single shared struct definition, imports becomes un-tree-shakable.

[12:26:04.0614] <littledan>
right

[12:26:40.0538] <littledan>
if this is an issue you could break up the module

[12:26:46.0841] <rbuckton>
That seems bad.

[12:27:10.0284] <rbuckton>
> <@littledan:matrix.org> if this is an issue you could break up the module

Which is basically what a "shared module" enforces.

[12:27:24.0082] <littledan>
> <@rbuckton:matrix.org> - Remembering to include the `import`
> - The main process changing the data it sends to the worker (depending on how the app is structured)
> - Middleware that might run before application code is loaded.

OK, I guess the badness of that, together with the badness of this comment I'm replying to, is something which I don't have sufficient intuition into.

[12:27:34.0513] <littledan>
or sufficient practical experience of the negative consequences

[12:29:13.0733] <rbuckton>
Due to their restrictions, "shared modules" have no Evaluation step when the module is loaded. Dependency order becomes far less important (excluding decorators, which I'd have to think more on), so you could just surface the shared module imports in place of whatever other import you might have used that was otherwise removed.

[12:44:23.0311] <littledan>
computed property names also do stuff when evaluated, as do, you know, the RHS of an `export const`... I'm pretty skeptical that it'd be practical to articulate a usable-enough subset of JS which doesn't have side effects when loaded. This would be very useful if possible, of course! It'd handle the lazy module loading issue

[15:04:47.0631] <shu>
unrelated sidebar: matrix has threads??

[15:04:49.0620] <shu>
is this a new feature?

[15:05:04.0960] <shu>
i was wondering why it was showing the channel as having 25 unread messages until i found the thread above

[15:43:20.0745] <asumu>
It’s had threads experimentally for a while (opt in) but they recently turned it on by default.


2023-01-27
[17:17:40.0197] <Mathieu Hofman>
So a shared struct instance has a stable identity across `postMessage`, right? To expand on my earlier idea, I think we don't need any stable identity for module blocks or even symbols, we can just use shared structs themselves to dynamically attach behavior to a shared struct kind, given some built-in wiring. Here is a gist where I explore that approach: https://gist.github.com/mhofman/aa23fcc88e1ccd031a3c34f88577eaf7

It does not require any new syntax, or extra magic in postMessage (like module blocks, or symbol identities being preserved). It only requires an automatically generated static property on shared struct classes that represent the kind, and some built-in behavior, plus the dynamic prototype lookup we discussed of course. I'm actually wondering if this could be prototyped (pun intented) in the current experiment.

