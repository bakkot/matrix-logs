2023-01-19
[16:31:10.0048] <shu>
i do plan to have the call tomorrow if anyone's interested

[16:31:19.0088] <shu>
on my agenda is to talk about method sharing and prototype lookup

[16:33:45.0175] <Mathieu Hofman>
I mentioned to Ashley the other day it might be worth for him to join to discuss if there may be any similarities with the R&T proposal as was hinted by some during the last plenary. Will remind him of the call tomorrow

[16:36:24.0319] <shu>
indeed, that sounds great, thanks!

[04:38:07.0364] <Ashley Claymore>
Thanks Mathieu Hofman ! I am likely to be on a train home during the call, but will try and listen in on my mobile 

[07:22:46.0511] <shu>
doh, a last minute conflict arose (apartment repair people)

[07:23:55.0649] <shu>
Ashley Claymore: if i move this one to the 26th 1 hour earlier (9am PT), would that work better for you?

[09:00:24.0264] <littledan>
OK, are we meeting now?

[09:02:00.0657] <littledan>
shu: ^

[09:06:39.0301] <littledan>
OK, I take it not

[09:08:36.0005] <Ashley Claymore>
Moved to next week on the TC39 events cal now

[09:13:28.0619] <Ashley Claymore>
Also feel free to have at the original time next week (10am PT), I'm getting an earlier train than I would usually today :)

[10:28:55.0651] <shu>
littledan: sorry about short notice, last minute conflict


2023-01-26
[17:17:59.0236] <shu>
planned agenda for tomorrow's meeting:

- method sharing and prototype lookup
- property redefinition (and freezing)
- R&T interaction

[17:18:12.0086] <shu>
 * planned agenda for tomorrow's meeting:

- method sharing and prototype lookup
- property redefinition (and freezing)
- R&T interaction

[17:25:48.0362] <asumu>
Unfortunately I don't think I will be able to attend tomorrow due to a conflicting appointment. I don't have much to report, Wasm GC is moving towards getting a formal spec (& JS API spec) so if anything relevant comes out of that I'll report in future meetings.

[17:28:52.0881] <shu>
thanks asumu

[18:14:18.0164] <Ashley Claymore>
> <@aclaymore:matrix.org> Also feel free to have at the original time next week (10am PT), I'm getting an earlier train than I would usually today :)

^^ if missed before. Feel free to keep the 10am time, if that works better for asumu . My clash last week was not reoccurring 

[07:54:34.0449] <rbuckton>
> <@shuyuguo:matrix.org> planned agenda for tomorrow's meeting:
> 
> - method sharing and prototype lookup
> - property redefinition (and freezing)
> - R&T interaction

I'm also curious if we can leverage `using` with Mutex/ConditionVariable, since that was one of the reasons I focused on getting that proposal to Stage 3.

[08:50:52.0388] <shu>
sure, sounds good

[09:04:29.0034] <shu>
Ashley Claymore: the call is now, btw

[09:05:07.0721] <Ashley Claymore>
omw

[09:05:24.0982] <Ashley Claymore>
sorry, actually 1 min

[09:05:29.0556] <shu>
np

[10:39:16.0884] <rbuckton>
Regarding the "shared modules" suggestion. I may have jumped a few steps ahead in my reasoning without explaining how I got there, so I'll take a few steps back.

If we imagine an implementation of shared structs that contains some form of methods, what can those methods close over? Only globals? What about functions that are siblings to the shared struct? What about imports?

If we do not close over these things, the methods of shared structs won't be able to reuse useful utilities such as common vector math operations you might use in a 3D graphics library, that aren't somehow patched into `globalThis`.

If we do close over these things, how do we ensure the module graph has been instantiated on the worker thread? What about initialization logic that might be needed that wires together some of these modules, applies polyfills, etc.? What if these modules contain top-level `await` or must otherwise be loaded asynchronously?

How and when do we instantiate the thread-local (or per-realm?) prototype for each struct, especially if doing so might kick off this kind of module loading in the worker?

The leap in logic I took to the "shared module" approach was to address these concerns:

- "Shared modules" would have an identity in the module cache that could be used as part of the type identity.
- "Shared modules" would promote code reuse.
- "Shared modules" would be restricted to containing only those things that can safely be shared, i.e. references to globals (which would be re-bound per realm), local functions, variables, shared structs, and imports/exports from other "shared modules".
- Due to the nature of the above restrictions, "shared modules" avoid accidental references to non-shared code.

It could be that the idea of isolating shared code to its own file is overkill, but many developers are already used to doing this with things like `protobuf` today (i.e., maintaining their `protobuf` schema in a separate file).

[10:39:48.0569] <rbuckton>
 * Regarding the "shared modules" suggestion. I may have jumped a few steps ahead in my reasoning without explaining how I got there, so I'll take a few steps back.

If we imagine an implementation of shared structs that contains some form of methods, what can those methods close over? Only globals? What about functions that are siblings to the shared struct? What about imports?

If we do not close over these things, the methods of shared structs won't be able to reuse useful utilities such as common vector math operations you might use in a 3D graphics library, that aren't somehow patched into `globalThis`.

If we do close over these things, how do we ensure the module graph has been instantiated on the worker thread? What about initialization logic that might be needed that wires together some of these modules, applies polyfills, etc.? What if these modules contain top-level `await` or must otherwise be loaded asynchronously?

How and when do we instantiate the thread-local (or per-realm?) prototype for each struct, especially if doing so might kick off this kind of module loading in the worker?

The leap in logic I took to the "shared module" approach was to address these concerns:

- "Shared modules" would have an identity in the module cache that could be used as part of the type identity.
- "Shared modules" would promote code reuse.
- "Shared modules" would be restricted to containing only those things that can safely be shared, i.e. references to globals (which would be re-bound per realm), local functions, variables, shared structs, and imports/exports from other "shared modules".
- Due to the nature of the above restrictions, "shared modules" avoid accidental references to non-shared code.

It could be that the idea of isolating shared code to its own file is overkill, but many developers are already used to doing this with things like `protobuf` today (i.e., maintaining their `protobuf` schema in a separate file).

[10:40:26.0368] <rbuckton>
 * Regarding the "shared modules" suggestion. I may have jumped a few steps ahead in my reasoning without explaining how I got there, so I'll take a few steps back.

If we imagine an implementation of shared structs that contains some form of methods, what can those methods close over? Only globals? What about functions that are siblings to the shared struct? What about imports?

If we do not close over these things, the methods of shared structs won't be able to reuse useful utilities such as common vector math operations you might use in a 3D graphics library, that aren't somehow patched into `globalThis`.

If we do close over these things, how do we ensure the module graph has been instantiated on the worker thread? What about initialization logic that might be needed that wires together some of these modules, applies polyfills, etc.? What if these modules contain top-level `await` or must otherwise be loaded asynchronously?

How and when do we instantiate the thread-local (or per-realm?) prototype for each struct, especially if doing so might kick off this kind of module loading in the worker?

The leap in logic I took to the "shared module" approach was to address these concerns.

- "Shared modules" would have an identity in the module cache that could be used as part of the type identity.
- "Shared modules" would promote code reuse.
- "Shared modules" would be restricted to containing only those things that can safely be shared, i.e. references to globals (which would be re-bound per realm), local functions, variables, shared structs, and imports/exports from other "shared modules".
- Due to the nature of the above restrictions, "shared modules" avoid accidental references to non-shared code.

It could be that the idea of isolating shared code to its own file is overkill, but many developers are already used to doing this with things like `protobuf` today (i.e., maintaining their `protobuf` schema in a separate file).

