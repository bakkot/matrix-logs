2024-02-15
[14:31:12.0591] <shu>
Mathieu Hofman: so i don't see how SABs are normative optional

[14:31:18.0551] <shu>
mark made that claim earlier today in the call

[14:31:50.0664] <shu>
there's the line "Whenever a host does not provide concurrent access to SharedArrayBuffers it may omit the "SharedArrayBuffer" property of the global object."

[14:32:01.0410] <shu>
but that's slightly different by normative optional

[14:32:08.0022] <shu>
i guess mark just meant it's optional in the layman sense?

[14:32:26.0803] <Mathieu Hofman>
How is it different?

[14:32:40.0120] <Mathieu Hofman>
Richard opened https://github.com/tc39/ecma262/issues/3280 today

[14:32:43.0845] <ljharb>
it's normative optional because it doesn't have to be present for the environment to be spec-compliant

[14:32:53.0041] <ljharb>
anything that's omittable is normative optional

[14:33:09.0027] <shu>
so the SAB section is not normative optional

[14:33:14.0386] <Mathieu Hofman>
I believe the normative optional annotation didn't exist back then

[14:33:19.0075] <shu>
the thing that's omittable is the `SharedArrayBuffer` property on the global

[14:33:25.0139] <ljharb>
right, the constructor is, exactly

[14:33:34.0794] <ljharb>
and it's not accessible to JS code otherwise, right?

[14:33:36.0243] <shu>
even on a host that does not provide concurrent access to SABs, you can get it by making a Wasm linear memory that's shared

[14:33:44.0587] <shu>
and that still has all the right prototypes and methods

[14:33:47.0564] <ljharb>
ahhh right, ok, gotcha

[14:33:58.0575] <ljharb>
ok well that's fair. but hosts don't have to have wasm either

[14:34:03.0342] <Mathieu Hofman>
Right, only the constructor is normative optional

[14:34:03.0562] <ljharb>
 * ok well that's fair. but non-web hosts don't have to have wasm either.

[14:34:03.0738] <shu>
correct

[14:34:12.0747] <shu>
it's still optional in the layman sense

[14:34:24.0855] <ljharb>
so in browsers, it's just the constructor property. but anywhere else, it's effectively the entire thing as long as wasm is not provided, right?

[14:34:37.0883] <shu>
right, if there's no other host-provided special way to get one of those things

[14:35:59.0183] <Mathieu Hofman>
I suppose the question is, if there was a GetIntrinsic, would %SharedArrayBuffer% appear in there or not

[14:36:13.0034] <shu>
agree, if GetIntrinsic exists then it's a bigger distinction

[14:36:15.0958] <ljharb>
no

[14:36:22.0730] <ljharb>
well, hm

[14:36:38.0586] <shu>
well the point of GetIntrinsic is to give access to non-reachable-via-chain-of-property-accesses intrinsics

[14:36:46.0090] <shu>
so it's not clear to me it's an obvious "no"

[14:37:06.0979] <ljharb>
given that it's a top-level intrinsic, yes. but, i assume we'd alter the wording a bit somewhere to say that the intrinsic must exist if there's any way to access those objects, but must not exist otherwise?

[14:37:20.0706] <shu>
ðŸ¤·

[14:37:33.0798] <shu>
whatever font element uses for emojis is garbage yo

[14:37:37.0766] <shu>
i can hardly tell that person is shrugging

[14:37:49.0819] <ljharb>
iow, it'd still be deniable in places where the constructor property was omitted, even if by wrapping getIntrinsic, but it'd be required to exist if there's any way to get at a SAB

[14:40:10.0239] <Mathieu Hofman>
to rephrase Shu's observation, is it spec compliant to omit %SharedArrayBuffer% from getIntrinsic, even if there is no other way to reach it

[14:40:23.0106] <Mathieu Hofman>
 * to rephrase Shu's observation, would it be spec compliant to omit %SharedArrayBuffer% from getIntrinsic, even if there is no other way to reach it

[14:40:38.0941] <shu>
...is it? 

[14:40:56.0940] <shu>
oh sorry you are asking a question

[14:41:03.0564] <Mathieu Hofman>
If it was normative optional, it would be. But with the current working, I'm actually not sure

[14:41:10.0580] <shu>
my gut says "it's spec compliant to omit iff there is no other way to reach it in the host"

[14:41:10.0846] <Mathieu Hofman>
 * to rephrase Shu's observation, would it be spec compliant to omit %SharedArrayBuffer% from getIntrinsic, even if there is no other way to reach it?

[14:41:30.0628] <shu>
otherwise because it's not the case that the entire constructor and prototype and all the methods are in a Normative Optional block, it seems not compliant to omit it

[14:41:32.0854] <ljharb>
i think that's exactly the semantic GetIntrinsic must have, however it's worded

[14:42:35.0149] <Mathieu Hofman>
Anyway, I suppose the question stand, and should SAB be normative optional, and maybe Atomics too ?
Afaik, Atomics.waitAsync is causing some problems in some worklet environments

[14:42:45.0720] <shu>
haha i saw that

[14:43:25.0142] <shu>
i don't think either SAB and Atomics can be truly normative optional

[14:43:54.0434] <shu>
especially not Atomics because they _do_ work on ABs, just doesn't do anything interesting

[14:43:55.0499] <Mathieu Hofman>
why not?

[14:43:59.0722] <shu>
(except wait)

[14:44:04.0729] <shu>
because they work on ABs

[14:44:41.0654] <Mathieu Hofman>
ok but the question is whether a spec compliant implementation must offer them to the program

[14:44:50.0456] <shu>
there was a use case from the wasm side iirc that wanted to not share different binaries depending on whether SABs are actually available

