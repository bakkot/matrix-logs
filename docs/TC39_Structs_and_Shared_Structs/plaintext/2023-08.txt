2023-08-17
[10:29:08.0300] <rbuckton>
As far as topics for today, I've started experimenting with the shared structs trial in the TypeScript compiler and have some early feedback.

[10:30:59.0252] <shu>
awesome, omw to meeting room

[12:55:02.0479] <rbuckton>
As promised, here is a rough sketch of the handshaking mechanism I was thinking about: https://gist.github.com/rbuckton/08d020fc80da308ad3a1991384d4ff62


2023-08-18
[13:36:44.0472] <rbuckton>
If we end up having this concept of thread-local fields, or a thread-local `[[Prototype]]`, do we actually need shared structs? Could we solve the same problem by introducing `shared` and `fixed` fields on a `class` instead? In other words, treat all non-`shared` fields as just thread-local fields, while having all `fixed` fields establish a fixed shape for an object, with the remaining non-`fixed` fields at the end?

[13:39:39.0987] <rbuckton>
I suppose you'd still need to indicate whether non-`shared` fields are "structured clone"-able.

[13:43:22.0170] <rbuckton>
And this could all be potentially handled via privileged decorators rather than keywords, i.e.:

```js
@Shareable()
class Foo {
  @Shared()
  x;

  @Shared()
  y;

  @Copiable()
  data;

  @ThreadLocal()
  toString() { ... }
}
```

[13:47:37.0203] <shu>
rbuckton: the 'shared' modifier is not fully composable so i feel like we still need shared structs. not fully composable meaning, it doesn't make sense to have an object with some shared fields and some non-shared fields

[13:48:55.0331] <rbuckton>
The reason I brought this up is that we were actively discussing non-shared (i.e., "thread-local") fields in the last meeting.

[13:49:21.0462] <shu>
though i think my gut reaction is 'dislike' largely because it feels weird to me to have a property as fundamental as 'whether identity of instances of this class is preserved' to be implied by the fields that it has

[13:49:26.0813] <shu>
 * though i think my gut reaction is 'dislike' largely because it feels weird to me to have a property as fundamental as 'whether identity of instances of this class is preserved across threads' to be implied by the fields that it has

