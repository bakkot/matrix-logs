2025-01-15
[07:53:30.0230] <shu>
hi folks, i have no new topics to discuss for the next structs call, but would like someone there to jog my memory (kriskowal and nicolo-ribaudo preferably) on where exactly we left off and agreed on for the module identity thing for per-realm prototypes

[11:08:26.0633] <Mathieu Hofman>
Kris is out this week. I'm a bit tied up but if necessary I can free myself up tomorrow.

[11:43:09.0074] <shu>
we can also postpone until kris is back

[12:09:51.0404] <Mathieu Hofman>
Postponing by a week would work for us

[13:45:18.0187] <shu>
if i don't hear other concerns by EOD pi'll postpone by a week

[13:45:23.0001] <shu>
* if i don't hear other concerns by EOD i'll postpone by a week

[13:56:42.0545] <shu>
ah shoot i actually have a conflict from 1000-1030 PT next week

[13:56:48.0288] <shu>
i'll postpone to 1030-1100


2025-01-16
[19:47:45.0874] <Mathieu Hofman>
I let Mark know, but if you can, please update the calendar invite.


2025-01-22
[17:03:40.0296] <shu>
thoughts on prohibiting computed property names in struct bodies? with structs positioned as "restricted classes that trade expressivity for performance and analyzability", prohibiting computed property names furthers the analyzability goal

[17:19:00.0372] <iain>
I would support it. If I'd had to guess without looking, I'd have assumed they were already prohibited.

[18:23:12.0511] <shu>
they are currently allowed, but not really intentionally

[21:10:49.0989] <rbuckton>
Would this then prohibit using symbol named properties like `Symbol.dispose`? If so, I am not in favor. 

[22:14:32.0219] <shu>
the principle is statically analyzable name

[22:14:43.0818] <shu>
i wonder if there's a way to recover well-known symbol names and retaining analyzability

[22:17:24.0491] <ljharb>
then you also wouldn't be able to have a string property name?

[06:10:03.0124] <Ashley Claymore>
Was going to say: Well known `Symbol` fields are non-writable&non-configurable.
so `[Symbol.iterator]` is statically known.
 expect Symbol itself could be replaced

