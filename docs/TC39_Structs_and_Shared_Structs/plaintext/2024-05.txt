2024-05-15
[07:14:30.0860] <rbuckton>
FYI: I should be at the meeting today, but I am waiting on an appliance repair technician with a fairly wide arrival window and may have to step away for a few minutes if they arrive during the meeting.

[07:35:41.0925] <shu>
thanks for the heads up

[07:35:56.0567] <shu>
my agenda is to address mark's comments at the last plenary re: methods

[07:36:12.0527] <shu>
so hopefully he can make the one today, which i unfortunately had to reschedule due to an off-site


2024-05-30
[19:39:46.0642] <Mathieu Hofman>
I chatted with Mark this afternoon. First he's sorry about not being able to make it this morning. From what I understand the biggest concern with adding prototype methods to shared structs is that it makes it too easy to transform existing single threaded code into code shared memory multi-threaded code without the author realizing the implication of such a transformation. This is especially true with non-shared structs also existing as you're roughly a "shared" keyword away from transforming into multithreaded existing but non thread safe code. Apparently this is an issue that Java and C# both suffered from.

[19:40:09.0203] <Mathieu Hofman>
 * I chatted with Mark this afternoon. First he's sorry about not being able to make it this morning. From what I understand the biggest concern with adding prototype methods to shared structs is that it makes it too easy to transform existing single threaded code into shared memory multi-threaded code without the author realizing the implication of such a transformation. This is especially true with non-shared structs also existing as you're roughly a "shared" keyword away from transforming into multithreaded existing but non thread safe code. Apparently this is an issue that Java and C# both suffered from.

[20:54:46.0505] <Chris de Almeida>
> <@mhofman:matrix.org> I chatted with Mark this afternoon. First he's sorry about not being able to make it this morning. From what I understand the biggest concern with adding prototype methods to shared structs is that it makes it too easy to transform existing single threaded code into shared memory multi-threaded code without the author realizing the implication of such a transformation. This is especially true with non-shared structs also existing as you're roughly a "shared" keyword away from transforming into multithreaded existing but non thread safe code. Apparently this is an issue that Java and C# both suffered from.

is that in reference to `static` ?

