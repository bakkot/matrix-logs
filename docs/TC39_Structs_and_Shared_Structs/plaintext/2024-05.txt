2024-05-15
[07:14:30.0860] <rbuckton>
FYI: I should be at the meeting today, but I am waiting on an appliance repair technician with a fairly wide arrival window and may have to step away for a few minutes if they arrive during the meeting.

[07:35:41.0925] <shu>
thanks for the heads up

[07:35:56.0567] <shu>
my agenda is to address mark's comments at the last plenary re: methods

[07:36:12.0527] <shu>
so hopefully he can make the one today, which i unfortunately had to reschedule due to an off-site


2024-05-30
[19:39:46.0642] <Mathieu Hofman>
I chatted with Mark this afternoon. First he's sorry about not being able to make it this morning. From what I understand the biggest concern with adding prototype methods to shared structs is that it makes it too easy to transform existing single threaded code into code shared memory multi-threaded code without the author realizing the implication of such a transformation. This is especially true with non-shared structs also existing as you're roughly a "shared" keyword away from transforming into multithreaded existing but non thread safe code. Apparently this is an issue that Java and C# both suffered from.

[19:40:09.0203] <Mathieu Hofman>
 * I chatted with Mark this afternoon. First he's sorry about not being able to make it this morning. From what I understand the biggest concern with adding prototype methods to shared structs is that it makes it too easy to transform existing single threaded code into shared memory multi-threaded code without the author realizing the implication of such a transformation. This is especially true with non-shared structs also existing as you're roughly a "shared" keyword away from transforming into multithreaded existing but non thread safe code. Apparently this is an issue that Java and C# both suffered from.

[20:54:46.0505] <Chris de Almeida>
> <@mhofman:matrix.org> I chatted with Mark this afternoon. First he's sorry about not being able to make it this morning. From what I understand the biggest concern with adding prototype methods to shared structs is that it makes it too easy to transform existing single threaded code into shared memory multi-threaded code without the author realizing the implication of such a transformation. This is especially true with non-shared structs also existing as you're roughly a "shared" keyword away from transforming into multithreaded existing but non thread safe code. Apparently this is an issue that Java and C# both suffered from.

is that in reference to `static` ?

[20:55:22.0120] <Mathieu Hofman>
static?

[21:07:57.0775] <Mathieu Hofman>
I think the problem is that code written without specific handling of shared memory access is unlikely to be safe when running in multiple threads. Java and C# do not prevent object instances from being shared in the first place, so the problem in these languages is arguably worse since it's pretty much not up to the implementer of the class to enable multi-threading (at best it can document that the class is not thread safe). The current shared struct proposal does require opt-in by marking the object type and/or methods as shared, but we consider that to not be a sufficient friction point in transforming non multi-threaded code, as it's highly unlikely that simply marking a method or type as shared to be sufficient, and that explicit locking logic is likely to be required as well.

[21:11:13.0249] <Mathieu Hofman>
 * I think the problem is that code written without specific handling of shared memory access is unlikely to be safe when running in multiple threads. Java and C# do not prevent object instances from being shared in the first place, so the problem in these languages is arguably worse since it's pretty much not up to the implementer of the class to enable multi-threading (at best it can document that the class is not thread safe). The current shared struct proposal does require opt-in by marking the struct type as shared, but we consider that to not be a sufficient friction point in transforming non multi-threaded code, as it's highly unlikely that simply marking a struct as shared to be sufficient, and that explicit locking logic is likely to be required as well in the methods.

[21:24:38.0751] <Mathieu Hofman>
here's a wild idea, probably misguided as I arguably don't fully grasp the complexities of properly implementing safe shared memory concurrency. Would it make sense that by default (without some kind of explicit opt-out), all methods of a shared struct would take a thread local lock on the instance. By that I mean every time a shared struct method is invoked, it'd check if the thread already has a lock on the object (in case of local re-entrancy or simply the method being called from another method), and if not, acquire a lock on the object. While that's unlikely to be sufficient to reliably protect the users of the object, it should at least make the methods implementations thread safe by default.

[21:30:05.0730] <Chris de Almeida>
> <@mhofman:matrix.org> static?

you mentioned java and c# -- I was asking if you are referring to the `static` keyword from those languages

[21:31:07.0180] <Mathieu Hofman>
from what I understand there is plenty of ways in those languages to make object instances available to multiple threads, not just the `static` keyword

[21:32:39.0709] <Chris de Almeida>
sure.  contextually, it seemed it was in reference to 'you're roughly a "shared" keyword away from transforming into multithreaded existing but non thread safe code'

[21:34:07.0309] <Mathieu Hofman>
In general, we remain skeptical about introducing complexity just to enable developers to use shared object as regular objects with methods

[21:34:34.0389] <Chris de Almeida>
what I am trying to understand is what specific comparisons are being made to java and c#

[21:35:44.0893] <Mathieu Hofman>
> <@softwarechris:matrix.org> sure.  contextually, it seemed it was in reference to 'you're roughly a "shared" keyword away from transforming into multithreaded existing but non thread safe code'

ah yeah. I think the point I was trying to make is that it's just too easy to cause code that isn't written with thread safety in mind to execute in multiple threads

[21:36:33.0449] <Chris de Almeida>
it certainly can be...  ask me some time about how an errant `static` nearly brought down a company

[21:36:59.0541] <Chris de Almeida>
although java/c# folks will probably tell you that the ease of that is a feature rather than a bug

[21:37:14.0243] <Chris de Almeida>
 * although java/c# folks will probably tell you that the ease of doing that is a feature rather than a bug

[21:37:19.0893] <Mathieu Hofman>
the JS proposal is marginally better as it requires an opt-in from the object's implementor, but the "opt-in" is still too easy in our opinion

[21:58:55.0552] <Chris de Almeida>
the headers you mean?

[22:17:38.0843] <shu>
the headers are extremely hard to opt into, i don't understand

[22:17:45.0367] <shu>
mark would like more syntactic friction?

[22:18:27.0313] <shu>
i don't really understand how someone can accidentally opt into multitreading

[22:18:41.0374] <shu>
like, making the struct shared is a necessary but insufficient condition to actually opt into the style

[22:18:51.0167] <shu>
you have to communicate it to another thread, set up the code to receive it, etc

[22:20:13.0126] <shu>
this argument seems very weak to me

[22:21:50.0789] <shu>
> <@mhofman:matrix.org> ah yeah. I think the point I was trying to make is that it's just too easy to cause code that isn't written with thread safety in mind to execute in multiple threads

this is true, and is not a goal of this proposal

[22:23:12.0068] <shu>
that is, it is not a goal of this proposal to be opinionated about a particular style of thread safety

[22:25:00.0704] <shu>
the syntactic friction argument doesn't hold water. if the headers aren't considered enough friction, i don't know what would be. if the headers are considered enough friction but wants it reflected at the engine level, we can choose to spec an opt-in gate that the host has to trigger, and it'll be up to Node and other runtimes to understand the intention here is that it's an opt-in feature

[22:26:18.0373] <shu>
> <@mhofman:matrix.org> here's a wild idea, probably misguided as I arguably don't fully grasp the complexities of properly implementing safe shared memory concurrency. Would it make sense that by default (without some kind of explicit opt-out), all methods of a shared struct would take a thread local lock on the instance. By that I mean every time a shared struct method is invoked, it'd check if the thread already has a lock on the object (in case of local re-entrancy or simply the method being called from another method), and if not, acquire a lock on the object. While that's unlikely to be sufficient to reliably protect the users of the object, it should at least make the methods implementations thread safe by default.

that's a non-starter

[22:26:30.0693] <shu>
it is too costly

[22:28:00.0017] <Mathieu Hofman>
Does it matter if the default is costly as long as there is a way to opt out of the default safety and gain performance?

[22:29:06.0370] <shu>
well, yes, the default is already safe (the headers aren't present by default)

[22:29:58.0078] <shu>
it also puts a requirement on implementations that there be a lock per object

[22:31:04.0018] <Mathieu Hofman>
The concern in this case is not how hard it is for the application as a whole to adopt shared memory multithreading, but how not sufficiently hard it is to mark code that is not thread safe to "support" shared memory access. Namely add a shared keyword to a struct declaration.

[22:31:20.0207] <shu>
what's the counterargument to what i said above?

[22:31:35.0154] <shu>
adding the shared keyword is a necessary but insufficient condition

[22:31:48.0258] <shu>
you still have to write code to communicate a shared struct

[22:32:34.0316] <Mathieu Hofman>
It's sufficient from the implementor of the struct. Your argument assumes the author of the app and of the struct is the same.

[22:33:12.0149] <shu>
the worry is the app author downloads a library, sees that it's marked as a shared struct, and assumes it's threadsafe, but the library is buggy and it is not threadsafe?

[22:34:21.0652] <shu>
what's different in this case vs an otherwise buggy library?

[22:34:49.0513] <Mathieu Hofman>
The worry is that the library authors could believe they can support multithreading by simply adding a keyword to their objects, without taking time to understand what they're actually doing

